
Back2Reality.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  00004272  00004306  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004272  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000160  0080013e  0080013e  00004344  2**0
                  ALLOC
  3 .stab         00005aa8  00000000  00000000  00004344  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002019  00000000  00000000  00009dec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000be05  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000be18  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
       4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      28:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__vector_10>
      2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      30:	0c 94 c3 16 	jmp	0x2d86	; 0x2d86 <__vector_12>
      34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      48:	0c 94 ba 09 	jmp	0x1374	; 0x1374 <__vector_18>
      4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      54:	0c 94 d4 19 	jmp	0x33a8	; 0x33a8 <__vector_21>
      58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      5c:	0c 94 44 19 	jmp	0x3288	; 0x3288 <__vector_23>
      60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      68:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      6c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      70:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      74:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      78:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      7c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      80:	0c 94 29 1b 	jmp	0x3652	; 0x3652 <__vector_32>
      84:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      88:	0c 94 e7 1a 	jmp	0x35ce	; 0x35ce <__vector_34>
      8c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      90:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	e2 e7       	ldi	r30, 0x72	; 114
      a8:	f2 e4       	ldi	r31, 0x42	; 66
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	ae 33       	cpi	r26, 0x3E	; 62
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	22 e0       	ldi	r18, 0x02	; 2
      bc:	ae e3       	ldi	r26, 0x3E	; 62
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	ae 39       	cpi	r26, 0x9E	; 158
      c6:	b2 07       	cpc	r27, r18
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <main>
      ce:	0c 94 37 21 	jmp	0x426e	; 0x426e <_exit>

000000d2 <__bad_interrupt>:
      d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <__vector_10>:
volatile uint32_t dist_overflow_counter = 0;
volatile uint32_t dist_trig_counter		= 0;
volatile uint32_t dist_num_of_ticks		= 0;

ISR(TIMER2_OVF_vect)
{
      d6:	1f 92       	push	r1
      d8:	0f 92       	push	r0
      da:	00 90 5f 00 	lds	r0, 0x005F
      de:	0f 92       	push	r0
      e0:	11 24       	eor	r1, r1
      e2:	00 90 5b 00 	lds	r0, 0x005B
      e6:	0f 92       	push	r0
      e8:	8f 93       	push	r24
      ea:	9f 93       	push	r25
      ec:	af 93       	push	r26
      ee:	bf 93       	push	r27
      f0:	ef 93       	push	r30
      f2:	ff 93       	push	r31
      f4:	cf 93       	push	r28
      f6:	df 93       	push	r29
      f8:	cd b7       	in	r28, 0x3d	; 61
      fa:	de b7       	in	r29, 0x3e	; 62
	dist_overflow_counter++;
      fc:	80 91 3e 01 	lds	r24, 0x013E
     100:	90 91 3f 01 	lds	r25, 0x013F
     104:	a0 91 40 01 	lds	r26, 0x0140
     108:	b0 91 41 01 	lds	r27, 0x0141
     10c:	01 96       	adiw	r24, 0x01	; 1
     10e:	a1 1d       	adc	r26, r1
     110:	b1 1d       	adc	r27, r1
     112:	80 93 3e 01 	sts	0x013E, r24
     116:	90 93 3f 01 	sts	0x013F, r25
     11a:	a0 93 40 01 	sts	0x0140, r26
     11e:	b0 93 41 01 	sts	0x0141, r27
	TCNT2 = 0;
     122:	82 eb       	ldi	r24, 0xB2	; 178
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	fc 01       	movw	r30, r24
     128:	10 82       	st	Z, r1
}
     12a:	df 91       	pop	r29
     12c:	cf 91       	pop	r28
     12e:	ff 91       	pop	r31
     130:	ef 91       	pop	r30
     132:	bf 91       	pop	r27
     134:	af 91       	pop	r26
     136:	9f 91       	pop	r25
     138:	8f 91       	pop	r24
     13a:	0f 90       	pop	r0
     13c:	00 92 5b 00 	sts	0x005B, r0
     140:	0f 90       	pop	r0
     142:	00 92 5f 00 	sts	0x005F, r0
     146:	0f 90       	pop	r0
     148:	1f 90       	pop	r1
     14a:	18 95       	reti

0000014c <servo_init>:
 *	Function: 		void servo_init(unsigned int f_pwm)
 *	Parameters: 	unsigned int f_pwm
 *	Description: 	servo init
 */
void servo_init(unsigned int f_pwm)
{
     14c:	0f 93       	push	r16
     14e:	1f 93       	push	r17
     150:	cf 93       	push	r28
     152:	df 93       	push	r29
     154:	00 d0       	rcall	.+0      	; 0x156 <servo_init+0xa>
     156:	cd b7       	in	r28, 0x3d	; 61
     158:	de b7       	in	r29, 0x3e	; 62
     15a:	9a 83       	std	Y+2, r25	; 0x02
     15c:	89 83       	std	Y+1, r24	; 0x01
	DDRE |= ((1 << PINE3) | (1 << PINE4) | (1 << PINE5));
     15e:	8d e2       	ldi	r24, 0x2D	; 45
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	2d e2       	ldi	r18, 0x2D	; 45
     164:	30 e0       	ldi	r19, 0x00	; 0
     166:	f9 01       	movw	r30, r18
     168:	20 81       	ld	r18, Z
     16a:	28 63       	ori	r18, 0x38	; 56
     16c:	fc 01       	movw	r30, r24
     16e:	20 83       	st	Z, r18
	DDRB |= (1 << PINB7);										//OCR0A 8bit
     170:	84 e2       	ldi	r24, 0x24	; 36
     172:	90 e0       	ldi	r25, 0x00	; 0
     174:	24 e2       	ldi	r18, 0x24	; 36
     176:	30 e0       	ldi	r19, 0x00	; 0
     178:	f9 01       	movw	r30, r18
     17a:	20 81       	ld	r18, Z
     17c:	20 68       	ori	r18, 0x80	; 128
     17e:	fc 01       	movw	r30, r24
     180:	20 83       	st	Z, r18
	
	TCNT3 = 0;
     182:	84 e9       	ldi	r24, 0x94	; 148
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	fc 01       	movw	r30, r24
     188:	11 82       	std	Z+1, r1	; 0x01
     18a:	10 82       	st	Z, r1
	TCNT0 = 0;
     18c:	86 e4       	ldi	r24, 0x46	; 70
     18e:	90 e0       	ldi	r25, 0x00	; 0
     190:	fc 01       	movw	r30, r24
     192:	10 82       	st	Z, r1

	OCR3A = 0;
     194:	88 e9       	ldi	r24, 0x98	; 152
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	fc 01       	movw	r30, r24
     19a:	11 82       	std	Z+1, r1	; 0x01
     19c:	10 82       	st	Z, r1
	OCR3B = 0;
     19e:	8a e9       	ldi	r24, 0x9A	; 154
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	fc 01       	movw	r30, r24
     1a4:	11 82       	std	Z+1, r1	; 0x01
     1a6:	10 82       	st	Z, r1
	OCR3C = 0;
     1a8:	8c e9       	ldi	r24, 0x9C	; 156
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	fc 01       	movw	r30, r24
     1ae:	11 82       	std	Z+1, r1	; 0x01
     1b0:	10 82       	st	Z, r1

	TCCR3A = (1 << COM3A1)  | (1 << COM3B1) | (1 << COM3B0) | (1 << COM3C1) | (1 << COM3C0) | (1 << WGM31);
     1b2:	80 e9       	ldi	r24, 0x90	; 144
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	2e eb       	ldi	r18, 0xBE	; 190
     1b8:	fc 01       	movw	r30, r24
     1ba:	20 83       	st	Z, r18
	TCCR3B = (1<< CS31) | (1 << WGM32) | (1 << WGM33) ; 		// PRESKALER = 8
     1bc:	81 e9       	ldi	r24, 0x91	; 145
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	2a e1       	ldi	r18, 0x1A	; 26
     1c2:	fc 01       	movw	r30, r24
     1c4:	20 83       	st	Z, r18
	
	//8bit timer
	TCCR0A = (1 << WGM01) | (1 << WGM00) | (1 << COM0A1) | (1 << CS01) | (1 << CS00);
     1c6:	84 e4       	ldi	r24, 0x44	; 68
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	2b e6       	ldi	r18, 0x6B	; 107
     1cc:	fc 01       	movw	r30, r24
     1ce:	20 83       	st	Z, r18

	ICR3   = ((double)F_CPU) / (8.0 * f_pwm) + 0.5;
     1d0:	06 e9       	ldi	r16, 0x96	; 150
     1d2:	10 e0       	ldi	r17, 0x00	; 0
     1d4:	89 81       	ldd	r24, Y+1	; 0x01
     1d6:	9a 81       	ldd	r25, Y+2	; 0x02
     1d8:	cc 01       	movw	r24, r24
     1da:	a0 e0       	ldi	r26, 0x00	; 0
     1dc:	b0 e0       	ldi	r27, 0x00	; 0
     1de:	bc 01       	movw	r22, r24
     1e0:	cd 01       	movw	r24, r26
     1e2:	0e 94 c3 1e 	call	0x3d86	; 0x3d86 <__floatunsisf>
     1e6:	dc 01       	movw	r26, r24
     1e8:	cb 01       	movw	r24, r22
     1ea:	20 e0       	ldi	r18, 0x00	; 0
     1ec:	30 e0       	ldi	r19, 0x00	; 0
     1ee:	40 e0       	ldi	r20, 0x00	; 0
     1f0:	51 e4       	ldi	r21, 0x41	; 65
     1f2:	bc 01       	movw	r22, r24
     1f4:	cd 01       	movw	r24, r26
     1f6:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__mulsf3>
     1fa:	dc 01       	movw	r26, r24
     1fc:	cb 01       	movw	r24, r22
     1fe:	9c 01       	movw	r18, r24
     200:	ad 01       	movw	r20, r26
     202:	60 e8       	ldi	r22, 0x80	; 128
     204:	76 e9       	ldi	r23, 0x96	; 150
     206:	88 e1       	ldi	r24, 0x18	; 24
     208:	9b e4       	ldi	r25, 0x4B	; 75
     20a:	0e 94 1b 1e 	call	0x3c36	; 0x3c36 <__divsf3>
     20e:	dc 01       	movw	r26, r24
     210:	cb 01       	movw	r24, r22
     212:	20 e0       	ldi	r18, 0x00	; 0
     214:	30 e0       	ldi	r19, 0x00	; 0
     216:	40 e0       	ldi	r20, 0x00	; 0
     218:	5f e3       	ldi	r21, 0x3F	; 63
     21a:	bc 01       	movw	r22, r24
     21c:	cd 01       	movw	r24, r26
     21e:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <__addsf3>
     222:	dc 01       	movw	r26, r24
     224:	cb 01       	movw	r24, r22
     226:	bc 01       	movw	r22, r24
     228:	cd 01       	movw	r24, r26
     22a:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <__fixunssfsi>
     22e:	dc 01       	movw	r26, r24
     230:	cb 01       	movw	r24, r22
     232:	f8 01       	movw	r30, r16
     234:	91 83       	std	Z+1, r25	; 0x01
     236:	80 83       	st	Z, r24
}
     238:	0f 90       	pop	r0
     23a:	0f 90       	pop	r0
     23c:	df 91       	pop	r29
     23e:	cf 91       	pop	r28
     240:	1f 91       	pop	r17
     242:	0f 91       	pop	r16
     244:	08 95       	ret

00000246 <servo_set_duty_cycle_one>:
 *	Parameters: 	int16_t value - the pwm value
 *	Description: 	duty cycle for servos
 *	Pin:			PE3, PE4, PE5
 */
static void servo_set_duty_cycle_one(int16_t value)
{
     246:	cf 92       	push	r12
     248:	df 92       	push	r13
     24a:	ef 92       	push	r14
     24c:	ff 92       	push	r15
     24e:	cf 93       	push	r28
     250:	df 93       	push	r29
     252:	00 d0       	rcall	.+0      	; 0x254 <servo_set_duty_cycle_one+0xe>
     254:	00 d0       	rcall	.+0      	; 0x256 <servo_set_duty_cycle_one+0x10>
     256:	cd b7       	in	r28, 0x3d	; 61
     258:	de b7       	in	r29, 0x3e	; 62
     25a:	9c 83       	std	Y+4, r25	; 0x04
     25c:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     25e:	86 e9       	ldi	r24, 0x96	; 150
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	fc 01       	movw	r30, r24
     264:	80 81       	ld	r24, Z
     266:	91 81       	ldd	r25, Z+1	; 0x01
     268:	cc 01       	movw	r24, r24
     26a:	a0 e0       	ldi	r26, 0x00	; 0
     26c:	b0 e0       	ldi	r27, 0x00	; 0
     26e:	bc 01       	movw	r22, r24
     270:	cd 01       	movw	r24, r26
     272:	0e 94 c3 1e 	call	0x3d86	; 0x3d86 <__floatunsisf>
     276:	dc 01       	movw	r26, r24
     278:	cb 01       	movw	r24, r22
     27a:	20 e0       	ldi	r18, 0x00	; 0
     27c:	30 e0       	ldi	r19, 0x00	; 0
     27e:	4f e7       	ldi	r20, 0x7F	; 127
     280:	53 e4       	ldi	r21, 0x43	; 67
     282:	bc 01       	movw	r22, r24
     284:	cd 01       	movw	r24, r26
     286:	0e 94 1b 1e 	call	0x3c36	; 0x3c36 <__divsf3>
     28a:	dc 01       	movw	r26, r24
     28c:	cb 01       	movw	r24, r22
     28e:	6c 01       	movw	r12, r24
     290:	7d 01       	movw	r14, r26
     292:	8b 81       	ldd	r24, Y+3	; 0x03
     294:	9c 81       	ldd	r25, Y+4	; 0x04
     296:	09 2e       	mov	r0, r25
     298:	00 0c       	add	r0, r0
     29a:	aa 0b       	sbc	r26, r26
     29c:	bb 0b       	sbc	r27, r27
     29e:	bc 01       	movw	r22, r24
     2a0:	cd 01       	movw	r24, r26
     2a2:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <__floatsisf>
     2a6:	dc 01       	movw	r26, r24
     2a8:	cb 01       	movw	r24, r22
     2aa:	9c 01       	movw	r18, r24
     2ac:	ad 01       	movw	r20, r26
     2ae:	c7 01       	movw	r24, r14
     2b0:	b6 01       	movw	r22, r12
     2b2:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__mulsf3>
     2b6:	dc 01       	movw	r26, r24
     2b8:	cb 01       	movw	r24, r22
     2ba:	20 e0       	ldi	r18, 0x00	; 0
     2bc:	30 e0       	ldi	r19, 0x00	; 0
     2be:	40 e0       	ldi	r20, 0x00	; 0
     2c0:	5f e3       	ldi	r21, 0x3F	; 63
     2c2:	bc 01       	movw	r22, r24
     2c4:	cd 01       	movw	r24, r26
     2c6:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <__addsf3>
     2ca:	dc 01       	movw	r26, r24
     2cc:	cb 01       	movw	r24, r22
     2ce:	bc 01       	movw	r22, r24
     2d0:	cd 01       	movw	r24, r26
     2d2:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <__fixunssfsi>
     2d6:	dc 01       	movw	r26, r24
     2d8:	cb 01       	movw	r24, r22
     2da:	9a 83       	std	Y+2, r25	; 0x02
     2dc:	89 83       	std	Y+1, r24	; 0x01
	OCR3AH = temp >> 8;
     2de:	89 e9       	ldi	r24, 0x99	; 153
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	29 81       	ldd	r18, Y+1	; 0x01
     2e4:	3a 81       	ldd	r19, Y+2	; 0x02
     2e6:	23 2f       	mov	r18, r19
     2e8:	33 27       	eor	r19, r19
     2ea:	fc 01       	movw	r30, r24
     2ec:	20 83       	st	Z, r18
	OCR3AL = temp & 0xFF;
     2ee:	88 e9       	ldi	r24, 0x98	; 152
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	29 81       	ldd	r18, Y+1	; 0x01
     2f4:	fc 01       	movw	r30, r24
     2f6:	20 83       	st	Z, r18
}
     2f8:	0f 90       	pop	r0
     2fa:	0f 90       	pop	r0
     2fc:	0f 90       	pop	r0
     2fe:	0f 90       	pop	r0
     300:	df 91       	pop	r29
     302:	cf 91       	pop	r28
     304:	ff 90       	pop	r15
     306:	ef 90       	pop	r14
     308:	df 90       	pop	r13
     30a:	cf 90       	pop	r12
     30c:	08 95       	ret

0000030e <servo_set_duty_cycle_two>:
static void servo_set_duty_cycle_two(int16_t value)
{
     30e:	cf 92       	push	r12
     310:	df 92       	push	r13
     312:	ef 92       	push	r14
     314:	ff 92       	push	r15
     316:	cf 93       	push	r28
     318:	df 93       	push	r29
     31a:	00 d0       	rcall	.+0      	; 0x31c <servo_set_duty_cycle_two+0xe>
     31c:	00 d0       	rcall	.+0      	; 0x31e <servo_set_duty_cycle_two+0x10>
     31e:	cd b7       	in	r28, 0x3d	; 61
     320:	de b7       	in	r29, 0x3e	; 62
     322:	9c 83       	std	Y+4, r25	; 0x04
     324:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     326:	86 e9       	ldi	r24, 0x96	; 150
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	fc 01       	movw	r30, r24
     32c:	80 81       	ld	r24, Z
     32e:	91 81       	ldd	r25, Z+1	; 0x01
     330:	cc 01       	movw	r24, r24
     332:	a0 e0       	ldi	r26, 0x00	; 0
     334:	b0 e0       	ldi	r27, 0x00	; 0
     336:	bc 01       	movw	r22, r24
     338:	cd 01       	movw	r24, r26
     33a:	0e 94 c3 1e 	call	0x3d86	; 0x3d86 <__floatunsisf>
     33e:	dc 01       	movw	r26, r24
     340:	cb 01       	movw	r24, r22
     342:	20 e0       	ldi	r18, 0x00	; 0
     344:	30 e0       	ldi	r19, 0x00	; 0
     346:	4f e7       	ldi	r20, 0x7F	; 127
     348:	53 e4       	ldi	r21, 0x43	; 67
     34a:	bc 01       	movw	r22, r24
     34c:	cd 01       	movw	r24, r26
     34e:	0e 94 1b 1e 	call	0x3c36	; 0x3c36 <__divsf3>
     352:	dc 01       	movw	r26, r24
     354:	cb 01       	movw	r24, r22
     356:	6c 01       	movw	r12, r24
     358:	7d 01       	movw	r14, r26
     35a:	8b 81       	ldd	r24, Y+3	; 0x03
     35c:	9c 81       	ldd	r25, Y+4	; 0x04
     35e:	09 2e       	mov	r0, r25
     360:	00 0c       	add	r0, r0
     362:	aa 0b       	sbc	r26, r26
     364:	bb 0b       	sbc	r27, r27
     366:	bc 01       	movw	r22, r24
     368:	cd 01       	movw	r24, r26
     36a:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <__floatsisf>
     36e:	dc 01       	movw	r26, r24
     370:	cb 01       	movw	r24, r22
     372:	9c 01       	movw	r18, r24
     374:	ad 01       	movw	r20, r26
     376:	c7 01       	movw	r24, r14
     378:	b6 01       	movw	r22, r12
     37a:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__mulsf3>
     37e:	dc 01       	movw	r26, r24
     380:	cb 01       	movw	r24, r22
     382:	20 e0       	ldi	r18, 0x00	; 0
     384:	30 e0       	ldi	r19, 0x00	; 0
     386:	40 e0       	ldi	r20, 0x00	; 0
     388:	5f e3       	ldi	r21, 0x3F	; 63
     38a:	bc 01       	movw	r22, r24
     38c:	cd 01       	movw	r24, r26
     38e:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <__addsf3>
     392:	dc 01       	movw	r26, r24
     394:	cb 01       	movw	r24, r22
     396:	bc 01       	movw	r22, r24
     398:	cd 01       	movw	r24, r26
     39a:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <__fixunssfsi>
     39e:	dc 01       	movw	r26, r24
     3a0:	cb 01       	movw	r24, r22
     3a2:	9a 83       	std	Y+2, r25	; 0x02
     3a4:	89 83       	std	Y+1, r24	; 0x01
	OCR3BH = temp >> 8;
     3a6:	8b e9       	ldi	r24, 0x9B	; 155
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	29 81       	ldd	r18, Y+1	; 0x01
     3ac:	3a 81       	ldd	r19, Y+2	; 0x02
     3ae:	23 2f       	mov	r18, r19
     3b0:	33 27       	eor	r19, r19
     3b2:	fc 01       	movw	r30, r24
     3b4:	20 83       	st	Z, r18
	OCR3BL = temp & 0xFF;
     3b6:	8a e9       	ldi	r24, 0x9A	; 154
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	29 81       	ldd	r18, Y+1	; 0x01
     3bc:	fc 01       	movw	r30, r24
     3be:	20 83       	st	Z, r18
}
     3c0:	0f 90       	pop	r0
     3c2:	0f 90       	pop	r0
     3c4:	0f 90       	pop	r0
     3c6:	0f 90       	pop	r0
     3c8:	df 91       	pop	r29
     3ca:	cf 91       	pop	r28
     3cc:	ff 90       	pop	r15
     3ce:	ef 90       	pop	r14
     3d0:	df 90       	pop	r13
     3d2:	cf 90       	pop	r12
     3d4:	08 95       	ret

000003d6 <servo_set_duty_cycle_three>:
static void servo_set_duty_cycle_three(int16_t value)
{
     3d6:	cf 92       	push	r12
     3d8:	df 92       	push	r13
     3da:	ef 92       	push	r14
     3dc:	ff 92       	push	r15
     3de:	cf 93       	push	r28
     3e0:	df 93       	push	r29
     3e2:	00 d0       	rcall	.+0      	; 0x3e4 <servo_set_duty_cycle_three+0xe>
     3e4:	00 d0       	rcall	.+0      	; 0x3e6 <servo_set_duty_cycle_three+0x10>
     3e6:	cd b7       	in	r28, 0x3d	; 61
     3e8:	de b7       	in	r29, 0x3e	; 62
     3ea:	9c 83       	std	Y+4, r25	; 0x04
     3ec:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     3ee:	86 e9       	ldi	r24, 0x96	; 150
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	fc 01       	movw	r30, r24
     3f4:	80 81       	ld	r24, Z
     3f6:	91 81       	ldd	r25, Z+1	; 0x01
     3f8:	cc 01       	movw	r24, r24
     3fa:	a0 e0       	ldi	r26, 0x00	; 0
     3fc:	b0 e0       	ldi	r27, 0x00	; 0
     3fe:	bc 01       	movw	r22, r24
     400:	cd 01       	movw	r24, r26
     402:	0e 94 c3 1e 	call	0x3d86	; 0x3d86 <__floatunsisf>
     406:	dc 01       	movw	r26, r24
     408:	cb 01       	movw	r24, r22
     40a:	20 e0       	ldi	r18, 0x00	; 0
     40c:	30 e0       	ldi	r19, 0x00	; 0
     40e:	4f e7       	ldi	r20, 0x7F	; 127
     410:	53 e4       	ldi	r21, 0x43	; 67
     412:	bc 01       	movw	r22, r24
     414:	cd 01       	movw	r24, r26
     416:	0e 94 1b 1e 	call	0x3c36	; 0x3c36 <__divsf3>
     41a:	dc 01       	movw	r26, r24
     41c:	cb 01       	movw	r24, r22
     41e:	6c 01       	movw	r12, r24
     420:	7d 01       	movw	r14, r26
     422:	8b 81       	ldd	r24, Y+3	; 0x03
     424:	9c 81       	ldd	r25, Y+4	; 0x04
     426:	09 2e       	mov	r0, r25
     428:	00 0c       	add	r0, r0
     42a:	aa 0b       	sbc	r26, r26
     42c:	bb 0b       	sbc	r27, r27
     42e:	bc 01       	movw	r22, r24
     430:	cd 01       	movw	r24, r26
     432:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <__floatsisf>
     436:	dc 01       	movw	r26, r24
     438:	cb 01       	movw	r24, r22
     43a:	9c 01       	movw	r18, r24
     43c:	ad 01       	movw	r20, r26
     43e:	c7 01       	movw	r24, r14
     440:	b6 01       	movw	r22, r12
     442:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__mulsf3>
     446:	dc 01       	movw	r26, r24
     448:	cb 01       	movw	r24, r22
     44a:	20 e0       	ldi	r18, 0x00	; 0
     44c:	30 e0       	ldi	r19, 0x00	; 0
     44e:	40 e0       	ldi	r20, 0x00	; 0
     450:	5f e3       	ldi	r21, 0x3F	; 63
     452:	bc 01       	movw	r22, r24
     454:	cd 01       	movw	r24, r26
     456:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <__addsf3>
     45a:	dc 01       	movw	r26, r24
     45c:	cb 01       	movw	r24, r22
     45e:	bc 01       	movw	r22, r24
     460:	cd 01       	movw	r24, r26
     462:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <__fixunssfsi>
     466:	dc 01       	movw	r26, r24
     468:	cb 01       	movw	r24, r22
     46a:	9a 83       	std	Y+2, r25	; 0x02
     46c:	89 83       	std	Y+1, r24	; 0x01
	OCR3CH = temp >> 8;
     46e:	8d e9       	ldi	r24, 0x9D	; 157
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	29 81       	ldd	r18, Y+1	; 0x01
     474:	3a 81       	ldd	r19, Y+2	; 0x02
     476:	23 2f       	mov	r18, r19
     478:	33 27       	eor	r19, r19
     47a:	fc 01       	movw	r30, r24
     47c:	20 83       	st	Z, r18
	OCR3CL = temp & 0xFF;
     47e:	8c e9       	ldi	r24, 0x9C	; 156
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	29 81       	ldd	r18, Y+1	; 0x01
     484:	fc 01       	movw	r30, r24
     486:	20 83       	st	Z, r18
}
     488:	0f 90       	pop	r0
     48a:	0f 90       	pop	r0
     48c:	0f 90       	pop	r0
     48e:	0f 90       	pop	r0
     490:	df 91       	pop	r29
     492:	cf 91       	pop	r28
     494:	ff 90       	pop	r15
     496:	ef 90       	pop	r14
     498:	df 90       	pop	r13
     49a:	cf 90       	pop	r12
     49c:	08 95       	ret

0000049e <klip_servo>:
 *	Function: 		void klip_servo(int8_t angle)
 *	Parameters: 	int8_t angle - the angle
 *	Description: 	angle of klip servo, using PIN E3
 */
void klip_servo(int8_t angle)
{
     49e:	cf 93       	push	r28
     4a0:	df 93       	push	r29
     4a2:	1f 92       	push	r1
     4a4:	cd b7       	in	r28, 0x3d	; 61
     4a6:	de b7       	in	r29, 0x3e	; 62
     4a8:	89 83       	std	Y+1, r24	; 0x01
	servo_set_duty_cycle_one( 255-(236.0 - ((double)angle / 90.0) * 11.4));
     4aa:	89 81       	ldd	r24, Y+1	; 0x01
     4ac:	08 2e       	mov	r0, r24
     4ae:	00 0c       	add	r0, r0
     4b0:	99 0b       	sbc	r25, r25
     4b2:	aa 0b       	sbc	r26, r26
     4b4:	bb 0b       	sbc	r27, r27
     4b6:	bc 01       	movw	r22, r24
     4b8:	cd 01       	movw	r24, r26
     4ba:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <__floatsisf>
     4be:	dc 01       	movw	r26, r24
     4c0:	cb 01       	movw	r24, r22
     4c2:	20 e0       	ldi	r18, 0x00	; 0
     4c4:	30 e0       	ldi	r19, 0x00	; 0
     4c6:	44 eb       	ldi	r20, 0xB4	; 180
     4c8:	52 e4       	ldi	r21, 0x42	; 66
     4ca:	bc 01       	movw	r22, r24
     4cc:	cd 01       	movw	r24, r26
     4ce:	0e 94 1b 1e 	call	0x3c36	; 0x3c36 <__divsf3>
     4d2:	dc 01       	movw	r26, r24
     4d4:	cb 01       	movw	r24, r22
     4d6:	26 e6       	ldi	r18, 0x66	; 102
     4d8:	36 e6       	ldi	r19, 0x66	; 102
     4da:	46 e3       	ldi	r20, 0x36	; 54
     4dc:	51 e4       	ldi	r21, 0x41	; 65
     4de:	bc 01       	movw	r22, r24
     4e0:	cd 01       	movw	r24, r26
     4e2:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__mulsf3>
     4e6:	dc 01       	movw	r26, r24
     4e8:	cb 01       	movw	r24, r22
     4ea:	9c 01       	movw	r18, r24
     4ec:	ad 01       	movw	r20, r26
     4ee:	60 e0       	ldi	r22, 0x00	; 0
     4f0:	70 e0       	ldi	r23, 0x00	; 0
     4f2:	8c e6       	ldi	r24, 0x6C	; 108
     4f4:	93 e4       	ldi	r25, 0x43	; 67
     4f6:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <__subsf3>
     4fa:	dc 01       	movw	r26, r24
     4fc:	cb 01       	movw	r24, r22
     4fe:	9c 01       	movw	r18, r24
     500:	ad 01       	movw	r20, r26
     502:	60 e0       	ldi	r22, 0x00	; 0
     504:	70 e0       	ldi	r23, 0x00	; 0
     506:	8f e7       	ldi	r24, 0x7F	; 127
     508:	93 e4       	ldi	r25, 0x43	; 67
     50a:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <__subsf3>
     50e:	dc 01       	movw	r26, r24
     510:	cb 01       	movw	r24, r22
     512:	bc 01       	movw	r22, r24
     514:	cd 01       	movw	r24, r26
     516:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <__fixsfsi>
     51a:	dc 01       	movw	r26, r24
     51c:	cb 01       	movw	r24, r22
     51e:	0e 94 23 01 	call	0x246	; 0x246 <servo_set_duty_cycle_one>
}
     522:	0f 90       	pop	r0
     524:	df 91       	pop	r29
     526:	cf 91       	pop	r28
     528:	08 95       	ret

0000052a <actuator_setup>:
/*
 *	Function: 		void actuator_setup(void)
 *	Description: 	setup the actuators
 */
void actuator_setup(void)
{
     52a:	cf 93       	push	r28
     52c:	df 93       	push	r29
     52e:	cd b7       	in	r28, 0x3d	; 61
     530:	de b7       	in	r29, 0x3e	; 62
	klip(OFF);
     532:	80 e0       	ldi	r24, 0x00	; 0
     534:	0e 94 84 04 	call	0x908	; 0x908 <klip>
	pumps(OFF);
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	0e 94 64 04 	call	0x8c8	; 0x8c8 <pumps>
}
     53e:	df 91       	pop	r29
     540:	cf 91       	pop	r28
     542:	08 95       	ret

00000544 <ball_grabbers>:
 *	Parameters: 	unsigned char side 	- which side to control
 *					unsigned char state	- UP or DOWN or MID state
 *	Description: 	controls the ball grabber servos through CAN communication with actuator board
 */
void ball_grabbers(unsigned char side, unsigned char state)
{
     544:	cf 93       	push	r28
     546:	df 93       	push	r29
     548:	cd b7       	in	r28, 0x3d	; 61
     54a:	de b7       	in	r29, 0x3e	; 62
     54c:	68 97       	sbiw	r28, 0x18	; 24
     54e:	0f b6       	in	r0, 0x3f	; 63
     550:	f8 94       	cli
     552:	de bf       	out	0x3e, r29	; 62
     554:	0f be       	out	0x3f, r0	; 63
     556:	cd bf       	out	0x3d, r28	; 61
     558:	8f 8b       	std	Y+23, r24	; 0x17
     55a:	68 8f       	std	Y+24, r22	; 0x18
	// Side 	- LEFT or RIGHT
	// State 	- UP or DOWN or MID

	uint8_t buffer[8];
	buffer[0] = 'A';		// indicating what I'm using
     55c:	81 e4       	ldi	r24, 0x41	; 65
     55e:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = side;		// indicating which side
     560:	8f 89       	ldd	r24, Y+23	; 0x17
     562:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = state;		// indicating what state
     564:	88 8d       	ldd	r24, Y+24	; 0x18
     566:	89 8b       	std	Y+17, r24	; 0x11

	// send it off
	while(CAN_Write(buffer, DRIVER_LIFT_TX_IDENTIFICATOR))
     568:	72 c0       	rjmp	.+228    	; 0x64e <ball_grabbers+0x10a>
     56a:	80 e0       	ldi	r24, 0x00	; 0
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	a8 e4       	ldi	r26, 0x48	; 72
     570:	b2 e4       	ldi	r27, 0x42	; 66
     572:	89 83       	std	Y+1, r24	; 0x01
     574:	9a 83       	std	Y+2, r25	; 0x02
     576:	ab 83       	std	Y+3, r26	; 0x03
     578:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     57a:	20 e0       	ldi	r18, 0x00	; 0
     57c:	30 e4       	ldi	r19, 0x40	; 64
     57e:	4c e1       	ldi	r20, 0x1C	; 28
     580:	55 e4       	ldi	r21, 0x45	; 69
     582:	69 81       	ldd	r22, Y+1	; 0x01
     584:	7a 81       	ldd	r23, Y+2	; 0x02
     586:	8b 81       	ldd	r24, Y+3	; 0x03
     588:	9c 81       	ldd	r25, Y+4	; 0x04
     58a:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__mulsf3>
     58e:	dc 01       	movw	r26, r24
     590:	cb 01       	movw	r24, r22
     592:	8d 83       	std	Y+5, r24	; 0x05
     594:	9e 83       	std	Y+6, r25	; 0x06
     596:	af 83       	std	Y+7, r26	; 0x07
     598:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     59a:	20 e0       	ldi	r18, 0x00	; 0
     59c:	30 e0       	ldi	r19, 0x00	; 0
     59e:	40 e8       	ldi	r20, 0x80	; 128
     5a0:	5f e3       	ldi	r21, 0x3F	; 63
     5a2:	6d 81       	ldd	r22, Y+5	; 0x05
     5a4:	7e 81       	ldd	r23, Y+6	; 0x06
     5a6:	8f 81       	ldd	r24, Y+7	; 0x07
     5a8:	98 85       	ldd	r25, Y+8	; 0x08
     5aa:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <__cmpsf2>
     5ae:	88 23       	and	r24, r24
     5b0:	2c f4       	brge	.+10     	; 0x5bc <ball_grabbers+0x78>
		__ticks = 1;
     5b2:	81 e0       	ldi	r24, 0x01	; 1
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	9a 87       	std	Y+10, r25	; 0x0a
     5b8:	89 87       	std	Y+9, r24	; 0x09
     5ba:	3f c0       	rjmp	.+126    	; 0x63a <ball_grabbers+0xf6>
	else if (__tmp > 65535)
     5bc:	20 e0       	ldi	r18, 0x00	; 0
     5be:	3f ef       	ldi	r19, 0xFF	; 255
     5c0:	4f e7       	ldi	r20, 0x7F	; 127
     5c2:	57 e4       	ldi	r21, 0x47	; 71
     5c4:	6d 81       	ldd	r22, Y+5	; 0x05
     5c6:	7e 81       	ldd	r23, Y+6	; 0x06
     5c8:	8f 81       	ldd	r24, Y+7	; 0x07
     5ca:	98 85       	ldd	r25, Y+8	; 0x08
     5cc:	0e 94 75 1f 	call	0x3eea	; 0x3eea <__gesf2>
     5d0:	18 16       	cp	r1, r24
     5d2:	4c f5       	brge	.+82     	; 0x626 <ball_grabbers+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5d4:	20 e0       	ldi	r18, 0x00	; 0
     5d6:	30 e0       	ldi	r19, 0x00	; 0
     5d8:	40 e2       	ldi	r20, 0x20	; 32
     5da:	51 e4       	ldi	r21, 0x41	; 65
     5dc:	69 81       	ldd	r22, Y+1	; 0x01
     5de:	7a 81       	ldd	r23, Y+2	; 0x02
     5e0:	8b 81       	ldd	r24, Y+3	; 0x03
     5e2:	9c 81       	ldd	r25, Y+4	; 0x04
     5e4:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__mulsf3>
     5e8:	dc 01       	movw	r26, r24
     5ea:	cb 01       	movw	r24, r22
     5ec:	bc 01       	movw	r22, r24
     5ee:	cd 01       	movw	r24, r26
     5f0:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <__fixunssfsi>
     5f4:	dc 01       	movw	r26, r24
     5f6:	cb 01       	movw	r24, r22
     5f8:	9a 87       	std	Y+10, r25	; 0x0a
     5fa:	89 87       	std	Y+9, r24	; 0x09
     5fc:	0f c0       	rjmp	.+30     	; 0x61c <ball_grabbers+0xd8>
     5fe:	8a ef       	ldi	r24, 0xFA	; 250
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	9c 87       	std	Y+12, r25	; 0x0c
     604:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     606:	8b 85       	ldd	r24, Y+11	; 0x0b
     608:	9c 85       	ldd	r25, Y+12	; 0x0c
     60a:	01 97       	sbiw	r24, 0x01	; 1
     60c:	f1 f7       	brne	.-4      	; 0x60a <ball_grabbers+0xc6>
     60e:	9c 87       	std	Y+12, r25	; 0x0c
     610:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     612:	89 85       	ldd	r24, Y+9	; 0x09
     614:	9a 85       	ldd	r25, Y+10	; 0x0a
     616:	01 97       	sbiw	r24, 0x01	; 1
     618:	9a 87       	std	Y+10, r25	; 0x0a
     61a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     61c:	89 85       	ldd	r24, Y+9	; 0x09
     61e:	9a 85       	ldd	r25, Y+10	; 0x0a
     620:	89 2b       	or	r24, r25
     622:	69 f7       	brne	.-38     	; 0x5fe <ball_grabbers+0xba>
     624:	14 c0       	rjmp	.+40     	; 0x64e <ball_grabbers+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     626:	6d 81       	ldd	r22, Y+5	; 0x05
     628:	7e 81       	ldd	r23, Y+6	; 0x06
     62a:	8f 81       	ldd	r24, Y+7	; 0x07
     62c:	98 85       	ldd	r25, Y+8	; 0x08
     62e:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <__fixunssfsi>
     632:	dc 01       	movw	r26, r24
     634:	cb 01       	movw	r24, r22
     636:	9a 87       	std	Y+10, r25	; 0x0a
     638:	89 87       	std	Y+9, r24	; 0x09
     63a:	89 85       	ldd	r24, Y+9	; 0x09
     63c:	9a 85       	ldd	r25, Y+10	; 0x0a
     63e:	9e 87       	std	Y+14, r25	; 0x0e
     640:	8d 87       	std	Y+13, r24	; 0x0d
     642:	8d 85       	ldd	r24, Y+13	; 0x0d
     644:	9e 85       	ldd	r25, Y+14	; 0x0e
     646:	01 97       	sbiw	r24, 0x01	; 1
     648:	f1 f7       	brne	.-4      	; 0x646 <ball_grabbers+0x102>
     64a:	9e 87       	std	Y+14, r25	; 0x0e
     64c:	8d 87       	std	Y+13, r24	; 0x0d
     64e:	ce 01       	movw	r24, r28
     650:	0f 96       	adiw	r24, 0x0f	; 15
     652:	64 ed       	ldi	r22, 0xD4	; 212
     654:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <CAN_Write>
     658:	88 23       	and	r24, r24
     65a:	09 f0       	breq	.+2      	; 0x65e <ball_grabbers+0x11a>
     65c:	86 cf       	rjmp	.-244    	; 0x56a <ball_grabbers+0x26>
		_delay_ms(50);
}
     65e:	68 96       	adiw	r28, 0x18	; 24
     660:	0f b6       	in	r0, 0x3f	; 63
     662:	f8 94       	cli
     664:	de bf       	out	0x3e, r29	; 62
     666:	0f be       	out	0x3f, r0	; 63
     668:	cd bf       	out	0x3d, r28	; 61
     66a:	df 91       	pop	r29
     66c:	cf 91       	pop	r28
     66e:	08 95       	ret

00000670 <dispenser>:
 *	Parameters: 	unsigned char side 	- which side to control
 *					unsigned char state	- UP or DOWN state
 *	Description: 	controls the dispenser servos through CAN communication with actuator board
 */
void dispenser(unsigned char side, unsigned char state)
{
     670:	cf 93       	push	r28
     672:	df 93       	push	r29
     674:	cd b7       	in	r28, 0x3d	; 61
     676:	de b7       	in	r29, 0x3e	; 62
     678:	68 97       	sbiw	r28, 0x18	; 24
     67a:	0f b6       	in	r0, 0x3f	; 63
     67c:	f8 94       	cli
     67e:	de bf       	out	0x3e, r29	; 62
     680:	0f be       	out	0x3f, r0	; 63
     682:	cd bf       	out	0x3d, r28	; 61
     684:	8f 8b       	std	Y+23, r24	; 0x17
     686:	68 8f       	std	Y+24, r22	; 0x18
	// Side 	- LEFT or RIGHT
	// State 	- UP or DOWN

	uint8_t buffer[8];
	buffer[0] = 'B';		// indicating what I'm using
     688:	82 e4       	ldi	r24, 0x42	; 66
     68a:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = side;		// indicating which side
     68c:	8f 89       	ldd	r24, Y+23	; 0x17
     68e:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = state;		// indicating what state
     690:	88 8d       	ldd	r24, Y+24	; 0x18
     692:	89 8b       	std	Y+17, r24	; 0x11

	// send it off
	while(CAN_Write(buffer, DRIVER_LIFT_TX_IDENTIFICATOR))
     694:	72 c0       	rjmp	.+228    	; 0x77a <dispenser+0x10a>
     696:	80 e0       	ldi	r24, 0x00	; 0
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	a8 e4       	ldi	r26, 0x48	; 72
     69c:	b2 e4       	ldi	r27, 0x42	; 66
     69e:	89 83       	std	Y+1, r24	; 0x01
     6a0:	9a 83       	std	Y+2, r25	; 0x02
     6a2:	ab 83       	std	Y+3, r26	; 0x03
     6a4:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     6a6:	20 e0       	ldi	r18, 0x00	; 0
     6a8:	30 e4       	ldi	r19, 0x40	; 64
     6aa:	4c e1       	ldi	r20, 0x1C	; 28
     6ac:	55 e4       	ldi	r21, 0x45	; 69
     6ae:	69 81       	ldd	r22, Y+1	; 0x01
     6b0:	7a 81       	ldd	r23, Y+2	; 0x02
     6b2:	8b 81       	ldd	r24, Y+3	; 0x03
     6b4:	9c 81       	ldd	r25, Y+4	; 0x04
     6b6:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__mulsf3>
     6ba:	dc 01       	movw	r26, r24
     6bc:	cb 01       	movw	r24, r22
     6be:	8d 83       	std	Y+5, r24	; 0x05
     6c0:	9e 83       	std	Y+6, r25	; 0x06
     6c2:	af 83       	std	Y+7, r26	; 0x07
     6c4:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     6c6:	20 e0       	ldi	r18, 0x00	; 0
     6c8:	30 e0       	ldi	r19, 0x00	; 0
     6ca:	40 e8       	ldi	r20, 0x80	; 128
     6cc:	5f e3       	ldi	r21, 0x3F	; 63
     6ce:	6d 81       	ldd	r22, Y+5	; 0x05
     6d0:	7e 81       	ldd	r23, Y+6	; 0x06
     6d2:	8f 81       	ldd	r24, Y+7	; 0x07
     6d4:	98 85       	ldd	r25, Y+8	; 0x08
     6d6:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <__cmpsf2>
     6da:	88 23       	and	r24, r24
     6dc:	2c f4       	brge	.+10     	; 0x6e8 <dispenser+0x78>
		__ticks = 1;
     6de:	81 e0       	ldi	r24, 0x01	; 1
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	9a 87       	std	Y+10, r25	; 0x0a
     6e4:	89 87       	std	Y+9, r24	; 0x09
     6e6:	3f c0       	rjmp	.+126    	; 0x766 <dispenser+0xf6>
	else if (__tmp > 65535)
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	3f ef       	ldi	r19, 0xFF	; 255
     6ec:	4f e7       	ldi	r20, 0x7F	; 127
     6ee:	57 e4       	ldi	r21, 0x47	; 71
     6f0:	6d 81       	ldd	r22, Y+5	; 0x05
     6f2:	7e 81       	ldd	r23, Y+6	; 0x06
     6f4:	8f 81       	ldd	r24, Y+7	; 0x07
     6f6:	98 85       	ldd	r25, Y+8	; 0x08
     6f8:	0e 94 75 1f 	call	0x3eea	; 0x3eea <__gesf2>
     6fc:	18 16       	cp	r1, r24
     6fe:	4c f5       	brge	.+82     	; 0x752 <dispenser+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     700:	20 e0       	ldi	r18, 0x00	; 0
     702:	30 e0       	ldi	r19, 0x00	; 0
     704:	40 e2       	ldi	r20, 0x20	; 32
     706:	51 e4       	ldi	r21, 0x41	; 65
     708:	69 81       	ldd	r22, Y+1	; 0x01
     70a:	7a 81       	ldd	r23, Y+2	; 0x02
     70c:	8b 81       	ldd	r24, Y+3	; 0x03
     70e:	9c 81       	ldd	r25, Y+4	; 0x04
     710:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__mulsf3>
     714:	dc 01       	movw	r26, r24
     716:	cb 01       	movw	r24, r22
     718:	bc 01       	movw	r22, r24
     71a:	cd 01       	movw	r24, r26
     71c:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <__fixunssfsi>
     720:	dc 01       	movw	r26, r24
     722:	cb 01       	movw	r24, r22
     724:	9a 87       	std	Y+10, r25	; 0x0a
     726:	89 87       	std	Y+9, r24	; 0x09
     728:	0f c0       	rjmp	.+30     	; 0x748 <dispenser+0xd8>
     72a:	8a ef       	ldi	r24, 0xFA	; 250
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	9c 87       	std	Y+12, r25	; 0x0c
     730:	8b 87       	std	Y+11, r24	; 0x0b
     732:	8b 85       	ldd	r24, Y+11	; 0x0b
     734:	9c 85       	ldd	r25, Y+12	; 0x0c
     736:	01 97       	sbiw	r24, 0x01	; 1
     738:	f1 f7       	brne	.-4      	; 0x736 <dispenser+0xc6>
     73a:	9c 87       	std	Y+12, r25	; 0x0c
     73c:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     73e:	89 85       	ldd	r24, Y+9	; 0x09
     740:	9a 85       	ldd	r25, Y+10	; 0x0a
     742:	01 97       	sbiw	r24, 0x01	; 1
     744:	9a 87       	std	Y+10, r25	; 0x0a
     746:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     748:	89 85       	ldd	r24, Y+9	; 0x09
     74a:	9a 85       	ldd	r25, Y+10	; 0x0a
     74c:	89 2b       	or	r24, r25
     74e:	69 f7       	brne	.-38     	; 0x72a <dispenser+0xba>
     750:	14 c0       	rjmp	.+40     	; 0x77a <dispenser+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     752:	6d 81       	ldd	r22, Y+5	; 0x05
     754:	7e 81       	ldd	r23, Y+6	; 0x06
     756:	8f 81       	ldd	r24, Y+7	; 0x07
     758:	98 85       	ldd	r25, Y+8	; 0x08
     75a:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <__fixunssfsi>
     75e:	dc 01       	movw	r26, r24
     760:	cb 01       	movw	r24, r22
     762:	9a 87       	std	Y+10, r25	; 0x0a
     764:	89 87       	std	Y+9, r24	; 0x09
     766:	89 85       	ldd	r24, Y+9	; 0x09
     768:	9a 85       	ldd	r25, Y+10	; 0x0a
     76a:	9e 87       	std	Y+14, r25	; 0x0e
     76c:	8d 87       	std	Y+13, r24	; 0x0d
     76e:	8d 85       	ldd	r24, Y+13	; 0x0d
     770:	9e 85       	ldd	r25, Y+14	; 0x0e
     772:	01 97       	sbiw	r24, 0x01	; 1
     774:	f1 f7       	brne	.-4      	; 0x772 <dispenser+0x102>
     776:	9e 87       	std	Y+14, r25	; 0x0e
     778:	8d 87       	std	Y+13, r24	; 0x0d
     77a:	ce 01       	movw	r24, r28
     77c:	0f 96       	adiw	r24, 0x0f	; 15
     77e:	64 ed       	ldi	r22, 0xD4	; 212
     780:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <CAN_Write>
     784:	88 23       	and	r24, r24
     786:	09 f0       	breq	.+2      	; 0x78a <dispenser+0x11a>
     788:	86 cf       	rjmp	.-244    	; 0x696 <dispenser+0x26>
		_delay_ms(50);
}
     78a:	68 96       	adiw	r28, 0x18	; 24
     78c:	0f b6       	in	r0, 0x3f	; 63
     78e:	f8 94       	cli
     790:	de bf       	out	0x3e, r29	; 62
     792:	0f be       	out	0x3f, r0	; 63
     794:	cd bf       	out	0x3d, r28	; 61
     796:	df 91       	pop	r29
     798:	cf 91       	pop	r28
     79a:	08 95       	ret

0000079c <mosfet>:
 *	Parameters: 	unsigned char side 	- which side to control
 *					unsigned char state	- ON or OFF state
 *	Description: 	controls the diaframs through CAN communication with actuator board
 */
void mosfet(unsigned char side, unsigned char state)
{
     79c:	cf 93       	push	r28
     79e:	df 93       	push	r29
     7a0:	cd b7       	in	r28, 0x3d	; 61
     7a2:	de b7       	in	r29, 0x3e	; 62
     7a4:	68 97       	sbiw	r28, 0x18	; 24
     7a6:	0f b6       	in	r0, 0x3f	; 63
     7a8:	f8 94       	cli
     7aa:	de bf       	out	0x3e, r29	; 62
     7ac:	0f be       	out	0x3f, r0	; 63
     7ae:	cd bf       	out	0x3d, r28	; 61
     7b0:	8f 8b       	std	Y+23, r24	; 0x17
     7b2:	68 8f       	std	Y+24, r22	; 0x18
	// Side 	- LEFT or RIGHT
	// State 	- ON or OFF

	uint8_t buffer[8];
	buffer[0] = 'C';		// indicating that I'm using diafram
     7b4:	83 e4       	ldi	r24, 0x43	; 67
     7b6:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = side;		// indicating which side
     7b8:	8f 89       	ldd	r24, Y+23	; 0x17
     7ba:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = state;		// indicating what state
     7bc:	88 8d       	ldd	r24, Y+24	; 0x18
     7be:	89 8b       	std	Y+17, r24	; 0x11

	// send it off
	while(CAN_Write(buffer, DRIVER_LIFT_TX_IDENTIFICATOR))
     7c0:	72 c0       	rjmp	.+228    	; 0x8a6 <mosfet+0x10a>
     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	a8 e4       	ldi	r26, 0x48	; 72
     7c8:	b2 e4       	ldi	r27, 0x42	; 66
     7ca:	89 83       	std	Y+1, r24	; 0x01
     7cc:	9a 83       	std	Y+2, r25	; 0x02
     7ce:	ab 83       	std	Y+3, r26	; 0x03
     7d0:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e4       	ldi	r19, 0x40	; 64
     7d6:	4c e1       	ldi	r20, 0x1C	; 28
     7d8:	55 e4       	ldi	r21, 0x45	; 69
     7da:	69 81       	ldd	r22, Y+1	; 0x01
     7dc:	7a 81       	ldd	r23, Y+2	; 0x02
     7de:	8b 81       	ldd	r24, Y+3	; 0x03
     7e0:	9c 81       	ldd	r25, Y+4	; 0x04
     7e2:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__mulsf3>
     7e6:	dc 01       	movw	r26, r24
     7e8:	cb 01       	movw	r24, r22
     7ea:	8d 83       	std	Y+5, r24	; 0x05
     7ec:	9e 83       	std	Y+6, r25	; 0x06
     7ee:	af 83       	std	Y+7, r26	; 0x07
     7f0:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     7f2:	20 e0       	ldi	r18, 0x00	; 0
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	40 e8       	ldi	r20, 0x80	; 128
     7f8:	5f e3       	ldi	r21, 0x3F	; 63
     7fa:	6d 81       	ldd	r22, Y+5	; 0x05
     7fc:	7e 81       	ldd	r23, Y+6	; 0x06
     7fe:	8f 81       	ldd	r24, Y+7	; 0x07
     800:	98 85       	ldd	r25, Y+8	; 0x08
     802:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <__cmpsf2>
     806:	88 23       	and	r24, r24
     808:	2c f4       	brge	.+10     	; 0x814 <mosfet+0x78>
		__ticks = 1;
     80a:	81 e0       	ldi	r24, 0x01	; 1
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	9a 87       	std	Y+10, r25	; 0x0a
     810:	89 87       	std	Y+9, r24	; 0x09
     812:	3f c0       	rjmp	.+126    	; 0x892 <mosfet+0xf6>
	else if (__tmp > 65535)
     814:	20 e0       	ldi	r18, 0x00	; 0
     816:	3f ef       	ldi	r19, 0xFF	; 255
     818:	4f e7       	ldi	r20, 0x7F	; 127
     81a:	57 e4       	ldi	r21, 0x47	; 71
     81c:	6d 81       	ldd	r22, Y+5	; 0x05
     81e:	7e 81       	ldd	r23, Y+6	; 0x06
     820:	8f 81       	ldd	r24, Y+7	; 0x07
     822:	98 85       	ldd	r25, Y+8	; 0x08
     824:	0e 94 75 1f 	call	0x3eea	; 0x3eea <__gesf2>
     828:	18 16       	cp	r1, r24
     82a:	4c f5       	brge	.+82     	; 0x87e <mosfet+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     82c:	20 e0       	ldi	r18, 0x00	; 0
     82e:	30 e0       	ldi	r19, 0x00	; 0
     830:	40 e2       	ldi	r20, 0x20	; 32
     832:	51 e4       	ldi	r21, 0x41	; 65
     834:	69 81       	ldd	r22, Y+1	; 0x01
     836:	7a 81       	ldd	r23, Y+2	; 0x02
     838:	8b 81       	ldd	r24, Y+3	; 0x03
     83a:	9c 81       	ldd	r25, Y+4	; 0x04
     83c:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__mulsf3>
     840:	dc 01       	movw	r26, r24
     842:	cb 01       	movw	r24, r22
     844:	bc 01       	movw	r22, r24
     846:	cd 01       	movw	r24, r26
     848:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <__fixunssfsi>
     84c:	dc 01       	movw	r26, r24
     84e:	cb 01       	movw	r24, r22
     850:	9a 87       	std	Y+10, r25	; 0x0a
     852:	89 87       	std	Y+9, r24	; 0x09
     854:	0f c0       	rjmp	.+30     	; 0x874 <mosfet+0xd8>
     856:	8a ef       	ldi	r24, 0xFA	; 250
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	9c 87       	std	Y+12, r25	; 0x0c
     85c:	8b 87       	std	Y+11, r24	; 0x0b
     85e:	8b 85       	ldd	r24, Y+11	; 0x0b
     860:	9c 85       	ldd	r25, Y+12	; 0x0c
     862:	01 97       	sbiw	r24, 0x01	; 1
     864:	f1 f7       	brne	.-4      	; 0x862 <mosfet+0xc6>
     866:	9c 87       	std	Y+12, r25	; 0x0c
     868:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     86a:	89 85       	ldd	r24, Y+9	; 0x09
     86c:	9a 85       	ldd	r25, Y+10	; 0x0a
     86e:	01 97       	sbiw	r24, 0x01	; 1
     870:	9a 87       	std	Y+10, r25	; 0x0a
     872:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     874:	89 85       	ldd	r24, Y+9	; 0x09
     876:	9a 85       	ldd	r25, Y+10	; 0x0a
     878:	89 2b       	or	r24, r25
     87a:	69 f7       	brne	.-38     	; 0x856 <mosfet+0xba>
     87c:	14 c0       	rjmp	.+40     	; 0x8a6 <mosfet+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     87e:	6d 81       	ldd	r22, Y+5	; 0x05
     880:	7e 81       	ldd	r23, Y+6	; 0x06
     882:	8f 81       	ldd	r24, Y+7	; 0x07
     884:	98 85       	ldd	r25, Y+8	; 0x08
     886:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <__fixunssfsi>
     88a:	dc 01       	movw	r26, r24
     88c:	cb 01       	movw	r24, r22
     88e:	9a 87       	std	Y+10, r25	; 0x0a
     890:	89 87       	std	Y+9, r24	; 0x09
     892:	89 85       	ldd	r24, Y+9	; 0x09
     894:	9a 85       	ldd	r25, Y+10	; 0x0a
     896:	9e 87       	std	Y+14, r25	; 0x0e
     898:	8d 87       	std	Y+13, r24	; 0x0d
     89a:	8d 85       	ldd	r24, Y+13	; 0x0d
     89c:	9e 85       	ldd	r25, Y+14	; 0x0e
     89e:	01 97       	sbiw	r24, 0x01	; 1
     8a0:	f1 f7       	brne	.-4      	; 0x89e <mosfet+0x102>
     8a2:	9e 87       	std	Y+14, r25	; 0x0e
     8a4:	8d 87       	std	Y+13, r24	; 0x0d
     8a6:	ce 01       	movw	r24, r28
     8a8:	0f 96       	adiw	r24, 0x0f	; 15
     8aa:	64 ed       	ldi	r22, 0xD4	; 212
     8ac:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <CAN_Write>
     8b0:	88 23       	and	r24, r24
     8b2:	09 f0       	breq	.+2      	; 0x8b6 <mosfet+0x11a>
     8b4:	86 cf       	rjmp	.-244    	; 0x7c2 <mosfet+0x26>
		_delay_ms(50);
}
     8b6:	68 96       	adiw	r28, 0x18	; 24
     8b8:	0f b6       	in	r0, 0x3f	; 63
     8ba:	f8 94       	cli
     8bc:	de bf       	out	0x3e, r29	; 62
     8be:	0f be       	out	0x3f, r0	; 63
     8c0:	cd bf       	out	0x3d, r28	; 61
     8c2:	df 91       	pop	r29
     8c4:	cf 91       	pop	r28
     8c6:	08 95       	ret

000008c8 <pumps>:
 *	Function: 		void pumps(unsigned char state)
 *	Parameters: 	unsigned char state	- ON or OFF state
 *	Description: 	controls the pumps from the relay board
 */
void pumps(unsigned char state)
{
     8c8:	cf 93       	push	r28
     8ca:	df 93       	push	r29
     8cc:	1f 92       	push	r1
     8ce:	cd b7       	in	r28, 0x3d	; 61
     8d0:	de b7       	in	r29, 0x3e	; 62
     8d2:	89 83       	std	Y+1, r24	; 0x01

	//2 -> PA0
	//3 -> PA1
	//1 -> PA2

	if(!state)
     8d4:	89 81       	ldd	r24, Y+1	; 0x01
     8d6:	88 23       	and	r24, r24
     8d8:	51 f4       	brne	.+20     	; 0x8ee <pumps+0x26>
	{
		PORTA |= (1 << PA2) | (1 << PA0);
     8da:	82 e2       	ldi	r24, 0x22	; 34
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	22 e2       	ldi	r18, 0x22	; 34
     8e0:	30 e0       	ldi	r19, 0x00	; 0
     8e2:	f9 01       	movw	r30, r18
     8e4:	20 81       	ld	r18, Z
     8e6:	25 60       	ori	r18, 0x05	; 5
     8e8:	fc 01       	movw	r30, r24
     8ea:	20 83       	st	Z, r18
     8ec:	09 c0       	rjmp	.+18     	; 0x900 <pumps+0x38>
	} else {

		PORTA &= ~(1 << PA2) &  ~(1 << PA0);
     8ee:	82 e2       	ldi	r24, 0x22	; 34
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	22 e2       	ldi	r18, 0x22	; 34
     8f4:	30 e0       	ldi	r19, 0x00	; 0
     8f6:	f9 01       	movw	r30, r18
     8f8:	20 81       	ld	r18, Z
     8fa:	2a 7f       	andi	r18, 0xFA	; 250
     8fc:	fc 01       	movw	r30, r24
     8fe:	20 83       	st	Z, r18
	}
}
     900:	0f 90       	pop	r0
     902:	df 91       	pop	r29
     904:	cf 91       	pop	r28
     906:	08 95       	ret

00000908 <klip>:
 *	Function: 		void klip(unsigned char state)
 *	Parameters: 	unsigned char state	- ON or OFF state
 *	Description: 	controls the klip from the relay board
 */
void klip(unsigned char state)
{
     908:	cf 93       	push	r28
     90a:	df 93       	push	r29
     90c:	1f 92       	push	r1
     90e:	cd b7       	in	r28, 0x3d	; 61
     910:	de b7       	in	r29, 0x3e	; 62
     912:	89 83       	std	Y+1, r24	; 0x01

	//2 -> PA0
	//3 -> PA1
	//1 -> PA2

	if(!state)	// !state because the relay turns ON when pulled to GND
     914:	89 81       	ldd	r24, Y+1	; 0x01
     916:	88 23       	and	r24, r24
     918:	51 f4       	brne	.+20     	; 0x92e <klip+0x26>
	{
		PORTA |= (1 << PA1);
     91a:	82 e2       	ldi	r24, 0x22	; 34
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	22 e2       	ldi	r18, 0x22	; 34
     920:	30 e0       	ldi	r19, 0x00	; 0
     922:	f9 01       	movw	r30, r18
     924:	20 81       	ld	r18, Z
     926:	22 60       	ori	r18, 0x02	; 2
     928:	fc 01       	movw	r30, r24
     92a:	20 83       	st	Z, r18
     92c:	09 c0       	rjmp	.+18     	; 0x940 <klip+0x38>
	} else {
		PORTA &= ~(1 << PA1);
     92e:	82 e2       	ldi	r24, 0x22	; 34
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	22 e2       	ldi	r18, 0x22	; 34
     934:	30 e0       	ldi	r19, 0x00	; 0
     936:	f9 01       	movw	r30, r18
     938:	20 81       	ld	r18, Z
     93a:	2d 7f       	andi	r18, 0xFD	; 253
     93c:	fc 01       	movw	r30, r24
     93e:	20 83       	st	Z, r18
	}
}
     940:	0f 90       	pop	r0
     942:	df 91       	pop	r29
     944:	cf 91       	pop	r28
     946:	08 95       	ret

00000948 <trig_pulse>:
/*
 *	Function: 		static void trig_pulse()
 *	Description: 	specific trigure pulses for the distance sensor
 */
static void trig_pulse()
{
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	cf 93       	push	r28
     94e:	df 93       	push	r29
     950:	cd b7       	in	r28, 0x3d	; 61
     952:	de b7       	in	r29, 0x3e	; 62
     954:	c0 56       	subi	r28, 0x60	; 96
     956:	d1 09       	sbc	r29, r1
     958:	0f b6       	in	r0, 0x3f	; 63
     95a:	f8 94       	cli
     95c:	de bf       	out	0x3e, r29	; 62
     95e:	0f be       	out	0x3f, r0	; 63
     960:	cd bf       	out	0x3d, r28	; 61
	dist_trig_off()				// Clear pin before setting it high
     962:	61 e0       	ldi	r22, 0x01	; 1
     964:	80 e0       	ldi	r24, 0x00	; 0
     966:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <gpio_write_pin>
     96a:	80 e0       	ldi	r24, 0x00	; 0
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	a0 e8       	ldi	r26, 0x80	; 128
     970:	bf e3       	ldi	r27, 0x3F	; 63
     972:	89 83       	std	Y+1, r24	; 0x01
     974:	9a 83       	std	Y+2, r25	; 0x02
     976:	ab 83       	std	Y+3, r26	; 0x03
     978:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
     97a:	25 e5       	ldi	r18, 0x55	; 85
     97c:	35 e5       	ldi	r19, 0x55	; 85
     97e:	45 e5       	ldi	r20, 0x55	; 85
     980:	50 e4       	ldi	r21, 0x40	; 64
     982:	69 81       	ldd	r22, Y+1	; 0x01
     984:	7a 81       	ldd	r23, Y+2	; 0x02
     986:	8b 81       	ldd	r24, Y+3	; 0x03
     988:	9c 81       	ldd	r25, Y+4	; 0x04
     98a:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__mulsf3>
     98e:	dc 01       	movw	r26, r24
     990:	cb 01       	movw	r24, r22
     992:	8d 83       	std	Y+5, r24	; 0x05
     994:	9e 83       	std	Y+6, r25	; 0x06
     996:	af 83       	std	Y+7, r26	; 0x07
     998:	b8 87       	std	Y+8, r27	; 0x08
	__tmp2 = ((F_CPU) / 4e6) * __us;
     99a:	20 e0       	ldi	r18, 0x00	; 0
     99c:	30 e0       	ldi	r19, 0x00	; 0
     99e:	40 e2       	ldi	r20, 0x20	; 32
     9a0:	50 e4       	ldi	r21, 0x40	; 64
     9a2:	69 81       	ldd	r22, Y+1	; 0x01
     9a4:	7a 81       	ldd	r23, Y+2	; 0x02
     9a6:	8b 81       	ldd	r24, Y+3	; 0x03
     9a8:	9c 81       	ldd	r25, Y+4	; 0x04
     9aa:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__mulsf3>
     9ae:	dc 01       	movw	r26, r24
     9b0:	cb 01       	movw	r24, r22
     9b2:	89 87       	std	Y+9, r24	; 0x09
     9b4:	9a 87       	std	Y+10, r25	; 0x0a
     9b6:	ab 87       	std	Y+11, r26	; 0x0b
     9b8:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     9ba:	20 e0       	ldi	r18, 0x00	; 0
     9bc:	30 e0       	ldi	r19, 0x00	; 0
     9be:	40 e8       	ldi	r20, 0x80	; 128
     9c0:	5f e3       	ldi	r21, 0x3F	; 63
     9c2:	6d 81       	ldd	r22, Y+5	; 0x05
     9c4:	7e 81       	ldd	r23, Y+6	; 0x06
     9c6:	8f 81       	ldd	r24, Y+7	; 0x07
     9c8:	98 85       	ldd	r25, Y+8	; 0x08
     9ca:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <__cmpsf2>
     9ce:	88 23       	and	r24, r24
     9d0:	1c f4       	brge	.+6      	; 0x9d8 <trig_pulse+0x90>
		__ticks = 1;
     9d2:	81 e0       	ldi	r24, 0x01	; 1
     9d4:	8d 87       	std	Y+13, r24	; 0x0d
     9d6:	b2 c0       	rjmp	.+356    	; 0xb3c <trig_pulse+0x1f4>
	else if (__tmp2 > 65535)
     9d8:	20 e0       	ldi	r18, 0x00	; 0
     9da:	3f ef       	ldi	r19, 0xFF	; 255
     9dc:	4f e7       	ldi	r20, 0x7F	; 127
     9de:	57 e4       	ldi	r21, 0x47	; 71
     9e0:	69 85       	ldd	r22, Y+9	; 0x09
     9e2:	7a 85       	ldd	r23, Y+10	; 0x0a
     9e4:	8b 85       	ldd	r24, Y+11	; 0x0b
     9e6:	9c 85       	ldd	r25, Y+12	; 0x0c
     9e8:	0e 94 75 1f 	call	0x3eea	; 0x3eea <__gesf2>
     9ec:	18 16       	cp	r1, r24
     9ee:	0c f0       	brlt	.+2      	; 0x9f2 <trig_pulse+0xaa>
     9f0:	7b c0       	rjmp	.+246    	; 0xae8 <trig_pulse+0x1a0>
	{
		_delay_ms(__us / 1000.0);
     9f2:	20 e0       	ldi	r18, 0x00	; 0
     9f4:	30 e0       	ldi	r19, 0x00	; 0
     9f6:	4a e7       	ldi	r20, 0x7A	; 122
     9f8:	54 e4       	ldi	r21, 0x44	; 68
     9fa:	69 81       	ldd	r22, Y+1	; 0x01
     9fc:	7a 81       	ldd	r23, Y+2	; 0x02
     9fe:	8b 81       	ldd	r24, Y+3	; 0x03
     a00:	9c 81       	ldd	r25, Y+4	; 0x04
     a02:	0e 94 1b 1e 	call	0x3c36	; 0x3c36 <__divsf3>
     a06:	dc 01       	movw	r26, r24
     a08:	cb 01       	movw	r24, r22
     a0a:	8e 87       	std	Y+14, r24	; 0x0e
     a0c:	9f 87       	std	Y+15, r25	; 0x0f
     a0e:	a8 8b       	std	Y+16, r26	; 0x10
     a10:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     a12:	20 e0       	ldi	r18, 0x00	; 0
     a14:	30 e4       	ldi	r19, 0x40	; 64
     a16:	4c e1       	ldi	r20, 0x1C	; 28
     a18:	55 e4       	ldi	r21, 0x45	; 69
     a1a:	6e 85       	ldd	r22, Y+14	; 0x0e
     a1c:	7f 85       	ldd	r23, Y+15	; 0x0f
     a1e:	88 89       	ldd	r24, Y+16	; 0x10
     a20:	99 89       	ldd	r25, Y+17	; 0x11
     a22:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__mulsf3>
     a26:	dc 01       	movw	r26, r24
     a28:	cb 01       	movw	r24, r22
     a2a:	8a 8b       	std	Y+18, r24	; 0x12
     a2c:	9b 8b       	std	Y+19, r25	; 0x13
     a2e:	ac 8b       	std	Y+20, r26	; 0x14
     a30:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
     a32:	20 e0       	ldi	r18, 0x00	; 0
     a34:	30 e0       	ldi	r19, 0x00	; 0
     a36:	40 e8       	ldi	r20, 0x80	; 128
     a38:	5f e3       	ldi	r21, 0x3F	; 63
     a3a:	6a 89       	ldd	r22, Y+18	; 0x12
     a3c:	7b 89       	ldd	r23, Y+19	; 0x13
     a3e:	8c 89       	ldd	r24, Y+20	; 0x14
     a40:	9d 89       	ldd	r25, Y+21	; 0x15
     a42:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <__cmpsf2>
     a46:	88 23       	and	r24, r24
     a48:	2c f4       	brge	.+10     	; 0xa54 <trig_pulse+0x10c>
		__ticks = 1;
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	9f 8b       	std	Y+23, r25	; 0x17
     a50:	8e 8b       	std	Y+22, r24	; 0x16
     a52:	3f c0       	rjmp	.+126    	; 0xad2 <trig_pulse+0x18a>
	else if (__tmp > 65535)
     a54:	20 e0       	ldi	r18, 0x00	; 0
     a56:	3f ef       	ldi	r19, 0xFF	; 255
     a58:	4f e7       	ldi	r20, 0x7F	; 127
     a5a:	57 e4       	ldi	r21, 0x47	; 71
     a5c:	6a 89       	ldd	r22, Y+18	; 0x12
     a5e:	7b 89       	ldd	r23, Y+19	; 0x13
     a60:	8c 89       	ldd	r24, Y+20	; 0x14
     a62:	9d 89       	ldd	r25, Y+21	; 0x15
     a64:	0e 94 75 1f 	call	0x3eea	; 0x3eea <__gesf2>
     a68:	18 16       	cp	r1, r24
     a6a:	4c f5       	brge	.+82     	; 0xabe <trig_pulse+0x176>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a6c:	20 e0       	ldi	r18, 0x00	; 0
     a6e:	30 e0       	ldi	r19, 0x00	; 0
     a70:	40 e2       	ldi	r20, 0x20	; 32
     a72:	51 e4       	ldi	r21, 0x41	; 65
     a74:	6e 85       	ldd	r22, Y+14	; 0x0e
     a76:	7f 85       	ldd	r23, Y+15	; 0x0f
     a78:	88 89       	ldd	r24, Y+16	; 0x10
     a7a:	99 89       	ldd	r25, Y+17	; 0x11
     a7c:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__mulsf3>
     a80:	dc 01       	movw	r26, r24
     a82:	cb 01       	movw	r24, r22
     a84:	bc 01       	movw	r22, r24
     a86:	cd 01       	movw	r24, r26
     a88:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <__fixunssfsi>
     a8c:	dc 01       	movw	r26, r24
     a8e:	cb 01       	movw	r24, r22
     a90:	9f 8b       	std	Y+23, r25	; 0x17
     a92:	8e 8b       	std	Y+22, r24	; 0x16
     a94:	0f c0       	rjmp	.+30     	; 0xab4 <trig_pulse+0x16c>
     a96:	8a ef       	ldi	r24, 0xFA	; 250
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	99 8f       	std	Y+25, r25	; 0x19
     a9c:	88 8f       	std	Y+24, r24	; 0x18
     a9e:	88 8d       	ldd	r24, Y+24	; 0x18
     aa0:	99 8d       	ldd	r25, Y+25	; 0x19
     aa2:	01 97       	sbiw	r24, 0x01	; 1
     aa4:	f1 f7       	brne	.-4      	; 0xaa2 <trig_pulse+0x15a>
     aa6:	99 8f       	std	Y+25, r25	; 0x19
     aa8:	88 8f       	std	Y+24, r24	; 0x18
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     aaa:	8e 89       	ldd	r24, Y+22	; 0x16
     aac:	9f 89       	ldd	r25, Y+23	; 0x17
     aae:	01 97       	sbiw	r24, 0x01	; 1
     ab0:	9f 8b       	std	Y+23, r25	; 0x17
     ab2:	8e 8b       	std	Y+22, r24	; 0x16
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ab4:	8e 89       	ldd	r24, Y+22	; 0x16
     ab6:	9f 89       	ldd	r25, Y+23	; 0x17
     ab8:	89 2b       	or	r24, r25
     aba:	69 f7       	brne	.-38     	; 0xa96 <trig_pulse+0x14e>
     abc:	3f c0       	rjmp	.+126    	; 0xb3c <trig_pulse+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     abe:	6a 89       	ldd	r22, Y+18	; 0x12
     ac0:	7b 89       	ldd	r23, Y+19	; 0x13
     ac2:	8c 89       	ldd	r24, Y+20	; 0x14
     ac4:	9d 89       	ldd	r25, Y+21	; 0x15
     ac6:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <__fixunssfsi>
     aca:	dc 01       	movw	r26, r24
     acc:	cb 01       	movw	r24, r22
     ace:	9f 8b       	std	Y+23, r25	; 0x17
     ad0:	8e 8b       	std	Y+22, r24	; 0x16
     ad2:	8e 89       	ldd	r24, Y+22	; 0x16
     ad4:	9f 89       	ldd	r25, Y+23	; 0x17
     ad6:	9b 8f       	std	Y+27, r25	; 0x1b
     ad8:	8a 8f       	std	Y+26, r24	; 0x1a
     ada:	8a 8d       	ldd	r24, Y+26	; 0x1a
     adc:	9b 8d       	ldd	r25, Y+27	; 0x1b
     ade:	01 97       	sbiw	r24, 0x01	; 1
     ae0:	f1 f7       	brne	.-4      	; 0xade <trig_pulse+0x196>
     ae2:	9b 8f       	std	Y+27, r25	; 0x1b
     ae4:	8a 8f       	std	Y+26, r24	; 0x1a
     ae6:	2a c0       	rjmp	.+84     	; 0xb3c <trig_pulse+0x1f4>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     ae8:	20 e0       	ldi	r18, 0x00	; 0
     aea:	30 e0       	ldi	r19, 0x00	; 0
     aec:	4f e7       	ldi	r20, 0x7F	; 127
     aee:	53 e4       	ldi	r21, 0x43	; 67
     af0:	6d 81       	ldd	r22, Y+5	; 0x05
     af2:	7e 81       	ldd	r23, Y+6	; 0x06
     af4:	8f 81       	ldd	r24, Y+7	; 0x07
     af6:	98 85       	ldd	r25, Y+8	; 0x08
     af8:	0e 94 75 1f 	call	0x3eea	; 0x3eea <__gesf2>
     afc:	18 16       	cp	r1, r24
     afe:	ac f4       	brge	.+42     	; 0xb2a <trig_pulse+0x1e2>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     b00:	69 85       	ldd	r22, Y+9	; 0x09
     b02:	7a 85       	ldd	r23, Y+10	; 0x0a
     b04:	8b 85       	ldd	r24, Y+11	; 0x0b
     b06:	9c 85       	ldd	r25, Y+12	; 0x0c
     b08:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <__fixunssfsi>
     b0c:	dc 01       	movw	r26, r24
     b0e:	cb 01       	movw	r24, r22
     b10:	9d 8f       	std	Y+29, r25	; 0x1d
     b12:	8c 8f       	std	Y+28, r24	; 0x1c
     b14:	8c 8d       	ldd	r24, Y+28	; 0x1c
     b16:	9d 8d       	ldd	r25, Y+29	; 0x1d
     b18:	9f 8f       	std	Y+31, r25	; 0x1f
     b1a:	8e 8f       	std	Y+30, r24	; 0x1e
     b1c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     b1e:	9f 8d       	ldd	r25, Y+31	; 0x1f
     b20:	01 97       	sbiw	r24, 0x01	; 1
     b22:	f1 f7       	brne	.-4      	; 0xb20 <trig_pulse+0x1d8>
     b24:	9f 8f       	std	Y+31, r25	; 0x1f
     b26:	8e 8f       	std	Y+30, r24	; 0x1e
     b28:	0f c0       	rjmp	.+30     	; 0xb48 <trig_pulse+0x200>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     b2a:	6d 81       	ldd	r22, Y+5	; 0x05
     b2c:	7e 81       	ldd	r23, Y+6	; 0x06
     b2e:	8f 81       	ldd	r24, Y+7	; 0x07
     b30:	98 85       	ldd	r25, Y+8	; 0x08
     b32:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <__fixunssfsi>
     b36:	dc 01       	movw	r26, r24
     b38:	cb 01       	movw	r24, r22
     b3a:	8d 87       	std	Y+13, r24	; 0x0d
     b3c:	8d 85       	ldd	r24, Y+13	; 0x0d
     b3e:	88 a3       	std	Y+32, r24	; 0x20
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     b40:	88 a1       	ldd	r24, Y+32	; 0x20
     b42:	8a 95       	dec	r24
     b44:	f1 f7       	brne	.-4      	; 0xb42 <trig_pulse+0x1fa>
     b46:	88 a3       	std	Y+32, r24	; 0x20
	_delay_us(1);				// Clear to zero and give time for electronics to set
	dist_trig_on()				// Set pin high
     b48:	60 e0       	ldi	r22, 0x00	; 0
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <gpio_write_pin>
     b50:	80 e0       	ldi	r24, 0x00	; 0
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	a0 e4       	ldi	r26, 0x40	; 64
     b56:	b1 e4       	ldi	r27, 0x41	; 65
     b58:	89 a3       	std	Y+33, r24	; 0x21
     b5a:	9a a3       	std	Y+34, r25	; 0x22
     b5c:	ab a3       	std	Y+35, r26	; 0x23
     b5e:	bc a3       	std	Y+36, r27	; 0x24
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
     b60:	25 e5       	ldi	r18, 0x55	; 85
     b62:	35 e5       	ldi	r19, 0x55	; 85
     b64:	45 e5       	ldi	r20, 0x55	; 85
     b66:	50 e4       	ldi	r21, 0x40	; 64
     b68:	69 a1       	ldd	r22, Y+33	; 0x21
     b6a:	7a a1       	ldd	r23, Y+34	; 0x22
     b6c:	8b a1       	ldd	r24, Y+35	; 0x23
     b6e:	9c a1       	ldd	r25, Y+36	; 0x24
     b70:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__mulsf3>
     b74:	dc 01       	movw	r26, r24
     b76:	cb 01       	movw	r24, r22
     b78:	8d a3       	std	Y+37, r24	; 0x25
     b7a:	9e a3       	std	Y+38, r25	; 0x26
     b7c:	af a3       	std	Y+39, r26	; 0x27
     b7e:	b8 a7       	std	Y+40, r27	; 0x28
	__tmp2 = ((F_CPU) / 4e6) * __us;
     b80:	20 e0       	ldi	r18, 0x00	; 0
     b82:	30 e0       	ldi	r19, 0x00	; 0
     b84:	40 e2       	ldi	r20, 0x20	; 32
     b86:	50 e4       	ldi	r21, 0x40	; 64
     b88:	69 a1       	ldd	r22, Y+33	; 0x21
     b8a:	7a a1       	ldd	r23, Y+34	; 0x22
     b8c:	8b a1       	ldd	r24, Y+35	; 0x23
     b8e:	9c a1       	ldd	r25, Y+36	; 0x24
     b90:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__mulsf3>
     b94:	dc 01       	movw	r26, r24
     b96:	cb 01       	movw	r24, r22
     b98:	89 a7       	std	Y+41, r24	; 0x29
     b9a:	9a a7       	std	Y+42, r25	; 0x2a
     b9c:	ab a7       	std	Y+43, r26	; 0x2b
     b9e:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     ba0:	20 e0       	ldi	r18, 0x00	; 0
     ba2:	30 e0       	ldi	r19, 0x00	; 0
     ba4:	40 e8       	ldi	r20, 0x80	; 128
     ba6:	5f e3       	ldi	r21, 0x3F	; 63
     ba8:	6d a1       	ldd	r22, Y+37	; 0x25
     baa:	7e a1       	ldd	r23, Y+38	; 0x26
     bac:	8f a1       	ldd	r24, Y+39	; 0x27
     bae:	98 a5       	ldd	r25, Y+40	; 0x28
     bb0:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <__cmpsf2>
     bb4:	88 23       	and	r24, r24
     bb6:	1c f4       	brge	.+6      	; 0xbbe <trig_pulse+0x276>
		__ticks = 1;
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	8d a7       	std	Y+45, r24	; 0x2d
     bbc:	b2 c0       	rjmp	.+356    	; 0xd22 <trig_pulse+0x3da>
	else if (__tmp2 > 65535)
     bbe:	20 e0       	ldi	r18, 0x00	; 0
     bc0:	3f ef       	ldi	r19, 0xFF	; 255
     bc2:	4f e7       	ldi	r20, 0x7F	; 127
     bc4:	57 e4       	ldi	r21, 0x47	; 71
     bc6:	69 a5       	ldd	r22, Y+41	; 0x29
     bc8:	7a a5       	ldd	r23, Y+42	; 0x2a
     bca:	8b a5       	ldd	r24, Y+43	; 0x2b
     bcc:	9c a5       	ldd	r25, Y+44	; 0x2c
     bce:	0e 94 75 1f 	call	0x3eea	; 0x3eea <__gesf2>
     bd2:	18 16       	cp	r1, r24
     bd4:	0c f0       	brlt	.+2      	; 0xbd8 <trig_pulse+0x290>
     bd6:	7b c0       	rjmp	.+246    	; 0xcce <trig_pulse+0x386>
	{
		_delay_ms(__us / 1000.0);
     bd8:	20 e0       	ldi	r18, 0x00	; 0
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	4a e7       	ldi	r20, 0x7A	; 122
     bde:	54 e4       	ldi	r21, 0x44	; 68
     be0:	69 a1       	ldd	r22, Y+33	; 0x21
     be2:	7a a1       	ldd	r23, Y+34	; 0x22
     be4:	8b a1       	ldd	r24, Y+35	; 0x23
     be6:	9c a1       	ldd	r25, Y+36	; 0x24
     be8:	0e 94 1b 1e 	call	0x3c36	; 0x3c36 <__divsf3>
     bec:	dc 01       	movw	r26, r24
     bee:	cb 01       	movw	r24, r22
     bf0:	8e a7       	std	Y+46, r24	; 0x2e
     bf2:	9f a7       	std	Y+47, r25	; 0x2f
     bf4:	a8 ab       	std	Y+48, r26	; 0x30
     bf6:	b9 ab       	std	Y+49, r27	; 0x31

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     bf8:	20 e0       	ldi	r18, 0x00	; 0
     bfa:	30 e4       	ldi	r19, 0x40	; 64
     bfc:	4c e1       	ldi	r20, 0x1C	; 28
     bfe:	55 e4       	ldi	r21, 0x45	; 69
     c00:	6e a5       	ldd	r22, Y+46	; 0x2e
     c02:	7f a5       	ldd	r23, Y+47	; 0x2f
     c04:	88 a9       	ldd	r24, Y+48	; 0x30
     c06:	99 a9       	ldd	r25, Y+49	; 0x31
     c08:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__mulsf3>
     c0c:	dc 01       	movw	r26, r24
     c0e:	cb 01       	movw	r24, r22
     c10:	8a ab       	std	Y+50, r24	; 0x32
     c12:	9b ab       	std	Y+51, r25	; 0x33
     c14:	ac ab       	std	Y+52, r26	; 0x34
     c16:	bd ab       	std	Y+53, r27	; 0x35
	if (__tmp < 1.0)
     c18:	20 e0       	ldi	r18, 0x00	; 0
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	40 e8       	ldi	r20, 0x80	; 128
     c1e:	5f e3       	ldi	r21, 0x3F	; 63
     c20:	6a a9       	ldd	r22, Y+50	; 0x32
     c22:	7b a9       	ldd	r23, Y+51	; 0x33
     c24:	8c a9       	ldd	r24, Y+52	; 0x34
     c26:	9d a9       	ldd	r25, Y+53	; 0x35
     c28:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <__cmpsf2>
     c2c:	88 23       	and	r24, r24
     c2e:	2c f4       	brge	.+10     	; 0xc3a <trig_pulse+0x2f2>
		__ticks = 1;
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	9f ab       	std	Y+55, r25	; 0x37
     c36:	8e ab       	std	Y+54, r24	; 0x36
     c38:	3f c0       	rjmp	.+126    	; 0xcb8 <trig_pulse+0x370>
	else if (__tmp > 65535)
     c3a:	20 e0       	ldi	r18, 0x00	; 0
     c3c:	3f ef       	ldi	r19, 0xFF	; 255
     c3e:	4f e7       	ldi	r20, 0x7F	; 127
     c40:	57 e4       	ldi	r21, 0x47	; 71
     c42:	6a a9       	ldd	r22, Y+50	; 0x32
     c44:	7b a9       	ldd	r23, Y+51	; 0x33
     c46:	8c a9       	ldd	r24, Y+52	; 0x34
     c48:	9d a9       	ldd	r25, Y+53	; 0x35
     c4a:	0e 94 75 1f 	call	0x3eea	; 0x3eea <__gesf2>
     c4e:	18 16       	cp	r1, r24
     c50:	4c f5       	brge	.+82     	; 0xca4 <trig_pulse+0x35c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c52:	20 e0       	ldi	r18, 0x00	; 0
     c54:	30 e0       	ldi	r19, 0x00	; 0
     c56:	40 e2       	ldi	r20, 0x20	; 32
     c58:	51 e4       	ldi	r21, 0x41	; 65
     c5a:	6e a5       	ldd	r22, Y+46	; 0x2e
     c5c:	7f a5       	ldd	r23, Y+47	; 0x2f
     c5e:	88 a9       	ldd	r24, Y+48	; 0x30
     c60:	99 a9       	ldd	r25, Y+49	; 0x31
     c62:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__mulsf3>
     c66:	dc 01       	movw	r26, r24
     c68:	cb 01       	movw	r24, r22
     c6a:	bc 01       	movw	r22, r24
     c6c:	cd 01       	movw	r24, r26
     c6e:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <__fixunssfsi>
     c72:	dc 01       	movw	r26, r24
     c74:	cb 01       	movw	r24, r22
     c76:	9f ab       	std	Y+55, r25	; 0x37
     c78:	8e ab       	std	Y+54, r24	; 0x36
     c7a:	0f c0       	rjmp	.+30     	; 0xc9a <trig_pulse+0x352>
     c7c:	8a ef       	ldi	r24, 0xFA	; 250
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	99 af       	std	Y+57, r25	; 0x39
     c82:	88 af       	std	Y+56, r24	; 0x38
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c84:	88 ad       	ldd	r24, Y+56	; 0x38
     c86:	99 ad       	ldd	r25, Y+57	; 0x39
     c88:	01 97       	sbiw	r24, 0x01	; 1
     c8a:	f1 f7       	brne	.-4      	; 0xc88 <trig_pulse+0x340>
     c8c:	99 af       	std	Y+57, r25	; 0x39
     c8e:	88 af       	std	Y+56, r24	; 0x38
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c90:	8e a9       	ldd	r24, Y+54	; 0x36
     c92:	9f a9       	ldd	r25, Y+55	; 0x37
     c94:	01 97       	sbiw	r24, 0x01	; 1
     c96:	9f ab       	std	Y+55, r25	; 0x37
     c98:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c9a:	8e a9       	ldd	r24, Y+54	; 0x36
     c9c:	9f a9       	ldd	r25, Y+55	; 0x37
     c9e:	89 2b       	or	r24, r25
     ca0:	69 f7       	brne	.-38     	; 0xc7c <trig_pulse+0x334>
     ca2:	3f c0       	rjmp	.+126    	; 0xd22 <trig_pulse+0x3da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ca4:	6a a9       	ldd	r22, Y+50	; 0x32
     ca6:	7b a9       	ldd	r23, Y+51	; 0x33
     ca8:	8c a9       	ldd	r24, Y+52	; 0x34
     caa:	9d a9       	ldd	r25, Y+53	; 0x35
     cac:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <__fixunssfsi>
     cb0:	dc 01       	movw	r26, r24
     cb2:	cb 01       	movw	r24, r22
     cb4:	9f ab       	std	Y+55, r25	; 0x37
     cb6:	8e ab       	std	Y+54, r24	; 0x36
     cb8:	8e a9       	ldd	r24, Y+54	; 0x36
     cba:	9f a9       	ldd	r25, Y+55	; 0x37
     cbc:	9b af       	std	Y+59, r25	; 0x3b
     cbe:	8a af       	std	Y+58, r24	; 0x3a
     cc0:	8a ad       	ldd	r24, Y+58	; 0x3a
     cc2:	9b ad       	ldd	r25, Y+59	; 0x3b
     cc4:	01 97       	sbiw	r24, 0x01	; 1
     cc6:	f1 f7       	brne	.-4      	; 0xcc4 <trig_pulse+0x37c>
     cc8:	9b af       	std	Y+59, r25	; 0x3b
     cca:	8a af       	std	Y+58, r24	; 0x3a
     ccc:	2a c0       	rjmp	.+84     	; 0xd22 <trig_pulse+0x3da>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     cce:	20 e0       	ldi	r18, 0x00	; 0
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	4f e7       	ldi	r20, 0x7F	; 127
     cd4:	53 e4       	ldi	r21, 0x43	; 67
     cd6:	6d a1       	ldd	r22, Y+37	; 0x25
     cd8:	7e a1       	ldd	r23, Y+38	; 0x26
     cda:	8f a1       	ldd	r24, Y+39	; 0x27
     cdc:	98 a5       	ldd	r25, Y+40	; 0x28
     cde:	0e 94 75 1f 	call	0x3eea	; 0x3eea <__gesf2>
     ce2:	18 16       	cp	r1, r24
     ce4:	ac f4       	brge	.+42     	; 0xd10 <trig_pulse+0x3c8>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     ce6:	69 a5       	ldd	r22, Y+41	; 0x29
     ce8:	7a a5       	ldd	r23, Y+42	; 0x2a
     cea:	8b a5       	ldd	r24, Y+43	; 0x2b
     cec:	9c a5       	ldd	r25, Y+44	; 0x2c
     cee:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <__fixunssfsi>
     cf2:	dc 01       	movw	r26, r24
     cf4:	cb 01       	movw	r24, r22
     cf6:	9d af       	std	Y+61, r25	; 0x3d
     cf8:	8c af       	std	Y+60, r24	; 0x3c
     cfa:	8c ad       	ldd	r24, Y+60	; 0x3c
     cfc:	9d ad       	ldd	r25, Y+61	; 0x3d
     cfe:	9f af       	std	Y+63, r25	; 0x3f
     d00:	8e af       	std	Y+62, r24	; 0x3e
     d02:	8e ad       	ldd	r24, Y+62	; 0x3e
     d04:	9f ad       	ldd	r25, Y+63	; 0x3f
     d06:	01 97       	sbiw	r24, 0x01	; 1
     d08:	f1 f7       	brne	.-4      	; 0xd06 <trig_pulse+0x3be>
     d0a:	9f af       	std	Y+63, r25	; 0x3f
     d0c:	8e af       	std	Y+62, r24	; 0x3e
     d0e:	1c c0       	rjmp	.+56     	; 0xd48 <trig_pulse+0x400>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     d10:	6d a1       	ldd	r22, Y+37	; 0x25
     d12:	7e a1       	ldd	r23, Y+38	; 0x26
     d14:	8f a1       	ldd	r24, Y+39	; 0x27
     d16:	98 a5       	ldd	r25, Y+40	; 0x28
     d18:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <__fixunssfsi>
     d1c:	dc 01       	movw	r26, r24
     d1e:	cb 01       	movw	r24, r22
     d20:	8d a7       	std	Y+45, r24	; 0x2d
     d22:	2d a5       	ldd	r18, Y+45	; 0x2d
     d24:	ce 01       	movw	r24, r28
     d26:	80 5c       	subi	r24, 0xC0	; 192
     d28:	9f 4f       	sbci	r25, 0xFF	; 255
     d2a:	fc 01       	movw	r30, r24
     d2c:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     d2e:	ce 01       	movw	r24, r28
     d30:	80 5c       	subi	r24, 0xC0	; 192
     d32:	9f 4f       	sbci	r25, 0xFF	; 255
     d34:	fc 01       	movw	r30, r24
     d36:	80 81       	ld	r24, Z
     d38:	28 2f       	mov	r18, r24
     d3a:	2a 95       	dec	r18
     d3c:	f1 f7       	brne	.-4      	; 0xd3a <trig_pulse+0x3f2>
     d3e:	ce 01       	movw	r24, r28
     d40:	80 5c       	subi	r24, 0xC0	; 192
     d42:	9f 4f       	sbci	r25, 0xFF	; 255
     d44:	fc 01       	movw	r30, r24
     d46:	20 83       	st	Z, r18
	_delay_us(12);				// Send high pulse for minimum 10us
	dist_trig_off()				// Clear pin
     d48:	61 e0       	ldi	r22, 0x01	; 1
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <gpio_write_pin>
     d50:	9e 01       	movw	r18, r28
     d52:	2f 5b       	subi	r18, 0xBF	; 191
     d54:	3f 4f       	sbci	r19, 0xFF	; 255
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	a0 e8       	ldi	r26, 0x80	; 128
     d5c:	bf e3       	ldi	r27, 0x3F	; 63
     d5e:	f9 01       	movw	r30, r18
     d60:	80 83       	st	Z, r24
     d62:	91 83       	std	Z+1, r25	; 0x01
     d64:	a2 83       	std	Z+2, r26	; 0x02
     d66:	b3 83       	std	Z+3, r27	; 0x03
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
     d68:	8e 01       	movw	r16, r28
     d6a:	0b 5b       	subi	r16, 0xBB	; 187
     d6c:	1f 4f       	sbci	r17, 0xFF	; 255
     d6e:	ce 01       	movw	r24, r28
     d70:	8f 5b       	subi	r24, 0xBF	; 191
     d72:	9f 4f       	sbci	r25, 0xFF	; 255
     d74:	25 e5       	ldi	r18, 0x55	; 85
     d76:	35 e5       	ldi	r19, 0x55	; 85
     d78:	45 e5       	ldi	r20, 0x55	; 85
     d7a:	50 e4       	ldi	r21, 0x40	; 64
     d7c:	fc 01       	movw	r30, r24
     d7e:	60 81       	ld	r22, Z
     d80:	71 81       	ldd	r23, Z+1	; 0x01
     d82:	82 81       	ldd	r24, Z+2	; 0x02
     d84:	93 81       	ldd	r25, Z+3	; 0x03
     d86:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__mulsf3>
     d8a:	dc 01       	movw	r26, r24
     d8c:	cb 01       	movw	r24, r22
     d8e:	f8 01       	movw	r30, r16
     d90:	80 83       	st	Z, r24
     d92:	91 83       	std	Z+1, r25	; 0x01
     d94:	a2 83       	std	Z+2, r26	; 0x02
     d96:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
     d98:	8e 01       	movw	r16, r28
     d9a:	07 5b       	subi	r16, 0xB7	; 183
     d9c:	1f 4f       	sbci	r17, 0xFF	; 255
     d9e:	ce 01       	movw	r24, r28
     da0:	8f 5b       	subi	r24, 0xBF	; 191
     da2:	9f 4f       	sbci	r25, 0xFF	; 255
     da4:	20 e0       	ldi	r18, 0x00	; 0
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	40 e2       	ldi	r20, 0x20	; 32
     daa:	50 e4       	ldi	r21, 0x40	; 64
     dac:	fc 01       	movw	r30, r24
     dae:	60 81       	ld	r22, Z
     db0:	71 81       	ldd	r23, Z+1	; 0x01
     db2:	82 81       	ldd	r24, Z+2	; 0x02
     db4:	93 81       	ldd	r25, Z+3	; 0x03
     db6:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__mulsf3>
     dba:	dc 01       	movw	r26, r24
     dbc:	cb 01       	movw	r24, r22
     dbe:	f8 01       	movw	r30, r16
     dc0:	80 83       	st	Z, r24
     dc2:	91 83       	std	Z+1, r25	; 0x01
     dc4:	a2 83       	std	Z+2, r26	; 0x02
     dc6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     dc8:	ce 01       	movw	r24, r28
     dca:	8b 5b       	subi	r24, 0xBB	; 187
     dcc:	9f 4f       	sbci	r25, 0xFF	; 255
     dce:	20 e0       	ldi	r18, 0x00	; 0
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	40 e8       	ldi	r20, 0x80	; 128
     dd4:	5f e3       	ldi	r21, 0x3F	; 63
     dd6:	fc 01       	movw	r30, r24
     dd8:	60 81       	ld	r22, Z
     dda:	71 81       	ldd	r23, Z+1	; 0x01
     ddc:	82 81       	ldd	r24, Z+2	; 0x02
     dde:	93 81       	ldd	r25, Z+3	; 0x03
     de0:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <__cmpsf2>
     de4:	88 23       	and	r24, r24
     de6:	3c f4       	brge	.+14     	; 0xdf6 <trig_pulse+0x4ae>
		__ticks = 1;
     de8:	ce 01       	movw	r24, r28
     dea:	83 5b       	subi	r24, 0xB3	; 179
     dec:	9f 4f       	sbci	r25, 0xFF	; 255
     dee:	21 e0       	ldi	r18, 0x01	; 1
     df0:	fc 01       	movw	r30, r24
     df2:	20 83       	st	Z, r18
     df4:	30 c1       	rjmp	.+608    	; 0x1056 <trig_pulse+0x70e>
	else if (__tmp2 > 65535)
     df6:	ce 01       	movw	r24, r28
     df8:	87 5b       	subi	r24, 0xB7	; 183
     dfa:	9f 4f       	sbci	r25, 0xFF	; 255
     dfc:	20 e0       	ldi	r18, 0x00	; 0
     dfe:	3f ef       	ldi	r19, 0xFF	; 255
     e00:	4f e7       	ldi	r20, 0x7F	; 127
     e02:	57 e4       	ldi	r21, 0x47	; 71
     e04:	fc 01       	movw	r30, r24
     e06:	60 81       	ld	r22, Z
     e08:	71 81       	ldd	r23, Z+1	; 0x01
     e0a:	82 81       	ldd	r24, Z+2	; 0x02
     e0c:	93 81       	ldd	r25, Z+3	; 0x03
     e0e:	0e 94 75 1f 	call	0x3eea	; 0x3eea <__gesf2>
     e12:	18 16       	cp	r1, r24
     e14:	0c f0       	brlt	.+2      	; 0xe18 <trig_pulse+0x4d0>
     e16:	d1 c0       	rjmp	.+418    	; 0xfba <trig_pulse+0x672>
	{
		_delay_ms(__us / 1000.0);
     e18:	ce 01       	movw	r24, r28
     e1a:	8f 5b       	subi	r24, 0xBF	; 191
     e1c:	9f 4f       	sbci	r25, 0xFF	; 255
     e1e:	20 e0       	ldi	r18, 0x00	; 0
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	4a e7       	ldi	r20, 0x7A	; 122
     e24:	54 e4       	ldi	r21, 0x44	; 68
     e26:	fc 01       	movw	r30, r24
     e28:	60 81       	ld	r22, Z
     e2a:	71 81       	ldd	r23, Z+1	; 0x01
     e2c:	82 81       	ldd	r24, Z+2	; 0x02
     e2e:	93 81       	ldd	r25, Z+3	; 0x03
     e30:	0e 94 1b 1e 	call	0x3c36	; 0x3c36 <__divsf3>
     e34:	dc 01       	movw	r26, r24
     e36:	cb 01       	movw	r24, r22
     e38:	9e 01       	movw	r18, r28
     e3a:	22 5b       	subi	r18, 0xB2	; 178
     e3c:	3f 4f       	sbci	r19, 0xFF	; 255
     e3e:	f9 01       	movw	r30, r18
     e40:	80 83       	st	Z, r24
     e42:	91 83       	std	Z+1, r25	; 0x01
     e44:	a2 83       	std	Z+2, r26	; 0x02
     e46:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     e48:	8e 01       	movw	r16, r28
     e4a:	0e 5a       	subi	r16, 0xAE	; 174
     e4c:	1f 4f       	sbci	r17, 0xFF	; 255
     e4e:	ce 01       	movw	r24, r28
     e50:	82 5b       	subi	r24, 0xB2	; 178
     e52:	9f 4f       	sbci	r25, 0xFF	; 255
     e54:	20 e0       	ldi	r18, 0x00	; 0
     e56:	30 e4       	ldi	r19, 0x40	; 64
     e58:	4c e1       	ldi	r20, 0x1C	; 28
     e5a:	55 e4       	ldi	r21, 0x45	; 69
     e5c:	fc 01       	movw	r30, r24
     e5e:	60 81       	ld	r22, Z
     e60:	71 81       	ldd	r23, Z+1	; 0x01
     e62:	82 81       	ldd	r24, Z+2	; 0x02
     e64:	93 81       	ldd	r25, Z+3	; 0x03
     e66:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__mulsf3>
     e6a:	dc 01       	movw	r26, r24
     e6c:	cb 01       	movw	r24, r22
     e6e:	f8 01       	movw	r30, r16
     e70:	80 83       	st	Z, r24
     e72:	91 83       	std	Z+1, r25	; 0x01
     e74:	a2 83       	std	Z+2, r26	; 0x02
     e76:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e78:	ce 01       	movw	r24, r28
     e7a:	8e 5a       	subi	r24, 0xAE	; 174
     e7c:	9f 4f       	sbci	r25, 0xFF	; 255
     e7e:	20 e0       	ldi	r18, 0x00	; 0
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	40 e8       	ldi	r20, 0x80	; 128
     e84:	5f e3       	ldi	r21, 0x3F	; 63
     e86:	fc 01       	movw	r30, r24
     e88:	60 81       	ld	r22, Z
     e8a:	71 81       	ldd	r23, Z+1	; 0x01
     e8c:	82 81       	ldd	r24, Z+2	; 0x02
     e8e:	93 81       	ldd	r25, Z+3	; 0x03
     e90:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <__cmpsf2>
     e94:	88 23       	and	r24, r24
     e96:	4c f4       	brge	.+18     	; 0xeaa <trig_pulse+0x562>
		__ticks = 1;
     e98:	ce 01       	movw	r24, r28
     e9a:	8a 5a       	subi	r24, 0xAA	; 170
     e9c:	9f 4f       	sbci	r25, 0xFF	; 255
     e9e:	21 e0       	ldi	r18, 0x01	; 1
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	fc 01       	movw	r30, r24
     ea4:	31 83       	std	Z+1, r19	; 0x01
     ea6:	20 83       	st	Z, r18
     ea8:	6d c0       	rjmp	.+218    	; 0xf84 <trig_pulse+0x63c>
	else if (__tmp > 65535)
     eaa:	ce 01       	movw	r24, r28
     eac:	8e 5a       	subi	r24, 0xAE	; 174
     eae:	9f 4f       	sbci	r25, 0xFF	; 255
     eb0:	20 e0       	ldi	r18, 0x00	; 0
     eb2:	3f ef       	ldi	r19, 0xFF	; 255
     eb4:	4f e7       	ldi	r20, 0x7F	; 127
     eb6:	57 e4       	ldi	r21, 0x47	; 71
     eb8:	fc 01       	movw	r30, r24
     eba:	60 81       	ld	r22, Z
     ebc:	71 81       	ldd	r23, Z+1	; 0x01
     ebe:	82 81       	ldd	r24, Z+2	; 0x02
     ec0:	93 81       	ldd	r25, Z+3	; 0x03
     ec2:	0e 94 75 1f 	call	0x3eea	; 0x3eea <__gesf2>
     ec6:	18 16       	cp	r1, r24
     ec8:	0c f0       	brlt	.+2      	; 0xecc <trig_pulse+0x584>
     eca:	4a c0       	rjmp	.+148    	; 0xf60 <trig_pulse+0x618>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ecc:	ce 01       	movw	r24, r28
     ece:	82 5b       	subi	r24, 0xB2	; 178
     ed0:	9f 4f       	sbci	r25, 0xFF	; 255
     ed2:	20 e0       	ldi	r18, 0x00	; 0
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	40 e2       	ldi	r20, 0x20	; 32
     ed8:	51 e4       	ldi	r21, 0x41	; 65
     eda:	fc 01       	movw	r30, r24
     edc:	60 81       	ld	r22, Z
     ede:	71 81       	ldd	r23, Z+1	; 0x01
     ee0:	82 81       	ldd	r24, Z+2	; 0x02
     ee2:	93 81       	ldd	r25, Z+3	; 0x03
     ee4:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__mulsf3>
     ee8:	dc 01       	movw	r26, r24
     eea:	cb 01       	movw	r24, r22
     eec:	8e 01       	movw	r16, r28
     eee:	0a 5a       	subi	r16, 0xAA	; 170
     ef0:	1f 4f       	sbci	r17, 0xFF	; 255
     ef2:	bc 01       	movw	r22, r24
     ef4:	cd 01       	movw	r24, r26
     ef6:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <__fixunssfsi>
     efa:	dc 01       	movw	r26, r24
     efc:	cb 01       	movw	r24, r22
     efe:	f8 01       	movw	r30, r16
     f00:	91 83       	std	Z+1, r25	; 0x01
     f02:	80 83       	st	Z, r24
     f04:	24 c0       	rjmp	.+72     	; 0xf4e <trig_pulse+0x606>
     f06:	ce 01       	movw	r24, r28
     f08:	88 5a       	subi	r24, 0xA8	; 168
     f0a:	9f 4f       	sbci	r25, 0xFF	; 255
     f0c:	2a ef       	ldi	r18, 0xFA	; 250
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	fc 01       	movw	r30, r24
     f12:	31 83       	std	Z+1, r19	; 0x01
     f14:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f16:	ce 01       	movw	r24, r28
     f18:	88 5a       	subi	r24, 0xA8	; 168
     f1a:	9f 4f       	sbci	r25, 0xFF	; 255
     f1c:	fc 01       	movw	r30, r24
     f1e:	80 81       	ld	r24, Z
     f20:	91 81       	ldd	r25, Z+1	; 0x01
     f22:	01 97       	sbiw	r24, 0x01	; 1
     f24:	f1 f7       	brne	.-4      	; 0xf22 <trig_pulse+0x5da>
     f26:	9e 01       	movw	r18, r28
     f28:	28 5a       	subi	r18, 0xA8	; 168
     f2a:	3f 4f       	sbci	r19, 0xFF	; 255
     f2c:	f9 01       	movw	r30, r18
     f2e:	91 83       	std	Z+1, r25	; 0x01
     f30:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f32:	ce 01       	movw	r24, r28
     f34:	8a 5a       	subi	r24, 0xAA	; 170
     f36:	9f 4f       	sbci	r25, 0xFF	; 255
     f38:	9e 01       	movw	r18, r28
     f3a:	2a 5a       	subi	r18, 0xAA	; 170
     f3c:	3f 4f       	sbci	r19, 0xFF	; 255
     f3e:	f9 01       	movw	r30, r18
     f40:	20 81       	ld	r18, Z
     f42:	31 81       	ldd	r19, Z+1	; 0x01
     f44:	21 50       	subi	r18, 0x01	; 1
     f46:	31 09       	sbc	r19, r1
     f48:	fc 01       	movw	r30, r24
     f4a:	31 83       	std	Z+1, r19	; 0x01
     f4c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f4e:	ce 01       	movw	r24, r28
     f50:	8a 5a       	subi	r24, 0xAA	; 170
     f52:	9f 4f       	sbci	r25, 0xFF	; 255
     f54:	fc 01       	movw	r30, r24
     f56:	80 81       	ld	r24, Z
     f58:	91 81       	ldd	r25, Z+1	; 0x01
     f5a:	89 2b       	or	r24, r25
     f5c:	a1 f6       	brne	.-88     	; 0xf06 <trig_pulse+0x5be>
     f5e:	7b c0       	rjmp	.+246    	; 0x1056 <trig_pulse+0x70e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f60:	8e 01       	movw	r16, r28
     f62:	0a 5a       	subi	r16, 0xAA	; 170
     f64:	1f 4f       	sbci	r17, 0xFF	; 255
     f66:	ce 01       	movw	r24, r28
     f68:	8e 5a       	subi	r24, 0xAE	; 174
     f6a:	9f 4f       	sbci	r25, 0xFF	; 255
     f6c:	fc 01       	movw	r30, r24
     f6e:	60 81       	ld	r22, Z
     f70:	71 81       	ldd	r23, Z+1	; 0x01
     f72:	82 81       	ldd	r24, Z+2	; 0x02
     f74:	93 81       	ldd	r25, Z+3	; 0x03
     f76:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <__fixunssfsi>
     f7a:	dc 01       	movw	r26, r24
     f7c:	cb 01       	movw	r24, r22
     f7e:	f8 01       	movw	r30, r16
     f80:	91 83       	std	Z+1, r25	; 0x01
     f82:	80 83       	st	Z, r24
     f84:	ce 01       	movw	r24, r28
     f86:	86 5a       	subi	r24, 0xA6	; 166
     f88:	9f 4f       	sbci	r25, 0xFF	; 255
     f8a:	9e 01       	movw	r18, r28
     f8c:	2a 5a       	subi	r18, 0xAA	; 170
     f8e:	3f 4f       	sbci	r19, 0xFF	; 255
     f90:	f9 01       	movw	r30, r18
     f92:	20 81       	ld	r18, Z
     f94:	31 81       	ldd	r19, Z+1	; 0x01
     f96:	fc 01       	movw	r30, r24
     f98:	31 83       	std	Z+1, r19	; 0x01
     f9a:	20 83       	st	Z, r18
     f9c:	ce 01       	movw	r24, r28
     f9e:	86 5a       	subi	r24, 0xA6	; 166
     fa0:	9f 4f       	sbci	r25, 0xFF	; 255
     fa2:	fc 01       	movw	r30, r24
     fa4:	80 81       	ld	r24, Z
     fa6:	91 81       	ldd	r25, Z+1	; 0x01
     fa8:	01 97       	sbiw	r24, 0x01	; 1
     faa:	f1 f7       	brne	.-4      	; 0xfa8 <trig_pulse+0x660>
     fac:	9e 01       	movw	r18, r28
     fae:	26 5a       	subi	r18, 0xA6	; 166
     fb0:	3f 4f       	sbci	r19, 0xFF	; 255
     fb2:	f9 01       	movw	r30, r18
     fb4:	91 83       	std	Z+1, r25	; 0x01
     fb6:	80 83       	st	Z, r24
     fb8:	4e c0       	rjmp	.+156    	; 0x1056 <trig_pulse+0x70e>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     fba:	ce 01       	movw	r24, r28
     fbc:	8b 5b       	subi	r24, 0xBB	; 187
     fbe:	9f 4f       	sbci	r25, 0xFF	; 255
     fc0:	20 e0       	ldi	r18, 0x00	; 0
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	4f e7       	ldi	r20, 0x7F	; 127
     fc6:	53 e4       	ldi	r21, 0x43	; 67
     fc8:	fc 01       	movw	r30, r24
     fca:	60 81       	ld	r22, Z
     fcc:	71 81       	ldd	r23, Z+1	; 0x01
     fce:	82 81       	ldd	r24, Z+2	; 0x02
     fd0:	93 81       	ldd	r25, Z+3	; 0x03
     fd2:	0e 94 75 1f 	call	0x3eea	; 0x3eea <__gesf2>
     fd6:	18 16       	cp	r1, r24
     fd8:	6c f5       	brge	.+90     	; 0x1034 <trig_pulse+0x6ec>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     fda:	8e 01       	movw	r16, r28
     fdc:	04 5a       	subi	r16, 0xA4	; 164
     fde:	1f 4f       	sbci	r17, 0xFF	; 255
     fe0:	ce 01       	movw	r24, r28
     fe2:	87 5b       	subi	r24, 0xB7	; 183
     fe4:	9f 4f       	sbci	r25, 0xFF	; 255
     fe6:	fc 01       	movw	r30, r24
     fe8:	60 81       	ld	r22, Z
     fea:	71 81       	ldd	r23, Z+1	; 0x01
     fec:	82 81       	ldd	r24, Z+2	; 0x02
     fee:	93 81       	ldd	r25, Z+3	; 0x03
     ff0:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <__fixunssfsi>
     ff4:	dc 01       	movw	r26, r24
     ff6:	cb 01       	movw	r24, r22
     ff8:	f8 01       	movw	r30, r16
     ffa:	91 83       	std	Z+1, r25	; 0x01
     ffc:	80 83       	st	Z, r24
     ffe:	ce 01       	movw	r24, r28
    1000:	82 5a       	subi	r24, 0xA2	; 162
    1002:	9f 4f       	sbci	r25, 0xFF	; 255
    1004:	9e 01       	movw	r18, r28
    1006:	24 5a       	subi	r18, 0xA4	; 164
    1008:	3f 4f       	sbci	r19, 0xFF	; 255
    100a:	f9 01       	movw	r30, r18
    100c:	20 81       	ld	r18, Z
    100e:	31 81       	ldd	r19, Z+1	; 0x01
    1010:	fc 01       	movw	r30, r24
    1012:	31 83       	std	Z+1, r19	; 0x01
    1014:	20 83       	st	Z, r18
    1016:	ce 01       	movw	r24, r28
    1018:	82 5a       	subi	r24, 0xA2	; 162
    101a:	9f 4f       	sbci	r25, 0xFF	; 255
    101c:	fc 01       	movw	r30, r24
    101e:	80 81       	ld	r24, Z
    1020:	91 81       	ldd	r25, Z+1	; 0x01
    1022:	01 97       	sbiw	r24, 0x01	; 1
    1024:	f1 f7       	brne	.-4      	; 0x1022 <trig_pulse+0x6da>
    1026:	9e 01       	movw	r18, r28
    1028:	22 5a       	subi	r18, 0xA2	; 162
    102a:	3f 4f       	sbci	r19, 0xFF	; 255
    102c:	f9 01       	movw	r30, r18
    102e:	91 83       	std	Z+1, r25	; 0x01
    1030:	80 83       	st	Z, r24
    1032:	28 c0       	rjmp	.+80     	; 0x1084 <trig_pulse+0x73c>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1034:	8e 01       	movw	r16, r28
    1036:	03 5b       	subi	r16, 0xB3	; 179
    1038:	1f 4f       	sbci	r17, 0xFF	; 255
    103a:	ce 01       	movw	r24, r28
    103c:	8b 5b       	subi	r24, 0xBB	; 187
    103e:	9f 4f       	sbci	r25, 0xFF	; 255
    1040:	fc 01       	movw	r30, r24
    1042:	60 81       	ld	r22, Z
    1044:	71 81       	ldd	r23, Z+1	; 0x01
    1046:	82 81       	ldd	r24, Z+2	; 0x02
    1048:	93 81       	ldd	r25, Z+3	; 0x03
    104a:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <__fixunssfsi>
    104e:	dc 01       	movw	r26, r24
    1050:	cb 01       	movw	r24, r22
    1052:	f8 01       	movw	r30, r16
    1054:	80 83       	st	Z, r24
    1056:	ce 01       	movw	r24, r28
    1058:	80 5a       	subi	r24, 0xA0	; 160
    105a:	9f 4f       	sbci	r25, 0xFF	; 255
    105c:	9e 01       	movw	r18, r28
    105e:	23 5b       	subi	r18, 0xB3	; 179
    1060:	3f 4f       	sbci	r19, 0xFF	; 255
    1062:	f9 01       	movw	r30, r18
    1064:	20 81       	ld	r18, Z
    1066:	fc 01       	movw	r30, r24
    1068:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    106a:	ce 01       	movw	r24, r28
    106c:	80 5a       	subi	r24, 0xA0	; 160
    106e:	9f 4f       	sbci	r25, 0xFF	; 255
    1070:	fc 01       	movw	r30, r24
    1072:	80 81       	ld	r24, Z
    1074:	28 2f       	mov	r18, r24
    1076:	2a 95       	dec	r18
    1078:	f1 f7       	brne	.-4      	; 0x1076 <trig_pulse+0x72e>
    107a:	ce 01       	movw	r24, r28
    107c:	80 5a       	subi	r24, 0xA0	; 160
    107e:	9f 4f       	sbci	r25, 0xFF	; 255
    1080:	fc 01       	movw	r30, r24
    1082:	20 83       	st	Z, r18
	_delay_us(1);				// Delay not required, but just in case...
}
    1084:	c0 5a       	subi	r28, 0xA0	; 160
    1086:	df 4f       	sbci	r29, 0xFF	; 255
    1088:	0f b6       	in	r0, 0x3f	; 63
    108a:	f8 94       	cli
    108c:	de bf       	out	0x3e, r29	; 62
    108e:	0f be       	out	0x3f, r0	; 63
    1090:	cd bf       	out	0x3d, r28	; 61
    1092:	df 91       	pop	r29
    1094:	cf 91       	pop	r28
    1096:	1f 91       	pop	r17
    1098:	0f 91       	pop	r16
    109a:	08 95       	ret

0000109c <distance_sensor>:
/*
 *	Function: 		unsigned int distance_sensor()
 *	Description: 	returns the distance sensor read value
 */
unsigned int distance_sensor()
{
    109c:	cf 93       	push	r28
    109e:	df 93       	push	r29
    10a0:	cd b7       	in	r28, 0x3d	; 61
    10a2:	de b7       	in	r29, 0x3e	; 62
    10a4:	28 97       	sbiw	r28, 0x08	; 8
    10a6:	0f b6       	in	r0, 0x3f	; 63
    10a8:	f8 94       	cli
    10aa:	de bf       	out	0x3e, r29	; 62
    10ac:	0f be       	out	0x3f, r0	; 63
    10ae:	cd bf       	out	0x3d, r28	; 61

	trig_pulse();														// Sending the pulse
    10b0:	0e 94 a4 04 	call	0x948	; 0x948 <trig_pulse>

	while(!(gpio_read_pin(DIST_ECHO_PIN)))								// While echo pin is low (so no feedback)
    10b4:	2f c0       	rjmp	.+94     	; 0x1114 <__stack+0x15>
	{
		dist_trig_counter++;
    10b6:	80 91 42 01 	lds	r24, 0x0142
    10ba:	90 91 43 01 	lds	r25, 0x0143
    10be:	a0 91 44 01 	lds	r26, 0x0144
    10c2:	b0 91 45 01 	lds	r27, 0x0145
    10c6:	01 96       	adiw	r24, 0x01	; 1
    10c8:	a1 1d       	adc	r26, r1
    10ca:	b1 1d       	adc	r27, r1
    10cc:	80 93 42 01 	sts	0x0142, r24
    10d0:	90 93 43 01 	sts	0x0143, r25
    10d4:	a0 93 44 01 	sts	0x0144, r26
    10d8:	b0 93 45 01 	sts	0x0145, r27
		uint32_t max_response_time = DIST_SENSOR_TIMOUT;				// getting timeout
    10dc:	84 e1       	ldi	r24, 0x14	; 20
    10de:	9f e8       	ldi	r25, 0x8F	; 143
    10e0:	a3 e0       	ldi	r26, 0x03	; 3
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	89 83       	std	Y+1, r24	; 0x01
    10e6:	9a 83       	std	Y+2, r25	; 0x02
    10e8:	ab 83       	std	Y+3, r26	; 0x03
    10ea:	bc 83       	std	Y+4, r27	; 0x04
		if(dist_trig_counter > max_response_time)						// timeoued
    10ec:	20 91 42 01 	lds	r18, 0x0142
    10f0:	30 91 43 01 	lds	r19, 0x0143
    10f4:	40 91 44 01 	lds	r20, 0x0144
    10f8:	50 91 45 01 	lds	r21, 0x0145
    10fc:	89 81       	ldd	r24, Y+1	; 0x01
    10fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1100:	ab 81       	ldd	r26, Y+3	; 0x03
    1102:	bc 81       	ldd	r27, Y+4	; 0x04
    1104:	82 17       	cp	r24, r18
    1106:	93 07       	cpc	r25, r19
    1108:	a4 07       	cpc	r26, r20
    110a:	b5 07       	cpc	r27, r21
    110c:	18 f4       	brcc	.+6      	; 0x1114 <__stack+0x15>
			return TRIG_ERROR;
    110e:	8f ef       	ldi	r24, 0xFF	; 255
    1110:	9f ef       	ldi	r25, 0xFF	; 255
    1112:	87 c0       	rjmp	.+270    	; 0x1222 <__stack+0x123>
unsigned int distance_sensor()
{

	trig_pulse();														// Sending the pulse

	while(!(gpio_read_pin(DIST_ECHO_PIN)))								// While echo pin is low (so no feedback)
    1114:	80 e0       	ldi	r24, 0x00	; 0
    1116:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <gpio_read_pin>
    111a:	88 23       	and	r24, r24
    111c:	61 f2       	breq	.-104    	; 0x10b6 <distance_sensor+0x1a>
		uint32_t max_response_time = DIST_SENSOR_TIMOUT;				// getting timeout
		if(dist_trig_counter > max_response_time)						// timeoued
			return TRIG_ERROR;
	}

	TCNT2 = 0;															// reseting the timer
    111e:	82 eb       	ldi	r24, 0xB2	; 178
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	fc 01       	movw	r30, r24
    1124:	10 82       	st	Z, r1
	TCCR2A |= (1 << CS20);												// no prescaler
    1126:	80 eb       	ldi	r24, 0xB0	; 176
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	20 eb       	ldi	r18, 0xB0	; 176
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	f9 01       	movw	r30, r18
    1130:	20 81       	ld	r18, Z
    1132:	21 60       	ori	r18, 0x01	; 1
    1134:	fc 01       	movw	r30, r24
    1136:	20 83       	st	Z, r18
	TIMSK2 |= (1 << TOIE2);												// interrupt overflow
    1138:	80 e7       	ldi	r24, 0x70	; 112
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	20 e7       	ldi	r18, 0x70	; 112
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	f9 01       	movw	r30, r18
    1142:	20 81       	ld	r18, Z
    1144:	21 60       	ori	r18, 0x01	; 1
    1146:	fc 01       	movw	r30, r24
    1148:	20 83       	st	Z, r18
	dist_overflow_counter = 0;
    114a:	10 92 3e 01 	sts	0x013E, r1
    114e:	10 92 3f 01 	sts	0x013F, r1
    1152:	10 92 40 01 	sts	0x0140, r1
    1156:	10 92 41 01 	sts	0x0141, r1
	sei();																// enable global interupts
    115a:	78 94       	sei

	while(gpio_read_pin(DIST_ECHO_PIN))									// getting echo
    115c:	23 c0       	rjmp	.+70     	; 0x11a4 <__stack+0xa5>
	{
		if(((dist_overflow_counter*TIMER_MAX) + TCNT2) > DIST_SENSOR_TIMOUT)
    115e:	20 91 3e 01 	lds	r18, 0x013E
    1162:	30 91 3f 01 	lds	r19, 0x013F
    1166:	40 91 40 01 	lds	r20, 0x0140
    116a:	50 91 41 01 	lds	r21, 0x0141
    116e:	8f ef       	ldi	r24, 0xFF	; 255
    1170:	9f ef       	ldi	r25, 0xFF	; 255
    1172:	dc 01       	movw	r26, r24
    1174:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <__muluhisi3>
    1178:	9b 01       	movw	r18, r22
    117a:	ac 01       	movw	r20, r24
    117c:	82 eb       	ldi	r24, 0xB2	; 178
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	fc 01       	movw	r30, r24
    1182:	80 81       	ld	r24, Z
    1184:	88 2f       	mov	r24, r24
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	a0 e0       	ldi	r26, 0x00	; 0
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	82 0f       	add	r24, r18
    118e:	93 1f       	adc	r25, r19
    1190:	a4 1f       	adc	r26, r20
    1192:	b5 1f       	adc	r27, r21
    1194:	85 31       	cpi	r24, 0x15	; 21
    1196:	9f 48       	sbci	r25, 0x8F	; 143
    1198:	a3 40       	sbci	r26, 0x03	; 3
    119a:	b1 05       	cpc	r27, r1
    119c:	18 f0       	brcs	.+6      	; 0x11a4 <__stack+0xa5>
			return ECHO_ERROR;
    119e:	8e ef       	ldi	r24, 0xFE	; 254
    11a0:	9f ef       	ldi	r25, 0xFF	; 255
    11a2:	3f c0       	rjmp	.+126    	; 0x1222 <__stack+0x123>
	TCCR2A |= (1 << CS20);												// no prescaler
	TIMSK2 |= (1 << TOIE2);												// interrupt overflow
	dist_overflow_counter = 0;
	sei();																// enable global interupts

	while(gpio_read_pin(DIST_ECHO_PIN))									// getting echo
    11a4:	80 e0       	ldi	r24, 0x00	; 0
    11a6:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <gpio_read_pin>
    11aa:	88 23       	and	r24, r24
    11ac:	c1 f6       	brne	.-80     	; 0x115e <__stack+0x5f>
	{
		if(((dist_overflow_counter*TIMER_MAX) + TCNT2) > DIST_SENSOR_TIMOUT)
			return ECHO_ERROR;
	}

	TCCR2A = 0x00;														// stop the timer
    11ae:	80 eb       	ldi	r24, 0xB0	; 176
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	fc 01       	movw	r30, r24
    11b4:	10 82       	st	Z, r1
	cli();																// disable global int
    11b6:	f8 94       	cli
	dist_num_of_ticks = ((dist_overflow_counter * TIMER_MAX) + TCNT2);	// number of ticks
    11b8:	20 91 3e 01 	lds	r18, 0x013E
    11bc:	30 91 3f 01 	lds	r19, 0x013F
    11c0:	40 91 40 01 	lds	r20, 0x0140
    11c4:	50 91 41 01 	lds	r21, 0x0141
    11c8:	8f ef       	ldi	r24, 0xFF	; 255
    11ca:	9f ef       	ldi	r25, 0xFF	; 255
    11cc:	dc 01       	movw	r26, r24
    11ce:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <__muluhisi3>
    11d2:	9b 01       	movw	r18, r22
    11d4:	ac 01       	movw	r20, r24
    11d6:	82 eb       	ldi	r24, 0xB2	; 178
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	fc 01       	movw	r30, r24
    11dc:	80 81       	ld	r24, Z
    11de:	88 2f       	mov	r24, r24
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	a0 e0       	ldi	r26, 0x00	; 0
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	82 0f       	add	r24, r18
    11e8:	93 1f       	adc	r25, r19
    11ea:	a4 1f       	adc	r26, r20
    11ec:	b5 1f       	adc	r27, r21
    11ee:	80 93 46 01 	sts	0x0146, r24
    11f2:	90 93 47 01 	sts	0x0147, r25
    11f6:	a0 93 48 01 	sts	0x0148, r26
    11fa:	b0 93 49 01 	sts	0x0149, r27

	return (dist_num_of_ticks / (CONVERT_TO_CM * CYCLES_PER_US));
    11fe:	80 91 46 01 	lds	r24, 0x0146
    1202:	90 91 47 01 	lds	r25, 0x0147
    1206:	a0 91 48 01 	lds	r26, 0x0148
    120a:	b0 91 49 01 	lds	r27, 0x0149
    120e:	24 e4       	ldi	r18, 0x44	; 68
    1210:	32 e0       	ldi	r19, 0x02	; 2
    1212:	40 e0       	ldi	r20, 0x00	; 0
    1214:	50 e0       	ldi	r21, 0x00	; 0
    1216:	bc 01       	movw	r22, r24
    1218:	cd 01       	movw	r24, r26
    121a:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__udivmodsi4>
    121e:	da 01       	movw	r26, r20
    1220:	c9 01       	movw	r24, r18

}
    1222:	28 96       	adiw	r28, 0x08	; 8
    1224:	0f b6       	in	r0, 0x3f	; 63
    1226:	f8 94       	cli
    1228:	de bf       	out	0x3e, r29	; 62
    122a:	0f be       	out	0x3f, r0	; 63
    122c:	cd bf       	out	0x3d, r28	; 61
    122e:	df 91       	pop	r29
    1230:	cf 91       	pop	r28
    1232:	08 95       	ret

00001234 <blueside>:
	{{100,0},LOW_SPEED,FORWARD,NULL}
};


void blueside(void)
{
    1234:	cf 93       	push	r28
    1236:	df 93       	push	r29
    1238:	cd b7       	in	r28, 0x3d	; 61
    123a:	de b7       	in	r29, 0x3e	; 62
    123c:	2b 97       	sbiw	r28, 0x0b	; 11
    123e:	0f b6       	in	r0, 0x3f	; 63
    1240:	f8 94       	cli
    1242:	de bf       	out	0x3e, r29	; 62
    1244:	0f be       	out	0x3f, r0	; 63
    1246:	cd bf       	out	0x3d, r28	; 61
	struct odometry_position starting_position;
	uint8_t current_position = 0;
    1248:	19 82       	std	Y+1, r1	; 0x01
	uint8_t next_position = 0;
    124a:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t odometry_status;
	int8_t active_state = ROBOT_STATE_TACTIC_SIDE;
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	8b 83       	std	Y+3, r24	; 0x03

	starting_position.x		= 0;
    1250:	1e 82       	std	Y+6, r1	; 0x06
    1252:	1d 82       	std	Y+5, r1	; 0x05
	starting_position.y		= 0;
    1254:	18 86       	std	Y+8, r1	; 0x08
    1256:	1f 82       	std	Y+7, r1	; 0x07
	starting_position.angle = 0;
    1258:	1a 86       	std	Y+10, r1	; 0x0a
    125a:	19 86       	std	Y+9, r1	; 0x09

	odometry_set_position(&starting_position);
    125c:	ce 01       	movw	r24, r28
    125e:	05 96       	adiw	r24, 0x05	; 5
    1260:	0e 94 61 13 	call	0x26c2	; 0x26c2 <odometry_set_position>

	while(1)
	{
		switch(active_state)
    1264:	8b 81       	ldd	r24, Y+3	; 0x03
    1266:	08 2e       	mov	r0, r24
    1268:	00 0c       	add	r0, r0
    126a:	99 0b       	sbc	r25, r25
    126c:	81 30       	cpi	r24, 0x01	; 1
    126e:	91 05       	cpc	r25, r1
    1270:	21 f0       	breq	.+8      	; 0x127a <blueside+0x46>
    1272:	02 97       	sbiw	r24, 0x02	; 2
    1274:	09 f4       	brne	.+2      	; 0x1278 <blueside+0x44>
    1276:	3f c0       	rjmp	.+126    	; 0x12f6 <blueside+0xc2>
    1278:	7c c0       	rjmp	.+248    	; 0x1372 <blueside+0x13e>
		{
			case ROBOT_STATE_TACTIC_SIDE:
				for(current_position = next_position;current_position < TACTIC_SIDE_POSITION_COUNT; current_position++)
    127a:	8a 81       	ldd	r24, Y+2	; 0x02
    127c:	89 83       	std	Y+1, r24	; 0x01
    127e:	38 c0       	rjmp	.+112    	; 0x12f0 <blueside+0xbc>
				{
					odometry_status = odometry_move_to_position(&(blue_tactic_side_positions[current_position].point), blue_tactic_side_positions[current_position].speed,
    1280:	40 e0       	ldi	r20, 0x00	; 0
    1282:	50 e0       	ldi	r21, 0x00	; 0
    1284:	89 81       	ldd	r24, Y+1	; 0x01
    1286:	28 2f       	mov	r18, r24
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	6b e0       	ldi	r22, 0x0B	; 11
    128c:	62 9f       	mul	r22, r18
    128e:	c0 01       	movw	r24, r0
    1290:	63 9f       	mul	r22, r19
    1292:	90 0d       	add	r25, r0
    1294:	11 24       	eor	r1, r1
    1296:	87 5e       	subi	r24, 0xE7	; 231
    1298:	9e 4f       	sbci	r25, 0xFE	; 254
    129a:	dc 01       	movw	r26, r24
    129c:	ec 91       	ld	r30, X
    129e:	89 81       	ldd	r24, Y+1	; 0x01
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	6b e0       	ldi	r22, 0x0B	; 11
    12a6:	62 9f       	mul	r22, r18
    12a8:	c0 01       	movw	r24, r0
    12aa:	63 9f       	mul	r22, r19
    12ac:	90 0d       	add	r25, r0
    12ae:	11 24       	eor	r1, r1
    12b0:	88 5e       	subi	r24, 0xE8	; 232
    12b2:	9e 4f       	sbci	r25, 0xFE	; 254
    12b4:	dc 01       	movw	r26, r24
    12b6:	7c 91       	ld	r23, X
    12b8:	89 81       	ldd	r24, Y+1	; 0x01
    12ba:	28 2f       	mov	r18, r24
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	6b e0       	ldi	r22, 0x0B	; 11
    12c0:	62 9f       	mul	r22, r18
    12c2:	c0 01       	movw	r24, r0
    12c4:	63 9f       	mul	r22, r19
    12c6:	90 0d       	add	r25, r0
    12c8:	11 24       	eor	r1, r1
    12ca:	8f 5e       	subi	r24, 0xEF	; 239
    12cc:	9e 4f       	sbci	r25, 0xFE	; 254
    12ce:	9a 01       	movw	r18, r20
    12d0:	4e 2f       	mov	r20, r30
    12d2:	67 2f       	mov	r22, r23
    12d4:	0e 94 a3 12 	call	0x2546	; 0x2546 <odometry_move_to_position>
    12d8:	8c 83       	std	Y+4, r24	; 0x04
					blue_tactic_side_positions[current_position].direction,blue_tactic_side_positions[current_position].callback);

					if(odometry_status == ODOMETRY_FAIL)
    12da:	8c 81       	ldd	r24, Y+4	; 0x04
    12dc:	81 30       	cpi	r24, 0x01	; 1
    12de:	09 f4       	brne	.+2      	; 0x12e2 <blueside+0xae>
					{
						break;
    12e0:	0a c0       	rjmp	.+20     	; 0x12f6 <blueside+0xc2>
					}
					if(current_position == 1){
    12e2:	89 81       	ldd	r24, Y+1	; 0x01
    12e4:	81 30       	cpi	r24, 0x01	; 1
    12e6:	09 f4       	brne	.+2      	; 0x12ea <blueside+0xb6>
						while(1);
    12e8:	ff cf       	rjmp	.-2      	; 0x12e8 <blueside+0xb4>
	while(1)
	{
		switch(active_state)
		{
			case ROBOT_STATE_TACTIC_SIDE:
				for(current_position = next_position;current_position < TACTIC_SIDE_POSITION_COUNT; current_position++)
    12ea:	89 81       	ldd	r24, Y+1	; 0x01
    12ec:	8f 5f       	subi	r24, 0xFF	; 255
    12ee:	89 83       	std	Y+1, r24	; 0x01
    12f0:	89 81       	ldd	r24, Y+1	; 0x01
    12f2:	88 23       	and	r24, r24
    12f4:	29 f2       	breq	.-118    	; 0x1280 <blueside+0x4c>
						while(1);
					}
				}//end for
				/* no break */
			case ROBOT_STATE_TACTIC_CENTER:
				for(current_position = next_position;current_position < TACTIC_CENTER_POSITION_COUNT; current_position++)
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	89 83       	std	Y+1, r24	; 0x01
    12fa:	38 c0       	rjmp	.+112    	; 0x136c <blueside+0x138>
				{
					odometry_status = odometry_move_to_position(&(blue_tactic_center_positions[current_position].point), blue_tactic_center_positions[current_position].speed,
    12fc:	40 e0       	ldi	r20, 0x00	; 0
    12fe:	50 e0       	ldi	r21, 0x00	; 0
    1300:	89 81       	ldd	r24, Y+1	; 0x01
    1302:	28 2f       	mov	r18, r24
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	6b e0       	ldi	r22, 0x0B	; 11
    1308:	62 9f       	mul	r22, r18
    130a:	c0 01       	movw	r24, r0
    130c:	63 9f       	mul	r22, r19
    130e:	90 0d       	add	r25, r0
    1310:	11 24       	eor	r1, r1
    1312:	8c 5d       	subi	r24, 0xDC	; 220
    1314:	9e 4f       	sbci	r25, 0xFE	; 254
    1316:	dc 01       	movw	r26, r24
    1318:	ec 91       	ld	r30, X
    131a:	89 81       	ldd	r24, Y+1	; 0x01
    131c:	28 2f       	mov	r18, r24
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	6b e0       	ldi	r22, 0x0B	; 11
    1322:	62 9f       	mul	r22, r18
    1324:	c0 01       	movw	r24, r0
    1326:	63 9f       	mul	r22, r19
    1328:	90 0d       	add	r25, r0
    132a:	11 24       	eor	r1, r1
    132c:	8d 5d       	subi	r24, 0xDD	; 221
    132e:	9e 4f       	sbci	r25, 0xFE	; 254
    1330:	dc 01       	movw	r26, r24
    1332:	7c 91       	ld	r23, X
    1334:	89 81       	ldd	r24, Y+1	; 0x01
    1336:	28 2f       	mov	r18, r24
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	6b e0       	ldi	r22, 0x0B	; 11
    133c:	62 9f       	mul	r22, r18
    133e:	c0 01       	movw	r24, r0
    1340:	63 9f       	mul	r22, r19
    1342:	90 0d       	add	r25, r0
    1344:	11 24       	eor	r1, r1
    1346:	84 5e       	subi	r24, 0xE4	; 228
    1348:	9e 4f       	sbci	r25, 0xFE	; 254
    134a:	9a 01       	movw	r18, r20
    134c:	4e 2f       	mov	r20, r30
    134e:	67 2f       	mov	r22, r23
    1350:	0e 94 a3 12 	call	0x2546	; 0x2546 <odometry_move_to_position>
    1354:	8c 83       	std	Y+4, r24	; 0x04
					blue_tactic_center_positions[current_position].direction,blue_tactic_center_positions[current_position].callback);

					if(odometry_status == ODOMETRY_FAIL)
    1356:	8c 81       	ldd	r24, Y+4	; 0x04
    1358:	81 30       	cpi	r24, 0x01	; 1
    135a:	09 f4       	brne	.+2      	; 0x135e <blueside+0x12a>
					{
						break;
    135c:	0a c0       	rjmp	.+20     	; 0x1372 <blueside+0x13e>
					}
					if(current_position == 1){
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	81 30       	cpi	r24, 0x01	; 1
    1362:	09 f4       	brne	.+2      	; 0x1366 <blueside+0x132>
						while(1);
    1364:	ff cf       	rjmp	.-2      	; 0x1364 <blueside+0x130>
						while(1);
					}
				}//end for
				/* no break */
			case ROBOT_STATE_TACTIC_CENTER:
				for(current_position = next_position;current_position < TACTIC_CENTER_POSITION_COUNT; current_position++)
    1366:	89 81       	ldd	r24, Y+1	; 0x01
    1368:	8f 5f       	subi	r24, 0xFF	; 255
    136a:	89 83       	std	Y+1, r24	; 0x01
    136c:	89 81       	ldd	r24, Y+1	; 0x01
    136e:	88 23       	and	r24, r24
    1370:	29 f2       	breq	.-118    	; 0x12fc <blueside+0xc8>
					if(current_position == 1){
						while(1);
					}
				}//end for
		}//end switch
	}//end while
    1372:	78 cf       	rjmp	.-272    	; 0x1264 <blueside+0x30>

00001374 <__vector_18>:
static volatile unsigned char rxCounter[10];
//volatile static long canTime;

// Interrupt Service Routine
ISR(CANIT_vect)
{
    1374:	1f 92       	push	r1
    1376:	0f 92       	push	r0
    1378:	00 90 5f 00 	lds	r0, 0x005F
    137c:	0f 92       	push	r0
    137e:	11 24       	eor	r1, r1
    1380:	00 90 5b 00 	lds	r0, 0x005B
    1384:	0f 92       	push	r0
    1386:	2f 93       	push	r18
    1388:	3f 93       	push	r19
    138a:	4f 93       	push	r20
    138c:	5f 93       	push	r21
    138e:	8f 93       	push	r24
    1390:	9f 93       	push	r25
    1392:	ef 93       	push	r30
    1394:	ff 93       	push	r31
    1396:	cf 93       	push	r28
    1398:	df 93       	push	r29
    139a:	00 d0       	rcall	.+0      	; 0x139c <__vector_18+0x28>
    139c:	00 d0       	rcall	.+0      	; 0x139e <__vector_18+0x2a>
    139e:	cd b7       	in	r28, 0x3d	; 61
    13a0:	de b7       	in	r29, 0x3e	; 62
	unsigned char tempPage = CANPAGE;
    13a2:	8d ee       	ldi	r24, 0xED	; 237
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	fc 01       	movw	r30, r24
    13a8:	80 81       	ld	r24, Z
    13aa:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
    13ac:	19 82       	std	Y+1, r1	; 0x01
    13ae:	a4 c0       	rjmp	.+328    	; 0x14f8 <__vector_18+0x184>
	{
		CANPAGE = ch << 4;
    13b0:	8d ee       	ldi	r24, 0xED	; 237
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	29 81       	ldd	r18, Y+1	; 0x01
    13b6:	22 95       	swap	r18
    13b8:	20 7f       	andi	r18, 0xF0	; 240
    13ba:	fc 01       	movw	r30, r24
    13bc:	20 83       	st	Z, r18

		// receive interrupt
		if( (CANSTMOB >> RXOK) & 0x01)
    13be:	8e ee       	ldi	r24, 0xEE	; 238
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	fc 01       	movw	r30, r24
    13c4:	80 81       	ld	r24, Z
    13c6:	82 95       	swap	r24
    13c8:	86 95       	lsr	r24
    13ca:	87 70       	andi	r24, 0x07	; 7
    13cc:	88 2f       	mov	r24, r24
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	81 70       	andi	r24, 0x01	; 1
    13d2:	99 27       	eor	r25, r25
    13d4:	89 2b       	or	r24, r25
    13d6:	09 f4       	brne	.+2      	; 0x13da <__vector_18+0x66>
    13d8:	70 c0       	rjmp	.+224    	; 0x14ba <__vector_18+0x146>
		{
			// PRIJEMNI MOb- ovi uvek ostaju prijemni!
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
    13da:	8f ee       	ldi	r24, 0xEF	; 239
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	20 e8       	ldi	r18, 0x80	; 128
    13e0:	fc 01       	movw	r30, r24
    13e2:	20 83       	st	Z, r18
			CANSTMOB &= ~(1 << RXOK); // resetujem flag
    13e4:	8e ee       	ldi	r24, 0xEE	; 238
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	2e ee       	ldi	r18, 0xEE	; 238
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	f9 01       	movw	r30, r18
    13ee:	20 81       	ld	r18, Z
    13f0:	2f 7d       	andi	r18, 0xDF	; 223
    13f2:	fc 01       	movw	r30, r24
    13f4:	20 83       	st	Z, r18

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);
    13f6:	82 ef       	ldi	r24, 0xF2	; 242
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	fc 01       	movw	r30, r24
    13fc:	80 81       	ld	r24, Z
    13fe:	82 95       	swap	r24
    1400:	86 95       	lsr	r24
    1402:	87 70       	andi	r24, 0x07	; 7
    1404:	28 2f       	mov	r18, r24
    1406:	83 ef       	ldi	r24, 0xF3	; 243
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	fc 01       	movw	r30, r24
    140c:	80 81       	ld	r24, Z
    140e:	88 2f       	mov	r24, r24
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	88 0f       	add	r24, r24
    1414:	99 1f       	adc	r25, r25
    1416:	88 0f       	add	r24, r24
    1418:	99 1f       	adc	r25, r25
    141a:	88 0f       	add	r24, r24
    141c:	99 1f       	adc	r25, r25
    141e:	82 2b       	or	r24, r18
    1420:	8c 83       	std	Y+4, r24	; 0x04

			for(i = 0; i < 8; ++i)
    1422:	1a 82       	std	Y+2, r1	; 0x02
    1424:	26 c0       	rjmp	.+76     	; 0x1472 <__vector_18+0xfe>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;
    1426:	8c 81       	ldd	r24, Y+4	; 0x04
    1428:	88 2f       	mov	r24, r24
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	81 50       	subi	r24, 0x01	; 1
    142e:	90 48       	sbci	r25, 0x80	; 128
    1430:	88 0f       	add	r24, r24
    1432:	99 1f       	adc	r25, r25
    1434:	86 5b       	subi	r24, 0xB6	; 182
    1436:	9e 4f       	sbci	r25, 0xFE	; 254
    1438:	fc 01       	movw	r30, r24
    143a:	20 81       	ld	r18, Z
    143c:	31 81       	ldd	r19, Z+1	; 0x01
    143e:	8c 81       	ldd	r24, Y+4	; 0x04
    1440:	88 2f       	mov	r24, r24
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	01 97       	sbiw	r24, 0x01	; 1
    1446:	82 5a       	subi	r24, 0xA2	; 162
    1448:	9e 4f       	sbci	r25, 0xFE	; 254
    144a:	fc 01       	movw	r30, r24
    144c:	80 81       	ld	r24, Z
    144e:	48 2f       	mov	r20, r24
    1450:	50 e0       	ldi	r21, 0x00	; 0
    1452:	8a 81       	ldd	r24, Y+2	; 0x02
    1454:	88 2f       	mov	r24, r24
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	84 0f       	add	r24, r20
    145a:	95 1f       	adc	r25, r21
    145c:	82 0f       	add	r24, r18
    145e:	93 1f       	adc	r25, r19
    1460:	2a ef       	ldi	r18, 0xFA	; 250
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	f9 01       	movw	r30, r18
    1466:	20 81       	ld	r18, Z
    1468:	fc 01       	movw	r30, r24
    146a:	20 83       	st	Z, r18
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
			CANSTMOB &= ~(1 << RXOK); // resetujem flag

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);

			for(i = 0; i < 8; ++i)
    146c:	8a 81       	ldd	r24, Y+2	; 0x02
    146e:	8f 5f       	subi	r24, 0xFF	; 255
    1470:	8a 83       	std	Y+2, r24	; 0x02
    1472:	8a 81       	ldd	r24, Y+2	; 0x02
    1474:	88 30       	cpi	r24, 0x08	; 8
    1476:	b8 f2       	brcs	.-82     	; 0x1426 <__vector_18+0xb2>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;

			if(++(*(rxWrIndex + ide - 1)) == RX_BUFFER_SIZE)
    1478:	8c 81       	ldd	r24, Y+4	; 0x04
    147a:	88 2f       	mov	r24, r24
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	01 97       	sbiw	r24, 0x01	; 1
    1480:	82 5a       	subi	r24, 0xA2	; 162
    1482:	9e 4f       	sbci	r25, 0xFE	; 254
    1484:	fc 01       	movw	r30, r24
    1486:	20 81       	ld	r18, Z
    1488:	2f 5f       	subi	r18, 0xFF	; 255
    148a:	fc 01       	movw	r30, r24
    148c:	20 83       	st	Z, r18
    148e:	25 30       	cpi	r18, 0x05	; 5
    1490:	41 f4       	brne	.+16     	; 0x14a2 <__vector_18+0x12e>
				*(rxWrIndex + ide - 1) = 0;
    1492:	8c 81       	ldd	r24, Y+4	; 0x04
    1494:	88 2f       	mov	r24, r24
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	01 97       	sbiw	r24, 0x01	; 1
    149a:	82 5a       	subi	r24, 0xA2	; 162
    149c:	9e 4f       	sbci	r25, 0xFE	; 254
    149e:	fc 01       	movw	r30, r24
    14a0:	10 82       	st	Z, r1

			(*(rxCounter + ide - 1))++;
    14a2:	8c 81       	ldd	r24, Y+4	; 0x04
    14a4:	88 2f       	mov	r24, r24
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	01 97       	sbiw	r24, 0x01	; 1
    14aa:	8e 58       	subi	r24, 0x8E	; 142
    14ac:	9e 4f       	sbci	r25, 0xFE	; 254
    14ae:	fc 01       	movw	r30, r24
    14b0:	20 81       	ld	r18, Z
    14b2:	2f 5f       	subi	r18, 0xFF	; 255
    14b4:	fc 01       	movw	r30, r24
    14b6:	20 83       	st	Z, r18

			break;
    14b8:	23 c0       	rjmp	.+70     	; 0x1500 <__vector_18+0x18c>
		}

		//transmit interrupt
		if( (CANSTMOB >> TXOK) & 0x01)
    14ba:	8e ee       	ldi	r24, 0xEE	; 238
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	fc 01       	movw	r30, r24
    14c0:	80 81       	ld	r24, Z
    14c2:	82 95       	swap	r24
    14c4:	86 95       	lsr	r24
    14c6:	86 95       	lsr	r24
    14c8:	83 70       	andi	r24, 0x03	; 3
    14ca:	88 2f       	mov	r24, r24
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	81 70       	andi	r24, 0x01	; 1
    14d0:	99 27       	eor	r25, r25
    14d2:	89 2b       	or	r24, r25
    14d4:	71 f0       	breq	.+28     	; 0x14f2 <__vector_18+0x17e>
		{
			CANCDMOB = 0; // disable mob
    14d6:	8f ee       	ldi	r24, 0xEF	; 239
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	fc 01       	movw	r30, r24
    14dc:	10 82       	st	Z, r1
			CANSTMOB &= ~(1 << TXOK); // resetujem flag
    14de:	8e ee       	ldi	r24, 0xEE	; 238
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	2e ee       	ldi	r18, 0xEE	; 238
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	f9 01       	movw	r30, r18
    14e8:	20 81       	ld	r18, Z
    14ea:	2f 7b       	andi	r18, 0xBF	; 191
    14ec:	fc 01       	movw	r30, r24
    14ee:	20 83       	st	Z, r18

			break;
    14f0:	07 c0       	rjmp	.+14     	; 0x1500 <__vector_18+0x18c>
	unsigned char tempPage = CANPAGE;
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
    14f2:	89 81       	ldd	r24, Y+1	; 0x01
    14f4:	8f 5f       	subi	r24, 0xFF	; 255
    14f6:	89 83       	std	Y+1, r24	; 0x01
    14f8:	89 81       	ldd	r24, Y+1	; 0x01
    14fa:	8f 30       	cpi	r24, 0x0F	; 15
    14fc:	08 f4       	brcc	.+2      	; 0x1500 <__vector_18+0x18c>
    14fe:	58 cf       	rjmp	.-336    	; 0x13b0 <__vector_18+0x3c>

			break;
		}
	}

	CANPAGE = tempPage;
    1500:	8d ee       	ldi	r24, 0xED	; 237
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	2b 81       	ldd	r18, Y+3	; 0x03
    1506:	fc 01       	movw	r30, r24
    1508:	20 83       	st	Z, r18
	//CANGIT = CANGIT; // zato sto tako treba.
}
    150a:	0f 90       	pop	r0
    150c:	0f 90       	pop	r0
    150e:	0f 90       	pop	r0
    1510:	0f 90       	pop	r0
    1512:	df 91       	pop	r29
    1514:	cf 91       	pop	r28
    1516:	ff 91       	pop	r31
    1518:	ef 91       	pop	r30
    151a:	9f 91       	pop	r25
    151c:	8f 91       	pop	r24
    151e:	5f 91       	pop	r21
    1520:	4f 91       	pop	r20
    1522:	3f 91       	pop	r19
    1524:	2f 91       	pop	r18
    1526:	0f 90       	pop	r0
    1528:	00 92 5b 00 	sts	0x005B, r0
    152c:	0f 90       	pop	r0
    152e:	00 92 5f 00 	sts	0x005F, r0
    1532:	0f 90       	pop	r0
    1534:	1f 90       	pop	r1
    1536:	18 95       	reti

00001538 <CAN_InitModule>:


static void CAN_InitModule(void)
{
    1538:	cf 93       	push	r28
    153a:	df 93       	push	r29
    153c:	00 d0       	rcall	.+0      	; 0x153e <CAN_InitModule+0x6>
    153e:	cd b7       	in	r28, 0x3d	; 61
    1540:	de b7       	in	r29, 0x3e	; 62
	unsigned char ch;
	unsigned char data;

	// Reset the CAN controller
	CANGCON = 0x01;
    1542:	88 ed       	ldi	r24, 0xD8	; 216
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	21 e0       	ldi	r18, 0x01	; 1
    1548:	fc 01       	movw	r30, r24
    154a:	20 83       	st	Z, r18

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
    154c:	19 82       	std	Y+1, r1	; 0x01
    154e:	3e c0       	rjmp	.+124    	; 0x15cc <CAN_InitModule+0x94>
	{
		CANPAGE = ch << 4;
    1550:	8d ee       	ldi	r24, 0xED	; 237
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	29 81       	ldd	r18, Y+1	; 0x01
    1556:	22 95       	swap	r18
    1558:	20 7f       	andi	r18, 0xF0	; 240
    155a:	fc 01       	movw	r30, r24
    155c:	20 83       	st	Z, r18

		CANSTMOB = 0;
    155e:	8e ee       	ldi	r24, 0xEE	; 238
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	fc 01       	movw	r30, r24
    1564:	10 82       	st	Z, r1
		CANCDMOB = 0;
    1566:	8f ee       	ldi	r24, 0xEF	; 239
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	fc 01       	movw	r30, r24
    156c:	10 82       	st	Z, r1

		CANIDT1 = 0;
    156e:	83 ef       	ldi	r24, 0xF3	; 243
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	fc 01       	movw	r30, r24
    1574:	10 82       	st	Z, r1
		CANIDT2 = 0;
    1576:	82 ef       	ldi	r24, 0xF2	; 242
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	fc 01       	movw	r30, r24
    157c:	10 82       	st	Z, r1
		CANIDT3 = 0;
    157e:	81 ef       	ldi	r24, 0xF1	; 241
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	fc 01       	movw	r30, r24
    1584:	10 82       	st	Z, r1
		CANIDT4 = 0;
    1586:	80 ef       	ldi	r24, 0xF0	; 240
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	fc 01       	movw	r30, r24
    158c:	10 82       	st	Z, r1
		CANIDM1 = 0;
    158e:	87 ef       	ldi	r24, 0xF7	; 247
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	fc 01       	movw	r30, r24
    1594:	10 82       	st	Z, r1
		CANIDM2 = 0;
    1596:	86 ef       	ldi	r24, 0xF6	; 246
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	fc 01       	movw	r30, r24
    159c:	10 82       	st	Z, r1
		CANIDM3 = 0;
    159e:	85 ef       	ldi	r24, 0xF5	; 245
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	fc 01       	movw	r30, r24
    15a4:	10 82       	st	Z, r1
		CANIDM4 = 0;
    15a6:	84 ef       	ldi	r24, 0xF4	; 244
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	fc 01       	movw	r30, r24
    15ac:	10 82       	st	Z, r1

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
    15ae:	1a 82       	std	Y+2, r1	; 0x02
    15b0:	07 c0       	rjmp	.+14     	; 0x15c0 <CAN_InitModule+0x88>
			CANMSG = 0;
    15b2:	8a ef       	ldi	r24, 0xFA	; 250
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	fc 01       	movw	r30, r24
    15b8:	10 82       	st	Z, r1
		CANIDM3 = 0;
		CANIDM4 = 0;

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
    15ba:	8a 81       	ldd	r24, Y+2	; 0x02
    15bc:	8f 5f       	subi	r24, 0xFF	; 255
    15be:	8a 83       	std	Y+2, r24	; 0x02
    15c0:	8a 81       	ldd	r24, Y+2	; 0x02
    15c2:	88 30       	cpi	r24, 0x08	; 8
    15c4:	b0 f3       	brcs	.-20     	; 0x15b2 <CAN_InitModule+0x7a>

	// Reset the CAN controller
	CANGCON = 0x01;

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
    15c6:	89 81       	ldd	r24, Y+1	; 0x01
    15c8:	8f 5f       	subi	r24, 0xFF	; 255
    15ca:	89 83       	std	Y+1, r24	; 0x01
    15cc:	89 81       	ldd	r24, Y+1	; 0x01
    15ce:	8f 30       	cpi	r24, 0x0F	; 15
    15d0:	08 f4       	brcc	.+2      	; 0x15d4 <CAN_InitModule+0x9c>
    15d2:	be cf       	rjmp	.-132    	; 0x1550 <CAN_InitModule+0x18>
			CANMSG = 0;
	}


	// Enable the CAN controller
	CANGCON = 0x02;
    15d4:	88 ed       	ldi	r24, 0xD8	; 216
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	22 e0       	ldi	r18, 0x02	; 2
    15da:	fc 01       	movw	r30, r24
    15dc:	20 83       	st	Z, r18

	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	//CANBT1 = 0x08; // Fcan = 2Mhz-> Tq = 0.5us
	CANBT1 = 0x01;
    15de:	82 ee       	ldi	r24, 0xE2	; 226
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	21 e0       	ldi	r18, 0x01	; 1
    15e4:	fc 01       	movw	r30, r24
    15e6:	20 83       	st	Z, r18
	CANBT2 = (1 << PRS2); // Propagation Time Segment-> 5xTq
    15e8:	83 ee       	ldi	r24, 0xE3	; 227
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	28 e0       	ldi	r18, 0x08	; 8
    15ee:	fc 01       	movw	r30, r24
    15f0:	20 83       	st	Z, r18
	CANBT3 = (1 << PHS22) | (1 << PHS20) | (1 << PHS10) | (1 << PHS11) | (1 << PHS12); // Phase Segment 2-> 6xTq, Phase Segment 1-> 8xTq
    15f2:	84 ee       	ldi	r24, 0xE4	; 228
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	2e e5       	ldi	r18, 0x5E	; 94
    15f8:	fc 01       	movw	r30, r24
    15fa:	20 83       	st	Z, r18

	/// Sjw je podesen na 1... 1 + 5 + 6 + 8 = 22
	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	CANTCON = 0; // preskaler za CAN timer-> ne koristimo ga pa ova vrednost nije vazna
    15fc:	85 ee       	ldi	r24, 0xE5	; 229
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	fc 01       	movw	r30, r24
    1602:	10 82       	st	Z, r1

	// ukljucujem interrupte- ENIT-> Enable All Interrupts
	// ENRX-> Enable RX interrupt
	// ENTX-> Enable TX interrupt
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);
    1604:	8b ed       	ldi	r24, 0xDB	; 219
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	20 eb       	ldi	r18, 0xB0	; 176
    160a:	fc 01       	movw	r30, r24
    160c:	20 83       	st	Z, r18
	// interrupti svih MOb- ova su ukljuceni
	CANIE1 = 0xFF >> 1; // glupo govno trazi da MSB mora biti nula prilikom upisivanja u registar
    160e:	8f ed       	ldi	r24, 0xDF	; 223
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	2f e7       	ldi	r18, 0x7F	; 127
    1614:	fc 01       	movw	r30, r24
    1616:	20 83       	st	Z, r18
	CANIE2 = 0xFF;
    1618:	8e ed       	ldi	r24, 0xDE	; 222
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	2f ef       	ldi	r18, 0xFF	; 255
    161e:	fc 01       	movw	r30, r24
    1620:	20 83       	st	Z, r18
	sei();
    1622:	78 94       	sei
}
    1624:	0f 90       	pop	r0
    1626:	0f 90       	pop	r0
    1628:	df 91       	pop	r29
    162a:	cf 91       	pop	r28
    162c:	08 95       	ret

0000162e <CAN_InitRxMob>:


static char CAN_InitRxMob(unsigned int ide)
{
    162e:	cf 93       	push	r28
    1630:	df 93       	push	r29
    1632:	00 d0       	rcall	.+0      	; 0x1634 <CAN_InitRxMob+0x6>
    1634:	00 d0       	rcall	.+0      	; 0x1636 <CAN_InitRxMob+0x8>
    1636:	cd b7       	in	r28, 0x3d	; 61
    1638:	de b7       	in	r29, 0x3e	; 62
    163a:	9c 83       	std	Y+4, r25	; 0x04
    163c:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char ch;
	unsigned char tempPage = CANPAGE;
    163e:	8d ee       	ldi	r24, 0xED	; 237
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	fc 01       	movw	r30, r24
    1644:	80 81       	ld	r24, Z
    1646:	8a 83       	std	Y+2, r24	; 0x02

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
    1648:	00 00       	nop
    164a:	89 ed       	ldi	r24, 0xD9	; 217
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	fc 01       	movw	r30, r24
    1650:	80 81       	ld	r24, Z
    1652:	82 95       	swap	r24
    1654:	8f 70       	andi	r24, 0x0F	; 15
    1656:	88 2f       	mov	r24, r24
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	81 70       	andi	r24, 0x01	; 1
    165c:	99 27       	eor	r25, r25
    165e:	89 2b       	or	r24, r25
    1660:	a1 f7       	brne	.-24     	; 0x164a <CAN_InitRxMob+0x1c>
    1662:	89 ed       	ldi	r24, 0xD9	; 217
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	fc 01       	movw	r30, r24
    1668:	80 81       	ld	r24, Z
    166a:	86 95       	lsr	r24
    166c:	86 95       	lsr	r24
    166e:	86 95       	lsr	r24
    1670:	88 2f       	mov	r24, r24
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	81 70       	andi	r24, 0x01	; 1
    1676:	99 27       	eor	r25, r25
    1678:	89 2b       	or	r24, r25
    167a:	39 f7       	brne	.-50     	; 0x164a <CAN_InitRxMob+0x1c>

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
    167c:	19 82       	std	Y+1, r1	; 0x01
    167e:	49 c0       	rjmp	.+146    	; 0x1712 <CAN_InitRxMob+0xe4>
	{
		CANPAGE = ch << 4;
    1680:	8d ee       	ldi	r24, 0xED	; 237
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	29 81       	ldd	r18, Y+1	; 0x01
    1686:	22 95       	swap	r18
    1688:	20 7f       	andi	r18, 0xF0	; 240
    168a:	fc 01       	movw	r30, r24
    168c:	20 83       	st	Z, r18

		// ako je MOb vec zauzet nastavi dalje
		if((CANCDMOB >> 6))
    168e:	8f ee       	ldi	r24, 0xEF	; 239
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	fc 01       	movw	r30, r24
    1694:	80 81       	ld	r24, Z
    1696:	82 95       	swap	r24
    1698:	86 95       	lsr	r24
    169a:	86 95       	lsr	r24
    169c:	83 70       	andi	r24, 0x03	; 3
    169e:	88 23       	and	r24, r24
    16a0:	21 f0       	breq	.+8      	; 0x16aa <CAN_InitRxMob+0x7c>

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
    16a2:	89 81       	ldd	r24, Y+1	; 0x01
    16a4:	8f 5f       	subi	r24, 0xFF	; 255
    16a6:	89 83       	std	Y+1, r24	; 0x01
    16a8:	34 c0       	rjmp	.+104    	; 0x1712 <CAN_InitRxMob+0xe4>
		// ako je MOb vec zauzet nastavi dalje
		if((CANCDMOB >> 6))
			continue;

		//uvek primam 8 bajtova
		CANCDMOB = (1 << DLC0) | (1 << DLC1) | (1 << DLC2) | (1 << DLC3);
    16aa:	8f ee       	ldi	r24, 0xEF	; 239
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	2f e0       	ldi	r18, 0x0F	; 15
    16b0:	fc 01       	movw	r30, r24
    16b2:	20 83       	st	Z, r18

		// podesavam identifikator
		CANIDT1 = (0x00FF & ide) >> 3;
    16b4:	83 ef       	ldi	r24, 0xF3	; 243
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	2b 81       	ldd	r18, Y+3	; 0x03
    16ba:	3c 81       	ldd	r19, Y+4	; 0x04
    16bc:	33 27       	eor	r19, r19
    16be:	36 95       	lsr	r19
    16c0:	27 95       	ror	r18
    16c2:	36 95       	lsr	r19
    16c4:	27 95       	ror	r18
    16c6:	36 95       	lsr	r19
    16c8:	27 95       	ror	r18
    16ca:	fc 01       	movw	r30, r24
    16cc:	20 83       	st	Z, r18
		CANIDT2 = (ide & 0x00FF) << 5;
    16ce:	82 ef       	ldi	r24, 0xF2	; 242
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	2b 81       	ldd	r18, Y+3	; 0x03
    16d4:	22 95       	swap	r18
    16d6:	22 0f       	add	r18, r18
    16d8:	20 7e       	andi	r18, 0xE0	; 224
    16da:	fc 01       	movw	r30, r24
    16dc:	20 83       	st	Z, r18

		// podesavam masku- gledam sve bitove
		CANIDM2 = 0x07 << 5;
    16de:	86 ef       	ldi	r24, 0xF6	; 246
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	20 ee       	ldi	r18, 0xE0	; 224
    16e4:	fc 01       	movw	r30, r24
    16e6:	20 83       	st	Z, r18
		CANIDM1 = 0xFF;
    16e8:	87 ef       	ldi	r24, 0xF7	; 247
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	2f ef       	ldi	r18, 0xFF	; 255
    16ee:	fc 01       	movw	r30, r24
    16f0:	20 83       	st	Z, r18

		// podesavam MOb kao receiver
		CANCDMOB |= (1 << CONMOB1);
    16f2:	8f ee       	ldi	r24, 0xEF	; 239
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	2f ee       	ldi	r18, 0xEF	; 239
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	f9 01       	movw	r30, r18
    16fc:	20 81       	ld	r18, Z
    16fe:	20 68       	ori	r18, 0x80	; 128
    1700:	fc 01       	movw	r30, r24
    1702:	20 83       	st	Z, r18

		CANPAGE = tempPage;
    1704:	8d ee       	ldi	r24, 0xED	; 237
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	2a 81       	ldd	r18, Y+2	; 0x02
    170a:	fc 01       	movw	r30, r24
    170c:	20 83       	st	Z, r18

		return 1;
    170e:	81 e0       	ldi	r24, 0x01	; 1
    1710:	0a c0       	rjmp	.+20     	; 0x1726 <CAN_InitRxMob+0xf8>

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
    1712:	89 81       	ldd	r24, Y+1	; 0x01
    1714:	8f 30       	cpi	r24, 0x0F	; 15
    1716:	08 f4       	brcc	.+2      	; 0x171a <CAN_InitRxMob+0xec>
    1718:	b3 cf       	rjmp	.-154    	; 0x1680 <CAN_InitRxMob+0x52>
		CANPAGE = tempPage;

		return 1;
	}

	CANPAGE = tempPage;
    171a:	8d ee       	ldi	r24, 0xED	; 237
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	2a 81       	ldd	r18, Y+2	; 0x02
    1720:	fc 01       	movw	r30, r24
    1722:	20 83       	st	Z, r18

	return 0;
    1724:	80 e0       	ldi	r24, 0x00	; 0
}
    1726:	0f 90       	pop	r0
    1728:	0f 90       	pop	r0
    172a:	0f 90       	pop	r0
    172c:	0f 90       	pop	r0
    172e:	df 91       	pop	r29
    1730:	cf 91       	pop	r28
    1732:	08 95       	ret

00001734 <CAN_Init>:


void CAN_Init(unsigned char numOfNodes)
{
    1734:	0f 93       	push	r16
    1736:	1f 93       	push	r17
    1738:	cf 93       	push	r28
    173a:	df 93       	push	r29
    173c:	00 d0       	rcall	.+0      	; 0x173e <CAN_Init+0xa>
    173e:	cd b7       	in	r28, 0x3d	; 61
    1740:	de b7       	in	r29, 0x3e	; 62
    1742:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char i;
	CAN_InitModule();
    1744:	0e 94 9c 0a 	call	0x1538	; 0x1538 <CAN_InitModule>

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
    1748:	19 82       	std	Y+1, r1	; 0x01
    174a:	30 c0       	rjmp	.+96     	; 0x17ac <CAN_Init+0x78>
	{
		CAN_InitRxMob(i + 1);
    174c:	89 81       	ldd	r24, Y+1	; 0x01
    174e:	88 2f       	mov	r24, r24
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	01 96       	adiw	r24, 0x01	; 1
    1754:	0e 94 17 0b 	call	0x162e	; 0x162e <CAN_InitRxMob>
		*(rxBuffers + i) = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
    1758:	89 81       	ldd	r24, Y+1	; 0x01
    175a:	88 2f       	mov	r24, r24
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	88 0f       	add	r24, r24
    1760:	99 1f       	adc	r25, r25
    1762:	8c 01       	movw	r16, r24
    1764:	06 5b       	subi	r16, 0xB6	; 182
    1766:	1e 4f       	sbci	r17, 0xFE	; 254
    1768:	61 e0       	ldi	r22, 0x01	; 1
    176a:	70 e0       	ldi	r23, 0x00	; 0
    176c:	85 e0       	ldi	r24, 0x05	; 5
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	0e 94 e7 1f 	call	0x3fce	; 0x3fce <calloc>
    1774:	f8 01       	movw	r30, r16
    1776:	91 83       	std	Z+1, r25	; 0x01
    1778:	80 83       	st	Z, r24
		//*(rxBuffers + i) = (unsigned char *) malloc(RX_BUFFER_SIZE * sizeof(unsigned char));
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
    177a:	89 81       	ldd	r24, Y+1	; 0x01
    177c:	88 2f       	mov	r24, r24
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	29 81       	ldd	r18, Y+1	; 0x01
    1782:	22 2f       	mov	r18, r18
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	49 81       	ldd	r20, Y+1	; 0x01
    1788:	44 2f       	mov	r20, r20
    178a:	50 e0       	ldi	r21, 0x00	; 0
    178c:	60 e0       	ldi	r22, 0x00	; 0
    178e:	4e 58       	subi	r20, 0x8E	; 142
    1790:	5e 4f       	sbci	r21, 0xFE	; 254
    1792:	fa 01       	movw	r30, r20
    1794:	60 83       	st	Z, r22
    1796:	28 59       	subi	r18, 0x98	; 152
    1798:	3e 4f       	sbci	r19, 0xFE	; 254
    179a:	f9 01       	movw	r30, r18
    179c:	60 83       	st	Z, r22
    179e:	82 5a       	subi	r24, 0xA2	; 162
    17a0:	9e 4f       	sbci	r25, 0xFE	; 254
    17a2:	fc 01       	movw	r30, r24
    17a4:	60 83       	st	Z, r22

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
    17a6:	89 81       	ldd	r24, Y+1	; 0x01
    17a8:	8f 5f       	subi	r24, 0xFF	; 255
    17aa:	89 83       	std	Y+1, r24	; 0x01
    17ac:	99 81       	ldd	r25, Y+1	; 0x01
    17ae:	8a 81       	ldd	r24, Y+2	; 0x02
    17b0:	98 17       	cp	r25, r24
    17b2:	60 f2       	brcs	.-104    	; 0x174c <CAN_Init+0x18>
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
	}

	//rxWrIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
	//rxRdIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
}
    17b4:	0f 90       	pop	r0
    17b6:	0f 90       	pop	r0
    17b8:	df 91       	pop	r29
    17ba:	cf 91       	pop	r28
    17bc:	1f 91       	pop	r17
    17be:	0f 91       	pop	r16
    17c0:	08 95       	ret

000017c2 <CAN_CheckRX>:


unsigned char CAN_CheckRX(unsigned char nodeID)
{
    17c2:	cf 93       	push	r28
    17c4:	df 93       	push	r29
    17c6:	1f 92       	push	r1
    17c8:	cd b7       	in	r28, 0x3d	; 61
    17ca:	de b7       	in	r29, 0x3e	; 62
    17cc:	89 83       	std	Y+1, r24	; 0x01
	return rxCounter[nodeID - 1];
    17ce:	89 81       	ldd	r24, Y+1	; 0x01
    17d0:	88 2f       	mov	r24, r24
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	01 97       	sbiw	r24, 0x01	; 1
    17d6:	8e 58       	subi	r24, 0x8E	; 142
    17d8:	9e 4f       	sbci	r25, 0xFE	; 254
    17da:	fc 01       	movw	r30, r24
    17dc:	80 81       	ld	r24, Z
}
    17de:	0f 90       	pop	r0
    17e0:	df 91       	pop	r29
    17e2:	cf 91       	pop	r28
    17e4:	08 95       	ret

000017e6 <CAN_Read>:


char CAN_Read(unsigned char *buffer, unsigned char sendingNodeID)
{
    17e6:	cf 93       	push	r28
    17e8:	df 93       	push	r29
    17ea:	00 d0       	rcall	.+0      	; 0x17ec <CAN_Read+0x6>
    17ec:	00 d0       	rcall	.+0      	; 0x17ee <CAN_Read+0x8>
    17ee:	cd b7       	in	r28, 0x3d	; 61
    17f0:	de b7       	in	r29, 0x3e	; 62
    17f2:	9b 83       	std	Y+3, r25	; 0x03
    17f4:	8a 83       	std	Y+2, r24	; 0x02
    17f6:	6c 83       	std	Y+4, r22	; 0x04
	unsigned char i;
	PORTG = 0xff;
    17f8:	84 e3       	ldi	r24, 0x34	; 52
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	2f ef       	ldi	r18, 0xFF	; 255
    17fe:	fc 01       	movw	r30, r24
    1800:	20 83       	st	Z, r18
	// sve dok ne stigne neki podatak ostajem u funkciji
	while(!rxCounter[sendingNodeID - 1]);
    1802:	00 00       	nop
    1804:	8c 81       	ldd	r24, Y+4	; 0x04
    1806:	88 2f       	mov	r24, r24
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	01 97       	sbiw	r24, 0x01	; 1
    180c:	8e 58       	subi	r24, 0x8E	; 142
    180e:	9e 4f       	sbci	r25, 0xFE	; 254
    1810:	fc 01       	movw	r30, r24
    1812:	80 81       	ld	r24, Z
    1814:	88 23       	and	r24, r24
    1816:	b1 f3       	breq	.-20     	; 0x1804 <CAN_Read+0x1e>

	for(i = 0; i < 8; ++i)
    1818:	19 82       	std	Y+1, r1	; 0x01
    181a:	2c c0       	rjmp	.+88     	; 0x1874 <CAN_Read+0x8e>
	*(buffer + i) = (*(rxBuffers + sendingNodeID - 1) + sizeof(unsigned char) * (*(rxRdIndex + sendingNodeID - 1)))[i];
    181c:	89 81       	ldd	r24, Y+1	; 0x01
    181e:	88 2f       	mov	r24, r24
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	2a 81       	ldd	r18, Y+2	; 0x02
    1824:	3b 81       	ldd	r19, Y+3	; 0x03
    1826:	82 0f       	add	r24, r18
    1828:	93 1f       	adc	r25, r19
    182a:	2c 81       	ldd	r18, Y+4	; 0x04
    182c:	22 2f       	mov	r18, r18
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	21 50       	subi	r18, 0x01	; 1
    1832:	30 48       	sbci	r19, 0x80	; 128
    1834:	22 0f       	add	r18, r18
    1836:	33 1f       	adc	r19, r19
    1838:	26 5b       	subi	r18, 0xB6	; 182
    183a:	3e 4f       	sbci	r19, 0xFE	; 254
    183c:	f9 01       	movw	r30, r18
    183e:	40 81       	ld	r20, Z
    1840:	51 81       	ldd	r21, Z+1	; 0x01
    1842:	2c 81       	ldd	r18, Y+4	; 0x04
    1844:	22 2f       	mov	r18, r18
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	21 50       	subi	r18, 0x01	; 1
    184a:	31 09       	sbc	r19, r1
    184c:	28 59       	subi	r18, 0x98	; 152
    184e:	3e 4f       	sbci	r19, 0xFE	; 254
    1850:	f9 01       	movw	r30, r18
    1852:	20 81       	ld	r18, Z
    1854:	62 2f       	mov	r22, r18
    1856:	70 e0       	ldi	r23, 0x00	; 0
    1858:	29 81       	ldd	r18, Y+1	; 0x01
    185a:	22 2f       	mov	r18, r18
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	26 0f       	add	r18, r22
    1860:	37 1f       	adc	r19, r23
    1862:	24 0f       	add	r18, r20
    1864:	35 1f       	adc	r19, r21
    1866:	f9 01       	movw	r30, r18
    1868:	20 81       	ld	r18, Z
    186a:	fc 01       	movw	r30, r24
    186c:	20 83       	st	Z, r18
	unsigned char i;
	PORTG = 0xff;
	// sve dok ne stigne neki podatak ostajem u funkciji
	while(!rxCounter[sendingNodeID - 1]);

	for(i = 0; i < 8; ++i)
    186e:	89 81       	ldd	r24, Y+1	; 0x01
    1870:	8f 5f       	subi	r24, 0xFF	; 255
    1872:	89 83       	std	Y+1, r24	; 0x01
    1874:	89 81       	ldd	r24, Y+1	; 0x01
    1876:	88 30       	cpi	r24, 0x08	; 8
    1878:	88 f2       	brcs	.-94     	; 0x181c <CAN_Read+0x36>
	*(buffer + i) = (*(rxBuffers + sendingNodeID - 1) + sizeof(unsigned char) * (*(rxRdIndex + sendingNodeID - 1)))[i];

	if(++(*(rxRdIndex + sendingNodeID - 1)) == RX_BUFFER_SIZE)
    187a:	8c 81       	ldd	r24, Y+4	; 0x04
    187c:	88 2f       	mov	r24, r24
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	01 97       	sbiw	r24, 0x01	; 1
    1882:	88 59       	subi	r24, 0x98	; 152
    1884:	9e 4f       	sbci	r25, 0xFE	; 254
    1886:	fc 01       	movw	r30, r24
    1888:	20 81       	ld	r18, Z
    188a:	2f 5f       	subi	r18, 0xFF	; 255
    188c:	fc 01       	movw	r30, r24
    188e:	20 83       	st	Z, r18
    1890:	25 30       	cpi	r18, 0x05	; 5
    1892:	41 f4       	brne	.+16     	; 0x18a4 <CAN_Read+0xbe>
	*(rxRdIndex + sendingNodeID - 1) = 0;
    1894:	8c 81       	ldd	r24, Y+4	; 0x04
    1896:	88 2f       	mov	r24, r24
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	01 97       	sbiw	r24, 0x01	; 1
    189c:	88 59       	subi	r24, 0x98	; 152
    189e:	9e 4f       	sbci	r25, 0xFE	; 254
    18a0:	fc 01       	movw	r30, r24
    18a2:	10 82       	st	Z, r1

	rxCounter[sendingNodeID - 1]--;
    18a4:	8c 81       	ldd	r24, Y+4	; 0x04
    18a6:	88 2f       	mov	r24, r24
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	01 97       	sbiw	r24, 0x01	; 1
    18ac:	9c 01       	movw	r18, r24
    18ae:	2e 58       	subi	r18, 0x8E	; 142
    18b0:	3e 4f       	sbci	r19, 0xFE	; 254
    18b2:	f9 01       	movw	r30, r18
    18b4:	20 81       	ld	r18, Z
    18b6:	21 50       	subi	r18, 0x01	; 1
    18b8:	8e 58       	subi	r24, 0x8E	; 142
    18ba:	9e 4f       	sbci	r25, 0xFE	; 254
    18bc:	fc 01       	movw	r30, r24
    18be:	20 83       	st	Z, r18

	return 0;
    18c0:	80 e0       	ldi	r24, 0x00	; 0
}
    18c2:	0f 90       	pop	r0
    18c4:	0f 90       	pop	r0
    18c6:	0f 90       	pop	r0
    18c8:	0f 90       	pop	r0
    18ca:	df 91       	pop	r29
    18cc:	cf 91       	pop	r28
    18ce:	08 95       	ret

000018d0 <CAN_Write>:

char CAN_Write(unsigned char *data, unsigned char receivingNodeAddress)
{
    18d0:	cf 93       	push	r28
    18d2:	df 93       	push	r29
    18d4:	00 d0       	rcall	.+0      	; 0x18d6 <CAN_Write+0x6>
    18d6:	00 d0       	rcall	.+0      	; 0x18d8 <CAN_Write+0x8>
    18d8:	00 d0       	rcall	.+0      	; 0x18da <CAN_Write+0xa>
    18da:	cd b7       	in	r28, 0x3d	; 61
    18dc:	de b7       	in	r29, 0x3e	; 62
    18de:	9d 83       	std	Y+5, r25	; 0x05
    18e0:	8c 83       	std	Y+4, r24	; 0x04
    18e2:	6e 83       	std	Y+6, r22	; 0x06
    unsigned char i;
	// Cekam sve dok je magistrala zauzeta-> da li je neophodno?
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
    18e4:	00 00       	nop
    18e6:	89 ed       	ldi	r24, 0xD9	; 217
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	fc 01       	movw	r30, r24
    18ec:	80 81       	ld	r24, Z
    18ee:	82 95       	swap	r24
    18f0:	8f 70       	andi	r24, 0x0F	; 15
    18f2:	88 2f       	mov	r24, r24
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	81 70       	andi	r24, 0x01	; 1
    18f8:	99 27       	eor	r25, r25
    18fa:	89 2b       	or	r24, r25
    18fc:	a1 f7       	brne	.-24     	; 0x18e6 <CAN_Write+0x16>
    18fe:	89 ed       	ldi	r24, 0xD9	; 217
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	fc 01       	movw	r30, r24
    1904:	80 81       	ld	r24, Z
    1906:	86 95       	lsr	r24
    1908:	86 95       	lsr	r24
    190a:	86 95       	lsr	r24
    190c:	88 2f       	mov	r24, r24
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	81 70       	andi	r24, 0x01	; 1
    1912:	99 27       	eor	r25, r25
    1914:	89 2b       	or	r24, r25
    1916:	39 f7       	brne	.-50     	; 0x18e6 <CAN_Write+0x16>

	unsigned char ch;
	unsigned char tempPage = CANPAGE;
    1918:	8d ee       	ldi	r24, 0xED	; 237
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	fc 01       	movw	r30, r24
    191e:	80 81       	ld	r24, Z
    1920:	8b 83       	std	Y+3, r24	; 0x03

	// trazim slobodan MOb jel ovo sranje mene zajebava ili? sta ti treba? find all
	for(ch = 0; ch < 15; ch++)
    1922:	1a 82       	std	Y+2, r1	; 0x02
    1924:	15 c0       	rjmp	.+42     	; 0x1950 <CAN_Write+0x80>
	{
		CANPAGE = ch << 4;
    1926:	8d ee       	ldi	r24, 0xED	; 237
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	2a 81       	ldd	r18, Y+2	; 0x02
    192c:	22 95       	swap	r18
    192e:	20 7f       	andi	r18, 0xF0	; 240
    1930:	fc 01       	movw	r30, r24
    1932:	20 83       	st	Z, r18

		if(!(CANCDMOB >> 6))
    1934:	8f ee       	ldi	r24, 0xEF	; 239
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	fc 01       	movw	r30, r24
    193a:	80 81       	ld	r24, Z
    193c:	82 95       	swap	r24
    193e:	86 95       	lsr	r24
    1940:	86 95       	lsr	r24
    1942:	83 70       	andi	r24, 0x03	; 3
    1944:	88 23       	and	r24, r24
    1946:	09 f4       	brne	.+2      	; 0x194a <CAN_Write+0x7a>
			break;
    1948:	06 c0       	rjmp	.+12     	; 0x1956 <CAN_Write+0x86>

	unsigned char ch;
	unsigned char tempPage = CANPAGE;

	// trazim slobodan MOb jel ovo sranje mene zajebava ili? sta ti treba? find all
	for(ch = 0; ch < 15; ch++)
    194a:	8a 81       	ldd	r24, Y+2	; 0x02
    194c:	8f 5f       	subi	r24, 0xFF	; 255
    194e:	8a 83       	std	Y+2, r24	; 0x02
    1950:	8a 81       	ldd	r24, Y+2	; 0x02
    1952:	8f 30       	cpi	r24, 0x0F	; 15
    1954:	40 f3       	brcs	.-48     	; 0x1926 <CAN_Write+0x56>
		if(!(CANCDMOB >> 6))
			break;
	}

	// nema slobodnih MOb- ova
	if(ch == 15)
    1956:	8a 81       	ldd	r24, Y+2	; 0x02
    1958:	8f 30       	cpi	r24, 0x0F	; 15
    195a:	11 f4       	brne	.+4      	; 0x1960 <CAN_Write+0x90>
		return -1;
    195c:	8f ef       	ldi	r24, 0xFF	; 255
    195e:	39 c0       	rjmp	.+114    	; 0x19d2 <CAN_Write+0x102>


	//ova dva registra sadrze identifikator poruke koja ce se slati! efektivno to je adresa cvora koji ce primiti poruku
	CANIDT2 = (receivingNodeAddress & 0x0F) << 5;
    1960:	82 ef       	ldi	r24, 0xF2	; 242
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	2e 81       	ldd	r18, Y+6	; 0x06
    1966:	22 95       	swap	r18
    1968:	22 0f       	add	r18, r18
    196a:	20 7e       	andi	r18, 0xE0	; 224
    196c:	fc 01       	movw	r30, r24
    196e:	20 83       	st	Z, r18
	CANIDT1 = (receivingNodeAddress) >> 3;
    1970:	83 ef       	ldi	r24, 0xF3	; 243
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	2e 81       	ldd	r18, Y+6	; 0x06
    1976:	26 95       	lsr	r18
    1978:	26 95       	lsr	r18
    197a:	26 95       	lsr	r18
    197c:	fc 01       	movw	r30, r24
    197e:	20 83       	st	Z, r18

	// DLC = 8
	CANCDMOB = 8;
    1980:	8f ee       	ldi	r24, 0xEF	; 239
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	28 e0       	ldi	r18, 0x08	; 8
    1986:	fc 01       	movw	r30, r24
    1988:	20 83       	st	Z, r18

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(i = 0; i < 8; i++)
    198a:	19 82       	std	Y+1, r1	; 0x01
    198c:	10 c0       	rjmp	.+32     	; 0x19ae <CAN_Write+0xde>
		CANMSG = data[i];
    198e:	8a ef       	ldi	r24, 0xFA	; 250
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	29 81       	ldd	r18, Y+1	; 0x01
    1994:	22 2f       	mov	r18, r18
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	4c 81       	ldd	r20, Y+4	; 0x04
    199a:	5d 81       	ldd	r21, Y+5	; 0x05
    199c:	24 0f       	add	r18, r20
    199e:	35 1f       	adc	r19, r21
    19a0:	f9 01       	movw	r30, r18
    19a2:	20 81       	ld	r18, Z
    19a4:	fc 01       	movw	r30, r24
    19a6:	20 83       	st	Z, r18

	// DLC = 8
	CANCDMOB = 8;

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(i = 0; i < 8; i++)
    19a8:	89 81       	ldd	r24, Y+1	; 0x01
    19aa:	8f 5f       	subi	r24, 0xFF	; 255
    19ac:	89 83       	std	Y+1, r24	; 0x01
    19ae:	89 81       	ldd	r24, Y+1	; 0x01
    19b0:	88 30       	cpi	r24, 0x08	; 8
    19b2:	68 f3       	brcs	.-38     	; 0x198e <CAN_Write+0xbe>
		CANMSG = data[i];

	// podesavam ga kao predajnik
	CANCDMOB |= (1 << CONMOB0);
    19b4:	8f ee       	ldi	r24, 0xEF	; 239
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	2f ee       	ldi	r18, 0xEF	; 239
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	f9 01       	movw	r30, r18
    19be:	20 81       	ld	r18, Z
    19c0:	20 64       	ori	r18, 0x40	; 64
    19c2:	fc 01       	movw	r30, r24
    19c4:	20 83       	st	Z, r18

	CANPAGE = tempPage;
    19c6:	8d ee       	ldi	r24, 0xED	; 237
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	2b 81       	ldd	r18, Y+3	; 0x03
    19cc:	fc 01       	movw	r30, r24
    19ce:	20 83       	st	Z, r18

	return 0;
    19d0:	80 e0       	ldi	r24, 0x00	; 0
}
    19d2:	26 96       	adiw	r28, 0x06	; 6
    19d4:	0f b6       	in	r0, 0x3f	; 63
    19d6:	f8 94       	cli
    19d8:	de bf       	out	0x3e, r29	; 62
    19da:	0f be       	out	0x3f, r0	; 63
    19dc:	cd bf       	out	0x3d, r28	; 61
    19de:	df 91       	pop	r29
    19e0:	cf 91       	pop	r28
    19e2:	08 95       	ret

000019e4 <__list_add>:
        pos = list_next_entry(pos, member))

static inline void __list_add(struct list_head* new,
                              struct list_head* prev,
                              struct list_head* next)
{
    19e4:	cf 93       	push	r28
    19e6:	df 93       	push	r29
    19e8:	00 d0       	rcall	.+0      	; 0x19ea <__list_add+0x6>
    19ea:	00 d0       	rcall	.+0      	; 0x19ec <__list_add+0x8>
    19ec:	00 d0       	rcall	.+0      	; 0x19ee <__list_add+0xa>
    19ee:	cd b7       	in	r28, 0x3d	; 61
    19f0:	de b7       	in	r29, 0x3e	; 62
    19f2:	9a 83       	std	Y+2, r25	; 0x02
    19f4:	89 83       	std	Y+1, r24	; 0x01
    19f6:	7c 83       	std	Y+4, r23	; 0x04
    19f8:	6b 83       	std	Y+3, r22	; 0x03
    19fa:	5e 83       	std	Y+6, r21	; 0x06
    19fc:	4d 83       	std	Y+5, r20	; 0x05
    next->prev = new;
    19fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1a00:	9e 81       	ldd	r25, Y+6	; 0x06
    1a02:	29 81       	ldd	r18, Y+1	; 0x01
    1a04:	3a 81       	ldd	r19, Y+2	; 0x02
    1a06:	fc 01       	movw	r30, r24
    1a08:	31 83       	std	Z+1, r19	; 0x01
    1a0a:	20 83       	st	Z, r18
    new->next = next;
    1a0c:	89 81       	ldd	r24, Y+1	; 0x01
    1a0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a10:	2d 81       	ldd	r18, Y+5	; 0x05
    1a12:	3e 81       	ldd	r19, Y+6	; 0x06
    1a14:	fc 01       	movw	r30, r24
    1a16:	33 83       	std	Z+3, r19	; 0x03
    1a18:	22 83       	std	Z+2, r18	; 0x02
    new->prev = prev;
    1a1a:	89 81       	ldd	r24, Y+1	; 0x01
    1a1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a1e:	2b 81       	ldd	r18, Y+3	; 0x03
    1a20:	3c 81       	ldd	r19, Y+4	; 0x04
    1a22:	fc 01       	movw	r30, r24
    1a24:	31 83       	std	Z+1, r19	; 0x01
    1a26:	20 83       	st	Z, r18
    prev->next = new;
    1a28:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a2c:	29 81       	ldd	r18, Y+1	; 0x01
    1a2e:	3a 81       	ldd	r19, Y+2	; 0x02
    1a30:	fc 01       	movw	r30, r24
    1a32:	33 83       	std	Z+3, r19	; 0x03
    1a34:	22 83       	std	Z+2, r18	; 0x02
}
    1a36:	26 96       	adiw	r28, 0x06	; 6
    1a38:	0f b6       	in	r0, 0x3f	; 63
    1a3a:	f8 94       	cli
    1a3c:	de bf       	out	0x3e, r29	; 62
    1a3e:	0f be       	out	0x3f, r0	; 63
    1a40:	cd bf       	out	0x3d, r28	; 61
    1a42:	df 91       	pop	r29
    1a44:	cf 91       	pop	r28
    1a46:	08 95       	ret

00001a48 <list_add>:

static inline void list_add(struct list_head* new, struct list_head* head)
{
    1a48:	cf 93       	push	r28
    1a4a:	df 93       	push	r29
    1a4c:	00 d0       	rcall	.+0      	; 0x1a4e <list_add+0x6>
    1a4e:	00 d0       	rcall	.+0      	; 0x1a50 <list_add+0x8>
    1a50:	cd b7       	in	r28, 0x3d	; 61
    1a52:	de b7       	in	r29, 0x3e	; 62
    1a54:	9a 83       	std	Y+2, r25	; 0x02
    1a56:	89 83       	std	Y+1, r24	; 0x01
    1a58:	7c 83       	std	Y+4, r23	; 0x04
    1a5a:	6b 83       	std	Y+3, r22	; 0x03
    __list_add(new, head, head->next);
    1a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a60:	fc 01       	movw	r30, r24
    1a62:	42 81       	ldd	r20, Z+2	; 0x02
    1a64:	53 81       	ldd	r21, Z+3	; 0x03
    1a66:	2b 81       	ldd	r18, Y+3	; 0x03
    1a68:	3c 81       	ldd	r19, Y+4	; 0x04
    1a6a:	89 81       	ldd	r24, Y+1	; 0x01
    1a6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a6e:	b9 01       	movw	r22, r18
    1a70:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <__list_add>
}
    1a74:	0f 90       	pop	r0
    1a76:	0f 90       	pop	r0
    1a78:	0f 90       	pop	r0
    1a7a:	0f 90       	pop	r0
    1a7c:	df 91       	pop	r29
    1a7e:	cf 91       	pop	r28
    1a80:	08 95       	ret

00001a82 <gpio_register_pin>:
};

LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
    1a82:	cf 93       	push	r28
    1a84:	df 93       	push	r29
    1a86:	cd b7       	in	r28, 0x3d	; 61
    1a88:	de b7       	in	r29, 0x3e	; 62
    1a8a:	2b 97       	sbiw	r28, 0x0b	; 11
    1a8c:	0f b6       	in	r0, 0x3f	; 63
    1a8e:	f8 94       	cli
    1a90:	de bf       	out	0x3e, r29	; 62
    1a92:	0f be       	out	0x3f, r0	; 63
    1a94:	cd bf       	out	0x3d, r28	; 61
    1a96:	89 87       	std	Y+9, r24	; 0x09
    1a98:	6a 87       	std	Y+10, r22	; 0x0a
    1a9a:	4b 87       	std	Y+11, r20	; 0x0b
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    1a9c:	80 91 08 01 	lds	r24, 0x0108
    1aa0:	90 91 09 01 	lds	r25, 0x0109
    1aa4:	9c 83       	std	Y+4, r25	; 0x04
    1aa6:	8b 83       	std	Y+3, r24	; 0x03
    1aa8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aaa:	9c 81       	ldd	r25, Y+4	; 0x04
    1aac:	06 97       	sbiw	r24, 0x06	; 6
    1aae:	9a 83       	std	Y+2, r25	; 0x02
    1ab0:	89 83       	std	Y+1, r24	; 0x01
    1ab2:	15 c0       	rjmp	.+42     	; 0x1ade <gpio_register_pin+0x5c>
    {
        if(input->pin == pin)
    1ab4:	89 81       	ldd	r24, Y+1	; 0x01
    1ab6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab8:	fc 01       	movw	r30, r24
    1aba:	90 81       	ld	r25, Z
    1abc:	89 85       	ldd	r24, Y+9	; 0x09
    1abe:	98 17       	cp	r25, r24
    1ac0:	11 f4       	brne	.+4      	; 0x1ac6 <gpio_register_pin+0x44>
            return 1;
    1ac2:	81 e0       	ldi	r24, 0x01	; 1
    1ac4:	e5 c0       	rjmp	.+458    	; 0x1c90 <gpio_register_pin+0x20e>
LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    1ac6:	89 81       	ldd	r24, Y+1	; 0x01
    1ac8:	9a 81       	ldd	r25, Y+2	; 0x02
    1aca:	fc 01       	movw	r30, r24
    1acc:	80 85       	ldd	r24, Z+8	; 0x08
    1ace:	91 85       	ldd	r25, Z+9	; 0x09
    1ad0:	9e 83       	std	Y+6, r25	; 0x06
    1ad2:	8d 83       	std	Y+5, r24	; 0x05
    1ad4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ad6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ad8:	06 97       	sbiw	r24, 0x06	; 6
    1ada:	9a 83       	std	Y+2, r25	; 0x02
    1adc:	89 83       	std	Y+1, r24	; 0x01
    1ade:	89 81       	ldd	r24, Y+1	; 0x01
    1ae0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae2:	06 96       	adiw	r24, 0x06	; 6
    1ae4:	86 50       	subi	r24, 0x06	; 6
    1ae6:	91 40       	sbci	r25, 0x01	; 1
    1ae8:	29 f7       	brne	.-54     	; 0x1ab4 <gpio_register_pin+0x32>
    {
        if(input->pin == pin)
            return 1;
    }

	uint8_t port	= 1 + pin / 8;
    1aea:	89 85       	ldd	r24, Y+9	; 0x09
    1aec:	86 95       	lsr	r24
    1aee:	86 95       	lsr	r24
    1af0:	86 95       	lsr	r24
    1af2:	8f 5f       	subi	r24, 0xFF	; 255
    1af4:	8f 83       	std	Y+7, r24	; 0x07
	uint8_t pin_reg = pin % 8;
    1af6:	89 85       	ldd	r24, Y+9	; 0x09
    1af8:	87 70       	andi	r24, 0x07	; 7
    1afa:	88 87       	std	Y+8, r24	; 0x08
	if(direction == GPIO_DIRECTION_OUTPUT)
    1afc:	8a 85       	ldd	r24, Y+10	; 0x0a
    1afe:	81 30       	cpi	r24, 0x01	; 1
    1b00:	09 f0       	breq	.+2      	; 0x1b04 <gpio_register_pin+0x82>
    1b02:	55 c0       	rjmp	.+170    	; 0x1bae <gpio_register_pin+0x12c>
	{
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) |= (1 << pin_reg);
    1b04:	8f 81       	ldd	r24, Y+7	; 0x07
    1b06:	88 2f       	mov	r24, r24
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	9c 01       	movw	r18, r24
    1b0c:	21 50       	subi	r18, 0x01	; 1
    1b0e:	31 09       	sbc	r19, r1
    1b10:	c9 01       	movw	r24, r18
    1b12:	88 0f       	add	r24, r24
    1b14:	99 1f       	adc	r25, r25
    1b16:	82 0f       	add	r24, r18
    1b18:	93 1f       	adc	r25, r19
    1b1a:	81 96       	adiw	r24, 0x21	; 33
    1b1c:	ac 01       	movw	r20, r24
    1b1e:	8f 81       	ldd	r24, Y+7	; 0x07
    1b20:	88 2f       	mov	r24, r24
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	9c 01       	movw	r18, r24
    1b26:	21 50       	subi	r18, 0x01	; 1
    1b28:	31 09       	sbc	r19, r1
    1b2a:	c9 01       	movw	r24, r18
    1b2c:	88 0f       	add	r24, r24
    1b2e:	99 1f       	adc	r25, r25
    1b30:	82 0f       	add	r24, r18
    1b32:	93 1f       	adc	r25, r19
    1b34:	81 96       	adiw	r24, 0x21	; 33
    1b36:	fc 01       	movw	r30, r24
    1b38:	80 81       	ld	r24, Z
    1b3a:	68 2f       	mov	r22, r24
    1b3c:	88 85       	ldd	r24, Y+8	; 0x08
    1b3e:	28 2f       	mov	r18, r24
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	81 e0       	ldi	r24, 0x01	; 1
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	02 c0       	rjmp	.+4      	; 0x1b4c <gpio_register_pin+0xca>
    1b48:	88 0f       	add	r24, r24
    1b4a:	99 1f       	adc	r25, r25
    1b4c:	2a 95       	dec	r18
    1b4e:	e2 f7       	brpl	.-8      	; 0x1b48 <gpio_register_pin+0xc6>
    1b50:	86 2b       	or	r24, r22
    1b52:	fa 01       	movw	r30, r20
    1b54:	80 83       	st	Z, r24
		*(volatile uint8_t*)(0x22 + 3 *  (port - 1)) &= ~(1 << pin_reg);
    1b56:	8f 81       	ldd	r24, Y+7	; 0x07
    1b58:	88 2f       	mov	r24, r24
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	9c 01       	movw	r18, r24
    1b5e:	21 50       	subi	r18, 0x01	; 1
    1b60:	31 09       	sbc	r19, r1
    1b62:	c9 01       	movw	r24, r18
    1b64:	88 0f       	add	r24, r24
    1b66:	99 1f       	adc	r25, r25
    1b68:	82 0f       	add	r24, r18
    1b6a:	93 1f       	adc	r25, r19
    1b6c:	82 96       	adiw	r24, 0x22	; 34
    1b6e:	ac 01       	movw	r20, r24
    1b70:	8f 81       	ldd	r24, Y+7	; 0x07
    1b72:	88 2f       	mov	r24, r24
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	9c 01       	movw	r18, r24
    1b78:	21 50       	subi	r18, 0x01	; 1
    1b7a:	31 09       	sbc	r19, r1
    1b7c:	c9 01       	movw	r24, r18
    1b7e:	88 0f       	add	r24, r24
    1b80:	99 1f       	adc	r25, r25
    1b82:	82 0f       	add	r24, r18
    1b84:	93 1f       	adc	r25, r19
    1b86:	82 96       	adiw	r24, 0x22	; 34
    1b88:	fc 01       	movw	r30, r24
    1b8a:	80 81       	ld	r24, Z
    1b8c:	68 2f       	mov	r22, r24
    1b8e:	88 85       	ldd	r24, Y+8	; 0x08
    1b90:	28 2f       	mov	r18, r24
    1b92:	30 e0       	ldi	r19, 0x00	; 0
    1b94:	81 e0       	ldi	r24, 0x01	; 1
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	02 c0       	rjmp	.+4      	; 0x1b9e <gpio_register_pin+0x11c>
    1b9a:	88 0f       	add	r24, r24
    1b9c:	99 1f       	adc	r25, r25
    1b9e:	2a 95       	dec	r18
    1ba0:	e2 f7       	brpl	.-8      	; 0x1b9a <gpio_register_pin+0x118>
    1ba2:	80 95       	com	r24
    1ba4:	86 23       	and	r24, r22
    1ba6:	fa 01       	movw	r30, r20
    1ba8:	80 83       	st	Z, r24
        return 0;
    1baa:	80 e0       	ldi	r24, 0x00	; 0
    1bac:	71 c0       	rjmp	.+226    	; 0x1c90 <gpio_register_pin+0x20e>
	}
	else
	{
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) &= ~(1 << pin_reg);
    1bae:	8f 81       	ldd	r24, Y+7	; 0x07
    1bb0:	88 2f       	mov	r24, r24
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	9c 01       	movw	r18, r24
    1bb6:	21 50       	subi	r18, 0x01	; 1
    1bb8:	31 09       	sbc	r19, r1
    1bba:	c9 01       	movw	r24, r18
    1bbc:	88 0f       	add	r24, r24
    1bbe:	99 1f       	adc	r25, r25
    1bc0:	82 0f       	add	r24, r18
    1bc2:	93 1f       	adc	r25, r19
    1bc4:	81 96       	adiw	r24, 0x21	; 33
    1bc6:	ac 01       	movw	r20, r24
    1bc8:	8f 81       	ldd	r24, Y+7	; 0x07
    1bca:	88 2f       	mov	r24, r24
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	9c 01       	movw	r18, r24
    1bd0:	21 50       	subi	r18, 0x01	; 1
    1bd2:	31 09       	sbc	r19, r1
    1bd4:	c9 01       	movw	r24, r18
    1bd6:	88 0f       	add	r24, r24
    1bd8:	99 1f       	adc	r25, r25
    1bda:	82 0f       	add	r24, r18
    1bdc:	93 1f       	adc	r25, r19
    1bde:	81 96       	adiw	r24, 0x21	; 33
    1be0:	fc 01       	movw	r30, r24
    1be2:	80 81       	ld	r24, Z
    1be4:	68 2f       	mov	r22, r24
    1be6:	88 85       	ldd	r24, Y+8	; 0x08
    1be8:	28 2f       	mov	r18, r24
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	81 e0       	ldi	r24, 0x01	; 1
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	02 c0       	rjmp	.+4      	; 0x1bf6 <gpio_register_pin+0x174>
    1bf2:	88 0f       	add	r24, r24
    1bf4:	99 1f       	adc	r25, r25
    1bf6:	2a 95       	dec	r18
    1bf8:	e2 f7       	brpl	.-8      	; 0x1bf2 <gpio_register_pin+0x170>
    1bfa:	80 95       	com	r24
    1bfc:	86 23       	and	r24, r22
    1bfe:	fa 01       	movw	r30, r20
    1c00:	80 83       	st	Z, r24
		*(volatile uint8_t*)(0x22 + 3 *  (port - 1)) |= (1 << pin_reg);
    1c02:	8f 81       	ldd	r24, Y+7	; 0x07
    1c04:	88 2f       	mov	r24, r24
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	9c 01       	movw	r18, r24
    1c0a:	21 50       	subi	r18, 0x01	; 1
    1c0c:	31 09       	sbc	r19, r1
    1c0e:	c9 01       	movw	r24, r18
    1c10:	88 0f       	add	r24, r24
    1c12:	99 1f       	adc	r25, r25
    1c14:	82 0f       	add	r24, r18
    1c16:	93 1f       	adc	r25, r19
    1c18:	82 96       	adiw	r24, 0x22	; 34
    1c1a:	ac 01       	movw	r20, r24
    1c1c:	8f 81       	ldd	r24, Y+7	; 0x07
    1c1e:	88 2f       	mov	r24, r24
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	9c 01       	movw	r18, r24
    1c24:	21 50       	subi	r18, 0x01	; 1
    1c26:	31 09       	sbc	r19, r1
    1c28:	c9 01       	movw	r24, r18
    1c2a:	88 0f       	add	r24, r24
    1c2c:	99 1f       	adc	r25, r25
    1c2e:	82 0f       	add	r24, r18
    1c30:	93 1f       	adc	r25, r19
    1c32:	82 96       	adiw	r24, 0x22	; 34
    1c34:	fc 01       	movw	r30, r24
    1c36:	80 81       	ld	r24, Z
    1c38:	68 2f       	mov	r22, r24
    1c3a:	88 85       	ldd	r24, Y+8	; 0x08
    1c3c:	28 2f       	mov	r18, r24
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	02 c0       	rjmp	.+4      	; 0x1c4a <gpio_register_pin+0x1c8>
    1c46:	88 0f       	add	r24, r24
    1c48:	99 1f       	adc	r25, r25
    1c4a:	2a 95       	dec	r18
    1c4c:	e2 f7       	brpl	.-8      	; 0x1c46 <gpio_register_pin+0x1c4>
    1c4e:	86 2b       	or	r24, r22
    1c50:	fa 01       	movw	r30, r20
    1c52:	80 83       	st	Z, r24
	}
    input = (struct gpio_input*)malloc(sizeof(struct gpio_input));
    1c54:	8a e0       	ldi	r24, 0x0A	; 10
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	0e 94 03 20 	call	0x4006	; 0x4006 <malloc>
    1c5c:	9a 83       	std	Y+2, r25	; 0x02
    1c5e:	89 83       	std	Y+1, r24	; 0x01
    if(input == NULL)
    1c60:	89 81       	ldd	r24, Y+1	; 0x01
    1c62:	9a 81       	ldd	r25, Y+2	; 0x02
    1c64:	89 2b       	or	r24, r25
    1c66:	11 f4       	brne	.+4      	; 0x1c6c <gpio_register_pin+0x1ea>
        return 1;
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	12 c0       	rjmp	.+36     	; 0x1c90 <gpio_register_pin+0x20e>

    input->pin       = pin;
    1c6c:	89 81       	ldd	r24, Y+1	; 0x01
    1c6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c70:	29 85       	ldd	r18, Y+9	; 0x09
    1c72:	fc 01       	movw	r30, r24
    1c74:	20 83       	st	Z, r18
    input->pulled_up = pulled_up;
    1c76:	89 81       	ldd	r24, Y+1	; 0x01
    1c78:	9a 81       	ldd	r25, Y+2	; 0x02
    1c7a:	2b 85       	ldd	r18, Y+11	; 0x0b
    1c7c:	fc 01       	movw	r30, r24
    1c7e:	21 83       	std	Z+1, r18	; 0x01
    list_add(&input->list, &gpio_inputs);
    1c80:	89 81       	ldd	r24, Y+1	; 0x01
    1c82:	9a 81       	ldd	r25, Y+2	; 0x02
    1c84:	06 96       	adiw	r24, 0x06	; 6
    1c86:	66 e0       	ldi	r22, 0x06	; 6
    1c88:	71 e0       	ldi	r23, 0x01	; 1
    1c8a:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <list_add>

    return 0;
    1c8e:	80 e0       	ldi	r24, 0x00	; 0
}
    1c90:	2b 96       	adiw	r28, 0x0b	; 11
    1c92:	0f b6       	in	r0, 0x3f	; 63
    1c94:	f8 94       	cli
    1c96:	de bf       	out	0x3e, r29	; 62
    1c98:	0f be       	out	0x3f, r0	; 63
    1c9a:	cd bf       	out	0x3d, r28	; 61
    1c9c:	df 91       	pop	r29
    1c9e:	cf 91       	pop	r28
    1ca0:	08 95       	ret

00001ca2 <gpio_write_pin>:

uint8_t gpio_write_pin(uint8_t pin, bool value)
{
    1ca2:	cf 93       	push	r28
    1ca4:	df 93       	push	r29
    1ca6:	00 d0       	rcall	.+0      	; 0x1ca8 <gpio_write_pin+0x6>
    1ca8:	00 d0       	rcall	.+0      	; 0x1caa <gpio_write_pin+0x8>
    1caa:	cd b7       	in	r28, 0x3d	; 61
    1cac:	de b7       	in	r29, 0x3e	; 62
    1cae:	8b 83       	std	Y+3, r24	; 0x03
    1cb0:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t port = 1 + pin / 8;
    1cb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb4:	86 95       	lsr	r24
    1cb6:	86 95       	lsr	r24
    1cb8:	86 95       	lsr	r24
    1cba:	8f 5f       	subi	r24, 0xFF	; 255
    1cbc:	89 83       	std	Y+1, r24	; 0x01
	pin = pin % 8;
    1cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc0:	87 70       	andi	r24, 0x07	; 7
    1cc2:	8b 83       	std	Y+3, r24	; 0x03

	uint8_t temp = *(volatile uint32_t*)(0x22 + 3 * (port - 1));
    1cc4:	89 81       	ldd	r24, Y+1	; 0x01
    1cc6:	88 2f       	mov	r24, r24
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	9c 01       	movw	r18, r24
    1ccc:	21 50       	subi	r18, 0x01	; 1
    1cce:	31 09       	sbc	r19, r1
    1cd0:	c9 01       	movw	r24, r18
    1cd2:	88 0f       	add	r24, r24
    1cd4:	99 1f       	adc	r25, r25
    1cd6:	82 0f       	add	r24, r18
    1cd8:	93 1f       	adc	r25, r19
    1cda:	82 96       	adiw	r24, 0x22	; 34
    1cdc:	fc 01       	movw	r30, r24
    1cde:	80 81       	ld	r24, Z
    1ce0:	91 81       	ldd	r25, Z+1	; 0x01
    1ce2:	a2 81       	ldd	r26, Z+2	; 0x02
    1ce4:	b3 81       	ldd	r27, Z+3	; 0x03
    1ce6:	8a 83       	std	Y+2, r24	; 0x02
	if(value != 0)
    1ce8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cea:	88 23       	and	r24, r24
    1cec:	31 f1       	breq	.+76     	; 0x1d3a <gpio_write_pin+0x98>
		*(volatile uint32_t*)(0x22 + 3 * (port - 1)) = temp | (1 << pin);
    1cee:	89 81       	ldd	r24, Y+1	; 0x01
    1cf0:	88 2f       	mov	r24, r24
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	9c 01       	movw	r18, r24
    1cf6:	21 50       	subi	r18, 0x01	; 1
    1cf8:	31 09       	sbc	r19, r1
    1cfa:	c9 01       	movw	r24, r18
    1cfc:	88 0f       	add	r24, r24
    1cfe:	99 1f       	adc	r25, r25
    1d00:	82 0f       	add	r24, r18
    1d02:	93 1f       	adc	r25, r19
    1d04:	82 96       	adiw	r24, 0x22	; 34
    1d06:	ac 01       	movw	r20, r24
    1d08:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0a:	28 2f       	mov	r18, r24
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d10:	68 2f       	mov	r22, r24
    1d12:	70 e0       	ldi	r23, 0x00	; 0
    1d14:	81 e0       	ldi	r24, 0x01	; 1
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	02 c0       	rjmp	.+4      	; 0x1d1e <gpio_write_pin+0x7c>
    1d1a:	88 0f       	add	r24, r24
    1d1c:	99 1f       	adc	r25, r25
    1d1e:	6a 95       	dec	r22
    1d20:	e2 f7       	brpl	.-8      	; 0x1d1a <gpio_write_pin+0x78>
    1d22:	82 2b       	or	r24, r18
    1d24:	93 2b       	or	r25, r19
    1d26:	09 2e       	mov	r0, r25
    1d28:	00 0c       	add	r0, r0
    1d2a:	aa 0b       	sbc	r26, r26
    1d2c:	bb 0b       	sbc	r27, r27
    1d2e:	fa 01       	movw	r30, r20
    1d30:	80 83       	st	Z, r24
    1d32:	91 83       	std	Z+1, r25	; 0x01
    1d34:	a2 83       	std	Z+2, r26	; 0x02
    1d36:	b3 83       	std	Z+3, r27	; 0x03
    1d38:	27 c0       	rjmp	.+78     	; 0x1d88 <gpio_write_pin+0xe6>
	else
		*(volatile uint32_t*)(0x22 + 3 * (port - 1)) = temp & ~(1 << pin);
    1d3a:	89 81       	ldd	r24, Y+1	; 0x01
    1d3c:	88 2f       	mov	r24, r24
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	9c 01       	movw	r18, r24
    1d42:	21 50       	subi	r18, 0x01	; 1
    1d44:	31 09       	sbc	r19, r1
    1d46:	c9 01       	movw	r24, r18
    1d48:	88 0f       	add	r24, r24
    1d4a:	99 1f       	adc	r25, r25
    1d4c:	82 0f       	add	r24, r18
    1d4e:	93 1f       	adc	r25, r19
    1d50:	82 96       	adiw	r24, 0x22	; 34
    1d52:	ac 01       	movw	r20, r24
    1d54:	8a 81       	ldd	r24, Y+2	; 0x02
    1d56:	28 2f       	mov	r18, r24
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5c:	68 2f       	mov	r22, r24
    1d5e:	70 e0       	ldi	r23, 0x00	; 0
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	02 c0       	rjmp	.+4      	; 0x1d6a <gpio_write_pin+0xc8>
    1d66:	88 0f       	add	r24, r24
    1d68:	99 1f       	adc	r25, r25
    1d6a:	6a 95       	dec	r22
    1d6c:	e2 f7       	brpl	.-8      	; 0x1d66 <gpio_write_pin+0xc4>
    1d6e:	80 95       	com	r24
    1d70:	90 95       	com	r25
    1d72:	82 23       	and	r24, r18
    1d74:	93 23       	and	r25, r19
    1d76:	09 2e       	mov	r0, r25
    1d78:	00 0c       	add	r0, r0
    1d7a:	aa 0b       	sbc	r26, r26
    1d7c:	bb 0b       	sbc	r27, r27
    1d7e:	fa 01       	movw	r30, r20
    1d80:	80 83       	st	Z, r24
    1d82:	91 83       	std	Z+1, r25	; 0x01
    1d84:	a2 83       	std	Z+2, r26	; 0x02
    1d86:	b3 83       	std	Z+3, r27	; 0x03
	return 0;
    1d88:	80 e0       	ldi	r24, 0x00	; 0
}
    1d8a:	0f 90       	pop	r0
    1d8c:	0f 90       	pop	r0
    1d8e:	0f 90       	pop	r0
    1d90:	0f 90       	pop	r0
    1d92:	df 91       	pop	r29
    1d94:	cf 91       	pop	r28
    1d96:	08 95       	ret

00001d98 <__gpio_read_pin>:

static uint8_t __gpio_read_pin(uint8_t pin)
{
    1d98:	cf 93       	push	r28
    1d9a:	df 93       	push	r29
    1d9c:	00 d0       	rcall	.+0      	; 0x1d9e <__gpio_read_pin+0x6>
    1d9e:	1f 92       	push	r1
    1da0:	cd b7       	in	r28, 0x3d	; 61
    1da2:	de b7       	in	r29, 0x3e	; 62
    1da4:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t port = 1 + pin / 8;
    1da6:	8b 81       	ldd	r24, Y+3	; 0x03
    1da8:	86 95       	lsr	r24
    1daa:	86 95       	lsr	r24
    1dac:	86 95       	lsr	r24
    1dae:	8f 5f       	subi	r24, 0xFF	; 255
    1db0:	89 83       	std	Y+1, r24	; 0x01
    pin = pin % 8;
    1db2:	8b 81       	ldd	r24, Y+3	; 0x03
    1db4:	87 70       	andi	r24, 0x07	; 7
    1db6:	8b 83       	std	Y+3, r24	; 0x03
	
	uint8_t temp = (*((volatile uint8_t*)(0x20 + 3 * (port - 1))));
    1db8:	89 81       	ldd	r24, Y+1	; 0x01
    1dba:	88 2f       	mov	r24, r24
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	9c 01       	movw	r18, r24
    1dc0:	21 50       	subi	r18, 0x01	; 1
    1dc2:	31 09       	sbc	r19, r1
    1dc4:	c9 01       	movw	r24, r18
    1dc6:	88 0f       	add	r24, r24
    1dc8:	99 1f       	adc	r25, r25
    1dca:	82 0f       	add	r24, r18
    1dcc:	93 1f       	adc	r25, r19
    1dce:	80 96       	adiw	r24, 0x20	; 32
    1dd0:	fc 01       	movw	r30, r24
    1dd2:	80 81       	ld	r24, Z
    1dd4:	8a 83       	std	Y+2, r24	; 0x02

    return ((temp >> pin) & 0x01);
    1dd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd8:	88 2f       	mov	r24, r24
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	2b 81       	ldd	r18, Y+3	; 0x03
    1dde:	22 2f       	mov	r18, r18
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	02 c0       	rjmp	.+4      	; 0x1de8 <__gpio_read_pin+0x50>
    1de4:	95 95       	asr	r25
    1de6:	87 95       	ror	r24
    1de8:	2a 95       	dec	r18
    1dea:	e2 f7       	brpl	.-8      	; 0x1de4 <__gpio_read_pin+0x4c>
    1dec:	81 70       	andi	r24, 0x01	; 1
}
    1dee:	0f 90       	pop	r0
    1df0:	0f 90       	pop	r0
    1df2:	0f 90       	pop	r0
    1df4:	df 91       	pop	r29
    1df6:	cf 91       	pop	r28
    1df8:	08 95       	ret

00001dfa <gpio_read_pin>:

uint8_t gpio_read_pin(uint8_t pin)
{
    1dfa:	cf 93       	push	r28
    1dfc:	df 93       	push	r29
    1dfe:	cd b7       	in	r28, 0x3d	; 61
    1e00:	de b7       	in	r29, 0x3e	; 62
    1e02:	29 97       	sbiw	r28, 0x09	; 9
    1e04:	0f b6       	in	r0, 0x3f	; 63
    1e06:	f8 94       	cli
    1e08:	de bf       	out	0x3e, r29	; 62
    1e0a:	0f be       	out	0x3f, r0	; 63
    1e0c:	cd bf       	out	0x3d, r28	; 61
    1e0e:	89 87       	std	Y+9, r24	; 0x09
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    1e10:	80 91 08 01 	lds	r24, 0x0108
    1e14:	90 91 09 01 	lds	r25, 0x0109
    1e18:	9d 83       	std	Y+5, r25	; 0x05
    1e1a:	8c 83       	std	Y+4, r24	; 0x04
    1e1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e1e:	9d 81       	ldd	r25, Y+5	; 0x05
    1e20:	06 97       	sbiw	r24, 0x06	; 6
    1e22:	9a 83       	std	Y+2, r25	; 0x02
    1e24:	89 83       	std	Y+1, r24	; 0x01
    1e26:	55 c0       	rjmp	.+170    	; 0x1ed2 <gpio_read_pin+0xd8>
    {
        if(pin == input->pin)
    1e28:	89 81       	ldd	r24, Y+1	; 0x01
    1e2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e2c:	fc 01       	movw	r30, r24
    1e2e:	90 81       	ld	r25, Z
    1e30:	89 85       	ldd	r24, Y+9	; 0x09
    1e32:	98 17       	cp	r25, r24
    1e34:	09 f0       	breq	.+2      	; 0x1e38 <gpio_read_pin+0x3e>
    1e36:	41 c0       	rjmp	.+130    	; 0x1eba <gpio_read_pin+0xc0>
        {
            uint8_t i = 0;
    1e38:	1b 82       	std	Y+3, r1	; 0x03
            while(i < GPIO_DEBOUNCE_COUNT - 1)
    1e3a:	1f c0       	rjmp	.+62     	; 0x1e7a <gpio_read_pin+0x80>
            {
                if(input->values[i] != input->values[i + 1])
    1e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3e:	88 2f       	mov	r24, r24
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	29 81       	ldd	r18, Y+1	; 0x01
    1e44:	3a 81       	ldd	r19, Y+2	; 0x02
    1e46:	82 0f       	add	r24, r18
    1e48:	93 1f       	adc	r25, r19
    1e4a:	02 96       	adiw	r24, 0x02	; 2
    1e4c:	fc 01       	movw	r30, r24
    1e4e:	40 81       	ld	r20, Z
    1e50:	8b 81       	ldd	r24, Y+3	; 0x03
    1e52:	88 2f       	mov	r24, r24
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	01 96       	adiw	r24, 0x01	; 1
    1e58:	29 81       	ldd	r18, Y+1	; 0x01
    1e5a:	3a 81       	ldd	r19, Y+2	; 0x02
    1e5c:	82 0f       	add	r24, r18
    1e5e:	93 1f       	adc	r25, r19
    1e60:	02 96       	adiw	r24, 0x02	; 2
    1e62:	fc 01       	movw	r30, r24
    1e64:	80 81       	ld	r24, Z
    1e66:	48 17       	cp	r20, r24
    1e68:	29 f0       	breq	.+10     	; 0x1e74 <gpio_read_pin+0x7a>
                    return input->previous_state;
    1e6a:	89 81       	ldd	r24, Y+1	; 0x01
    1e6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e6e:	fc 01       	movw	r30, r24
    1e70:	85 81       	ldd	r24, Z+5	; 0x05
    1e72:	37 c0       	rjmp	.+110    	; 0x1ee2 <gpio_read_pin+0xe8>
                i++;
    1e74:	8b 81       	ldd	r24, Y+3	; 0x03
    1e76:	8f 5f       	subi	r24, 0xFF	; 255
    1e78:	8b 83       	std	Y+3, r24	; 0x03
    list_for_each_entry(input, &gpio_inputs, list)
    {
        if(pin == input->pin)
        {
            uint8_t i = 0;
            while(i < GPIO_DEBOUNCE_COUNT - 1)
    1e7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7c:	82 30       	cpi	r24, 0x02	; 2
    1e7e:	f0 f2       	brcs	.-68     	; 0x1e3c <gpio_read_pin+0x42>
                if(input->values[i] != input->values[i + 1])
                    return input->previous_state;
                i++;
            }

            uint8_t state = input->pulled_up == false ? (input->values[0]) : !(input->values[0]);
    1e80:	89 81       	ldd	r24, Y+1	; 0x01
    1e82:	9a 81       	ldd	r25, Y+2	; 0x02
    1e84:	fc 01       	movw	r30, r24
    1e86:	91 81       	ldd	r25, Z+1	; 0x01
    1e88:	81 e0       	ldi	r24, 0x01	; 1
    1e8a:	89 27       	eor	r24, r25
    1e8c:	88 23       	and	r24, r24
    1e8e:	29 f0       	breq	.+10     	; 0x1e9a <gpio_read_pin+0xa0>
    1e90:	89 81       	ldd	r24, Y+1	; 0x01
    1e92:	9a 81       	ldd	r25, Y+2	; 0x02
    1e94:	fc 01       	movw	r30, r24
    1e96:	82 81       	ldd	r24, Z+2	; 0x02
    1e98:	08 c0       	rjmp	.+16     	; 0x1eaa <gpio_read_pin+0xb0>
    1e9a:	89 81       	ldd	r24, Y+1	; 0x01
    1e9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e9e:	fc 01       	movw	r30, r24
    1ea0:	92 81       	ldd	r25, Z+2	; 0x02
    1ea2:	81 e0       	ldi	r24, 0x01	; 1
    1ea4:	99 23       	and	r25, r25
    1ea6:	09 f0       	breq	.+2      	; 0x1eaa <gpio_read_pin+0xb0>
    1ea8:	80 e0       	ldi	r24, 0x00	; 0
    1eaa:	88 87       	std	Y+8, r24	; 0x08
            input->previous_state = state;
    1eac:	89 81       	ldd	r24, Y+1	; 0x01
    1eae:	9a 81       	ldd	r25, Y+2	; 0x02
    1eb0:	28 85       	ldd	r18, Y+8	; 0x08
    1eb2:	fc 01       	movw	r30, r24
    1eb4:	25 83       	std	Z+5, r18	; 0x05

            return state;
    1eb6:	88 85       	ldd	r24, Y+8	; 0x08
    1eb8:	14 c0       	rjmp	.+40     	; 0x1ee2 <gpio_read_pin+0xe8>
}

uint8_t gpio_read_pin(uint8_t pin)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    1eba:	89 81       	ldd	r24, Y+1	; 0x01
    1ebc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ebe:	fc 01       	movw	r30, r24
    1ec0:	80 85       	ldd	r24, Z+8	; 0x08
    1ec2:	91 85       	ldd	r25, Z+9	; 0x09
    1ec4:	9f 83       	std	Y+7, r25	; 0x07
    1ec6:	8e 83       	std	Y+6, r24	; 0x06
    1ec8:	8e 81       	ldd	r24, Y+6	; 0x06
    1eca:	9f 81       	ldd	r25, Y+7	; 0x07
    1ecc:	06 97       	sbiw	r24, 0x06	; 6
    1ece:	9a 83       	std	Y+2, r25	; 0x02
    1ed0:	89 83       	std	Y+1, r24	; 0x01
    1ed2:	89 81       	ldd	r24, Y+1	; 0x01
    1ed4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ed6:	06 96       	adiw	r24, 0x06	; 6
    1ed8:	86 50       	subi	r24, 0x06	; 6
    1eda:	91 40       	sbci	r25, 0x01	; 1
    1edc:	09 f0       	breq	.+2      	; 0x1ee0 <gpio_read_pin+0xe6>
    1ede:	a4 cf       	rjmp	.-184    	; 0x1e28 <gpio_read_pin+0x2e>

            return state;
        }
    }

    return 1;
    1ee0:	81 e0       	ldi	r24, 0x01	; 1
}
    1ee2:	29 96       	adiw	r28, 0x09	; 9
    1ee4:	0f b6       	in	r0, 0x3f	; 63
    1ee6:	f8 94       	cli
    1ee8:	de bf       	out	0x3e, r29	; 62
    1eea:	0f be       	out	0x3f, r0	; 63
    1eec:	cd bf       	out	0x3d, r28	; 61
    1eee:	df 91       	pop	r29
    1ef0:	cf 91       	pop	r28
    1ef2:	08 95       	ret

00001ef4 <gpio_debouncer>:
uint16_t test = 0;
void gpio_debouncer(void)
{
    1ef4:	0f 93       	push	r16
    1ef6:	1f 93       	push	r17
    1ef8:	cf 93       	push	r28
    1efa:	df 93       	push	r29
    1efc:	00 d0       	rcall	.+0      	; 0x1efe <gpio_debouncer+0xa>
    1efe:	00 d0       	rcall	.+0      	; 0x1f00 <gpio_debouncer+0xc>
    1f00:	00 d0       	rcall	.+0      	; 0x1f02 <gpio_debouncer+0xe>
    1f02:	cd b7       	in	r28, 0x3d	; 61
    1f04:	de b7       	in	r29, 0x3e	; 62
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    1f06:	80 91 08 01 	lds	r24, 0x0108
    1f0a:	90 91 09 01 	lds	r25, 0x0109
    1f0e:	9c 83       	std	Y+4, r25	; 0x04
    1f10:	8b 83       	std	Y+3, r24	; 0x03
    1f12:	8b 81       	ldd	r24, Y+3	; 0x03
    1f14:	9c 81       	ldd	r25, Y+4	; 0x04
    1f16:	06 97       	sbiw	r24, 0x06	; 6
    1f18:	9a 83       	std	Y+2, r25	; 0x02
    1f1a:	89 83       	std	Y+1, r24	; 0x01
    1f1c:	1e c0       	rjmp	.+60     	; 0x1f5a <gpio_debouncer+0x66>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    1f1e:	00 91 7e 01 	lds	r16, 0x017E
    1f22:	10 91 7f 01 	lds	r17, 0x017F
    1f26:	89 81       	ldd	r24, Y+1	; 0x01
    1f28:	9a 81       	ldd	r25, Y+2	; 0x02
    1f2a:	fc 01       	movw	r30, r24
    1f2c:	80 81       	ld	r24, Z
    1f2e:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <__gpio_read_pin>
    1f32:	28 2f       	mov	r18, r24
    1f34:	89 81       	ldd	r24, Y+1	; 0x01
    1f36:	9a 81       	ldd	r25, Y+2	; 0x02
    1f38:	80 0f       	add	r24, r16
    1f3a:	91 1f       	adc	r25, r17
    1f3c:	02 96       	adiw	r24, 0x02	; 2
    1f3e:	fc 01       	movw	r30, r24
    1f40:	20 83       	st	Z, r18
uint16_t test = 0;
void gpio_debouncer(void)
{
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    1f42:	89 81       	ldd	r24, Y+1	; 0x01
    1f44:	9a 81       	ldd	r25, Y+2	; 0x02
    1f46:	fc 01       	movw	r30, r24
    1f48:	80 85       	ldd	r24, Z+8	; 0x08
    1f4a:	91 85       	ldd	r25, Z+9	; 0x09
    1f4c:	9e 83       	std	Y+6, r25	; 0x06
    1f4e:	8d 83       	std	Y+5, r24	; 0x05
    1f50:	8d 81       	ldd	r24, Y+5	; 0x05
    1f52:	9e 81       	ldd	r25, Y+6	; 0x06
    1f54:	06 97       	sbiw	r24, 0x06	; 6
    1f56:	9a 83       	std	Y+2, r25	; 0x02
    1f58:	89 83       	std	Y+1, r24	; 0x01
    1f5a:	89 81       	ldd	r24, Y+1	; 0x01
    1f5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f5e:	06 96       	adiw	r24, 0x06	; 6
    1f60:	86 50       	subi	r24, 0x06	; 6
    1f62:	91 40       	sbci	r25, 0x01	; 1
    1f64:	e1 f6       	brne	.-72     	; 0x1f1e <gpio_debouncer+0x2a>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    }

    if(++count == GPIO_DEBOUNCE_COUNT)
    1f66:	80 91 7e 01 	lds	r24, 0x017E
    1f6a:	90 91 7f 01 	lds	r25, 0x017F
    1f6e:	01 96       	adiw	r24, 0x01	; 1
    1f70:	90 93 7f 01 	sts	0x017F, r25
    1f74:	80 93 7e 01 	sts	0x017E, r24
    1f78:	03 97       	sbiw	r24, 0x03	; 3
    1f7a:	21 f4       	brne	.+8      	; 0x1f84 <gpio_debouncer+0x90>
        count = 0;
    1f7c:	10 92 7f 01 	sts	0x017F, r1
    1f80:	10 92 7e 01 	sts	0x017E, r1
	
}
    1f84:	26 96       	adiw	r28, 0x06	; 6
    1f86:	0f b6       	in	r0, 0x3f	; 63
    1f88:	f8 94       	cli
    1f8a:	de bf       	out	0x3e, r29	; 62
    1f8c:	0f be       	out	0x3f, r0	; 63
    1f8e:	cd bf       	out	0x3d, r28	; 61
    1f90:	df 91       	pop	r29
    1f92:	cf 91       	pop	r28
    1f94:	1f 91       	pop	r17
    1f96:	0f 91       	pop	r16
    1f98:	08 95       	ret

00001f9a <odometry_set_speed>:
	.angle = 0,
	.state = IDLE
};

void odometry_set_speed(uint8_t speed)
{
    1f9a:	cf 93       	push	r28
    1f9c:	df 93       	push	r29
    1f9e:	cd b7       	in	r28, 0x3d	; 61
    1fa0:	de b7       	in	r29, 0x3e	; 62
    1fa2:	67 97       	sbiw	r28, 0x17	; 23
    1fa4:	0f b6       	in	r0, 0x3f	; 63
    1fa6:	f8 94       	cli
    1fa8:	de bf       	out	0x3e, r29	; 62
    1faa:	0f be       	out	0x3f, r0	; 63
    1fac:	cd bf       	out	0x3d, r28	; 61
    1fae:	8f 8b       	std	Y+23, r24	; 0x17
	if(speed == current_speed)
    1fb0:	80 91 80 01 	lds	r24, 0x0180
    1fb4:	9f 89       	ldd	r25, Y+23	; 0x17
    1fb6:	98 17       	cp	r25, r24
    1fb8:	09 f4       	brne	.+2      	; 0x1fbc <odometry_set_speed+0x22>
    1fba:	82 c0       	rjmp	.+260    	; 0x20c0 <odometry_set_speed+0x126>
		return;

	uint8_t buffer[8];
	buffer[0] = 'V';
    1fbc:	86 e5       	ldi	r24, 0x56	; 86
    1fbe:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = speed;
    1fc0:	8f 89       	ldd	r24, Y+23	; 0x17
    1fc2:	88 8b       	std	Y+16, r24	; 0x10
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1fc4:	72 c0       	rjmp	.+228    	; 0x20aa <odometry_set_speed+0x110>
    1fc6:	80 e0       	ldi	r24, 0x00	; 0
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	a8 e4       	ldi	r26, 0x48	; 72
    1fcc:	b2 e4       	ldi	r27, 0x42	; 66
    1fce:	89 83       	std	Y+1, r24	; 0x01
    1fd0:	9a 83       	std	Y+2, r25	; 0x02
    1fd2:	ab 83       	std	Y+3, r26	; 0x03
    1fd4:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1fd6:	20 e0       	ldi	r18, 0x00	; 0
    1fd8:	30 e4       	ldi	r19, 0x40	; 64
    1fda:	4c e1       	ldi	r20, 0x1C	; 28
    1fdc:	55 e4       	ldi	r21, 0x45	; 69
    1fde:	69 81       	ldd	r22, Y+1	; 0x01
    1fe0:	7a 81       	ldd	r23, Y+2	; 0x02
    1fe2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe4:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe6:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__mulsf3>
    1fea:	dc 01       	movw	r26, r24
    1fec:	cb 01       	movw	r24, r22
    1fee:	8d 83       	std	Y+5, r24	; 0x05
    1ff0:	9e 83       	std	Y+6, r25	; 0x06
    1ff2:	af 83       	std	Y+7, r26	; 0x07
    1ff4:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1ff6:	20 e0       	ldi	r18, 0x00	; 0
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	40 e8       	ldi	r20, 0x80	; 128
    1ffc:	5f e3       	ldi	r21, 0x3F	; 63
    1ffe:	6d 81       	ldd	r22, Y+5	; 0x05
    2000:	7e 81       	ldd	r23, Y+6	; 0x06
    2002:	8f 81       	ldd	r24, Y+7	; 0x07
    2004:	98 85       	ldd	r25, Y+8	; 0x08
    2006:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <__cmpsf2>
    200a:	88 23       	and	r24, r24
    200c:	2c f4       	brge	.+10     	; 0x2018 <odometry_set_speed+0x7e>
		__ticks = 1;
    200e:	81 e0       	ldi	r24, 0x01	; 1
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	9a 87       	std	Y+10, r25	; 0x0a
    2014:	89 87       	std	Y+9, r24	; 0x09
    2016:	3f c0       	rjmp	.+126    	; 0x2096 <odometry_set_speed+0xfc>
	else if (__tmp > 65535)
    2018:	20 e0       	ldi	r18, 0x00	; 0
    201a:	3f ef       	ldi	r19, 0xFF	; 255
    201c:	4f e7       	ldi	r20, 0x7F	; 127
    201e:	57 e4       	ldi	r21, 0x47	; 71
    2020:	6d 81       	ldd	r22, Y+5	; 0x05
    2022:	7e 81       	ldd	r23, Y+6	; 0x06
    2024:	8f 81       	ldd	r24, Y+7	; 0x07
    2026:	98 85       	ldd	r25, Y+8	; 0x08
    2028:	0e 94 75 1f 	call	0x3eea	; 0x3eea <__gesf2>
    202c:	18 16       	cp	r1, r24
    202e:	4c f5       	brge	.+82     	; 0x2082 <odometry_set_speed+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2030:	20 e0       	ldi	r18, 0x00	; 0
    2032:	30 e0       	ldi	r19, 0x00	; 0
    2034:	40 e2       	ldi	r20, 0x20	; 32
    2036:	51 e4       	ldi	r21, 0x41	; 65
    2038:	69 81       	ldd	r22, Y+1	; 0x01
    203a:	7a 81       	ldd	r23, Y+2	; 0x02
    203c:	8b 81       	ldd	r24, Y+3	; 0x03
    203e:	9c 81       	ldd	r25, Y+4	; 0x04
    2040:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__mulsf3>
    2044:	dc 01       	movw	r26, r24
    2046:	cb 01       	movw	r24, r22
    2048:	bc 01       	movw	r22, r24
    204a:	cd 01       	movw	r24, r26
    204c:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <__fixunssfsi>
    2050:	dc 01       	movw	r26, r24
    2052:	cb 01       	movw	r24, r22
    2054:	9a 87       	std	Y+10, r25	; 0x0a
    2056:	89 87       	std	Y+9, r24	; 0x09
    2058:	0f c0       	rjmp	.+30     	; 0x2078 <odometry_set_speed+0xde>
    205a:	8a ef       	ldi	r24, 0xFA	; 250
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	9c 87       	std	Y+12, r25	; 0x0c
    2060:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2062:	8b 85       	ldd	r24, Y+11	; 0x0b
    2064:	9c 85       	ldd	r25, Y+12	; 0x0c
    2066:	01 97       	sbiw	r24, 0x01	; 1
    2068:	f1 f7       	brne	.-4      	; 0x2066 <odometry_set_speed+0xcc>
    206a:	9c 87       	std	Y+12, r25	; 0x0c
    206c:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    206e:	89 85       	ldd	r24, Y+9	; 0x09
    2070:	9a 85       	ldd	r25, Y+10	; 0x0a
    2072:	01 97       	sbiw	r24, 0x01	; 1
    2074:	9a 87       	std	Y+10, r25	; 0x0a
    2076:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2078:	89 85       	ldd	r24, Y+9	; 0x09
    207a:	9a 85       	ldd	r25, Y+10	; 0x0a
    207c:	89 2b       	or	r24, r25
    207e:	69 f7       	brne	.-38     	; 0x205a <odometry_set_speed+0xc0>
    2080:	14 c0       	rjmp	.+40     	; 0x20aa <odometry_set_speed+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2082:	6d 81       	ldd	r22, Y+5	; 0x05
    2084:	7e 81       	ldd	r23, Y+6	; 0x06
    2086:	8f 81       	ldd	r24, Y+7	; 0x07
    2088:	98 85       	ldd	r25, Y+8	; 0x08
    208a:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <__fixunssfsi>
    208e:	dc 01       	movw	r26, r24
    2090:	cb 01       	movw	r24, r22
    2092:	9a 87       	std	Y+10, r25	; 0x0a
    2094:	89 87       	std	Y+9, r24	; 0x09
    2096:	89 85       	ldd	r24, Y+9	; 0x09
    2098:	9a 85       	ldd	r25, Y+10	; 0x0a
    209a:	9e 87       	std	Y+14, r25	; 0x0e
    209c:	8d 87       	std	Y+13, r24	; 0x0d
    209e:	8d 85       	ldd	r24, Y+13	; 0x0d
    20a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    20a2:	01 97       	sbiw	r24, 0x01	; 1
    20a4:	f1 f7       	brne	.-4      	; 0x20a2 <odometry_set_speed+0x108>
    20a6:	9e 87       	std	Y+14, r25	; 0x0e
    20a8:	8d 87       	std	Y+13, r24	; 0x0d
    20aa:	ce 01       	movw	r24, r28
    20ac:	0f 96       	adiw	r24, 0x0f	; 15
    20ae:	63 ec       	ldi	r22, 0xC3	; 195
    20b0:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <CAN_Write>
    20b4:	88 23       	and	r24, r24
    20b6:	09 f0       	breq	.+2      	; 0x20ba <odometry_set_speed+0x120>
    20b8:	86 cf       	rjmp	.-244    	; 0x1fc6 <odometry_set_speed+0x2c>
		_delay_ms(50);

	current_speed = speed;
    20ba:	8f 89       	ldd	r24, Y+23	; 0x17
    20bc:	80 93 80 01 	sts	0x0180, r24
}
    20c0:	67 96       	adiw	r28, 0x17	; 23
    20c2:	0f b6       	in	r0, 0x3f	; 63
    20c4:	f8 94       	cli
    20c6:	de bf       	out	0x3e, r29	; 62
    20c8:	0f be       	out	0x3f, r0	; 63
    20ca:	cd bf       	out	0x3d, r28	; 61
    20cc:	df 91       	pop	r29
    20ce:	cf 91       	pop	r28
    20d0:	08 95       	ret

000020d2 <odometry_query_position>:

static void odometry_query_position(void)
{
    20d2:	cf 93       	push	r28
    20d4:	df 93       	push	r29
    20d6:	cd b7       	in	r28, 0x3d	; 61
    20d8:	de b7       	in	r29, 0x3e	; 62
    20da:	66 97       	sbiw	r28, 0x16	; 22
    20dc:	0f b6       	in	r0, 0x3f	; 63
    20de:	f8 94       	cli
    20e0:	de bf       	out	0x3e, r29	; 62
    20e2:	0f be       	out	0x3f, r0	; 63
    20e4:	cd bf       	out	0x3d, r28	; 61
	uint8_t buffer[8];
	buffer[0] = 'P';
    20e6:	80 e5       	ldi	r24, 0x50	; 80
    20e8:	8f 87       	std	Y+15, r24	; 0x0f
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    20ea:	72 c0       	rjmp	.+228    	; 0x21d0 <odometry_query_position+0xfe>
    20ec:	80 e0       	ldi	r24, 0x00	; 0
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	a8 e4       	ldi	r26, 0x48	; 72
    20f2:	b2 e4       	ldi	r27, 0x42	; 66
    20f4:	89 83       	std	Y+1, r24	; 0x01
    20f6:	9a 83       	std	Y+2, r25	; 0x02
    20f8:	ab 83       	std	Y+3, r26	; 0x03
    20fa:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    20fc:	20 e0       	ldi	r18, 0x00	; 0
    20fe:	30 e4       	ldi	r19, 0x40	; 64
    2100:	4c e1       	ldi	r20, 0x1C	; 28
    2102:	55 e4       	ldi	r21, 0x45	; 69
    2104:	69 81       	ldd	r22, Y+1	; 0x01
    2106:	7a 81       	ldd	r23, Y+2	; 0x02
    2108:	8b 81       	ldd	r24, Y+3	; 0x03
    210a:	9c 81       	ldd	r25, Y+4	; 0x04
    210c:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__mulsf3>
    2110:	dc 01       	movw	r26, r24
    2112:	cb 01       	movw	r24, r22
    2114:	8d 83       	std	Y+5, r24	; 0x05
    2116:	9e 83       	std	Y+6, r25	; 0x06
    2118:	af 83       	std	Y+7, r26	; 0x07
    211a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    211c:	20 e0       	ldi	r18, 0x00	; 0
    211e:	30 e0       	ldi	r19, 0x00	; 0
    2120:	40 e8       	ldi	r20, 0x80	; 128
    2122:	5f e3       	ldi	r21, 0x3F	; 63
    2124:	6d 81       	ldd	r22, Y+5	; 0x05
    2126:	7e 81       	ldd	r23, Y+6	; 0x06
    2128:	8f 81       	ldd	r24, Y+7	; 0x07
    212a:	98 85       	ldd	r25, Y+8	; 0x08
    212c:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <__cmpsf2>
    2130:	88 23       	and	r24, r24
    2132:	2c f4       	brge	.+10     	; 0x213e <odometry_query_position+0x6c>
		__ticks = 1;
    2134:	81 e0       	ldi	r24, 0x01	; 1
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	9a 87       	std	Y+10, r25	; 0x0a
    213a:	89 87       	std	Y+9, r24	; 0x09
    213c:	3f c0       	rjmp	.+126    	; 0x21bc <odometry_query_position+0xea>
	else if (__tmp > 65535)
    213e:	20 e0       	ldi	r18, 0x00	; 0
    2140:	3f ef       	ldi	r19, 0xFF	; 255
    2142:	4f e7       	ldi	r20, 0x7F	; 127
    2144:	57 e4       	ldi	r21, 0x47	; 71
    2146:	6d 81       	ldd	r22, Y+5	; 0x05
    2148:	7e 81       	ldd	r23, Y+6	; 0x06
    214a:	8f 81       	ldd	r24, Y+7	; 0x07
    214c:	98 85       	ldd	r25, Y+8	; 0x08
    214e:	0e 94 75 1f 	call	0x3eea	; 0x3eea <__gesf2>
    2152:	18 16       	cp	r1, r24
    2154:	4c f5       	brge	.+82     	; 0x21a8 <odometry_query_position+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2156:	20 e0       	ldi	r18, 0x00	; 0
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	40 e2       	ldi	r20, 0x20	; 32
    215c:	51 e4       	ldi	r21, 0x41	; 65
    215e:	69 81       	ldd	r22, Y+1	; 0x01
    2160:	7a 81       	ldd	r23, Y+2	; 0x02
    2162:	8b 81       	ldd	r24, Y+3	; 0x03
    2164:	9c 81       	ldd	r25, Y+4	; 0x04
    2166:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__mulsf3>
    216a:	dc 01       	movw	r26, r24
    216c:	cb 01       	movw	r24, r22
    216e:	bc 01       	movw	r22, r24
    2170:	cd 01       	movw	r24, r26
    2172:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <__fixunssfsi>
    2176:	dc 01       	movw	r26, r24
    2178:	cb 01       	movw	r24, r22
    217a:	9a 87       	std	Y+10, r25	; 0x0a
    217c:	89 87       	std	Y+9, r24	; 0x09
    217e:	0f c0       	rjmp	.+30     	; 0x219e <odometry_query_position+0xcc>
    2180:	8a ef       	ldi	r24, 0xFA	; 250
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	9c 87       	std	Y+12, r25	; 0x0c
    2186:	8b 87       	std	Y+11, r24	; 0x0b
    2188:	8b 85       	ldd	r24, Y+11	; 0x0b
    218a:	9c 85       	ldd	r25, Y+12	; 0x0c
    218c:	01 97       	sbiw	r24, 0x01	; 1
    218e:	f1 f7       	brne	.-4      	; 0x218c <odometry_query_position+0xba>
    2190:	9c 87       	std	Y+12, r25	; 0x0c
    2192:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2194:	89 85       	ldd	r24, Y+9	; 0x09
    2196:	9a 85       	ldd	r25, Y+10	; 0x0a
    2198:	01 97       	sbiw	r24, 0x01	; 1
    219a:	9a 87       	std	Y+10, r25	; 0x0a
    219c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    219e:	89 85       	ldd	r24, Y+9	; 0x09
    21a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21a2:	89 2b       	or	r24, r25
    21a4:	69 f7       	brne	.-38     	; 0x2180 <odometry_query_position+0xae>
    21a6:	14 c0       	rjmp	.+40     	; 0x21d0 <odometry_query_position+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21a8:	6d 81       	ldd	r22, Y+5	; 0x05
    21aa:	7e 81       	ldd	r23, Y+6	; 0x06
    21ac:	8f 81       	ldd	r24, Y+7	; 0x07
    21ae:	98 85       	ldd	r25, Y+8	; 0x08
    21b0:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <__fixunssfsi>
    21b4:	dc 01       	movw	r26, r24
    21b6:	cb 01       	movw	r24, r22
    21b8:	9a 87       	std	Y+10, r25	; 0x0a
    21ba:	89 87       	std	Y+9, r24	; 0x09
    21bc:	89 85       	ldd	r24, Y+9	; 0x09
    21be:	9a 85       	ldd	r25, Y+10	; 0x0a
    21c0:	9e 87       	std	Y+14, r25	; 0x0e
    21c2:	8d 87       	std	Y+13, r24	; 0x0d
    21c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    21c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    21c8:	01 97       	sbiw	r24, 0x01	; 1
    21ca:	f1 f7       	brne	.-4      	; 0x21c8 <odometry_query_position+0xf6>
    21cc:	9e 87       	std	Y+14, r25	; 0x0e
    21ce:	8d 87       	std	Y+13, r24	; 0x0d
    21d0:	ce 01       	movw	r24, r28
    21d2:	0f 96       	adiw	r24, 0x0f	; 15
    21d4:	63 ec       	ldi	r22, 0xC3	; 195
    21d6:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <CAN_Write>
    21da:	88 23       	and	r24, r24
    21dc:	09 f0       	breq	.+2      	; 0x21e0 <odometry_query_position+0x10e>
    21de:	86 cf       	rjmp	.-244    	; 0x20ec <odometry_query_position+0x1a>
		_delay_ms(50);

	CAN_Read(buffer, DRIVER_RX_IDENTIFICATOR);
    21e0:	ce 01       	movw	r24, r28
    21e2:	0f 96       	adiw	r24, 0x0f	; 15
    21e4:	61 e0       	ldi	r22, 0x01	; 1
    21e6:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <CAN_Read>

	position.state = buffer[0];
    21ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    21ec:	80 93 10 01 	sts	0x0110, r24
	position.x	   = (buffer[1] << 8) | buffer[2];
    21f0:	88 89       	ldd	r24, Y+16	; 0x10
    21f2:	88 2f       	mov	r24, r24
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	38 2f       	mov	r19, r24
    21f8:	22 27       	eor	r18, r18
    21fa:	89 89       	ldd	r24, Y+17	; 0x11
    21fc:	88 2f       	mov	r24, r24
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	82 2b       	or	r24, r18
    2202:	93 2b       	or	r25, r19
    2204:	90 93 0b 01 	sts	0x010B, r25
    2208:	80 93 0a 01 	sts	0x010A, r24
	position.y	   = (buffer[3] << 8) | buffer[4];
    220c:	8a 89       	ldd	r24, Y+18	; 0x12
    220e:	88 2f       	mov	r24, r24
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	38 2f       	mov	r19, r24
    2214:	22 27       	eor	r18, r18
    2216:	8b 89       	ldd	r24, Y+19	; 0x13
    2218:	88 2f       	mov	r24, r24
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	82 2b       	or	r24, r18
    221e:	93 2b       	or	r25, r19
    2220:	90 93 0d 01 	sts	0x010D, r25
    2224:	80 93 0c 01 	sts	0x010C, r24
	position.angle = (buffer[5] << 8) | buffer[6];
    2228:	8c 89       	ldd	r24, Y+20	; 0x14
    222a:	88 2f       	mov	r24, r24
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	38 2f       	mov	r19, r24
    2230:	22 27       	eor	r18, r18
    2232:	8d 89       	ldd	r24, Y+21	; 0x15
    2234:	88 2f       	mov	r24, r24
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	82 2b       	or	r24, r18
    223a:	93 2b       	or	r25, r19
    223c:	90 93 0f 01 	sts	0x010F, r25
    2240:	80 93 0e 01 	sts	0x010E, r24
}
    2244:	66 96       	adiw	r28, 0x16	; 22
    2246:	0f b6       	in	r0, 0x3f	; 63
    2248:	f8 94       	cli
    224a:	de bf       	out	0x3e, r29	; 62
    224c:	0f be       	out	0x3f, r0	; 63
    224e:	cd bf       	out	0x3d, r28	; 61
    2250:	df 91       	pop	r29
    2252:	cf 91       	pop	r28
    2254:	08 95       	ret

00002256 <odometry_wait_until_done>:

static uint8_t odometry_wait_until_done(uint8_t (*callback)(uint32_t start_time))
{
    2256:	cf 93       	push	r28
    2258:	df 93       	push	r29
    225a:	00 d0       	rcall	.+0      	; 0x225c <odometry_wait_until_done+0x6>
    225c:	00 d0       	rcall	.+0      	; 0x225e <odometry_wait_until_done+0x8>
    225e:	00 d0       	rcall	.+0      	; 0x2260 <odometry_wait_until_done+0xa>
    2260:	cd b7       	in	r28, 0x3d	; 61
    2262:	de b7       	in	r29, 0x3e	; 62
    2264:	9e 83       	std	Y+6, r25	; 0x06
    2266:	8d 83       	std	Y+5, r24	; 0x05
	uint32_t time = system_get_system_time();
    2268:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <system_get_system_time>
    226c:	dc 01       	movw	r26, r24
    226e:	cb 01       	movw	r24, r22
    2270:	89 83       	std	Y+1, r24	; 0x01
    2272:	9a 83       	std	Y+2, r25	; 0x02
    2274:	ab 83       	std	Y+3, r26	; 0x03
    2276:	bc 83       	std	Y+4, r27	; 0x04
	do
	{
		odometry_query_position();
    2278:	0e 94 69 10 	call	0x20d2	; 0x20d2 <odometry_query_position>
		if(callback != NULL)
    227c:	8d 81       	ldd	r24, Y+5	; 0x05
    227e:	9e 81       	ldd	r25, Y+6	; 0x06
    2280:	89 2b       	or	r24, r25
    2282:	71 f0       	breq	.+28     	; 0x22a0 <odometry_wait_until_done+0x4a>
		{
			if(callback(time) == 1)
    2284:	89 81       	ldd	r24, Y+1	; 0x01
    2286:	9a 81       	ldd	r25, Y+2	; 0x02
    2288:	ab 81       	ldd	r26, Y+3	; 0x03
    228a:	bc 81       	ldd	r27, Y+4	; 0x04
    228c:	2d 81       	ldd	r18, Y+5	; 0x05
    228e:	3e 81       	ldd	r19, Y+6	; 0x06
    2290:	bc 01       	movw	r22, r24
    2292:	cd 01       	movw	r24, r26
    2294:	f9 01       	movw	r30, r18
    2296:	09 95       	icall
    2298:	81 30       	cpi	r24, 0x01	; 1
    229a:	11 f4       	brne	.+4      	; 0x22a0 <odometry_wait_until_done+0x4a>
				return ODOMETRY_FAIL;
    229c:	81 e0       	ldi	r24, 0x01	; 1
    229e:	09 c0       	rjmp	.+18     	; 0x22b2 <odometry_wait_until_done+0x5c>
		}
	}while(position.state == MOVING || position.state == ROTATING);
    22a0:	80 91 10 01 	lds	r24, 0x0110
    22a4:	8d 34       	cpi	r24, 0x4D	; 77
    22a6:	41 f3       	breq	.-48     	; 0x2278 <odometry_wait_until_done+0x22>
    22a8:	80 91 10 01 	lds	r24, 0x0110
    22ac:	82 35       	cpi	r24, 0x52	; 82
    22ae:	21 f3       	breq	.-56     	; 0x2278 <odometry_wait_until_done+0x22>

	return ODOMETRY_SUCCESS;
    22b0:	80 e0       	ldi	r24, 0x00	; 0
}
    22b2:	26 96       	adiw	r28, 0x06	; 6
    22b4:	0f b6       	in	r0, 0x3f	; 63
    22b6:	f8 94       	cli
    22b8:	de bf       	out	0x3e, r29	; 62
    22ba:	0f be       	out	0x3f, r0	; 63
    22bc:	cd bf       	out	0x3d, r28	; 61
    22be:	df 91       	pop	r29
    22c0:	cf 91       	pop	r28
    22c2:	08 95       	ret

000022c4 <odometry_stop>:

void odometry_stop(int8_t type)
{
    22c4:	cf 93       	push	r28
    22c6:	df 93       	push	r29
    22c8:	cd b7       	in	r28, 0x3d	; 61
    22ca:	de b7       	in	r29, 0x3e	; 62
    22cc:	67 97       	sbiw	r28, 0x17	; 23
    22ce:	0f b6       	in	r0, 0x3f	; 63
    22d0:	f8 94       	cli
    22d2:	de bf       	out	0x3e, r29	; 62
    22d4:	0f be       	out	0x3f, r0	; 63
    22d6:	cd bf       	out	0x3d, r28	; 61
    22d8:	8f 8b       	std	Y+23, r24	; 0x17
	uint8_t buffer[8];

	do
	{
		buffer[0] = type;
    22da:	8f 89       	ldd	r24, Y+23	; 0x17
    22dc:	8f 87       	std	Y+15, r24	; 0x0f

		while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    22de:	72 c0       	rjmp	.+228    	; 0x23c4 <odometry_stop+0x100>
    22e0:	80 e0       	ldi	r24, 0x00	; 0
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	a8 e4       	ldi	r26, 0x48	; 72
    22e6:	b2 e4       	ldi	r27, 0x42	; 66
    22e8:	89 83       	std	Y+1, r24	; 0x01
    22ea:	9a 83       	std	Y+2, r25	; 0x02
    22ec:	ab 83       	std	Y+3, r26	; 0x03
    22ee:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    22f0:	20 e0       	ldi	r18, 0x00	; 0
    22f2:	30 e4       	ldi	r19, 0x40	; 64
    22f4:	4c e1       	ldi	r20, 0x1C	; 28
    22f6:	55 e4       	ldi	r21, 0x45	; 69
    22f8:	69 81       	ldd	r22, Y+1	; 0x01
    22fa:	7a 81       	ldd	r23, Y+2	; 0x02
    22fc:	8b 81       	ldd	r24, Y+3	; 0x03
    22fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2300:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__mulsf3>
    2304:	dc 01       	movw	r26, r24
    2306:	cb 01       	movw	r24, r22
    2308:	8d 83       	std	Y+5, r24	; 0x05
    230a:	9e 83       	std	Y+6, r25	; 0x06
    230c:	af 83       	std	Y+7, r26	; 0x07
    230e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2310:	20 e0       	ldi	r18, 0x00	; 0
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	40 e8       	ldi	r20, 0x80	; 128
    2316:	5f e3       	ldi	r21, 0x3F	; 63
    2318:	6d 81       	ldd	r22, Y+5	; 0x05
    231a:	7e 81       	ldd	r23, Y+6	; 0x06
    231c:	8f 81       	ldd	r24, Y+7	; 0x07
    231e:	98 85       	ldd	r25, Y+8	; 0x08
    2320:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <__cmpsf2>
    2324:	88 23       	and	r24, r24
    2326:	2c f4       	brge	.+10     	; 0x2332 <odometry_stop+0x6e>
		__ticks = 1;
    2328:	81 e0       	ldi	r24, 0x01	; 1
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	9a 87       	std	Y+10, r25	; 0x0a
    232e:	89 87       	std	Y+9, r24	; 0x09
    2330:	3f c0       	rjmp	.+126    	; 0x23b0 <odometry_stop+0xec>
	else if (__tmp > 65535)
    2332:	20 e0       	ldi	r18, 0x00	; 0
    2334:	3f ef       	ldi	r19, 0xFF	; 255
    2336:	4f e7       	ldi	r20, 0x7F	; 127
    2338:	57 e4       	ldi	r21, 0x47	; 71
    233a:	6d 81       	ldd	r22, Y+5	; 0x05
    233c:	7e 81       	ldd	r23, Y+6	; 0x06
    233e:	8f 81       	ldd	r24, Y+7	; 0x07
    2340:	98 85       	ldd	r25, Y+8	; 0x08
    2342:	0e 94 75 1f 	call	0x3eea	; 0x3eea <__gesf2>
    2346:	18 16       	cp	r1, r24
    2348:	4c f5       	brge	.+82     	; 0x239c <odometry_stop+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    234a:	20 e0       	ldi	r18, 0x00	; 0
    234c:	30 e0       	ldi	r19, 0x00	; 0
    234e:	40 e2       	ldi	r20, 0x20	; 32
    2350:	51 e4       	ldi	r21, 0x41	; 65
    2352:	69 81       	ldd	r22, Y+1	; 0x01
    2354:	7a 81       	ldd	r23, Y+2	; 0x02
    2356:	8b 81       	ldd	r24, Y+3	; 0x03
    2358:	9c 81       	ldd	r25, Y+4	; 0x04
    235a:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__mulsf3>
    235e:	dc 01       	movw	r26, r24
    2360:	cb 01       	movw	r24, r22
    2362:	bc 01       	movw	r22, r24
    2364:	cd 01       	movw	r24, r26
    2366:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <__fixunssfsi>
    236a:	dc 01       	movw	r26, r24
    236c:	cb 01       	movw	r24, r22
    236e:	9a 87       	std	Y+10, r25	; 0x0a
    2370:	89 87       	std	Y+9, r24	; 0x09
    2372:	0f c0       	rjmp	.+30     	; 0x2392 <odometry_stop+0xce>
    2374:	8a ef       	ldi	r24, 0xFA	; 250
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	9c 87       	std	Y+12, r25	; 0x0c
    237a:	8b 87       	std	Y+11, r24	; 0x0b
    237c:	8b 85       	ldd	r24, Y+11	; 0x0b
    237e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2380:	01 97       	sbiw	r24, 0x01	; 1
    2382:	f1 f7       	brne	.-4      	; 0x2380 <odometry_stop+0xbc>
    2384:	9c 87       	std	Y+12, r25	; 0x0c
    2386:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2388:	89 85       	ldd	r24, Y+9	; 0x09
    238a:	9a 85       	ldd	r25, Y+10	; 0x0a
    238c:	01 97       	sbiw	r24, 0x01	; 1
    238e:	9a 87       	std	Y+10, r25	; 0x0a
    2390:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2392:	89 85       	ldd	r24, Y+9	; 0x09
    2394:	9a 85       	ldd	r25, Y+10	; 0x0a
    2396:	89 2b       	or	r24, r25
    2398:	69 f7       	brne	.-38     	; 0x2374 <odometry_stop+0xb0>
    239a:	14 c0       	rjmp	.+40     	; 0x23c4 <odometry_stop+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    239c:	6d 81       	ldd	r22, Y+5	; 0x05
    239e:	7e 81       	ldd	r23, Y+6	; 0x06
    23a0:	8f 81       	ldd	r24, Y+7	; 0x07
    23a2:	98 85       	ldd	r25, Y+8	; 0x08
    23a4:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <__fixunssfsi>
    23a8:	dc 01       	movw	r26, r24
    23aa:	cb 01       	movw	r24, r22
    23ac:	9a 87       	std	Y+10, r25	; 0x0a
    23ae:	89 87       	std	Y+9, r24	; 0x09
    23b0:	89 85       	ldd	r24, Y+9	; 0x09
    23b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    23b4:	9e 87       	std	Y+14, r25	; 0x0e
    23b6:	8d 87       	std	Y+13, r24	; 0x0d
    23b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    23ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    23bc:	01 97       	sbiw	r24, 0x01	; 1
    23be:	f1 f7       	brne	.-4      	; 0x23bc <odometry_stop+0xf8>
    23c0:	9e 87       	std	Y+14, r25	; 0x0e
    23c2:	8d 87       	std	Y+13, r24	; 0x0d
    23c4:	ce 01       	movw	r24, r28
    23c6:	0f 96       	adiw	r24, 0x0f	; 15
    23c8:	63 ec       	ldi	r22, 0xC3	; 195
    23ca:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <CAN_Write>
    23ce:	88 23       	and	r24, r24
    23d0:	09 f0       	breq	.+2      	; 0x23d4 <odometry_stop+0x110>
    23d2:	86 cf       	rjmp	.-244    	; 0x22e0 <odometry_stop+0x1c>
			_delay_ms(50);

		odometry_query_position();
    23d4:	0e 94 69 10 	call	0x20d2	; 0x20d2 <odometry_query_position>
	}while(position.state == MOVING || position.state == ROTATING);
    23d8:	80 91 10 01 	lds	r24, 0x0110
    23dc:	8d 34       	cpi	r24, 0x4D	; 77
    23de:	09 f4       	brne	.+2      	; 0x23e2 <odometry_stop+0x11e>
    23e0:	7c cf       	rjmp	.-264    	; 0x22da <odometry_stop+0x16>
    23e2:	80 91 10 01 	lds	r24, 0x0110
    23e6:	82 35       	cpi	r24, 0x52	; 82
    23e8:	09 f4       	brne	.+2      	; 0x23ec <odometry_stop+0x128>
    23ea:	77 cf       	rjmp	.-274    	; 0x22da <odometry_stop+0x16>
}
    23ec:	67 96       	adiw	r28, 0x17	; 23
    23ee:	0f b6       	in	r0, 0x3f	; 63
    23f0:	f8 94       	cli
    23f2:	de bf       	out	0x3e, r29	; 62
    23f4:	0f be       	out	0x3f, r0	; 63
    23f6:	cd bf       	out	0x3d, r28	; 61
    23f8:	df 91       	pop	r29
    23fa:	cf 91       	pop	r28
    23fc:	08 95       	ret

000023fe <odometry_move_straight>:

uint8_t odometry_move_straight(int16_t distance, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    23fe:	cf 93       	push	r28
    2400:	df 93       	push	r29
    2402:	cd b7       	in	r28, 0x3d	; 61
    2404:	de b7       	in	r29, 0x3e	; 62
    2406:	6b 97       	sbiw	r28, 0x1b	; 27
    2408:	0f b6       	in	r0, 0x3f	; 63
    240a:	f8 94       	cli
    240c:	de bf       	out	0x3e, r29	; 62
    240e:	0f be       	out	0x3f, r0	; 63
    2410:	cd bf       	out	0x3d, r28	; 61
    2412:	98 8f       	std	Y+24, r25	; 0x18
    2414:	8f 8b       	std	Y+23, r24	; 0x17
    2416:	69 8f       	std	Y+25, r22	; 0x19
    2418:	5b 8f       	std	Y+27, r21	; 0x1b
    241a:	4a 8f       	std	Y+26, r20	; 0x1a
	uint8_t buffer[8];
	odometry_set_speed(speed);
    241c:	89 8d       	ldd	r24, Y+25	; 0x19
    241e:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <odometry_set_speed>
	buffer[0] = 'D';
    2422:	84 e4       	ldi	r24, 0x44	; 68
    2424:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = distance >> 8;
    2426:	8f 89       	ldd	r24, Y+23	; 0x17
    2428:	98 8d       	ldd	r25, Y+24	; 0x18
    242a:	89 2f       	mov	r24, r25
    242c:	99 0f       	add	r25, r25
    242e:	99 0b       	sbc	r25, r25
    2430:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = distance & 0xFF;
    2432:	8f 89       	ldd	r24, Y+23	; 0x17
    2434:	89 8b       	std	Y+17, r24	; 0x11
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    2436:	72 c0       	rjmp	.+228    	; 0x251c <odometry_move_straight+0x11e>
    2438:	80 e0       	ldi	r24, 0x00	; 0
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	a8 e4       	ldi	r26, 0x48	; 72
    243e:	b2 e4       	ldi	r27, 0x42	; 66
    2440:	89 83       	std	Y+1, r24	; 0x01
    2442:	9a 83       	std	Y+2, r25	; 0x02
    2444:	ab 83       	std	Y+3, r26	; 0x03
    2446:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2448:	20 e0       	ldi	r18, 0x00	; 0
    244a:	30 e4       	ldi	r19, 0x40	; 64
    244c:	4c e1       	ldi	r20, 0x1C	; 28
    244e:	55 e4       	ldi	r21, 0x45	; 69
    2450:	69 81       	ldd	r22, Y+1	; 0x01
    2452:	7a 81       	ldd	r23, Y+2	; 0x02
    2454:	8b 81       	ldd	r24, Y+3	; 0x03
    2456:	9c 81       	ldd	r25, Y+4	; 0x04
    2458:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__mulsf3>
    245c:	dc 01       	movw	r26, r24
    245e:	cb 01       	movw	r24, r22
    2460:	8d 83       	std	Y+5, r24	; 0x05
    2462:	9e 83       	std	Y+6, r25	; 0x06
    2464:	af 83       	std	Y+7, r26	; 0x07
    2466:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2468:	20 e0       	ldi	r18, 0x00	; 0
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	40 e8       	ldi	r20, 0x80	; 128
    246e:	5f e3       	ldi	r21, 0x3F	; 63
    2470:	6d 81       	ldd	r22, Y+5	; 0x05
    2472:	7e 81       	ldd	r23, Y+6	; 0x06
    2474:	8f 81       	ldd	r24, Y+7	; 0x07
    2476:	98 85       	ldd	r25, Y+8	; 0x08
    2478:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <__cmpsf2>
    247c:	88 23       	and	r24, r24
    247e:	2c f4       	brge	.+10     	; 0x248a <odometry_move_straight+0x8c>
		__ticks = 1;
    2480:	81 e0       	ldi	r24, 0x01	; 1
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	9a 87       	std	Y+10, r25	; 0x0a
    2486:	89 87       	std	Y+9, r24	; 0x09
    2488:	3f c0       	rjmp	.+126    	; 0x2508 <odometry_move_straight+0x10a>
	else if (__tmp > 65535)
    248a:	20 e0       	ldi	r18, 0x00	; 0
    248c:	3f ef       	ldi	r19, 0xFF	; 255
    248e:	4f e7       	ldi	r20, 0x7F	; 127
    2490:	57 e4       	ldi	r21, 0x47	; 71
    2492:	6d 81       	ldd	r22, Y+5	; 0x05
    2494:	7e 81       	ldd	r23, Y+6	; 0x06
    2496:	8f 81       	ldd	r24, Y+7	; 0x07
    2498:	98 85       	ldd	r25, Y+8	; 0x08
    249a:	0e 94 75 1f 	call	0x3eea	; 0x3eea <__gesf2>
    249e:	18 16       	cp	r1, r24
    24a0:	4c f5       	brge	.+82     	; 0x24f4 <odometry_move_straight+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24a2:	20 e0       	ldi	r18, 0x00	; 0
    24a4:	30 e0       	ldi	r19, 0x00	; 0
    24a6:	40 e2       	ldi	r20, 0x20	; 32
    24a8:	51 e4       	ldi	r21, 0x41	; 65
    24aa:	69 81       	ldd	r22, Y+1	; 0x01
    24ac:	7a 81       	ldd	r23, Y+2	; 0x02
    24ae:	8b 81       	ldd	r24, Y+3	; 0x03
    24b0:	9c 81       	ldd	r25, Y+4	; 0x04
    24b2:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__mulsf3>
    24b6:	dc 01       	movw	r26, r24
    24b8:	cb 01       	movw	r24, r22
    24ba:	bc 01       	movw	r22, r24
    24bc:	cd 01       	movw	r24, r26
    24be:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <__fixunssfsi>
    24c2:	dc 01       	movw	r26, r24
    24c4:	cb 01       	movw	r24, r22
    24c6:	9a 87       	std	Y+10, r25	; 0x0a
    24c8:	89 87       	std	Y+9, r24	; 0x09
    24ca:	0f c0       	rjmp	.+30     	; 0x24ea <odometry_move_straight+0xec>
    24cc:	8a ef       	ldi	r24, 0xFA	; 250
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	9c 87       	std	Y+12, r25	; 0x0c
    24d2:	8b 87       	std	Y+11, r24	; 0x0b
    24d4:	8b 85       	ldd	r24, Y+11	; 0x0b
    24d6:	9c 85       	ldd	r25, Y+12	; 0x0c
    24d8:	01 97       	sbiw	r24, 0x01	; 1
    24da:	f1 f7       	brne	.-4      	; 0x24d8 <odometry_move_straight+0xda>
    24dc:	9c 87       	std	Y+12, r25	; 0x0c
    24de:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24e0:	89 85       	ldd	r24, Y+9	; 0x09
    24e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24e4:	01 97       	sbiw	r24, 0x01	; 1
    24e6:	9a 87       	std	Y+10, r25	; 0x0a
    24e8:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ea:	89 85       	ldd	r24, Y+9	; 0x09
    24ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ee:	89 2b       	or	r24, r25
    24f0:	69 f7       	brne	.-38     	; 0x24cc <odometry_move_straight+0xce>
    24f2:	14 c0       	rjmp	.+40     	; 0x251c <odometry_move_straight+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24f4:	6d 81       	ldd	r22, Y+5	; 0x05
    24f6:	7e 81       	ldd	r23, Y+6	; 0x06
    24f8:	8f 81       	ldd	r24, Y+7	; 0x07
    24fa:	98 85       	ldd	r25, Y+8	; 0x08
    24fc:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <__fixunssfsi>
    2500:	dc 01       	movw	r26, r24
    2502:	cb 01       	movw	r24, r22
    2504:	9a 87       	std	Y+10, r25	; 0x0a
    2506:	89 87       	std	Y+9, r24	; 0x09
    2508:	89 85       	ldd	r24, Y+9	; 0x09
    250a:	9a 85       	ldd	r25, Y+10	; 0x0a
    250c:	9e 87       	std	Y+14, r25	; 0x0e
    250e:	8d 87       	std	Y+13, r24	; 0x0d
    2510:	8d 85       	ldd	r24, Y+13	; 0x0d
    2512:	9e 85       	ldd	r25, Y+14	; 0x0e
    2514:	01 97       	sbiw	r24, 0x01	; 1
    2516:	f1 f7       	brne	.-4      	; 0x2514 <odometry_move_straight+0x116>
    2518:	9e 87       	std	Y+14, r25	; 0x0e
    251a:	8d 87       	std	Y+13, r24	; 0x0d
    251c:	ce 01       	movw	r24, r28
    251e:	0f 96       	adiw	r24, 0x0f	; 15
    2520:	63 ec       	ldi	r22, 0xC3	; 195
    2522:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <CAN_Write>
    2526:	88 23       	and	r24, r24
    2528:	09 f0       	breq	.+2      	; 0x252c <odometry_move_straight+0x12e>
    252a:	86 cf       	rjmp	.-244    	; 0x2438 <odometry_move_straight+0x3a>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    252c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    252e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2530:	0e 94 2b 11 	call	0x2256	; 0x2256 <odometry_wait_until_done>
}
    2534:	6b 96       	adiw	r28, 0x1b	; 27
    2536:	0f b6       	in	r0, 0x3f	; 63
    2538:	f8 94       	cli
    253a:	de bf       	out	0x3e, r29	; 62
    253c:	0f be       	out	0x3f, r0	; 63
    253e:	cd bf       	out	0x3d, r28	; 61
    2540:	df 91       	pop	r29
    2542:	cf 91       	pop	r28
    2544:	08 95       	ret

00002546 <odometry_move_to_position>:

uint8_t odometry_move_to_position(struct odometry_position* position, uint8_t speed, uint8_t direction, uint8_t (*callback)(uint32_t start_time))
{
    2546:	cf 93       	push	r28
    2548:	df 93       	push	r29
    254a:	cd b7       	in	r28, 0x3d	; 61
    254c:	de b7       	in	r29, 0x3e	; 62
    254e:	6c 97       	sbiw	r28, 0x1c	; 28
    2550:	0f b6       	in	r0, 0x3f	; 63
    2552:	f8 94       	cli
    2554:	de bf       	out	0x3e, r29	; 62
    2556:	0f be       	out	0x3f, r0	; 63
    2558:	cd bf       	out	0x3d, r28	; 61
    255a:	98 8f       	std	Y+24, r25	; 0x18
    255c:	8f 8b       	std	Y+23, r24	; 0x17
    255e:	69 8f       	std	Y+25, r22	; 0x19
    2560:	4a 8f       	std	Y+26, r20	; 0x1a
    2562:	3c 8f       	std	Y+28, r19	; 0x1c
    2564:	2b 8f       	std	Y+27, r18	; 0x1b
	uint8_t buffer[8];

	odometry_set_speed(speed);
    2566:	89 8d       	ldd	r24, Y+25	; 0x19
    2568:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <odometry_set_speed>

	buffer[0] = 'G';
    256c:	87 e4       	ldi	r24, 0x47	; 71
    256e:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = position->x >> 8;
    2570:	8f 89       	ldd	r24, Y+23	; 0x17
    2572:	98 8d       	ldd	r25, Y+24	; 0x18
    2574:	fc 01       	movw	r30, r24
    2576:	80 81       	ld	r24, Z
    2578:	91 81       	ldd	r25, Z+1	; 0x01
    257a:	89 2f       	mov	r24, r25
    257c:	99 0f       	add	r25, r25
    257e:	99 0b       	sbc	r25, r25
    2580:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = position->x & 0xFF;
    2582:	8f 89       	ldd	r24, Y+23	; 0x17
    2584:	98 8d       	ldd	r25, Y+24	; 0x18
    2586:	fc 01       	movw	r30, r24
    2588:	80 81       	ld	r24, Z
    258a:	91 81       	ldd	r25, Z+1	; 0x01
    258c:	89 8b       	std	Y+17, r24	; 0x11
	buffer[3] = position->y >> 8;
    258e:	8f 89       	ldd	r24, Y+23	; 0x17
    2590:	98 8d       	ldd	r25, Y+24	; 0x18
    2592:	fc 01       	movw	r30, r24
    2594:	82 81       	ldd	r24, Z+2	; 0x02
    2596:	93 81       	ldd	r25, Z+3	; 0x03
    2598:	89 2f       	mov	r24, r25
    259a:	99 0f       	add	r25, r25
    259c:	99 0b       	sbc	r25, r25
    259e:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[4] = position->y & 0xFF;
    25a0:	8f 89       	ldd	r24, Y+23	; 0x17
    25a2:	98 8d       	ldd	r25, Y+24	; 0x18
    25a4:	fc 01       	movw	r30, r24
    25a6:	82 81       	ldd	r24, Z+2	; 0x02
    25a8:	93 81       	ldd	r25, Z+3	; 0x03
    25aa:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[5] = 0;//Mozda ne treba 0
    25ac:	1c 8a       	std	Y+20, r1	; 0x14
	buffer[6] = direction;
    25ae:	8a 8d       	ldd	r24, Y+26	; 0x1a
    25b0:	8d 8b       	std	Y+21, r24	; 0x15
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    25b2:	72 c0       	rjmp	.+228    	; 0x2698 <odometry_move_to_position+0x152>
    25b4:	80 e0       	ldi	r24, 0x00	; 0
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	a8 e4       	ldi	r26, 0x48	; 72
    25ba:	b2 e4       	ldi	r27, 0x42	; 66
    25bc:	89 83       	std	Y+1, r24	; 0x01
    25be:	9a 83       	std	Y+2, r25	; 0x02
    25c0:	ab 83       	std	Y+3, r26	; 0x03
    25c2:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    25c4:	20 e0       	ldi	r18, 0x00	; 0
    25c6:	30 e4       	ldi	r19, 0x40	; 64
    25c8:	4c e1       	ldi	r20, 0x1C	; 28
    25ca:	55 e4       	ldi	r21, 0x45	; 69
    25cc:	69 81       	ldd	r22, Y+1	; 0x01
    25ce:	7a 81       	ldd	r23, Y+2	; 0x02
    25d0:	8b 81       	ldd	r24, Y+3	; 0x03
    25d2:	9c 81       	ldd	r25, Y+4	; 0x04
    25d4:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__mulsf3>
    25d8:	dc 01       	movw	r26, r24
    25da:	cb 01       	movw	r24, r22
    25dc:	8d 83       	std	Y+5, r24	; 0x05
    25de:	9e 83       	std	Y+6, r25	; 0x06
    25e0:	af 83       	std	Y+7, r26	; 0x07
    25e2:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    25e4:	20 e0       	ldi	r18, 0x00	; 0
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	40 e8       	ldi	r20, 0x80	; 128
    25ea:	5f e3       	ldi	r21, 0x3F	; 63
    25ec:	6d 81       	ldd	r22, Y+5	; 0x05
    25ee:	7e 81       	ldd	r23, Y+6	; 0x06
    25f0:	8f 81       	ldd	r24, Y+7	; 0x07
    25f2:	98 85       	ldd	r25, Y+8	; 0x08
    25f4:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <__cmpsf2>
    25f8:	88 23       	and	r24, r24
    25fa:	2c f4       	brge	.+10     	; 0x2606 <odometry_move_to_position+0xc0>
		__ticks = 1;
    25fc:	81 e0       	ldi	r24, 0x01	; 1
    25fe:	90 e0       	ldi	r25, 0x00	; 0
    2600:	9a 87       	std	Y+10, r25	; 0x0a
    2602:	89 87       	std	Y+9, r24	; 0x09
    2604:	3f c0       	rjmp	.+126    	; 0x2684 <odometry_move_to_position+0x13e>
	else if (__tmp > 65535)
    2606:	20 e0       	ldi	r18, 0x00	; 0
    2608:	3f ef       	ldi	r19, 0xFF	; 255
    260a:	4f e7       	ldi	r20, 0x7F	; 127
    260c:	57 e4       	ldi	r21, 0x47	; 71
    260e:	6d 81       	ldd	r22, Y+5	; 0x05
    2610:	7e 81       	ldd	r23, Y+6	; 0x06
    2612:	8f 81       	ldd	r24, Y+7	; 0x07
    2614:	98 85       	ldd	r25, Y+8	; 0x08
    2616:	0e 94 75 1f 	call	0x3eea	; 0x3eea <__gesf2>
    261a:	18 16       	cp	r1, r24
    261c:	4c f5       	brge	.+82     	; 0x2670 <odometry_move_to_position+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    261e:	20 e0       	ldi	r18, 0x00	; 0
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	40 e2       	ldi	r20, 0x20	; 32
    2624:	51 e4       	ldi	r21, 0x41	; 65
    2626:	69 81       	ldd	r22, Y+1	; 0x01
    2628:	7a 81       	ldd	r23, Y+2	; 0x02
    262a:	8b 81       	ldd	r24, Y+3	; 0x03
    262c:	9c 81       	ldd	r25, Y+4	; 0x04
    262e:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__mulsf3>
    2632:	dc 01       	movw	r26, r24
    2634:	cb 01       	movw	r24, r22
    2636:	bc 01       	movw	r22, r24
    2638:	cd 01       	movw	r24, r26
    263a:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <__fixunssfsi>
    263e:	dc 01       	movw	r26, r24
    2640:	cb 01       	movw	r24, r22
    2642:	9a 87       	std	Y+10, r25	; 0x0a
    2644:	89 87       	std	Y+9, r24	; 0x09
    2646:	0f c0       	rjmp	.+30     	; 0x2666 <odometry_move_to_position+0x120>
    2648:	8a ef       	ldi	r24, 0xFA	; 250
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	9c 87       	std	Y+12, r25	; 0x0c
    264e:	8b 87       	std	Y+11, r24	; 0x0b
    2650:	8b 85       	ldd	r24, Y+11	; 0x0b
    2652:	9c 85       	ldd	r25, Y+12	; 0x0c
    2654:	01 97       	sbiw	r24, 0x01	; 1
    2656:	f1 f7       	brne	.-4      	; 0x2654 <odometry_move_to_position+0x10e>
    2658:	9c 87       	std	Y+12, r25	; 0x0c
    265a:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    265c:	89 85       	ldd	r24, Y+9	; 0x09
    265e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2660:	01 97       	sbiw	r24, 0x01	; 1
    2662:	9a 87       	std	Y+10, r25	; 0x0a
    2664:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2666:	89 85       	ldd	r24, Y+9	; 0x09
    2668:	9a 85       	ldd	r25, Y+10	; 0x0a
    266a:	89 2b       	or	r24, r25
    266c:	69 f7       	brne	.-38     	; 0x2648 <odometry_move_to_position+0x102>
    266e:	14 c0       	rjmp	.+40     	; 0x2698 <odometry_move_to_position+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2670:	6d 81       	ldd	r22, Y+5	; 0x05
    2672:	7e 81       	ldd	r23, Y+6	; 0x06
    2674:	8f 81       	ldd	r24, Y+7	; 0x07
    2676:	98 85       	ldd	r25, Y+8	; 0x08
    2678:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <__fixunssfsi>
    267c:	dc 01       	movw	r26, r24
    267e:	cb 01       	movw	r24, r22
    2680:	9a 87       	std	Y+10, r25	; 0x0a
    2682:	89 87       	std	Y+9, r24	; 0x09
    2684:	89 85       	ldd	r24, Y+9	; 0x09
    2686:	9a 85       	ldd	r25, Y+10	; 0x0a
    2688:	9e 87       	std	Y+14, r25	; 0x0e
    268a:	8d 87       	std	Y+13, r24	; 0x0d
    268c:	8d 85       	ldd	r24, Y+13	; 0x0d
    268e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2690:	01 97       	sbiw	r24, 0x01	; 1
    2692:	f1 f7       	brne	.-4      	; 0x2690 <odometry_move_to_position+0x14a>
    2694:	9e 87       	std	Y+14, r25	; 0x0e
    2696:	8d 87       	std	Y+13, r24	; 0x0d
    2698:	ce 01       	movw	r24, r28
    269a:	0f 96       	adiw	r24, 0x0f	; 15
    269c:	63 ec       	ldi	r22, 0xC3	; 195
    269e:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <CAN_Write>
    26a2:	88 23       	and	r24, r24
    26a4:	09 f0       	breq	.+2      	; 0x26a8 <odometry_move_to_position+0x162>
    26a6:	86 cf       	rjmp	.-244    	; 0x25b4 <odometry_move_to_position+0x6e>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    26a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26ac:	0e 94 2b 11 	call	0x2256	; 0x2256 <odometry_wait_until_done>
}
    26b0:	6c 96       	adiw	r28, 0x1c	; 28
    26b2:	0f b6       	in	r0, 0x3f	; 63
    26b4:	f8 94       	cli
    26b6:	de bf       	out	0x3e, r29	; 62
    26b8:	0f be       	out	0x3f, r0	; 63
    26ba:	cd bf       	out	0x3d, r28	; 61
    26bc:	df 91       	pop	r29
    26be:	cf 91       	pop	r28
    26c0:	08 95       	ret

000026c2 <odometry_set_position>:

void odometry_set_position(struct odometry_position* new_position)
{
    26c2:	cf 93       	push	r28
    26c4:	df 93       	push	r29
    26c6:	cd b7       	in	r28, 0x3d	; 61
    26c8:	de b7       	in	r29, 0x3e	; 62
    26ca:	68 97       	sbiw	r28, 0x18	; 24
    26cc:	0f b6       	in	r0, 0x3f	; 63
    26ce:	f8 94       	cli
    26d0:	de bf       	out	0x3e, r29	; 62
    26d2:	0f be       	out	0x3f, r0	; 63
    26d4:	cd bf       	out	0x3d, r28	; 61
    26d6:	98 8f       	std	Y+24, r25	; 0x18
    26d8:	8f 8b       	std	Y+23, r24	; 0x17
	uint8_t buffer[8];

	buffer[0] = 'I';
    26da:	89 e4       	ldi	r24, 0x49	; 73
    26dc:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = new_position->x >> 8;
    26de:	8f 89       	ldd	r24, Y+23	; 0x17
    26e0:	98 8d       	ldd	r25, Y+24	; 0x18
    26e2:	fc 01       	movw	r30, r24
    26e4:	80 81       	ld	r24, Z
    26e6:	91 81       	ldd	r25, Z+1	; 0x01
    26e8:	89 2f       	mov	r24, r25
    26ea:	99 0f       	add	r25, r25
    26ec:	99 0b       	sbc	r25, r25
    26ee:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = new_position->x & 0xFF;
    26f0:	8f 89       	ldd	r24, Y+23	; 0x17
    26f2:	98 8d       	ldd	r25, Y+24	; 0x18
    26f4:	fc 01       	movw	r30, r24
    26f6:	80 81       	ld	r24, Z
    26f8:	91 81       	ldd	r25, Z+1	; 0x01
    26fa:	89 8b       	std	Y+17, r24	; 0x11
	buffer[3] = new_position->y >> 8;
    26fc:	8f 89       	ldd	r24, Y+23	; 0x17
    26fe:	98 8d       	ldd	r25, Y+24	; 0x18
    2700:	fc 01       	movw	r30, r24
    2702:	82 81       	ldd	r24, Z+2	; 0x02
    2704:	93 81       	ldd	r25, Z+3	; 0x03
    2706:	89 2f       	mov	r24, r25
    2708:	99 0f       	add	r25, r25
    270a:	99 0b       	sbc	r25, r25
    270c:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[4] = new_position->y & 0xFF;
    270e:	8f 89       	ldd	r24, Y+23	; 0x17
    2710:	98 8d       	ldd	r25, Y+24	; 0x18
    2712:	fc 01       	movw	r30, r24
    2714:	82 81       	ldd	r24, Z+2	; 0x02
    2716:	93 81       	ldd	r25, Z+3	; 0x03
    2718:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[5] = new_position->angle << 8;
    271a:	1c 8a       	std	Y+20, r1	; 0x14
	buffer[6] = new_position->angle & 0xFF;
    271c:	8f 89       	ldd	r24, Y+23	; 0x17
    271e:	98 8d       	ldd	r25, Y+24	; 0x18
    2720:	fc 01       	movw	r30, r24
    2722:	84 81       	ldd	r24, Z+4	; 0x04
    2724:	95 81       	ldd	r25, Z+5	; 0x05
    2726:	8d 8b       	std	Y+21, r24	; 0x15

	position.x	   = new_position->x;
    2728:	8f 89       	ldd	r24, Y+23	; 0x17
    272a:	98 8d       	ldd	r25, Y+24	; 0x18
    272c:	fc 01       	movw	r30, r24
    272e:	80 81       	ld	r24, Z
    2730:	91 81       	ldd	r25, Z+1	; 0x01
    2732:	90 93 0b 01 	sts	0x010B, r25
    2736:	80 93 0a 01 	sts	0x010A, r24
	position.y	   = new_position->y;
    273a:	8f 89       	ldd	r24, Y+23	; 0x17
    273c:	98 8d       	ldd	r25, Y+24	; 0x18
    273e:	fc 01       	movw	r30, r24
    2740:	82 81       	ldd	r24, Z+2	; 0x02
    2742:	93 81       	ldd	r25, Z+3	; 0x03
    2744:	90 93 0d 01 	sts	0x010D, r25
    2748:	80 93 0c 01 	sts	0x010C, r24
	position.angle = new_position->angle;
    274c:	8f 89       	ldd	r24, Y+23	; 0x17
    274e:	98 8d       	ldd	r25, Y+24	; 0x18
    2750:	fc 01       	movw	r30, r24
    2752:	84 81       	ldd	r24, Z+4	; 0x04
    2754:	95 81       	ldd	r25, Z+5	; 0x05
    2756:	90 93 0f 01 	sts	0x010F, r25
    275a:	80 93 0e 01 	sts	0x010E, r24

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    275e:	72 c0       	rjmp	.+228    	; 0x2844 <odometry_set_position+0x182>
    2760:	80 e0       	ldi	r24, 0x00	; 0
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	a8 e4       	ldi	r26, 0x48	; 72
    2766:	b2 e4       	ldi	r27, 0x42	; 66
    2768:	89 83       	std	Y+1, r24	; 0x01
    276a:	9a 83       	std	Y+2, r25	; 0x02
    276c:	ab 83       	std	Y+3, r26	; 0x03
    276e:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2770:	20 e0       	ldi	r18, 0x00	; 0
    2772:	30 e4       	ldi	r19, 0x40	; 64
    2774:	4c e1       	ldi	r20, 0x1C	; 28
    2776:	55 e4       	ldi	r21, 0x45	; 69
    2778:	69 81       	ldd	r22, Y+1	; 0x01
    277a:	7a 81       	ldd	r23, Y+2	; 0x02
    277c:	8b 81       	ldd	r24, Y+3	; 0x03
    277e:	9c 81       	ldd	r25, Y+4	; 0x04
    2780:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__mulsf3>
    2784:	dc 01       	movw	r26, r24
    2786:	cb 01       	movw	r24, r22
    2788:	8d 83       	std	Y+5, r24	; 0x05
    278a:	9e 83       	std	Y+6, r25	; 0x06
    278c:	af 83       	std	Y+7, r26	; 0x07
    278e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2790:	20 e0       	ldi	r18, 0x00	; 0
    2792:	30 e0       	ldi	r19, 0x00	; 0
    2794:	40 e8       	ldi	r20, 0x80	; 128
    2796:	5f e3       	ldi	r21, 0x3F	; 63
    2798:	6d 81       	ldd	r22, Y+5	; 0x05
    279a:	7e 81       	ldd	r23, Y+6	; 0x06
    279c:	8f 81       	ldd	r24, Y+7	; 0x07
    279e:	98 85       	ldd	r25, Y+8	; 0x08
    27a0:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <__cmpsf2>
    27a4:	88 23       	and	r24, r24
    27a6:	2c f4       	brge	.+10     	; 0x27b2 <odometry_set_position+0xf0>
		__ticks = 1;
    27a8:	81 e0       	ldi	r24, 0x01	; 1
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	9a 87       	std	Y+10, r25	; 0x0a
    27ae:	89 87       	std	Y+9, r24	; 0x09
    27b0:	3f c0       	rjmp	.+126    	; 0x2830 <odometry_set_position+0x16e>
	else if (__tmp > 65535)
    27b2:	20 e0       	ldi	r18, 0x00	; 0
    27b4:	3f ef       	ldi	r19, 0xFF	; 255
    27b6:	4f e7       	ldi	r20, 0x7F	; 127
    27b8:	57 e4       	ldi	r21, 0x47	; 71
    27ba:	6d 81       	ldd	r22, Y+5	; 0x05
    27bc:	7e 81       	ldd	r23, Y+6	; 0x06
    27be:	8f 81       	ldd	r24, Y+7	; 0x07
    27c0:	98 85       	ldd	r25, Y+8	; 0x08
    27c2:	0e 94 75 1f 	call	0x3eea	; 0x3eea <__gesf2>
    27c6:	18 16       	cp	r1, r24
    27c8:	4c f5       	brge	.+82     	; 0x281c <odometry_set_position+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ca:	20 e0       	ldi	r18, 0x00	; 0
    27cc:	30 e0       	ldi	r19, 0x00	; 0
    27ce:	40 e2       	ldi	r20, 0x20	; 32
    27d0:	51 e4       	ldi	r21, 0x41	; 65
    27d2:	69 81       	ldd	r22, Y+1	; 0x01
    27d4:	7a 81       	ldd	r23, Y+2	; 0x02
    27d6:	8b 81       	ldd	r24, Y+3	; 0x03
    27d8:	9c 81       	ldd	r25, Y+4	; 0x04
    27da:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__mulsf3>
    27de:	dc 01       	movw	r26, r24
    27e0:	cb 01       	movw	r24, r22
    27e2:	bc 01       	movw	r22, r24
    27e4:	cd 01       	movw	r24, r26
    27e6:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <__fixunssfsi>
    27ea:	dc 01       	movw	r26, r24
    27ec:	cb 01       	movw	r24, r22
    27ee:	9a 87       	std	Y+10, r25	; 0x0a
    27f0:	89 87       	std	Y+9, r24	; 0x09
    27f2:	0f c0       	rjmp	.+30     	; 0x2812 <odometry_set_position+0x150>
    27f4:	8a ef       	ldi	r24, 0xFA	; 250
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	9c 87       	std	Y+12, r25	; 0x0c
    27fa:	8b 87       	std	Y+11, r24	; 0x0b
    27fc:	8b 85       	ldd	r24, Y+11	; 0x0b
    27fe:	9c 85       	ldd	r25, Y+12	; 0x0c
    2800:	01 97       	sbiw	r24, 0x01	; 1
    2802:	f1 f7       	brne	.-4      	; 0x2800 <odometry_set_position+0x13e>
    2804:	9c 87       	std	Y+12, r25	; 0x0c
    2806:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2808:	89 85       	ldd	r24, Y+9	; 0x09
    280a:	9a 85       	ldd	r25, Y+10	; 0x0a
    280c:	01 97       	sbiw	r24, 0x01	; 1
    280e:	9a 87       	std	Y+10, r25	; 0x0a
    2810:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2812:	89 85       	ldd	r24, Y+9	; 0x09
    2814:	9a 85       	ldd	r25, Y+10	; 0x0a
    2816:	89 2b       	or	r24, r25
    2818:	69 f7       	brne	.-38     	; 0x27f4 <odometry_set_position+0x132>
    281a:	14 c0       	rjmp	.+40     	; 0x2844 <odometry_set_position+0x182>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    281c:	6d 81       	ldd	r22, Y+5	; 0x05
    281e:	7e 81       	ldd	r23, Y+6	; 0x06
    2820:	8f 81       	ldd	r24, Y+7	; 0x07
    2822:	98 85       	ldd	r25, Y+8	; 0x08
    2824:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <__fixunssfsi>
    2828:	dc 01       	movw	r26, r24
    282a:	cb 01       	movw	r24, r22
    282c:	9a 87       	std	Y+10, r25	; 0x0a
    282e:	89 87       	std	Y+9, r24	; 0x09
    2830:	89 85       	ldd	r24, Y+9	; 0x09
    2832:	9a 85       	ldd	r25, Y+10	; 0x0a
    2834:	9e 87       	std	Y+14, r25	; 0x0e
    2836:	8d 87       	std	Y+13, r24	; 0x0d
    2838:	8d 85       	ldd	r24, Y+13	; 0x0d
    283a:	9e 85       	ldd	r25, Y+14	; 0x0e
    283c:	01 97       	sbiw	r24, 0x01	; 1
    283e:	f1 f7       	brne	.-4      	; 0x283c <odometry_set_position+0x17a>
    2840:	9e 87       	std	Y+14, r25	; 0x0e
    2842:	8d 87       	std	Y+13, r24	; 0x0d
    2844:	ce 01       	movw	r24, r28
    2846:	0f 96       	adiw	r24, 0x0f	; 15
    2848:	63 ec       	ldi	r22, 0xC3	; 195
    284a:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <CAN_Write>
    284e:	88 23       	and	r24, r24
    2850:	09 f0       	breq	.+2      	; 0x2854 <odometry_set_position+0x192>
    2852:	86 cf       	rjmp	.-244    	; 0x2760 <odometry_set_position+0x9e>
		_delay_ms(50);
}
    2854:	68 96       	adiw	r28, 0x18	; 24
    2856:	0f b6       	in	r0, 0x3f	; 63
    2858:	f8 94       	cli
    285a:	de bf       	out	0x3e, r29	; 62
    285c:	0f be       	out	0x3f, r0	; 63
    285e:	cd bf       	out	0x3d, r28	; 61
    2860:	df 91       	pop	r29
    2862:	cf 91       	pop	r28
    2864:	08 95       	ret

00002866 <odometry_rotate_for>:

uint8_t odometry_rotate_for(uint16_t angle,uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    2866:	cf 93       	push	r28
    2868:	df 93       	push	r29
    286a:	cd b7       	in	r28, 0x3d	; 61
    286c:	de b7       	in	r29, 0x3e	; 62
    286e:	6b 97       	sbiw	r28, 0x1b	; 27
    2870:	0f b6       	in	r0, 0x3f	; 63
    2872:	f8 94       	cli
    2874:	de bf       	out	0x3e, r29	; 62
    2876:	0f be       	out	0x3f, r0	; 63
    2878:	cd bf       	out	0x3d, r28	; 61
    287a:	98 8f       	std	Y+24, r25	; 0x18
    287c:	8f 8b       	std	Y+23, r24	; 0x17
    287e:	69 8f       	std	Y+25, r22	; 0x19
    2880:	5b 8f       	std	Y+27, r21	; 0x1b
    2882:	4a 8f       	std	Y+26, r20	; 0x1a

	uint8_t buffer[8];
	odometry_set_speed(speed);
    2884:	89 8d       	ldd	r24, Y+25	; 0x19
    2886:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <odometry_set_speed>

	buffer[0] = 'T';
    288a:	84 e5       	ldi	r24, 0x54	; 84
    288c:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = angle >> 8;
    288e:	8f 89       	ldd	r24, Y+23	; 0x17
    2890:	98 8d       	ldd	r25, Y+24	; 0x18
    2892:	89 2f       	mov	r24, r25
    2894:	99 27       	eor	r25, r25
    2896:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = angle & 0xFF;
    2898:	8f 89       	ldd	r24, Y+23	; 0x17
    289a:	89 8b       	std	Y+17, r24	; 0x11

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    289c:	72 c0       	rjmp	.+228    	; 0x2982 <odometry_rotate_for+0x11c>
    289e:	80 e0       	ldi	r24, 0x00	; 0
    28a0:	90 e0       	ldi	r25, 0x00	; 0
    28a2:	a8 e4       	ldi	r26, 0x48	; 72
    28a4:	b2 e4       	ldi	r27, 0x42	; 66
    28a6:	89 83       	std	Y+1, r24	; 0x01
    28a8:	9a 83       	std	Y+2, r25	; 0x02
    28aa:	ab 83       	std	Y+3, r26	; 0x03
    28ac:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    28ae:	20 e0       	ldi	r18, 0x00	; 0
    28b0:	30 e4       	ldi	r19, 0x40	; 64
    28b2:	4c e1       	ldi	r20, 0x1C	; 28
    28b4:	55 e4       	ldi	r21, 0x45	; 69
    28b6:	69 81       	ldd	r22, Y+1	; 0x01
    28b8:	7a 81       	ldd	r23, Y+2	; 0x02
    28ba:	8b 81       	ldd	r24, Y+3	; 0x03
    28bc:	9c 81       	ldd	r25, Y+4	; 0x04
    28be:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__mulsf3>
    28c2:	dc 01       	movw	r26, r24
    28c4:	cb 01       	movw	r24, r22
    28c6:	8d 83       	std	Y+5, r24	; 0x05
    28c8:	9e 83       	std	Y+6, r25	; 0x06
    28ca:	af 83       	std	Y+7, r26	; 0x07
    28cc:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    28ce:	20 e0       	ldi	r18, 0x00	; 0
    28d0:	30 e0       	ldi	r19, 0x00	; 0
    28d2:	40 e8       	ldi	r20, 0x80	; 128
    28d4:	5f e3       	ldi	r21, 0x3F	; 63
    28d6:	6d 81       	ldd	r22, Y+5	; 0x05
    28d8:	7e 81       	ldd	r23, Y+6	; 0x06
    28da:	8f 81       	ldd	r24, Y+7	; 0x07
    28dc:	98 85       	ldd	r25, Y+8	; 0x08
    28de:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <__cmpsf2>
    28e2:	88 23       	and	r24, r24
    28e4:	2c f4       	brge	.+10     	; 0x28f0 <odometry_rotate_for+0x8a>
		__ticks = 1;
    28e6:	81 e0       	ldi	r24, 0x01	; 1
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	9a 87       	std	Y+10, r25	; 0x0a
    28ec:	89 87       	std	Y+9, r24	; 0x09
    28ee:	3f c0       	rjmp	.+126    	; 0x296e <odometry_rotate_for+0x108>
	else if (__tmp > 65535)
    28f0:	20 e0       	ldi	r18, 0x00	; 0
    28f2:	3f ef       	ldi	r19, 0xFF	; 255
    28f4:	4f e7       	ldi	r20, 0x7F	; 127
    28f6:	57 e4       	ldi	r21, 0x47	; 71
    28f8:	6d 81       	ldd	r22, Y+5	; 0x05
    28fa:	7e 81       	ldd	r23, Y+6	; 0x06
    28fc:	8f 81       	ldd	r24, Y+7	; 0x07
    28fe:	98 85       	ldd	r25, Y+8	; 0x08
    2900:	0e 94 75 1f 	call	0x3eea	; 0x3eea <__gesf2>
    2904:	18 16       	cp	r1, r24
    2906:	4c f5       	brge	.+82     	; 0x295a <odometry_rotate_for+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2908:	20 e0       	ldi	r18, 0x00	; 0
    290a:	30 e0       	ldi	r19, 0x00	; 0
    290c:	40 e2       	ldi	r20, 0x20	; 32
    290e:	51 e4       	ldi	r21, 0x41	; 65
    2910:	69 81       	ldd	r22, Y+1	; 0x01
    2912:	7a 81       	ldd	r23, Y+2	; 0x02
    2914:	8b 81       	ldd	r24, Y+3	; 0x03
    2916:	9c 81       	ldd	r25, Y+4	; 0x04
    2918:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__mulsf3>
    291c:	dc 01       	movw	r26, r24
    291e:	cb 01       	movw	r24, r22
    2920:	bc 01       	movw	r22, r24
    2922:	cd 01       	movw	r24, r26
    2924:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <__fixunssfsi>
    2928:	dc 01       	movw	r26, r24
    292a:	cb 01       	movw	r24, r22
    292c:	9a 87       	std	Y+10, r25	; 0x0a
    292e:	89 87       	std	Y+9, r24	; 0x09
    2930:	0f c0       	rjmp	.+30     	; 0x2950 <odometry_rotate_for+0xea>
    2932:	8a ef       	ldi	r24, 0xFA	; 250
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	9c 87       	std	Y+12, r25	; 0x0c
    2938:	8b 87       	std	Y+11, r24	; 0x0b
    293a:	8b 85       	ldd	r24, Y+11	; 0x0b
    293c:	9c 85       	ldd	r25, Y+12	; 0x0c
    293e:	01 97       	sbiw	r24, 0x01	; 1
    2940:	f1 f7       	brne	.-4      	; 0x293e <odometry_rotate_for+0xd8>
    2942:	9c 87       	std	Y+12, r25	; 0x0c
    2944:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2946:	89 85       	ldd	r24, Y+9	; 0x09
    2948:	9a 85       	ldd	r25, Y+10	; 0x0a
    294a:	01 97       	sbiw	r24, 0x01	; 1
    294c:	9a 87       	std	Y+10, r25	; 0x0a
    294e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2950:	89 85       	ldd	r24, Y+9	; 0x09
    2952:	9a 85       	ldd	r25, Y+10	; 0x0a
    2954:	89 2b       	or	r24, r25
    2956:	69 f7       	brne	.-38     	; 0x2932 <odometry_rotate_for+0xcc>
    2958:	14 c0       	rjmp	.+40     	; 0x2982 <odometry_rotate_for+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    295a:	6d 81       	ldd	r22, Y+5	; 0x05
    295c:	7e 81       	ldd	r23, Y+6	; 0x06
    295e:	8f 81       	ldd	r24, Y+7	; 0x07
    2960:	98 85       	ldd	r25, Y+8	; 0x08
    2962:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <__fixunssfsi>
    2966:	dc 01       	movw	r26, r24
    2968:	cb 01       	movw	r24, r22
    296a:	9a 87       	std	Y+10, r25	; 0x0a
    296c:	89 87       	std	Y+9, r24	; 0x09
    296e:	89 85       	ldd	r24, Y+9	; 0x09
    2970:	9a 85       	ldd	r25, Y+10	; 0x0a
    2972:	9e 87       	std	Y+14, r25	; 0x0e
    2974:	8d 87       	std	Y+13, r24	; 0x0d
    2976:	8d 85       	ldd	r24, Y+13	; 0x0d
    2978:	9e 85       	ldd	r25, Y+14	; 0x0e
    297a:	01 97       	sbiw	r24, 0x01	; 1
    297c:	f1 f7       	brne	.-4      	; 0x297a <odometry_rotate_for+0x114>
    297e:	9e 87       	std	Y+14, r25	; 0x0e
    2980:	8d 87       	std	Y+13, r24	; 0x0d
    2982:	ce 01       	movw	r24, r28
    2984:	0f 96       	adiw	r24, 0x0f	; 15
    2986:	63 ec       	ldi	r22, 0xC3	; 195
    2988:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <CAN_Write>
    298c:	88 23       	and	r24, r24
    298e:	09 f0       	breq	.+2      	; 0x2992 <odometry_rotate_for+0x12c>
    2990:	86 cf       	rjmp	.-244    	; 0x289e <odometry_rotate_for+0x38>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    2992:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2994:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2996:	0e 94 2b 11 	call	0x2256	; 0x2256 <odometry_wait_until_done>

}
    299a:	6b 96       	adiw	r28, 0x1b	; 27
    299c:	0f b6       	in	r0, 0x3f	; 63
    299e:	f8 94       	cli
    29a0:	de bf       	out	0x3e, r29	; 62
    29a2:	0f be       	out	0x3f, r0	; 63
    29a4:	cd bf       	out	0x3d, r28	; 61
    29a6:	df 91       	pop	r29
    29a8:	cf 91       	pop	r28
    29aa:	08 95       	ret

000029ac <odometry_set_angle>:

uint8_t odometry_set_angle(uint16_t angle, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    29ac:	cf 93       	push	r28
    29ae:	df 93       	push	r29
    29b0:	cd b7       	in	r28, 0x3d	; 61
    29b2:	de b7       	in	r29, 0x3e	; 62
    29b4:	6b 97       	sbiw	r28, 0x1b	; 27
    29b6:	0f b6       	in	r0, 0x3f	; 63
    29b8:	f8 94       	cli
    29ba:	de bf       	out	0x3e, r29	; 62
    29bc:	0f be       	out	0x3f, r0	; 63
    29be:	cd bf       	out	0x3d, r28	; 61
    29c0:	98 8f       	std	Y+24, r25	; 0x18
    29c2:	8f 8b       	std	Y+23, r24	; 0x17
    29c4:	69 8f       	std	Y+25, r22	; 0x19
    29c6:	5b 8f       	std	Y+27, r21	; 0x1b
    29c8:	4a 8f       	std	Y+26, r20	; 0x1a
	uint8_t buffer[8];
	odometry_set_speed(speed);
    29ca:	89 8d       	ldd	r24, Y+25	; 0x19
    29cc:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <odometry_set_speed>

	buffer[0] = 'A';
    29d0:	81 e4       	ldi	r24, 0x41	; 65
    29d2:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = angle >> 8;
    29d4:	8f 89       	ldd	r24, Y+23	; 0x17
    29d6:	98 8d       	ldd	r25, Y+24	; 0x18
    29d8:	89 2f       	mov	r24, r25
    29da:	99 27       	eor	r25, r25
    29dc:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = angle & 0xFF;
    29de:	8f 89       	ldd	r24, Y+23	; 0x17
    29e0:	89 8b       	std	Y+17, r24	; 0x11
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    29e2:	72 c0       	rjmp	.+228    	; 0x2ac8 <odometry_set_angle+0x11c>
    29e4:	80 e0       	ldi	r24, 0x00	; 0
    29e6:	90 e0       	ldi	r25, 0x00	; 0
    29e8:	a8 e4       	ldi	r26, 0x48	; 72
    29ea:	b2 e4       	ldi	r27, 0x42	; 66
    29ec:	89 83       	std	Y+1, r24	; 0x01
    29ee:	9a 83       	std	Y+2, r25	; 0x02
    29f0:	ab 83       	std	Y+3, r26	; 0x03
    29f2:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    29f4:	20 e0       	ldi	r18, 0x00	; 0
    29f6:	30 e4       	ldi	r19, 0x40	; 64
    29f8:	4c e1       	ldi	r20, 0x1C	; 28
    29fa:	55 e4       	ldi	r21, 0x45	; 69
    29fc:	69 81       	ldd	r22, Y+1	; 0x01
    29fe:	7a 81       	ldd	r23, Y+2	; 0x02
    2a00:	8b 81       	ldd	r24, Y+3	; 0x03
    2a02:	9c 81       	ldd	r25, Y+4	; 0x04
    2a04:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__mulsf3>
    2a08:	dc 01       	movw	r26, r24
    2a0a:	cb 01       	movw	r24, r22
    2a0c:	8d 83       	std	Y+5, r24	; 0x05
    2a0e:	9e 83       	std	Y+6, r25	; 0x06
    2a10:	af 83       	std	Y+7, r26	; 0x07
    2a12:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2a14:	20 e0       	ldi	r18, 0x00	; 0
    2a16:	30 e0       	ldi	r19, 0x00	; 0
    2a18:	40 e8       	ldi	r20, 0x80	; 128
    2a1a:	5f e3       	ldi	r21, 0x3F	; 63
    2a1c:	6d 81       	ldd	r22, Y+5	; 0x05
    2a1e:	7e 81       	ldd	r23, Y+6	; 0x06
    2a20:	8f 81       	ldd	r24, Y+7	; 0x07
    2a22:	98 85       	ldd	r25, Y+8	; 0x08
    2a24:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <__cmpsf2>
    2a28:	88 23       	and	r24, r24
    2a2a:	2c f4       	brge	.+10     	; 0x2a36 <odometry_set_angle+0x8a>
		__ticks = 1;
    2a2c:	81 e0       	ldi	r24, 0x01	; 1
    2a2e:	90 e0       	ldi	r25, 0x00	; 0
    2a30:	9a 87       	std	Y+10, r25	; 0x0a
    2a32:	89 87       	std	Y+9, r24	; 0x09
    2a34:	3f c0       	rjmp	.+126    	; 0x2ab4 <odometry_set_angle+0x108>
	else if (__tmp > 65535)
    2a36:	20 e0       	ldi	r18, 0x00	; 0
    2a38:	3f ef       	ldi	r19, 0xFF	; 255
    2a3a:	4f e7       	ldi	r20, 0x7F	; 127
    2a3c:	57 e4       	ldi	r21, 0x47	; 71
    2a3e:	6d 81       	ldd	r22, Y+5	; 0x05
    2a40:	7e 81       	ldd	r23, Y+6	; 0x06
    2a42:	8f 81       	ldd	r24, Y+7	; 0x07
    2a44:	98 85       	ldd	r25, Y+8	; 0x08
    2a46:	0e 94 75 1f 	call	0x3eea	; 0x3eea <__gesf2>
    2a4a:	18 16       	cp	r1, r24
    2a4c:	4c f5       	brge	.+82     	; 0x2aa0 <odometry_set_angle+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a4e:	20 e0       	ldi	r18, 0x00	; 0
    2a50:	30 e0       	ldi	r19, 0x00	; 0
    2a52:	40 e2       	ldi	r20, 0x20	; 32
    2a54:	51 e4       	ldi	r21, 0x41	; 65
    2a56:	69 81       	ldd	r22, Y+1	; 0x01
    2a58:	7a 81       	ldd	r23, Y+2	; 0x02
    2a5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a5c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a5e:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__mulsf3>
    2a62:	dc 01       	movw	r26, r24
    2a64:	cb 01       	movw	r24, r22
    2a66:	bc 01       	movw	r22, r24
    2a68:	cd 01       	movw	r24, r26
    2a6a:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <__fixunssfsi>
    2a6e:	dc 01       	movw	r26, r24
    2a70:	cb 01       	movw	r24, r22
    2a72:	9a 87       	std	Y+10, r25	; 0x0a
    2a74:	89 87       	std	Y+9, r24	; 0x09
    2a76:	0f c0       	rjmp	.+30     	; 0x2a96 <odometry_set_angle+0xea>
    2a78:	8a ef       	ldi	r24, 0xFA	; 250
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
    2a7c:	9c 87       	std	Y+12, r25	; 0x0c
    2a7e:	8b 87       	std	Y+11, r24	; 0x0b
    2a80:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a82:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a84:	01 97       	sbiw	r24, 0x01	; 1
    2a86:	f1 f7       	brne	.-4      	; 0x2a84 <odometry_set_angle+0xd8>
    2a88:	9c 87       	std	Y+12, r25	; 0x0c
    2a8a:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a8c:	89 85       	ldd	r24, Y+9	; 0x09
    2a8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a90:	01 97       	sbiw	r24, 0x01	; 1
    2a92:	9a 87       	std	Y+10, r25	; 0x0a
    2a94:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a96:	89 85       	ldd	r24, Y+9	; 0x09
    2a98:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a9a:	89 2b       	or	r24, r25
    2a9c:	69 f7       	brne	.-38     	; 0x2a78 <odometry_set_angle+0xcc>
    2a9e:	14 c0       	rjmp	.+40     	; 0x2ac8 <odometry_set_angle+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aa0:	6d 81       	ldd	r22, Y+5	; 0x05
    2aa2:	7e 81       	ldd	r23, Y+6	; 0x06
    2aa4:	8f 81       	ldd	r24, Y+7	; 0x07
    2aa6:	98 85       	ldd	r25, Y+8	; 0x08
    2aa8:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <__fixunssfsi>
    2aac:	dc 01       	movw	r26, r24
    2aae:	cb 01       	movw	r24, r22
    2ab0:	9a 87       	std	Y+10, r25	; 0x0a
    2ab2:	89 87       	std	Y+9, r24	; 0x09
    2ab4:	89 85       	ldd	r24, Y+9	; 0x09
    2ab6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ab8:	9e 87       	std	Y+14, r25	; 0x0e
    2aba:	8d 87       	std	Y+13, r24	; 0x0d
    2abc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2abe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ac0:	01 97       	sbiw	r24, 0x01	; 1
    2ac2:	f1 f7       	brne	.-4      	; 0x2ac0 <odometry_set_angle+0x114>
    2ac4:	9e 87       	std	Y+14, r25	; 0x0e
    2ac6:	8d 87       	std	Y+13, r24	; 0x0d
    2ac8:	ce 01       	movw	r24, r28
    2aca:	0f 96       	adiw	r24, 0x0f	; 15
    2acc:	63 ec       	ldi	r22, 0xC3	; 195
    2ace:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <CAN_Write>
    2ad2:	88 23       	and	r24, r24
    2ad4:	09 f0       	breq	.+2      	; 0x2ad8 <odometry_set_angle+0x12c>
    2ad6:	86 cf       	rjmp	.-244    	; 0x29e4 <odometry_set_angle+0x38>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    2ad8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2ada:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2adc:	0e 94 2b 11 	call	0x2256	; 0x2256 <odometry_wait_until_done>
}
    2ae0:	6b 96       	adiw	r28, 0x1b	; 27
    2ae2:	0f b6       	in	r0, 0x3f	; 63
    2ae4:	f8 94       	cli
    2ae6:	de bf       	out	0x3e, r29	; 62
    2ae8:	0f be       	out	0x3f, r0	; 63
    2aea:	cd bf       	out	0x3d, r28	; 61
    2aec:	df 91       	pop	r29
    2aee:	cf 91       	pop	r28
    2af0:	08 95       	ret

00002af2 <odometry_kurva>:

uint8_t odometry_kurva(uint16_t x_pos, uint16_t y_pos, int8_t angle, uint8_t direction, uint8_t (*callback)(uint32_t start_time))
{
    2af2:	0f 93       	push	r16
    2af4:	1f 93       	push	r17
    2af6:	cf 93       	push	r28
    2af8:	df 93       	push	r29
    2afa:	cd b7       	in	r28, 0x3d	; 61
    2afc:	de b7       	in	r29, 0x3e	; 62
    2afe:	6e 97       	sbiw	r28, 0x1e	; 30
    2b00:	0f b6       	in	r0, 0x3f	; 63
    2b02:	f8 94       	cli
    2b04:	de bf       	out	0x3e, r29	; 62
    2b06:	0f be       	out	0x3f, r0	; 63
    2b08:	cd bf       	out	0x3d, r28	; 61
    2b0a:	98 8f       	std	Y+24, r25	; 0x18
    2b0c:	8f 8b       	std	Y+23, r24	; 0x17
    2b0e:	7a 8f       	std	Y+26, r23	; 0x1a
    2b10:	69 8f       	std	Y+25, r22	; 0x19
    2b12:	4b 8f       	std	Y+27, r20	; 0x1b
    2b14:	2c 8f       	std	Y+28, r18	; 0x1c
    2b16:	1e 8f       	std	Y+30, r17	; 0x1e
    2b18:	0d 8f       	std	Y+29, r16	; 0x1d
	uint8_t buffer[8];

	// this is not sure
	odometry_set_speed(70);
    2b1a:	86 e4       	ldi	r24, 0x46	; 70
    2b1c:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <odometry_set_speed>

	buffer[0] = 'Q';
    2b20:	81 e5       	ldi	r24, 0x51	; 81
    2b22:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = x_pos >> 8;
    2b24:	8f 89       	ldd	r24, Y+23	; 0x17
    2b26:	98 8d       	ldd	r25, Y+24	; 0x18
    2b28:	89 2f       	mov	r24, r25
    2b2a:	99 27       	eor	r25, r25
    2b2c:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = x_pos & 0xFF;
    2b2e:	8f 89       	ldd	r24, Y+23	; 0x17
    2b30:	89 8b       	std	Y+17, r24	; 0x11
	buffer[3] = y_pos >> 8;
    2b32:	89 8d       	ldd	r24, Y+25	; 0x19
    2b34:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2b36:	89 2f       	mov	r24, r25
    2b38:	99 27       	eor	r25, r25
    2b3a:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[4] = y_pos & 0xFF;
    2b3c:	89 8d       	ldd	r24, Y+25	; 0x19
    2b3e:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[5] = angle >> 8;
    2b40:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b42:	08 2e       	mov	r0, r24
    2b44:	00 0c       	add	r0, r0
    2b46:	99 0b       	sbc	r25, r25
    2b48:	89 2f       	mov	r24, r25
    2b4a:	99 0f       	add	r25, r25
    2b4c:	99 0b       	sbc	r25, r25
    2b4e:	8c 8b       	std	Y+20, r24	; 0x14
	buffer[6] = angle & 0xFF;
    2b50:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b52:	8d 8b       	std	Y+21, r24	; 0x15
	buffer[7] = direction;
    2b54:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2b56:	8e 8b       	std	Y+22, r24	; 0x16

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    2b58:	72 c0       	rjmp	.+228    	; 0x2c3e <odometry_kurva+0x14c>
    2b5a:	80 e0       	ldi	r24, 0x00	; 0
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	a8 e4       	ldi	r26, 0x48	; 72
    2b60:	b2 e4       	ldi	r27, 0x42	; 66
    2b62:	89 83       	std	Y+1, r24	; 0x01
    2b64:	9a 83       	std	Y+2, r25	; 0x02
    2b66:	ab 83       	std	Y+3, r26	; 0x03
    2b68:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2b6a:	20 e0       	ldi	r18, 0x00	; 0
    2b6c:	30 e4       	ldi	r19, 0x40	; 64
    2b6e:	4c e1       	ldi	r20, 0x1C	; 28
    2b70:	55 e4       	ldi	r21, 0x45	; 69
    2b72:	69 81       	ldd	r22, Y+1	; 0x01
    2b74:	7a 81       	ldd	r23, Y+2	; 0x02
    2b76:	8b 81       	ldd	r24, Y+3	; 0x03
    2b78:	9c 81       	ldd	r25, Y+4	; 0x04
    2b7a:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__mulsf3>
    2b7e:	dc 01       	movw	r26, r24
    2b80:	cb 01       	movw	r24, r22
    2b82:	8d 83       	std	Y+5, r24	; 0x05
    2b84:	9e 83       	std	Y+6, r25	; 0x06
    2b86:	af 83       	std	Y+7, r26	; 0x07
    2b88:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2b8a:	20 e0       	ldi	r18, 0x00	; 0
    2b8c:	30 e0       	ldi	r19, 0x00	; 0
    2b8e:	40 e8       	ldi	r20, 0x80	; 128
    2b90:	5f e3       	ldi	r21, 0x3F	; 63
    2b92:	6d 81       	ldd	r22, Y+5	; 0x05
    2b94:	7e 81       	ldd	r23, Y+6	; 0x06
    2b96:	8f 81       	ldd	r24, Y+7	; 0x07
    2b98:	98 85       	ldd	r25, Y+8	; 0x08
    2b9a:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <__cmpsf2>
    2b9e:	88 23       	and	r24, r24
    2ba0:	2c f4       	brge	.+10     	; 0x2bac <odometry_kurva+0xba>
		__ticks = 1;
    2ba2:	81 e0       	ldi	r24, 0x01	; 1
    2ba4:	90 e0       	ldi	r25, 0x00	; 0
    2ba6:	9a 87       	std	Y+10, r25	; 0x0a
    2ba8:	89 87       	std	Y+9, r24	; 0x09
    2baa:	3f c0       	rjmp	.+126    	; 0x2c2a <odometry_kurva+0x138>
	else if (__tmp > 65535)
    2bac:	20 e0       	ldi	r18, 0x00	; 0
    2bae:	3f ef       	ldi	r19, 0xFF	; 255
    2bb0:	4f e7       	ldi	r20, 0x7F	; 127
    2bb2:	57 e4       	ldi	r21, 0x47	; 71
    2bb4:	6d 81       	ldd	r22, Y+5	; 0x05
    2bb6:	7e 81       	ldd	r23, Y+6	; 0x06
    2bb8:	8f 81       	ldd	r24, Y+7	; 0x07
    2bba:	98 85       	ldd	r25, Y+8	; 0x08
    2bbc:	0e 94 75 1f 	call	0x3eea	; 0x3eea <__gesf2>
    2bc0:	18 16       	cp	r1, r24
    2bc2:	4c f5       	brge	.+82     	; 0x2c16 <odometry_kurva+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bc4:	20 e0       	ldi	r18, 0x00	; 0
    2bc6:	30 e0       	ldi	r19, 0x00	; 0
    2bc8:	40 e2       	ldi	r20, 0x20	; 32
    2bca:	51 e4       	ldi	r21, 0x41	; 65
    2bcc:	69 81       	ldd	r22, Y+1	; 0x01
    2bce:	7a 81       	ldd	r23, Y+2	; 0x02
    2bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd2:	9c 81       	ldd	r25, Y+4	; 0x04
    2bd4:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__mulsf3>
    2bd8:	dc 01       	movw	r26, r24
    2bda:	cb 01       	movw	r24, r22
    2bdc:	bc 01       	movw	r22, r24
    2bde:	cd 01       	movw	r24, r26
    2be0:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <__fixunssfsi>
    2be4:	dc 01       	movw	r26, r24
    2be6:	cb 01       	movw	r24, r22
    2be8:	9a 87       	std	Y+10, r25	; 0x0a
    2bea:	89 87       	std	Y+9, r24	; 0x09
    2bec:	0f c0       	rjmp	.+30     	; 0x2c0c <odometry_kurva+0x11a>
    2bee:	8a ef       	ldi	r24, 0xFA	; 250
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
    2bf2:	9c 87       	std	Y+12, r25	; 0x0c
    2bf4:	8b 87       	std	Y+11, r24	; 0x0b
    2bf6:	8b 85       	ldd	r24, Y+11	; 0x0b
    2bf8:	9c 85       	ldd	r25, Y+12	; 0x0c
    2bfa:	01 97       	sbiw	r24, 0x01	; 1
    2bfc:	f1 f7       	brne	.-4      	; 0x2bfa <odometry_kurva+0x108>
    2bfe:	9c 87       	std	Y+12, r25	; 0x0c
    2c00:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c02:	89 85       	ldd	r24, Y+9	; 0x09
    2c04:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c06:	01 97       	sbiw	r24, 0x01	; 1
    2c08:	9a 87       	std	Y+10, r25	; 0x0a
    2c0a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c0c:	89 85       	ldd	r24, Y+9	; 0x09
    2c0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c10:	89 2b       	or	r24, r25
    2c12:	69 f7       	brne	.-38     	; 0x2bee <odometry_kurva+0xfc>
    2c14:	14 c0       	rjmp	.+40     	; 0x2c3e <odometry_kurva+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c16:	6d 81       	ldd	r22, Y+5	; 0x05
    2c18:	7e 81       	ldd	r23, Y+6	; 0x06
    2c1a:	8f 81       	ldd	r24, Y+7	; 0x07
    2c1c:	98 85       	ldd	r25, Y+8	; 0x08
    2c1e:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <__fixunssfsi>
    2c22:	dc 01       	movw	r26, r24
    2c24:	cb 01       	movw	r24, r22
    2c26:	9a 87       	std	Y+10, r25	; 0x0a
    2c28:	89 87       	std	Y+9, r24	; 0x09
    2c2a:	89 85       	ldd	r24, Y+9	; 0x09
    2c2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c2e:	9e 87       	std	Y+14, r25	; 0x0e
    2c30:	8d 87       	std	Y+13, r24	; 0x0d
    2c32:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c34:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c36:	01 97       	sbiw	r24, 0x01	; 1
    2c38:	f1 f7       	brne	.-4      	; 0x2c36 <odometry_kurva+0x144>
    2c3a:	9e 87       	std	Y+14, r25	; 0x0e
    2c3c:	8d 87       	std	Y+13, r24	; 0x0d
    2c3e:	ce 01       	movw	r24, r28
    2c40:	0f 96       	adiw	r24, 0x0f	; 15
    2c42:	63 ec       	ldi	r22, 0xC3	; 195
    2c44:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <CAN_Write>
    2c48:	88 23       	and	r24, r24
    2c4a:	09 f0       	breq	.+2      	; 0x2c4e <odometry_kurva+0x15c>
    2c4c:	86 cf       	rjmp	.-244    	; 0x2b5a <odometry_kurva+0x68>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    2c4e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c50:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c52:	0e 94 2b 11 	call	0x2256	; 0x2256 <odometry_wait_until_done>
}
    2c56:	6e 96       	adiw	r28, 0x1e	; 30
    2c58:	0f b6       	in	r0, 0x3f	; 63
    2c5a:	f8 94       	cli
    2c5c:	de bf       	out	0x3e, r29	; 62
    2c5e:	0f be       	out	0x3f, r0	; 63
    2c60:	cd bf       	out	0x3d, r28	; 61
    2c62:	df 91       	pop	r29
    2c64:	cf 91       	pop	r28
    2c66:	1f 91       	pop	r17
    2c68:	0f 91       	pop	r16
    2c6a:	08 95       	ret

00002c6c <getState>:
uint8_t getState(void)
{
    2c6c:	cf 93       	push	r28
    2c6e:	df 93       	push	r29
    2c70:	cd b7       	in	r28, 0x3d	; 61
    2c72:	de b7       	in	r29, 0x3e	; 62
	return position.state;
    2c74:	80 91 10 01 	lds	r24, 0x0110
}
    2c78:	df 91       	pop	r29
    2c7a:	cf 91       	pop	r28
    2c7c:	08 95       	ret

00002c7e <odometry_get_x>:

int16_t odometry_get_x(void)
{
    2c7e:	cf 93       	push	r28
    2c80:	df 93       	push	r29
    2c82:	cd b7       	in	r28, 0x3d	; 61
    2c84:	de b7       	in	r29, 0x3e	; 62
	return position.x;
    2c86:	80 91 0a 01 	lds	r24, 0x010A
    2c8a:	90 91 0b 01 	lds	r25, 0x010B
}
    2c8e:	df 91       	pop	r29
    2c90:	cf 91       	pop	r28
    2c92:	08 95       	ret

00002c94 <odometry_get_y>:

int16_t odometry_get_y(void)
{
    2c94:	cf 93       	push	r28
    2c96:	df 93       	push	r29
    2c98:	cd b7       	in	r28, 0x3d	; 61
    2c9a:	de b7       	in	r29, 0x3e	; 62
	return position.y;
    2c9c:	80 91 0c 01 	lds	r24, 0x010C
    2ca0:	90 91 0d 01 	lds	r25, 0x010D
}
    2ca4:	df 91       	pop	r29
    2ca6:	cf 91       	pop	r28
    2ca8:	08 95       	ret

00002caa <odometry_get_angle>:

int16_t odometry_get_angle(void)
{
    2caa:	cf 93       	push	r28
    2cac:	df 93       	push	r29
    2cae:	cd b7       	in	r28, 0x3d	; 61
    2cb0:	de b7       	in	r29, 0x3e	; 62
	return position.angle;
    2cb2:	80 91 0e 01 	lds	r24, 0x010E
    2cb6:	90 91 0f 01 	lds	r25, 0x010F
}
    2cba:	df 91       	pop	r29
    2cbc:	cf 91       	pop	r28
    2cbe:	08 95       	ret

00002cc0 <timer_register_callback>:
 *	Function: 		void timer_register_callback(void (*callback)(void))
 *	Parameters: 	void (*callback)(void))
 *	Description: 	timer callbacks
 */
void timer_register_callback(void (*callback)(void))
{
    2cc0:	cf 93       	push	r28
    2cc2:	df 93       	push	r29
    2cc4:	00 d0       	rcall	.+0      	; 0x2cc6 <timer_register_callback+0x6>
    2cc6:	cd b7       	in	r28, 0x3d	; 61
    2cc8:	de b7       	in	r29, 0x3e	; 62
    2cca:	9a 83       	std	Y+2, r25	; 0x02
    2ccc:	89 83       	std	Y+1, r24	; 0x01
    timer_callback = callback;
    2cce:	89 81       	ldd	r24, Y+1	; 0x01
    2cd0:	9a 81       	ldd	r25, Y+2	; 0x02
    2cd2:	90 93 87 01 	sts	0x0187, r25
    2cd6:	80 93 86 01 	sts	0x0186, r24
}
    2cda:	0f 90       	pop	r0
    2cdc:	0f 90       	pop	r0
    2cde:	df 91       	pop	r29
    2ce0:	cf 91       	pop	r28
    2ce2:	08 95       	ret

00002ce4 <timer_init>:
 *	Function: 		void timer_init(unsigned int freq)
 *	Parameters: 	unsigned int freq - frequency of timer
 *	Description: 	setup timer
 */
void timer_init(unsigned int freq)
{
    2ce4:	0f 93       	push	r16
    2ce6:	1f 93       	push	r17
    2ce8:	cf 93       	push	r28
    2cea:	df 93       	push	r29
    2cec:	00 d0       	rcall	.+0      	; 0x2cee <timer_init+0xa>
    2cee:	cd b7       	in	r28, 0x3d	; 61
    2cf0:	de b7       	in	r29, 0x3e	; 62
    2cf2:	9a 83       	std	Y+2, r25	; 0x02
    2cf4:	89 83       	std	Y+1, r24	; 0x01
    TCCR1A = 0;
    2cf6:	80 e8       	ldi	r24, 0x80	; 128
    2cf8:	90 e0       	ldi	r25, 0x00	; 0
    2cfa:	fc 01       	movw	r30, r24
    2cfc:	10 82       	st	Z, r1
	TCCR1B = (1 << WGM12) | (1 << CS10);
    2cfe:	81 e8       	ldi	r24, 0x81	; 129
    2d00:	90 e0       	ldi	r25, 0x00	; 0
    2d02:	29 e0       	ldi	r18, 0x09	; 9
    2d04:	fc 01       	movw	r30, r24
    2d06:	20 83       	st	Z, r18
	OCR1A = (double)F_CPU / (double)freq + 0.5;
    2d08:	08 e8       	ldi	r16, 0x88	; 136
    2d0a:	10 e0       	ldi	r17, 0x00	; 0
    2d0c:	89 81       	ldd	r24, Y+1	; 0x01
    2d0e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d10:	cc 01       	movw	r24, r24
    2d12:	a0 e0       	ldi	r26, 0x00	; 0
    2d14:	b0 e0       	ldi	r27, 0x00	; 0
    2d16:	bc 01       	movw	r22, r24
    2d18:	cd 01       	movw	r24, r26
    2d1a:	0e 94 c3 1e 	call	0x3d86	; 0x3d86 <__floatunsisf>
    2d1e:	dc 01       	movw	r26, r24
    2d20:	cb 01       	movw	r24, r22
    2d22:	9c 01       	movw	r18, r24
    2d24:	ad 01       	movw	r20, r26
    2d26:	60 e8       	ldi	r22, 0x80	; 128
    2d28:	76 e9       	ldi	r23, 0x96	; 150
    2d2a:	88 e1       	ldi	r24, 0x18	; 24
    2d2c:	9b e4       	ldi	r25, 0x4B	; 75
    2d2e:	0e 94 1b 1e 	call	0x3c36	; 0x3c36 <__divsf3>
    2d32:	dc 01       	movw	r26, r24
    2d34:	cb 01       	movw	r24, r22
    2d36:	20 e0       	ldi	r18, 0x00	; 0
    2d38:	30 e0       	ldi	r19, 0x00	; 0
    2d3a:	40 e0       	ldi	r20, 0x00	; 0
    2d3c:	5f e3       	ldi	r21, 0x3F	; 63
    2d3e:	bc 01       	movw	r22, r24
    2d40:	cd 01       	movw	r24, r26
    2d42:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <__addsf3>
    2d46:	dc 01       	movw	r26, r24
    2d48:	cb 01       	movw	r24, r22
    2d4a:	bc 01       	movw	r22, r24
    2d4c:	cd 01       	movw	r24, r26
    2d4e:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <__fixunssfsi>
    2d52:	dc 01       	movw	r26, r24
    2d54:	cb 01       	movw	r24, r22
    2d56:	f8 01       	movw	r30, r16
    2d58:	91 83       	std	Z+1, r25	; 0x01
    2d5a:	80 83       	st	Z, r24
	TIMSK1 = 1 << OCIE1A;
    2d5c:	8f e6       	ldi	r24, 0x6F	; 111
    2d5e:	90 e0       	ldi	r25, 0x00	; 0
    2d60:	22 e0       	ldi	r18, 0x02	; 2
    2d62:	fc 01       	movw	r30, r24
    2d64:	20 83       	st	Z, r18

	SREG |= 0x80;
    2d66:	8f e5       	ldi	r24, 0x5F	; 95
    2d68:	90 e0       	ldi	r25, 0x00	; 0
    2d6a:	2f e5       	ldi	r18, 0x5F	; 95
    2d6c:	30 e0       	ldi	r19, 0x00	; 0
    2d6e:	f9 01       	movw	r30, r18
    2d70:	20 81       	ld	r18, Z
    2d72:	20 68       	ori	r18, 0x80	; 128
    2d74:	fc 01       	movw	r30, r24
    2d76:	20 83       	st	Z, r18
}
    2d78:	0f 90       	pop	r0
    2d7a:	0f 90       	pop	r0
    2d7c:	df 91       	pop	r29
    2d7e:	cf 91       	pop	r28
    2d80:	1f 91       	pop	r17
    2d82:	0f 91       	pop	r16
    2d84:	08 95       	ret

00002d86 <__vector_12>:
/*
 *	Function: 		ISR(TIMER1_COMPA_vect)
 *	Description: 	ISR interrupt for timer
 */
ISR(TIMER1_COMPA_vect)
{
    2d86:	1f 92       	push	r1
    2d88:	0f 92       	push	r0
    2d8a:	00 90 5f 00 	lds	r0, 0x005F
    2d8e:	0f 92       	push	r0
    2d90:	11 24       	eor	r1, r1
    2d92:	00 90 5b 00 	lds	r0, 0x005B
    2d96:	0f 92       	push	r0
    2d98:	2f 93       	push	r18
    2d9a:	3f 93       	push	r19
    2d9c:	4f 93       	push	r20
    2d9e:	5f 93       	push	r21
    2da0:	6f 93       	push	r22
    2da2:	7f 93       	push	r23
    2da4:	8f 93       	push	r24
    2da6:	9f 93       	push	r25
    2da8:	af 93       	push	r26
    2daa:	bf 93       	push	r27
    2dac:	ef 93       	push	r30
    2dae:	ff 93       	push	r31
    2db0:	cf 93       	push	r28
    2db2:	df 93       	push	r29
    2db4:	cd b7       	in	r28, 0x3d	; 61
    2db6:	de b7       	in	r29, 0x3e	; 62
    if(timer_callback != NULL)
    2db8:	80 91 86 01 	lds	r24, 0x0186
    2dbc:	90 91 87 01 	lds	r25, 0x0187
    2dc0:	89 2b       	or	r24, r25
    2dc2:	31 f0       	breq	.+12     	; 0x2dd0 <__vector_12+0x4a>
        timer_callback();
    2dc4:	80 91 86 01 	lds	r24, 0x0186
    2dc8:	90 91 87 01 	lds	r25, 0x0187
    2dcc:	fc 01       	movw	r30, r24
    2dce:	09 95       	icall
	if(sys_time >= 90000)					// if match end
    2dd0:	80 91 81 01 	lds	r24, 0x0181
    2dd4:	90 91 82 01 	lds	r25, 0x0182
    2dd8:	a0 91 83 01 	lds	r26, 0x0183
    2ddc:	b0 91 84 01 	lds	r27, 0x0184
    2de0:	80 39       	cpi	r24, 0x90	; 144
    2de2:	9f 45       	sbci	r25, 0x5F	; 95
    2de4:	a1 40       	sbci	r26, 0x01	; 1
    2de6:	b1 05       	cpc	r27, r1
    2de8:	40 f0       	brcs	.+16     	; 0x2dfa <__vector_12+0x74>
	{
		if(system_get_match_started())		// if the match has started before
    2dea:	0e 94 6f 17 	call	0x2ede	; 0x2ede <system_get_match_started>
    2dee:	88 23       	and	r24, r24
    2df0:	21 f0       	breq	.+8      	; 0x2dfa <__vector_12+0x74>
		{
			odometry_stop(HARD_STOP);
    2df2:	83 e5       	ldi	r24, 0x53	; 83
    2df4:	0e 94 62 11 	call	0x22c4	; 0x22c4 <odometry_stop>
			while(1);
    2df8:	ff cf       	rjmp	.-2      	; 0x2df8 <__vector_12+0x72>
		}
	}
	sys_time++;
    2dfa:	80 91 81 01 	lds	r24, 0x0181
    2dfe:	90 91 82 01 	lds	r25, 0x0182
    2e02:	a0 91 83 01 	lds	r26, 0x0183
    2e06:	b0 91 84 01 	lds	r27, 0x0184
    2e0a:	01 96       	adiw	r24, 0x01	; 1
    2e0c:	a1 1d       	adc	r26, r1
    2e0e:	b1 1d       	adc	r27, r1
    2e10:	80 93 81 01 	sts	0x0181, r24
    2e14:	90 93 82 01 	sts	0x0182, r25
    2e18:	a0 93 83 01 	sts	0x0183, r26
    2e1c:	b0 93 84 01 	sts	0x0184, r27
}
    2e20:	df 91       	pop	r29
    2e22:	cf 91       	pop	r28
    2e24:	ff 91       	pop	r31
    2e26:	ef 91       	pop	r30
    2e28:	bf 91       	pop	r27
    2e2a:	af 91       	pop	r26
    2e2c:	9f 91       	pop	r25
    2e2e:	8f 91       	pop	r24
    2e30:	7f 91       	pop	r23
    2e32:	6f 91       	pop	r22
    2e34:	5f 91       	pop	r21
    2e36:	4f 91       	pop	r20
    2e38:	3f 91       	pop	r19
    2e3a:	2f 91       	pop	r18
    2e3c:	0f 90       	pop	r0
    2e3e:	00 92 5b 00 	sts	0x005B, r0
    2e42:	0f 90       	pop	r0
    2e44:	00 92 5f 00 	sts	0x005F, r0
    2e48:	0f 90       	pop	r0
    2e4a:	1f 90       	pop	r1
    2e4c:	18 95       	reti

00002e4e <sides_switch_check>:
 *	Function: 		signed char sides_switch_check(void)
 *	Parameters: 	void
 *	Description: 	checking side switch
 */
signed char sides_switch_check(void)
{
    2e4e:	cf 93       	push	r28
    2e50:	df 93       	push	r29
    2e52:	cd b7       	in	r28, 0x3d	; 61
    2e54:	de b7       	in	r29, 0x3e	; 62
	if(gpio_read_pin(SIDE_PIN) == 1)
    2e56:	89 e2       	ldi	r24, 0x29	; 41
    2e58:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <gpio_read_pin>
    2e5c:	81 30       	cpi	r24, 0x01	; 1
    2e5e:	11 f4       	brne	.+4      	; 0x2e64 <sides_switch_check+0x16>
	{
		return 1;
    2e60:	81 e0       	ldi	r24, 0x01	; 1
    2e62:	01 c0       	rjmp	.+2      	; 0x2e66 <sides_switch_check+0x18>
	}
	return 0;
    2e64:	80 e0       	ldi	r24, 0x00	; 0
}
    2e66:	df 91       	pop	r29
    2e68:	cf 91       	pop	r28
    2e6a:	08 95       	ret

00002e6c <tactic_switch_check>:
 *	Function: 		signed char tactic_switch_check(void)
 *	Parameters: 	void
 *	Description:	reading tactic switch
 */
signed char tactic_switch_check(void)
{
    2e6c:	cf 93       	push	r28
    2e6e:	df 93       	push	r29
    2e70:	cd b7       	in	r28, 0x3d	; 61
    2e72:	de b7       	in	r29, 0x3e	; 62
	if(gpio_read_pin(TACTIC_PIN) == 1)
    2e74:	8a e2       	ldi	r24, 0x2A	; 42
    2e76:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <gpio_read_pin>
    2e7a:	81 30       	cpi	r24, 0x01	; 1
    2e7c:	11 f4       	brne	.+4      	; 0x2e82 <tactic_switch_check+0x16>
	{
		return 1;
    2e7e:	81 e0       	ldi	r24, 0x01	; 1
    2e80:	01 c0       	rjmp	.+2      	; 0x2e84 <tactic_switch_check+0x18>
	}
	return 0;
    2e82:	80 e0       	ldi	r24, 0x00	; 0
}
    2e84:	df 91       	pop	r29
    2e86:	cf 91       	pop	r28
    2e88:	08 95       	ret

00002e8a <system_reset_system_time>:
 *	Function: 		void system_reset_system_time(void)
 *	Parameters: 	void
 *	Description:	reset system time
 */
void system_reset_system_time(void)
{
    2e8a:	cf 93       	push	r28
    2e8c:	df 93       	push	r29
    2e8e:	cd b7       	in	r28, 0x3d	; 61
    2e90:	de b7       	in	r29, 0x3e	; 62
	sys_time = 0;
    2e92:	10 92 81 01 	sts	0x0181, r1
    2e96:	10 92 82 01 	sts	0x0182, r1
    2e9a:	10 92 83 01 	sts	0x0183, r1
    2e9e:	10 92 84 01 	sts	0x0184, r1
}
    2ea2:	df 91       	pop	r29
    2ea4:	cf 91       	pop	r28
    2ea6:	08 95       	ret

00002ea8 <system_set_match_started>:
 *	Function: 		void system_set_match_started(void)
 *	Parameters: 	void
 *	Description:	let the match begiiiiiiiiiin
 */
void system_set_match_started(void)
{
    2ea8:	cf 93       	push	r28
    2eaa:	df 93       	push	r29
    2eac:	cd b7       	in	r28, 0x3d	; 61
    2eae:	de b7       	in	r29, 0x3e	; 62
	match_started = 1;
    2eb0:	81 e0       	ldi	r24, 0x01	; 1
    2eb2:	80 93 85 01 	sts	0x0185, r24
}
    2eb6:	df 91       	pop	r29
    2eb8:	cf 91       	pop	r28
    2eba:	08 95       	ret

00002ebc <system_get_system_time>:
 *	Function: 		uint32_t system_get_system_time(void)
 *	Parameters: 	void
 *	Description:	returns current system time
 */
uint32_t system_get_system_time(void)
{
    2ebc:	cf 93       	push	r28
    2ebe:	df 93       	push	r29
    2ec0:	cd b7       	in	r28, 0x3d	; 61
    2ec2:	de b7       	in	r29, 0x3e	; 62
	return sys_time;
    2ec4:	80 91 81 01 	lds	r24, 0x0181
    2ec8:	90 91 82 01 	lds	r25, 0x0182
    2ecc:	a0 91 83 01 	lds	r26, 0x0183
    2ed0:	b0 91 84 01 	lds	r27, 0x0184
}
    2ed4:	bc 01       	movw	r22, r24
    2ed6:	cd 01       	movw	r24, r26
    2ed8:	df 91       	pop	r29
    2eda:	cf 91       	pop	r28
    2edc:	08 95       	ret

00002ede <system_get_match_started>:
 *	Function: 		uint8_t system_get_match_started(void)
 *	Parameters: 	void
 *	Description:	return if match has started
 */
uint8_t system_get_match_started(void)
{
    2ede:	cf 93       	push	r28
    2ee0:	df 93       	push	r29
    2ee2:	cd b7       	in	r28, 0x3d	; 61
    2ee4:	de b7       	in	r29, 0x3e	; 62
	return match_started;
    2ee6:	80 91 85 01 	lds	r24, 0x0185
}
    2eea:	df 91       	pop	r29
    2eec:	cf 91       	pop	r28
    2eee:	08 95       	ret

00002ef0 <return_active_state>:
 *	Function: 		uint8_t return_active_state(void)
 *	Parameters: 	void
 *	Description:	return active state
 */
uint8_t return_active_state(void)
{
    2ef0:	cf 93       	push	r28
    2ef2:	df 93       	push	r29
    2ef4:	cd b7       	in	r28, 0x3d	; 61
    2ef6:	de b7       	in	r29, 0x3e	; 62
	return active_state;
    2ef8:	80 91 97 02 	lds	r24, 0x0297
    2efc:	90 91 98 02 	lds	r25, 0x0298
}
    2f00:	df 91       	pop	r29
    2f02:	cf 91       	pop	r28
    2f04:	08 95       	ret

00002f06 <leds>:
 *	Function: 		void leds(unsigned char state)
 *	Parameters: 	unsigned char state - the state
 *	Description:	setting the debug led's states
 */
void leds(unsigned char state)
{
    2f06:	cf 93       	push	r28
    2f08:	df 93       	push	r29
    2f0a:	1f 92       	push	r1
    2f0c:	cd b7       	in	r28, 0x3d	; 61
    2f0e:	de b7       	in	r29, 0x3e	; 62
    2f10:	89 83       	std	Y+1, r24	; 0x01
	if(state) { PORTG = 0xff; } else { PORTG = 0x00; }
    2f12:	89 81       	ldd	r24, Y+1	; 0x01
    2f14:	88 23       	and	r24, r24
    2f16:	31 f0       	breq	.+12     	; 0x2f24 <leds+0x1e>
    2f18:	84 e3       	ldi	r24, 0x34	; 52
    2f1a:	90 e0       	ldi	r25, 0x00	; 0
    2f1c:	2f ef       	ldi	r18, 0xFF	; 255
    2f1e:	fc 01       	movw	r30, r24
    2f20:	20 83       	st	Z, r18
    2f22:	04 c0       	rjmp	.+8      	; 0x2f2c <leds+0x26>
    2f24:	84 e3       	ldi	r24, 0x34	; 52
    2f26:	90 e0       	ldi	r25, 0x00	; 0
    2f28:	fc 01       	movw	r30, r24
    2f2a:	10 82       	st	Z, r1
}
    2f2c:	0f 90       	pop	r0
    2f2e:	df 91       	pop	r29
    2f30:	cf 91       	pop	r28
    2f32:	08 95       	ret

00002f34 <system_init>:
 *	Function: 		void system_init(void)
 *	Parameters: 	void
 *	Description:	initing all the things
 */
void system_init(void)
{	
    2f34:	cf 93       	push	r28
    2f36:	df 93       	push	r29
    2f38:	cd b7       	in	r28, 0x3d	; 61
    2f3a:	de b7       	in	r29, 0x3e	; 62
    2f3c:	2e 97       	sbiw	r28, 0x0e	; 14
    2f3e:	0f b6       	in	r0, 0x3f	; 63
    2f40:	f8 94       	cli
    2f42:	de bf       	out	0x3e, r29	; 62
    2f44:	0f be       	out	0x3f, r0	; 63
    2f46:	cd bf       	out	0x3d, r28	; 61

	// sets debouncer
	timer_register_callback(gpio_debouncer);
    2f48:	8a e7       	ldi	r24, 0x7A	; 122
    2f4a:	9f e0       	ldi	r25, 0x0F	; 15
    2f4c:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <timer_register_callback>
    2f50:	80 e0       	ldi	r24, 0x00	; 0
    2f52:	90 e0       	ldi	r25, 0x00	; 0
    2f54:	a8 ec       	ldi	r26, 0xC8	; 200
    2f56:	b2 e4       	ldi	r27, 0x42	; 66
    2f58:	89 83       	std	Y+1, r24	; 0x01
    2f5a:	9a 83       	std	Y+2, r25	; 0x02
    2f5c:	ab 83       	std	Y+3, r26	; 0x03
    2f5e:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2f60:	20 e0       	ldi	r18, 0x00	; 0
    2f62:	30 e4       	ldi	r19, 0x40	; 64
    2f64:	4c e1       	ldi	r20, 0x1C	; 28
    2f66:	55 e4       	ldi	r21, 0x45	; 69
    2f68:	69 81       	ldd	r22, Y+1	; 0x01
    2f6a:	7a 81       	ldd	r23, Y+2	; 0x02
    2f6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f6e:	9c 81       	ldd	r25, Y+4	; 0x04
    2f70:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__mulsf3>
    2f74:	dc 01       	movw	r26, r24
    2f76:	cb 01       	movw	r24, r22
    2f78:	8d 83       	std	Y+5, r24	; 0x05
    2f7a:	9e 83       	std	Y+6, r25	; 0x06
    2f7c:	af 83       	std	Y+7, r26	; 0x07
    2f7e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2f80:	20 e0       	ldi	r18, 0x00	; 0
    2f82:	30 e0       	ldi	r19, 0x00	; 0
    2f84:	40 e8       	ldi	r20, 0x80	; 128
    2f86:	5f e3       	ldi	r21, 0x3F	; 63
    2f88:	6d 81       	ldd	r22, Y+5	; 0x05
    2f8a:	7e 81       	ldd	r23, Y+6	; 0x06
    2f8c:	8f 81       	ldd	r24, Y+7	; 0x07
    2f8e:	98 85       	ldd	r25, Y+8	; 0x08
    2f90:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <__cmpsf2>
    2f94:	88 23       	and	r24, r24
    2f96:	2c f4       	brge	.+10     	; 0x2fa2 <system_init+0x6e>
		__ticks = 1;
    2f98:	81 e0       	ldi	r24, 0x01	; 1
    2f9a:	90 e0       	ldi	r25, 0x00	; 0
    2f9c:	9a 87       	std	Y+10, r25	; 0x0a
    2f9e:	89 87       	std	Y+9, r24	; 0x09
    2fa0:	3f c0       	rjmp	.+126    	; 0x3020 <system_init+0xec>
	else if (__tmp > 65535)
    2fa2:	20 e0       	ldi	r18, 0x00	; 0
    2fa4:	3f ef       	ldi	r19, 0xFF	; 255
    2fa6:	4f e7       	ldi	r20, 0x7F	; 127
    2fa8:	57 e4       	ldi	r21, 0x47	; 71
    2faa:	6d 81       	ldd	r22, Y+5	; 0x05
    2fac:	7e 81       	ldd	r23, Y+6	; 0x06
    2fae:	8f 81       	ldd	r24, Y+7	; 0x07
    2fb0:	98 85       	ldd	r25, Y+8	; 0x08
    2fb2:	0e 94 75 1f 	call	0x3eea	; 0x3eea <__gesf2>
    2fb6:	18 16       	cp	r1, r24
    2fb8:	4c f5       	brge	.+82     	; 0x300c <system_init+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fba:	20 e0       	ldi	r18, 0x00	; 0
    2fbc:	30 e0       	ldi	r19, 0x00	; 0
    2fbe:	40 e2       	ldi	r20, 0x20	; 32
    2fc0:	51 e4       	ldi	r21, 0x41	; 65
    2fc2:	69 81       	ldd	r22, Y+1	; 0x01
    2fc4:	7a 81       	ldd	r23, Y+2	; 0x02
    2fc6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fc8:	9c 81       	ldd	r25, Y+4	; 0x04
    2fca:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__mulsf3>
    2fce:	dc 01       	movw	r26, r24
    2fd0:	cb 01       	movw	r24, r22
    2fd2:	bc 01       	movw	r22, r24
    2fd4:	cd 01       	movw	r24, r26
    2fd6:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <__fixunssfsi>
    2fda:	dc 01       	movw	r26, r24
    2fdc:	cb 01       	movw	r24, r22
    2fde:	9a 87       	std	Y+10, r25	; 0x0a
    2fe0:	89 87       	std	Y+9, r24	; 0x09
    2fe2:	0f c0       	rjmp	.+30     	; 0x3002 <system_init+0xce>
    2fe4:	8a ef       	ldi	r24, 0xFA	; 250
    2fe6:	90 e0       	ldi	r25, 0x00	; 0
    2fe8:	9c 87       	std	Y+12, r25	; 0x0c
    2fea:	8b 87       	std	Y+11, r24	; 0x0b
    2fec:	8b 85       	ldd	r24, Y+11	; 0x0b
    2fee:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ff0:	01 97       	sbiw	r24, 0x01	; 1
    2ff2:	f1 f7       	brne	.-4      	; 0x2ff0 <system_init+0xbc>
    2ff4:	9c 87       	std	Y+12, r25	; 0x0c
    2ff6:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ff8:	89 85       	ldd	r24, Y+9	; 0x09
    2ffa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ffc:	01 97       	sbiw	r24, 0x01	; 1
    2ffe:	9a 87       	std	Y+10, r25	; 0x0a
    3000:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3002:	89 85       	ldd	r24, Y+9	; 0x09
    3004:	9a 85       	ldd	r25, Y+10	; 0x0a
    3006:	89 2b       	or	r24, r25
    3008:	69 f7       	brne	.-38     	; 0x2fe4 <system_init+0xb0>
    300a:	14 c0       	rjmp	.+40     	; 0x3034 <system_init+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    300c:	6d 81       	ldd	r22, Y+5	; 0x05
    300e:	7e 81       	ldd	r23, Y+6	; 0x06
    3010:	8f 81       	ldd	r24, Y+7	; 0x07
    3012:	98 85       	ldd	r25, Y+8	; 0x08
    3014:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <__fixunssfsi>
    3018:	dc 01       	movw	r26, r24
    301a:	cb 01       	movw	r24, r22
    301c:	9a 87       	std	Y+10, r25	; 0x0a
    301e:	89 87       	std	Y+9, r24	; 0x09
    3020:	89 85       	ldd	r24, Y+9	; 0x09
    3022:	9a 85       	ldd	r25, Y+10	; 0x0a
    3024:	9e 87       	std	Y+14, r25	; 0x0e
    3026:	8d 87       	std	Y+13, r24	; 0x0d
    3028:	8d 85       	ldd	r24, Y+13	; 0x0d
    302a:	9e 85       	ldd	r25, Y+14	; 0x0e
    302c:	01 97       	sbiw	r24, 0x01	; 1
    302e:	f1 f7       	brne	.-4      	; 0x302c <system_init+0xf8>
    3030:	9e 87       	std	Y+14, r25	; 0x0e
    3032:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(100);
	
	/*
	 *	gpio setups
	 */
	gpio_register_pin(JUMPER_PIN,GPIO_DIRECTION_INPUT,TRUE);							//jumper
    3034:	40 e0       	ldi	r20, 0x00	; 0
    3036:	60 e0       	ldi	r22, 0x00	; 0
    3038:	88 e2       	ldi	r24, 0x28	; 40
    303a:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <gpio_register_pin>
	gpio_register_pin(SIDE_PIN,GPIO_DIRECTION_INPUT,TRUE);								//prekidac za stranu
    303e:	40 e0       	ldi	r20, 0x00	; 0
    3040:	60 e0       	ldi	r22, 0x00	; 0
    3042:	89 e2       	ldi	r24, 0x29	; 41
    3044:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <gpio_register_pin>
	gpio_register_pin(TACTIC_PIN,GPIO_DIRECTION_INPUT,TRUE);							//prekidac za stranu
    3048:	40 e0       	ldi	r20, 0x00	; 0
    304a:	60 e0       	ldi	r22, 0x00	; 0
    304c:	8a e2       	ldi	r24, 0x2A	; 42
    304e:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <gpio_register_pin>
	gpio_register_pin(VALJAK_PIN,GPIO_DIRECTION_INPUT,TRUE);							//prekidac za valjak
    3052:	40 e0       	ldi	r20, 0x00	; 0
    3054:	60 e0       	ldi	r22, 0x00	; 0
    3056:	8b e2       	ldi	r24, 0x2B	; 43
    3058:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <gpio_register_pin>
	gpio_register_pin(SENSOR_B_L_PIN,GPIO_DIRECTION_INPUT,TRUE);						//sensor back left
	gpio_register_pin(SENSOR_B_R_PIN,GPIO_DIRECTION_INPUT,TRUE);						//sensor back right
	*/

	// led debugs
	DDRG = 0xff;
    305c:	83 e3       	ldi	r24, 0x33	; 51
    305e:	90 e0       	ldi	r25, 0x00	; 0
    3060:	2f ef       	ldi	r18, 0xFF	; 255
    3062:	fc 01       	movw	r30, r24
    3064:	20 83       	st	Z, r18
	DDRA = 0xff;
    3066:	81 e2       	ldi	r24, 0x21	; 33
    3068:	90 e0       	ldi	r25, 0x00	; 0
    306a:	2f ef       	ldi	r18, 0xFF	; 255
    306c:	fc 01       	movw	r30, r24
    306e:	20 83       	st	Z, r18
	leds(ON);
    3070:	81 e0       	ldi	r24, 0x01	; 1
    3072:	0e 94 83 17 	call	0x2f06	; 0x2f06 <leds>

	// inits
	servo_init(50);
    3076:	82 e3       	ldi	r24, 0x32	; 50
    3078:	90 e0       	ldi	r25, 0x00	; 0
    307a:	0e 94 a6 00 	call	0x14c	; 0x14c <servo_init>
	timer_init(1000);
    307e:	88 ee       	ldi	r24, 0xE8	; 232
    3080:	93 e0       	ldi	r25, 0x03	; 3
    3082:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <timer_init>
	CAN_Init(1);
    3086:	81 e0       	ldi	r24, 0x01	; 1
    3088:	0e 94 9a 0b 	call	0x1734	; 0x1734 <CAN_Init>
	initUart1(UART1_BAUD,UART_ISR_ON);
    308c:	41 e0       	ldi	r20, 0x01	; 1
    308e:	60 e8       	ldi	r22, 0x80	; 128
    3090:	75 e2       	ldi	r23, 0x25	; 37
    3092:	80 e0       	ldi	r24, 0x00	; 0
    3094:	90 e0       	ldi	r25, 0x00	; 0
    3096:	0e 94 67 1a 	call	0x34ce	; 0x34ce <initUart1>
	actuator_setup();
    309a:	0e 94 95 02 	call	0x52a	; 0x52a <actuator_setup>
	// waiting for the jumper
	/*while(!(gpio_read_pin(JUMPER_PIN)));
		_delay_ms(10);*/
		
	// indicating the led
	leds(OFF);
    309e:	80 e0       	ldi	r24, 0x00	; 0
    30a0:	0e 94 83 17 	call	0x2f06	; 0x2f06 <leds>
	
	system_reset_system_time();															// reset system time
    30a4:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <system_reset_system_time>
	system_set_match_started();															// match has started!
    30a8:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <system_set_match_started>

}
    30ac:	2e 96       	adiw	r28, 0x0e	; 14
    30ae:	0f b6       	in	r0, 0x3f	; 63
    30b0:	f8 94       	cli
    30b2:	de bf       	out	0x3e, r29	; 62
    30b4:	0f be       	out	0x3f, r0	; 63
    30b6:	cd bf       	out	0x3d, r28	; 61
    30b8:	df 91       	pop	r29
    30ba:	cf 91       	pop	r28
    30bc:	08 95       	ret

000030be <check_sensor>:
 *	Function: 		signed char check_sensor(signed char robot_side, signed char sensor_side)
 *	Parameters: 	signed char robot_side, signed char sensor_side
 *	Description:	checking all the sensors
 */
signed char check_sensor(signed char robot_side, signed char sensor_side)
{
    30be:	cf 93       	push	r28
    30c0:	df 93       	push	r29
    30c2:	00 d0       	rcall	.+0      	; 0x30c4 <check_sensor+0x6>
    30c4:	cd b7       	in	r28, 0x3d	; 61
    30c6:	de b7       	in	r29, 0x3e	; 62
    30c8:	89 83       	std	Y+1, r24	; 0x01
    30ca:	6a 83       	std	Y+2, r22	; 0x02
	if(robot_side == ROBOT_SIDE_FRONT)
    30cc:	89 81       	ldd	r24, Y+1	; 0x01
    30ce:	81 30       	cpi	r24, 0x01	; 1
    30d0:	49 f5       	brne	.+82     	; 0x3124 <check_sensor+0x66>
	{
		if(sensor_side == ALL)
    30d2:	8a 81       	ldd	r24, Y+2	; 0x02
    30d4:	81 30       	cpi	r24, 0x01	; 1
    30d6:	71 f4       	brne	.+28     	; 0x30f4 <check_sensor+0x36>
		{
			// check if ! or normal
			if(!(gpio_read_pin(SENSOR_F_L_PIN)) || !(gpio_read_pin(SENSOR_F_R_PIN)))
    30d8:	88 e0       	ldi	r24, 0x08	; 8
    30da:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <gpio_read_pin>
    30de:	88 23       	and	r24, r24
    30e0:	29 f0       	breq	.+10     	; 0x30ec <check_sensor+0x2e>
    30e2:	8a e0       	ldi	r24, 0x0A	; 10
    30e4:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <gpio_read_pin>
    30e8:	88 23       	and	r24, r24
    30ea:	11 f4       	brne	.+4      	; 0x30f0 <check_sensor+0x32>
			{
				return DETECTED;
    30ec:	81 e0       	ldi	r24, 0x01	; 1
    30ee:	47 c0       	rjmp	.+142    	; 0x317e <check_sensor+0xc0>
			}
			return NOT_DETECTED;
    30f0:	80 e0       	ldi	r24, 0x00	; 0
    30f2:	45 c0       	rjmp	.+138    	; 0x317e <check_sensor+0xc0>
		}
		else if(sensor_side == LEFT)
    30f4:	8a 81       	ldd	r24, Y+2	; 0x02
    30f6:	81 30       	cpi	r24, 0x01	; 1
    30f8:	49 f4       	brne	.+18     	; 0x310c <check_sensor+0x4e>
		{
			if(!(gpio_read_pin(SENSOR_F_L_PIN)))
    30fa:	88 e0       	ldi	r24, 0x08	; 8
    30fc:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <gpio_read_pin>
    3100:	88 23       	and	r24, r24
    3102:	11 f4       	brne	.+4      	; 0x3108 <check_sensor+0x4a>
			{
				return DETECTED;
    3104:	81 e0       	ldi	r24, 0x01	; 1
    3106:	3b c0       	rjmp	.+118    	; 0x317e <check_sensor+0xc0>
			}
			return NOT_DETECTED;
    3108:	80 e0       	ldi	r24, 0x00	; 0
    310a:	39 c0       	rjmp	.+114    	; 0x317e <check_sensor+0xc0>
		}
		else if(sensor_side == RIGHT)
    310c:	8a 81       	ldd	r24, Y+2	; 0x02
    310e:	88 23       	and	r24, r24
    3110:	a9 f5       	brne	.+106    	; 0x317c <check_sensor+0xbe>
		{
			if(!(gpio_read_pin(SENSOR_F_R_PIN)))
    3112:	8a e0       	ldi	r24, 0x0A	; 10
    3114:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <gpio_read_pin>
    3118:	88 23       	and	r24, r24
    311a:	11 f4       	brne	.+4      	; 0x3120 <check_sensor+0x62>
			{
				return DETECTED;
    311c:	81 e0       	ldi	r24, 0x01	; 1
    311e:	2f c0       	rjmp	.+94     	; 0x317e <check_sensor+0xc0>
			}
			return NOT_DETECTED;
    3120:	80 e0       	ldi	r24, 0x00	; 0
    3122:	2d c0       	rjmp	.+90     	; 0x317e <check_sensor+0xc0>
		}
	}
	else if(robot_side == ROBOT_SIDE_BACK)
    3124:	89 81       	ldd	r24, Y+1	; 0x01
    3126:	82 30       	cpi	r24, 0x02	; 2
    3128:	49 f5       	brne	.+82     	; 0x317c <check_sensor+0xbe>
	{
		if(sensor_side == ALL)
    312a:	8a 81       	ldd	r24, Y+2	; 0x02
    312c:	81 30       	cpi	r24, 0x01	; 1
    312e:	71 f4       	brne	.+28     	; 0x314c <check_sensor+0x8e>
		{
			// check if ! or normal
			if(!(gpio_read_pin(SENSOR_B_L_PIN)) || !(gpio_read_pin(SENSOR_B_R_PIN)))
    3130:	8c e0       	ldi	r24, 0x0C	; 12
    3132:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <gpio_read_pin>
    3136:	88 23       	and	r24, r24
    3138:	29 f0       	breq	.+10     	; 0x3144 <check_sensor+0x86>
    313a:	8e e0       	ldi	r24, 0x0E	; 14
    313c:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <gpio_read_pin>
    3140:	88 23       	and	r24, r24
    3142:	11 f4       	brne	.+4      	; 0x3148 <check_sensor+0x8a>
			{
				return DETECTED;
    3144:	81 e0       	ldi	r24, 0x01	; 1
    3146:	1b c0       	rjmp	.+54     	; 0x317e <check_sensor+0xc0>
			}
			return NOT_DETECTED;
    3148:	80 e0       	ldi	r24, 0x00	; 0
    314a:	19 c0       	rjmp	.+50     	; 0x317e <check_sensor+0xc0>
		}
		else if(sensor_side == LEFT)
    314c:	8a 81       	ldd	r24, Y+2	; 0x02
    314e:	81 30       	cpi	r24, 0x01	; 1
    3150:	49 f4       	brne	.+18     	; 0x3164 <check_sensor+0xa6>
		{
			if(!(gpio_read_pin(SENSOR_B_L_PIN)))
    3152:	8c e0       	ldi	r24, 0x0C	; 12
    3154:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <gpio_read_pin>
    3158:	88 23       	and	r24, r24
    315a:	11 f4       	brne	.+4      	; 0x3160 <check_sensor+0xa2>
			{
				return DETECTED;
    315c:	81 e0       	ldi	r24, 0x01	; 1
    315e:	0f c0       	rjmp	.+30     	; 0x317e <check_sensor+0xc0>
			}
			return NOT_DETECTED;
    3160:	80 e0       	ldi	r24, 0x00	; 0
    3162:	0d c0       	rjmp	.+26     	; 0x317e <check_sensor+0xc0>
		}
		else if(sensor_side == RIGHT)
    3164:	8a 81       	ldd	r24, Y+2	; 0x02
    3166:	88 23       	and	r24, r24
    3168:	49 f4       	brne	.+18     	; 0x317c <check_sensor+0xbe>
		{
			if(!(gpio_read_pin(SENSOR_B_R_PIN)))
    316a:	8e e0       	ldi	r24, 0x0E	; 14
    316c:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <gpio_read_pin>
    3170:	88 23       	and	r24, r24
    3172:	11 f4       	brne	.+4      	; 0x3178 <check_sensor+0xba>
			{
				return DETECTED;
    3174:	81 e0       	ldi	r24, 0x01	; 1
    3176:	03 c0       	rjmp	.+6      	; 0x317e <check_sensor+0xc0>
			}
			return NOT_DETECTED;
    3178:	80 e0       	ldi	r24, 0x00	; 0
    317a:	01 c0       	rjmp	.+2      	; 0x317e <check_sensor+0xc0>
		}
	}
	return NOT_DETECTED;
    317c:	80 e0       	ldi	r24, 0x00	; 0
}
    317e:	0f 90       	pop	r0
    3180:	0f 90       	pop	r0
    3182:	df 91       	pop	r29
    3184:	cf 91       	pop	r28
    3186:	08 95       	ret

00003188 <UART0_Init>:
* Parameters        : unsigned int baud
					  char isrOnOff
* Return Value      : void
*********************************************************************************/
void UART0_Init(unsigned long baud, char isrOnOff)
{
    3188:	cf 93       	push	r28
    318a:	df 93       	push	r29
    318c:	cd b7       	in	r28, 0x3d	; 61
    318e:	de b7       	in	r29, 0x3e	; 62
    3190:	27 97       	sbiw	r28, 0x07	; 7
    3192:	0f b6       	in	r0, 0x3f	; 63
    3194:	f8 94       	cli
    3196:	de bf       	out	0x3e, r29	; 62
    3198:	0f be       	out	0x3f, r0	; 63
    319a:	cd bf       	out	0x3d, r28	; 61
    319c:	6b 83       	std	Y+3, r22	; 0x03
    319e:	7c 83       	std	Y+4, r23	; 0x04
    31a0:	8d 83       	std	Y+5, r24	; 0x05
    31a2:	9e 83       	std	Y+6, r25	; 0x06
    31a4:	4f 83       	std	Y+7, r20	; 0x07
	unsigned int temp;

	UCSR0A = 0;
    31a6:	80 ec       	ldi	r24, 0xC0	; 192
    31a8:	90 e0       	ldi	r25, 0x00	; 0
    31aa:	fc 01       	movw	r30, r24
    31ac:	10 82       	st	Z, r1
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
    31ae:	81 ec       	ldi	r24, 0xC1	; 193
    31b0:	90 e0       	ldi	r25, 0x00	; 0
    31b2:	28 e1       	ldi	r18, 0x18	; 24
    31b4:	fc 01       	movw	r30, r24
    31b6:	20 83       	st	Z, r18
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
    31b8:	82 ec       	ldi	r24, 0xC2	; 194
    31ba:	90 e0       	ldi	r25, 0x00	; 0
    31bc:	26 e0       	ldi	r18, 0x06	; 6
    31be:	fc 01       	movw	r30, r24
    31c0:	20 83       	st	Z, r18

	if(isrOnOff == UART_ISR_ON)
    31c2:	8f 81       	ldd	r24, Y+7	; 0x07
    31c4:	81 30       	cpi	r24, 0x01	; 1
    31c6:	91 f4       	brne	.+36     	; 0x31ec <UART0_Init+0x64>
	{
		UCSR0B |= ((1 << RXCIE0) | (1 << TXCIE0));
    31c8:	81 ec       	ldi	r24, 0xC1	; 193
    31ca:	90 e0       	ldi	r25, 0x00	; 0
    31cc:	21 ec       	ldi	r18, 0xC1	; 193
    31ce:	30 e0       	ldi	r19, 0x00	; 0
    31d0:	f9 01       	movw	r30, r18
    31d2:	20 81       	ld	r18, Z
    31d4:	20 6c       	ori	r18, 0xC0	; 192
    31d6:	fc 01       	movw	r30, r24
    31d8:	20 83       	st	Z, r18
		SREG |= 0x80;
    31da:	8f e5       	ldi	r24, 0x5F	; 95
    31dc:	90 e0       	ldi	r25, 0x00	; 0
    31de:	2f e5       	ldi	r18, 0x5F	; 95
    31e0:	30 e0       	ldi	r19, 0x00	; 0
    31e2:	f9 01       	movw	r30, r18
    31e4:	20 81       	ld	r18, Z
    31e6:	20 68       	ori	r18, 0x80	; 128
    31e8:	fc 01       	movw	r30, r24
    31ea:	20 83       	st	Z, r18
	}

	temp = 0.5 + ((double)F_CPU/(baud * 16.0f) - 1);
    31ec:	6b 81       	ldd	r22, Y+3	; 0x03
    31ee:	7c 81       	ldd	r23, Y+4	; 0x04
    31f0:	8d 81       	ldd	r24, Y+5	; 0x05
    31f2:	9e 81       	ldd	r25, Y+6	; 0x06
    31f4:	0e 94 c3 1e 	call	0x3d86	; 0x3d86 <__floatunsisf>
    31f8:	dc 01       	movw	r26, r24
    31fa:	cb 01       	movw	r24, r22
    31fc:	20 e0       	ldi	r18, 0x00	; 0
    31fe:	30 e0       	ldi	r19, 0x00	; 0
    3200:	40 e8       	ldi	r20, 0x80	; 128
    3202:	51 e4       	ldi	r21, 0x41	; 65
    3204:	bc 01       	movw	r22, r24
    3206:	cd 01       	movw	r24, r26
    3208:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__mulsf3>
    320c:	dc 01       	movw	r26, r24
    320e:	cb 01       	movw	r24, r22
    3210:	9c 01       	movw	r18, r24
    3212:	ad 01       	movw	r20, r26
    3214:	60 e8       	ldi	r22, 0x80	; 128
    3216:	76 e9       	ldi	r23, 0x96	; 150
    3218:	88 e1       	ldi	r24, 0x18	; 24
    321a:	9b e4       	ldi	r25, 0x4B	; 75
    321c:	0e 94 1b 1e 	call	0x3c36	; 0x3c36 <__divsf3>
    3220:	dc 01       	movw	r26, r24
    3222:	cb 01       	movw	r24, r22
    3224:	20 e0       	ldi	r18, 0x00	; 0
    3226:	30 e0       	ldi	r19, 0x00	; 0
    3228:	40 e8       	ldi	r20, 0x80	; 128
    322a:	5f e3       	ldi	r21, 0x3F	; 63
    322c:	bc 01       	movw	r22, r24
    322e:	cd 01       	movw	r24, r26
    3230:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <__subsf3>
    3234:	dc 01       	movw	r26, r24
    3236:	cb 01       	movw	r24, r22
    3238:	20 e0       	ldi	r18, 0x00	; 0
    323a:	30 e0       	ldi	r19, 0x00	; 0
    323c:	40 e0       	ldi	r20, 0x00	; 0
    323e:	5f e3       	ldi	r21, 0x3F	; 63
    3240:	bc 01       	movw	r22, r24
    3242:	cd 01       	movw	r24, r26
    3244:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <__addsf3>
    3248:	dc 01       	movw	r26, r24
    324a:	cb 01       	movw	r24, r22
    324c:	bc 01       	movw	r22, r24
    324e:	cd 01       	movw	r24, r26
    3250:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <__fixunssfsi>
    3254:	dc 01       	movw	r26, r24
    3256:	cb 01       	movw	r24, r22
    3258:	9a 83       	std	Y+2, r25	; 0x02
    325a:	89 83       	std	Y+1, r24	; 0x01

	UBRR0H = temp >> 8;
    325c:	85 ec       	ldi	r24, 0xC5	; 197
    325e:	90 e0       	ldi	r25, 0x00	; 0
    3260:	29 81       	ldd	r18, Y+1	; 0x01
    3262:	3a 81       	ldd	r19, Y+2	; 0x02
    3264:	23 2f       	mov	r18, r19
    3266:	33 27       	eor	r19, r19
    3268:	fc 01       	movw	r30, r24
    326a:	20 83       	st	Z, r18
	UBRR0L = temp;
    326c:	84 ec       	ldi	r24, 0xC4	; 196
    326e:	90 e0       	ldi	r25, 0x00	; 0
    3270:	29 81       	ldd	r18, Y+1	; 0x01
    3272:	fc 01       	movw	r30, r24
    3274:	20 83       	st	Z, r18
}
    3276:	27 96       	adiw	r28, 0x07	; 7
    3278:	0f b6       	in	r0, 0x3f	; 63
    327a:	f8 94       	cli
    327c:	de bf       	out	0x3e, r29	; 62
    327e:	0f be       	out	0x3f, r0	; 63
    3280:	cd bf       	out	0x3d, r28	; 61
    3282:	df 91       	pop	r29
    3284:	cf 91       	pop	r28
    3286:	08 95       	ret

00003288 <__vector_23>:
/****************************************************************************************************************************************
Transmit interrupt USART0 modula
****************************************************************************************************************************************/

ISR(USART0_TX_vect)
{
    3288:	1f 92       	push	r1
    328a:	0f 92       	push	r0
    328c:	00 90 5f 00 	lds	r0, 0x005F
    3290:	0f 92       	push	r0
    3292:	11 24       	eor	r1, r1
    3294:	00 90 5b 00 	lds	r0, 0x005B
    3298:	0f 92       	push	r0
    329a:	2f 93       	push	r18
    329c:	3f 93       	push	r19
    329e:	8f 93       	push	r24
    32a0:	9f 93       	push	r25
    32a2:	ef 93       	push	r30
    32a4:	ff 93       	push	r31
    32a6:	cf 93       	push	r28
    32a8:	df 93       	push	r29
    32aa:	cd b7       	in	r28, 0x3d	; 61
    32ac:	de b7       	in	r29, 0x3e	; 62
	if(tx0_counter)
    32ae:	80 91 cb 01 	lds	r24, 0x01CB
    32b2:	88 23       	and	r24, r24
    32b4:	d1 f0       	breq	.+52     	; 0x32ea <__vector_23+0x62>
	{
		tx0_counter--;
    32b6:	80 91 cb 01 	lds	r24, 0x01CB
    32ba:	81 50       	subi	r24, 0x01	; 1
    32bc:	80 93 cb 01 	sts	0x01CB, r24
		UDR0 = tx0_buffer[tx0_rd_index];
    32c0:	86 ec       	ldi	r24, 0xC6	; 198
    32c2:	90 e0       	ldi	r25, 0x00	; 0
    32c4:	20 91 cc 01 	lds	r18, 0x01CC
    32c8:	22 2f       	mov	r18, r18
    32ca:	30 e0       	ldi	r19, 0x00	; 0
    32cc:	26 57       	subi	r18, 0x76	; 118
    32ce:	3e 4f       	sbci	r19, 0xFE	; 254
    32d0:	f9 01       	movw	r30, r18
    32d2:	20 81       	ld	r18, Z
    32d4:	fc 01       	movw	r30, r24
    32d6:	20 83       	st	Z, r18
		if(++tx0_rd_index == TX0_BUFFER_SIZE)
    32d8:	80 91 cc 01 	lds	r24, 0x01CC
    32dc:	8f 5f       	subi	r24, 0xFF	; 255
    32de:	80 93 cc 01 	sts	0x01CC, r24
    32e2:	80 34       	cpi	r24, 0x40	; 64
    32e4:	11 f4       	brne	.+4      	; 0x32ea <__vector_23+0x62>
			tx0_rd_index = 0;
    32e6:	10 92 cc 01 	sts	0x01CC, r1
	}
}
    32ea:	df 91       	pop	r29
    32ec:	cf 91       	pop	r28
    32ee:	ff 91       	pop	r31
    32f0:	ef 91       	pop	r30
    32f2:	9f 91       	pop	r25
    32f4:	8f 91       	pop	r24
    32f6:	3f 91       	pop	r19
    32f8:	2f 91       	pop	r18
    32fa:	0f 90       	pop	r0
    32fc:	00 92 5b 00 	sts	0x005B, r0
    3300:	0f 90       	pop	r0
    3302:	00 92 5f 00 	sts	0x005F, r0
    3306:	0f 90       	pop	r0
    3308:	1f 90       	pop	r1
    330a:	18 95       	reti

0000330c <UART0_Write>:
/****************************************************************************************************************************************
Slanje podataka USART0 modulom
****************************************************************************************************************************************/

void UART0_Write(unsigned char data)
{
    330c:	cf 93       	push	r28
    330e:	df 93       	push	r29
    3310:	1f 92       	push	r1
    3312:	cd b7       	in	r28, 0x3d	; 61
    3314:	de b7       	in	r29, 0x3e	; 62
    3316:	89 83       	std	Y+1, r24	; 0x01
	if( (UCSR0B >> TXCIE0) & 0x01)
    3318:	81 ec       	ldi	r24, 0xC1	; 193
    331a:	90 e0       	ldi	r25, 0x00	; 0
    331c:	fc 01       	movw	r30, r24
    331e:	80 81       	ld	r24, Z
    3320:	82 95       	swap	r24
    3322:	86 95       	lsr	r24
    3324:	86 95       	lsr	r24
    3326:	83 70       	andi	r24, 0x03	; 3
    3328:	88 2f       	mov	r24, r24
    332a:	90 e0       	ldi	r25, 0x00	; 0
    332c:	81 70       	andi	r24, 0x01	; 1
    332e:	99 27       	eor	r25, r25
    3330:	89 2b       	or	r24, r25
    3332:	99 f1       	breq	.+102    	; 0x339a <UART0_Write+0x8e>
	{
		while(tx0_counter == TX0_BUFFER_SIZE);
    3334:	00 00       	nop
    3336:	80 91 cb 01 	lds	r24, 0x01CB
    333a:	80 34       	cpi	r24, 0x40	; 64
    333c:	e1 f3       	breq	.-8      	; 0x3336 <UART0_Write+0x2a>

		cli();
    333e:	f8 94       	cli

		if(tx0_counter || (UCSR0A & 0x20) == 0)
    3340:	80 91 cb 01 	lds	r24, 0x01CB
    3344:	88 23       	and	r24, r24
    3346:	51 f4       	brne	.+20     	; 0x335c <UART0_Write+0x50>
    3348:	80 ec       	ldi	r24, 0xC0	; 192
    334a:	90 e0       	ldi	r25, 0x00	; 0
    334c:	fc 01       	movw	r30, r24
    334e:	80 81       	ld	r24, Z
    3350:	88 2f       	mov	r24, r24
    3352:	90 e0       	ldi	r25, 0x00	; 0
    3354:	80 72       	andi	r24, 0x20	; 32
    3356:	99 27       	eor	r25, r25
    3358:	89 2b       	or	r24, r25
    335a:	c1 f4       	brne	.+48     	; 0x338c <UART0_Write+0x80>
		{
			tx0_buffer[tx0_wr_index] = data;
    335c:	80 91 ca 01 	lds	r24, 0x01CA
    3360:	88 2f       	mov	r24, r24
    3362:	90 e0       	ldi	r25, 0x00	; 0
    3364:	86 57       	subi	r24, 0x76	; 118
    3366:	9e 4f       	sbci	r25, 0xFE	; 254
    3368:	29 81       	ldd	r18, Y+1	; 0x01
    336a:	fc 01       	movw	r30, r24
    336c:	20 83       	st	Z, r18
			if(++tx0_wr_index == TX0_BUFFER_SIZE)
    336e:	80 91 ca 01 	lds	r24, 0x01CA
    3372:	8f 5f       	subi	r24, 0xFF	; 255
    3374:	80 93 ca 01 	sts	0x01CA, r24
    3378:	80 34       	cpi	r24, 0x40	; 64
    337a:	11 f4       	brne	.+4      	; 0x3380 <UART0_Write+0x74>
				tx0_wr_index = 0;
    337c:	10 92 ca 01 	sts	0x01CA, r1

			tx0_counter++;
    3380:	80 91 cb 01 	lds	r24, 0x01CB
    3384:	8f 5f       	subi	r24, 0xFF	; 255
    3386:	80 93 cb 01 	sts	0x01CB, r24
    338a:	05 c0       	rjmp	.+10     	; 0x3396 <UART0_Write+0x8a>
		}
		else
			UDR0 = data;
    338c:	86 ec       	ldi	r24, 0xC6	; 198
    338e:	90 e0       	ldi	r25, 0x00	; 0
    3390:	29 81       	ldd	r18, Y+1	; 0x01
    3392:	fc 01       	movw	r30, r24
    3394:	20 83       	st	Z, r18

		sei();
    3396:	78 94       	sei
    3398:	03 c0       	rjmp	.+6      	; 0x33a0 <UART0_Write+0x94>
	}
	else
		altUart0Write(data);
    339a:	89 81       	ldd	r24, Y+1	; 0x01
    339c:	0e 94 75 1b 	call	0x36ea	; 0x36ea <altUart0Write>
}
    33a0:	0f 90       	pop	r0
    33a2:	df 91       	pop	r29
    33a4:	cf 91       	pop	r28
    33a6:	08 95       	ret

000033a8 <__vector_21>:
/****************************************************************************************************************************************
Receive interrupt USART0 modula
****************************************************************************************************************************************/

ISR(USART0_RX_vect)
{
    33a8:	1f 92       	push	r1
    33aa:	0f 92       	push	r0
    33ac:	00 90 5f 00 	lds	r0, 0x005F
    33b0:	0f 92       	push	r0
    33b2:	11 24       	eor	r1, r1
    33b4:	00 90 5b 00 	lds	r0, 0x005B
    33b8:	0f 92       	push	r0
    33ba:	2f 93       	push	r18
    33bc:	3f 93       	push	r19
    33be:	8f 93       	push	r24
    33c0:	9f 93       	push	r25
    33c2:	ef 93       	push	r30
    33c4:	ff 93       	push	r31
    33c6:	cf 93       	push	r28
    33c8:	df 93       	push	r29
    33ca:	1f 92       	push	r1
    33cc:	cd b7       	in	r28, 0x3d	; 61
    33ce:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSR0A;
    33d0:	80 ec       	ldi	r24, 0xC0	; 192
    33d2:	90 e0       	ldi	r25, 0x00	; 0
    33d4:	fc 01       	movw	r30, r24
    33d6:	80 81       	ld	r24, Z
    33d8:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
    33da:	89 81       	ldd	r24, Y+1	; 0x01
    33dc:	88 2f       	mov	r24, r24
    33de:	90 e0       	ldi	r25, 0x00	; 0
    33e0:	8c 71       	andi	r24, 0x1C	; 28
    33e2:	99 27       	eor	r25, r25
    33e4:	89 2b       	or	r24, r25
    33e6:	d1 f4       	brne	.+52     	; 0x341c <__vector_21+0x74>
	{
		rx0_buffer[rx0_wr_index] = UDR0;
    33e8:	80 91 0d 02 	lds	r24, 0x020D
    33ec:	88 2f       	mov	r24, r24
    33ee:	90 e0       	ldi	r25, 0x00	; 0
    33f0:	26 ec       	ldi	r18, 0xC6	; 198
    33f2:	30 e0       	ldi	r19, 0x00	; 0
    33f4:	f9 01       	movw	r30, r18
    33f6:	20 81       	ld	r18, Z
    33f8:	83 53       	subi	r24, 0x33	; 51
    33fa:	9e 4f       	sbci	r25, 0xFE	; 254
    33fc:	fc 01       	movw	r30, r24
    33fe:	20 83       	st	Z, r18
		if(++rx0_wr_index == RX0_BUFFER_SIZE)
    3400:	80 91 0d 02 	lds	r24, 0x020D
    3404:	8f 5f       	subi	r24, 0xFF	; 255
    3406:	80 93 0d 02 	sts	0x020D, r24
    340a:	80 34       	cpi	r24, 0x40	; 64
    340c:	11 f4       	brne	.+4      	; 0x3412 <__vector_21+0x6a>
			rx0_wr_index = 0;
    340e:	10 92 0d 02 	sts	0x020D, r1

		rx0_counter++;
    3412:	80 91 0e 02 	lds	r24, 0x020E
    3416:	8f 5f       	subi	r24, 0xFF	; 255
    3418:	80 93 0e 02 	sts	0x020E, r24
	}
}
    341c:	0f 90       	pop	r0
    341e:	df 91       	pop	r29
    3420:	cf 91       	pop	r28
    3422:	ff 91       	pop	r31
    3424:	ef 91       	pop	r30
    3426:	9f 91       	pop	r25
    3428:	8f 91       	pop	r24
    342a:	3f 91       	pop	r19
    342c:	2f 91       	pop	r18
    342e:	0f 90       	pop	r0
    3430:	00 92 5b 00 	sts	0x005B, r0
    3434:	0f 90       	pop	r0
    3436:	00 92 5f 00 	sts	0x005F, r0
    343a:	0f 90       	pop	r0
    343c:	1f 90       	pop	r1
    343e:	18 95       	reti

00003440 <UART0_Read>:
/****************************************************************************************************************************************
Primanje podataka USART0 modulom
****************************************************************************************************************************************/

unsigned char UART0_Read(void)
{
    3440:	cf 93       	push	r28
    3442:	df 93       	push	r29
    3444:	1f 92       	push	r1
    3446:	cd b7       	in	r28, 0x3d	; 61
    3448:	de b7       	in	r29, 0x3e	; 62
	unsigned char data;

	if((UCSR0B >> RXCIE0) & 0x01)
    344a:	81 ec       	ldi	r24, 0xC1	; 193
    344c:	90 e0       	ldi	r25, 0x00	; 0
    344e:	fc 01       	movw	r30, r24
    3450:	80 81       	ld	r24, Z
    3452:	88 1f       	adc	r24, r24
    3454:	88 27       	eor	r24, r24
    3456:	88 1f       	adc	r24, r24
    3458:	88 2f       	mov	r24, r24
    345a:	90 e0       	ldi	r25, 0x00	; 0
    345c:	81 70       	andi	r24, 0x01	; 1
    345e:	99 27       	eor	r25, r25
    3460:	89 2b       	or	r24, r25
    3462:	e9 f0       	breq	.+58     	; 0x349e <UART0_Read+0x5e>
	{
		while(rx0_counter == 0);
    3464:	00 00       	nop
    3466:	80 91 0e 02 	lds	r24, 0x020E
    346a:	88 23       	and	r24, r24
    346c:	e1 f3       	breq	.-8      	; 0x3466 <UART0_Read+0x26>

		data = rx0_buffer[rx0_rd_index];
    346e:	80 91 0f 02 	lds	r24, 0x020F
    3472:	88 2f       	mov	r24, r24
    3474:	90 e0       	ldi	r25, 0x00	; 0
    3476:	83 53       	subi	r24, 0x33	; 51
    3478:	9e 4f       	sbci	r25, 0xFE	; 254
    347a:	fc 01       	movw	r30, r24
    347c:	80 81       	ld	r24, Z
    347e:	89 83       	std	Y+1, r24	; 0x01

		if(++rx0_rd_index == RX0_BUFFER_SIZE)
    3480:	80 91 0f 02 	lds	r24, 0x020F
    3484:	8f 5f       	subi	r24, 0xFF	; 255
    3486:	80 93 0f 02 	sts	0x020F, r24
    348a:	80 34       	cpi	r24, 0x40	; 64
    348c:	11 f4       	brne	.+4      	; 0x3492 <UART0_Read+0x52>
			rx0_rd_index = 0;
    348e:	10 92 0f 02 	sts	0x020F, r1

		rx0_counter--;
    3492:	80 91 0e 02 	lds	r24, 0x020E
    3496:	81 50       	subi	r24, 0x01	; 1
    3498:	80 93 0e 02 	sts	0x020E, r24
    349c:	13 c0       	rjmp	.+38     	; 0x34c4 <UART0_Read+0x84>
	}
	else
	{
		while( !((UCSR0A >> RXC0) & 0x01));
    349e:	00 00       	nop
    34a0:	80 ec       	ldi	r24, 0xC0	; 192
    34a2:	90 e0       	ldi	r25, 0x00	; 0
    34a4:	fc 01       	movw	r30, r24
    34a6:	80 81       	ld	r24, Z
    34a8:	88 1f       	adc	r24, r24
    34aa:	88 27       	eor	r24, r24
    34ac:	88 1f       	adc	r24, r24
    34ae:	88 2f       	mov	r24, r24
    34b0:	90 e0       	ldi	r25, 0x00	; 0
    34b2:	81 70       	andi	r24, 0x01	; 1
    34b4:	99 27       	eor	r25, r25
    34b6:	89 2b       	or	r24, r25
    34b8:	99 f3       	breq	.-26     	; 0x34a0 <UART0_Read+0x60>
		data = UDR0;
    34ba:	86 ec       	ldi	r24, 0xC6	; 198
    34bc:	90 e0       	ldi	r25, 0x00	; 0
    34be:	fc 01       	movw	r30, r24
    34c0:	80 81       	ld	r24, Z
    34c2:	89 83       	std	Y+1, r24	; 0x01
	}

	return data;
    34c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    34c6:	0f 90       	pop	r0
    34c8:	df 91       	pop	r29
    34ca:	cf 91       	pop	r28
    34cc:	08 95       	ret

000034ce <initUart1>:
-asinhroni
-1 stop bit
-bez paritet bita
****************************************************************************************************************************************/
void initUart1(unsigned long baud, char isrOnOff)
{
    34ce:	cf 93       	push	r28
    34d0:	df 93       	push	r29
    34d2:	cd b7       	in	r28, 0x3d	; 61
    34d4:	de b7       	in	r29, 0x3e	; 62
    34d6:	27 97       	sbiw	r28, 0x07	; 7
    34d8:	0f b6       	in	r0, 0x3f	; 63
    34da:	f8 94       	cli
    34dc:	de bf       	out	0x3e, r29	; 62
    34de:	0f be       	out	0x3f, r0	; 63
    34e0:	cd bf       	out	0x3d, r28	; 61
    34e2:	6b 83       	std	Y+3, r22	; 0x03
    34e4:	7c 83       	std	Y+4, r23	; 0x04
    34e6:	8d 83       	std	Y+5, r24	; 0x05
    34e8:	9e 83       	std	Y+6, r25	; 0x06
    34ea:	4f 83       	std	Y+7, r20	; 0x07
	unsigned int temp;

	UCSR1A = 0;
    34ec:	88 ec       	ldi	r24, 0xC8	; 200
    34ee:	90 e0       	ldi	r25, 0x00	; 0
    34f0:	fc 01       	movw	r30, r24
    34f2:	10 82       	st	Z, r1
	UCSR1B = (1 << RXEN1) | (1 << TXEN1);
    34f4:	89 ec       	ldi	r24, 0xC9	; 201
    34f6:	90 e0       	ldi	r25, 0x00	; 0
    34f8:	28 e1       	ldi	r18, 0x18	; 24
    34fa:	fc 01       	movw	r30, r24
    34fc:	20 83       	st	Z, r18
	UCSR1C = (1 << UCSZ11) | (1 << UCSZ10);
    34fe:	8a ec       	ldi	r24, 0xCA	; 202
    3500:	90 e0       	ldi	r25, 0x00	; 0
    3502:	26 e0       	ldi	r18, 0x06	; 6
    3504:	fc 01       	movw	r30, r24
    3506:	20 83       	st	Z, r18

	if(isrOnOff == UART_ISR_ON)
    3508:	8f 81       	ldd	r24, Y+7	; 0x07
    350a:	81 30       	cpi	r24, 0x01	; 1
    350c:	91 f4       	brne	.+36     	; 0x3532 <initUart1+0x64>
	{
		UCSR1B |= ((1 << RXCIE1) | (1 << TXCIE1));
    350e:	89 ec       	ldi	r24, 0xC9	; 201
    3510:	90 e0       	ldi	r25, 0x00	; 0
    3512:	29 ec       	ldi	r18, 0xC9	; 201
    3514:	30 e0       	ldi	r19, 0x00	; 0
    3516:	f9 01       	movw	r30, r18
    3518:	20 81       	ld	r18, Z
    351a:	20 6c       	ori	r18, 0xC0	; 192
    351c:	fc 01       	movw	r30, r24
    351e:	20 83       	st	Z, r18
		SREG |= 0x80;
    3520:	8f e5       	ldi	r24, 0x5F	; 95
    3522:	90 e0       	ldi	r25, 0x00	; 0
    3524:	2f e5       	ldi	r18, 0x5F	; 95
    3526:	30 e0       	ldi	r19, 0x00	; 0
    3528:	f9 01       	movw	r30, r18
    352a:	20 81       	ld	r18, Z
    352c:	20 68       	ori	r18, 0x80	; 128
    352e:	fc 01       	movw	r30, r24
    3530:	20 83       	st	Z, r18
	}

	temp = 0.5 + ((double)F_CPU/(baud * 16.0f) - 1);
    3532:	6b 81       	ldd	r22, Y+3	; 0x03
    3534:	7c 81       	ldd	r23, Y+4	; 0x04
    3536:	8d 81       	ldd	r24, Y+5	; 0x05
    3538:	9e 81       	ldd	r25, Y+6	; 0x06
    353a:	0e 94 c3 1e 	call	0x3d86	; 0x3d86 <__floatunsisf>
    353e:	dc 01       	movw	r26, r24
    3540:	cb 01       	movw	r24, r22
    3542:	20 e0       	ldi	r18, 0x00	; 0
    3544:	30 e0       	ldi	r19, 0x00	; 0
    3546:	40 e8       	ldi	r20, 0x80	; 128
    3548:	51 e4       	ldi	r21, 0x41	; 65
    354a:	bc 01       	movw	r22, r24
    354c:	cd 01       	movw	r24, r26
    354e:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__mulsf3>
    3552:	dc 01       	movw	r26, r24
    3554:	cb 01       	movw	r24, r22
    3556:	9c 01       	movw	r18, r24
    3558:	ad 01       	movw	r20, r26
    355a:	60 e8       	ldi	r22, 0x80	; 128
    355c:	76 e9       	ldi	r23, 0x96	; 150
    355e:	88 e1       	ldi	r24, 0x18	; 24
    3560:	9b e4       	ldi	r25, 0x4B	; 75
    3562:	0e 94 1b 1e 	call	0x3c36	; 0x3c36 <__divsf3>
    3566:	dc 01       	movw	r26, r24
    3568:	cb 01       	movw	r24, r22
    356a:	20 e0       	ldi	r18, 0x00	; 0
    356c:	30 e0       	ldi	r19, 0x00	; 0
    356e:	40 e8       	ldi	r20, 0x80	; 128
    3570:	5f e3       	ldi	r21, 0x3F	; 63
    3572:	bc 01       	movw	r22, r24
    3574:	cd 01       	movw	r24, r26
    3576:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <__subsf3>
    357a:	dc 01       	movw	r26, r24
    357c:	cb 01       	movw	r24, r22
    357e:	20 e0       	ldi	r18, 0x00	; 0
    3580:	30 e0       	ldi	r19, 0x00	; 0
    3582:	40 e0       	ldi	r20, 0x00	; 0
    3584:	5f e3       	ldi	r21, 0x3F	; 63
    3586:	bc 01       	movw	r22, r24
    3588:	cd 01       	movw	r24, r26
    358a:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <__addsf3>
    358e:	dc 01       	movw	r26, r24
    3590:	cb 01       	movw	r24, r22
    3592:	bc 01       	movw	r22, r24
    3594:	cd 01       	movw	r24, r26
    3596:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <__fixunssfsi>
    359a:	dc 01       	movw	r26, r24
    359c:	cb 01       	movw	r24, r22
    359e:	9a 83       	std	Y+2, r25	; 0x02
    35a0:	89 83       	std	Y+1, r24	; 0x01

	UBRR1H = temp >> 8;
    35a2:	8d ec       	ldi	r24, 0xCD	; 205
    35a4:	90 e0       	ldi	r25, 0x00	; 0
    35a6:	29 81       	ldd	r18, Y+1	; 0x01
    35a8:	3a 81       	ldd	r19, Y+2	; 0x02
    35aa:	23 2f       	mov	r18, r19
    35ac:	33 27       	eor	r19, r19
    35ae:	fc 01       	movw	r30, r24
    35b0:	20 83       	st	Z, r18
	UBRR1L = temp;
    35b2:	8c ec       	ldi	r24, 0xCC	; 204
    35b4:	90 e0       	ldi	r25, 0x00	; 0
    35b6:	29 81       	ldd	r18, Y+1	; 0x01
    35b8:	fc 01       	movw	r30, r24
    35ba:	20 83       	st	Z, r18
}
    35bc:	27 96       	adiw	r28, 0x07	; 7
    35be:	0f b6       	in	r0, 0x3f	; 63
    35c0:	f8 94       	cli
    35c2:	de bf       	out	0x3e, r29	; 62
    35c4:	0f be       	out	0x3f, r0	; 63
    35c6:	cd bf       	out	0x3d, r28	; 61
    35c8:	df 91       	pop	r29
    35ca:	cf 91       	pop	r28
    35cc:	08 95       	ret

000035ce <__vector_34>:
/****************************************************************************************************************************************
Transmit interrupt USART1 modula
****************************************************************************************************************************************/
//#error "Linker error- idiotic programming"
ISR(USART1_TX_vect)
{
    35ce:	1f 92       	push	r1
    35d0:	0f 92       	push	r0
    35d2:	00 90 5f 00 	lds	r0, 0x005F
    35d6:	0f 92       	push	r0
    35d8:	11 24       	eor	r1, r1
    35da:	00 90 5b 00 	lds	r0, 0x005B
    35de:	0f 92       	push	r0
    35e0:	2f 93       	push	r18
    35e2:	3f 93       	push	r19
    35e4:	8f 93       	push	r24
    35e6:	9f 93       	push	r25
    35e8:	ef 93       	push	r30
    35ea:	ff 93       	push	r31
    35ec:	cf 93       	push	r28
    35ee:	df 93       	push	r29
    35f0:	cd b7       	in	r28, 0x3d	; 61
    35f2:	de b7       	in	r29, 0x3e	; 62
	if(tx1_counter)
    35f4:	80 91 51 02 	lds	r24, 0x0251
    35f8:	88 23       	and	r24, r24
    35fa:	d1 f0       	breq	.+52     	; 0x3630 <__vector_34+0x62>
	{
		tx1_counter--;
    35fc:	80 91 51 02 	lds	r24, 0x0251
    3600:	81 50       	subi	r24, 0x01	; 1
    3602:	80 93 51 02 	sts	0x0251, r24
		UDR1=tx1_buffer[tx1_rd_index];
    3606:	8e ec       	ldi	r24, 0xCE	; 206
    3608:	90 e0       	ldi	r25, 0x00	; 0
    360a:	20 91 52 02 	lds	r18, 0x0252
    360e:	22 2f       	mov	r18, r18
    3610:	30 e0       	ldi	r19, 0x00	; 0
    3612:	20 5f       	subi	r18, 0xF0	; 240
    3614:	3d 4f       	sbci	r19, 0xFD	; 253
    3616:	f9 01       	movw	r30, r18
    3618:	20 81       	ld	r18, Z
    361a:	fc 01       	movw	r30, r24
    361c:	20 83       	st	Z, r18
		if(++tx1_rd_index == TX1_BUFFER_SIZE)
    361e:	80 91 52 02 	lds	r24, 0x0252
    3622:	8f 5f       	subi	r24, 0xFF	; 255
    3624:	80 93 52 02 	sts	0x0252, r24
    3628:	80 34       	cpi	r24, 0x40	; 64
    362a:	11 f4       	brne	.+4      	; 0x3630 <__vector_34+0x62>
			tx1_rd_index = 0;
    362c:	10 92 52 02 	sts	0x0252, r1
	}
}
    3630:	df 91       	pop	r29
    3632:	cf 91       	pop	r28
    3634:	ff 91       	pop	r31
    3636:	ef 91       	pop	r30
    3638:	9f 91       	pop	r25
    363a:	8f 91       	pop	r24
    363c:	3f 91       	pop	r19
    363e:	2f 91       	pop	r18
    3640:	0f 90       	pop	r0
    3642:	00 92 5b 00 	sts	0x005B, r0
    3646:	0f 90       	pop	r0
    3648:	00 92 5f 00 	sts	0x005F, r0
    364c:	0f 90       	pop	r0
    364e:	1f 90       	pop	r1
    3650:	18 95       	reti

00003652 <__vector_32>:

ISR(USART1_RX_vect)
{
    3652:	1f 92       	push	r1
    3654:	0f 92       	push	r0
    3656:	00 90 5f 00 	lds	r0, 0x005F
    365a:	0f 92       	push	r0
    365c:	11 24       	eor	r1, r1
    365e:	00 90 5b 00 	lds	r0, 0x005B
    3662:	0f 92       	push	r0
    3664:	2f 93       	push	r18
    3666:	3f 93       	push	r19
    3668:	8f 93       	push	r24
    366a:	9f 93       	push	r25
    366c:	ef 93       	push	r30
    366e:	ff 93       	push	r31
    3670:	cf 93       	push	r28
    3672:	df 93       	push	r29
    3674:	1f 92       	push	r1
    3676:	cd b7       	in	r28, 0x3d	; 61
    3678:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSR1A;
    367a:	88 ec       	ldi	r24, 0xC8	; 200
    367c:	90 e0       	ldi	r25, 0x00	; 0
    367e:	fc 01       	movw	r30, r24
    3680:	80 81       	ld	r24, Z
    3682:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
    3684:	89 81       	ldd	r24, Y+1	; 0x01
    3686:	88 2f       	mov	r24, r24
    3688:	90 e0       	ldi	r25, 0x00	; 0
    368a:	8c 71       	andi	r24, 0x1C	; 28
    368c:	99 27       	eor	r25, r25
    368e:	89 2b       	or	r24, r25
    3690:	d1 f4       	brne	.+52     	; 0x36c6 <__vector_32+0x74>
	{
		rx1_buffer[rx1_wr_index] = UDR1;
    3692:	80 91 93 02 	lds	r24, 0x0293
    3696:	88 2f       	mov	r24, r24
    3698:	90 e0       	ldi	r25, 0x00	; 0
    369a:	2e ec       	ldi	r18, 0xCE	; 206
    369c:	30 e0       	ldi	r19, 0x00	; 0
    369e:	f9 01       	movw	r30, r18
    36a0:	20 81       	ld	r18, Z
    36a2:	8d 5a       	subi	r24, 0xAD	; 173
    36a4:	9d 4f       	sbci	r25, 0xFD	; 253
    36a6:	fc 01       	movw	r30, r24
    36a8:	20 83       	st	Z, r18
		if(++rx1_wr_index == RX1_BUFFER_SIZE)
    36aa:	80 91 93 02 	lds	r24, 0x0293
    36ae:	8f 5f       	subi	r24, 0xFF	; 255
    36b0:	80 93 93 02 	sts	0x0293, r24
    36b4:	80 34       	cpi	r24, 0x40	; 64
    36b6:	11 f4       	brne	.+4      	; 0x36bc <__vector_32+0x6a>
		rx1_wr_index = 0;
    36b8:	10 92 93 02 	sts	0x0293, r1

		rx1_counter++;
    36bc:	80 91 94 02 	lds	r24, 0x0294
    36c0:	8f 5f       	subi	r24, 0xFF	; 255
    36c2:	80 93 94 02 	sts	0x0294, r24
	}
}
    36c6:	0f 90       	pop	r0
    36c8:	df 91       	pop	r29
    36ca:	cf 91       	pop	r28
    36cc:	ff 91       	pop	r31
    36ce:	ef 91       	pop	r30
    36d0:	9f 91       	pop	r25
    36d2:	8f 91       	pop	r24
    36d4:	3f 91       	pop	r19
    36d6:	2f 91       	pop	r18
    36d8:	0f 90       	pop	r0
    36da:	00 92 5b 00 	sts	0x005B, r0
    36de:	0f 90       	pop	r0
    36e0:	00 92 5f 00 	sts	0x005F, r0
    36e4:	0f 90       	pop	r0
    36e6:	1f 90       	pop	r1
    36e8:	18 95       	reti

000036ea <altUart0Write>:

void altUart0Write(unsigned char data)
{
    36ea:	cf 93       	push	r28
    36ec:	df 93       	push	r29
    36ee:	1f 92       	push	r1
    36f0:	cd b7       	in	r28, 0x3d	; 61
    36f2:	de b7       	in	r29, 0x3e	; 62
    36f4:	89 83       	std	Y+1, r24	; 0x01
	while( !(UCSR0A & (1 << UDRE0)));
    36f6:	00 00       	nop
    36f8:	80 ec       	ldi	r24, 0xC0	; 192
    36fa:	90 e0       	ldi	r25, 0x00	; 0
    36fc:	fc 01       	movw	r30, r24
    36fe:	80 81       	ld	r24, Z
    3700:	88 2f       	mov	r24, r24
    3702:	90 e0       	ldi	r25, 0x00	; 0
    3704:	80 72       	andi	r24, 0x20	; 32
    3706:	99 27       	eor	r25, r25
    3708:	89 2b       	or	r24, r25
    370a:	b1 f3       	breq	.-20     	; 0x36f8 <altUart0Write+0xe>

	UDR0 = data;
    370c:	86 ec       	ldi	r24, 0xC6	; 198
    370e:	90 e0       	ldi	r25, 0x00	; 0
    3710:	29 81       	ldd	r18, Y+1	; 0x01
    3712:	fc 01       	movw	r30, r24
    3714:	20 83       	st	Z, r18
}
    3716:	0f 90       	pop	r0
    3718:	df 91       	pop	r29
    371a:	cf 91       	pop	r28
    371c:	08 95       	ret

0000371e <altUart1Write>:

void altUart1Write(unsigned char data)
{
    371e:	cf 93       	push	r28
    3720:	df 93       	push	r29
    3722:	1f 92       	push	r1
    3724:	cd b7       	in	r28, 0x3d	; 61
    3726:	de b7       	in	r29, 0x3e	; 62
    3728:	89 83       	std	Y+1, r24	; 0x01
	while ( !( UCSR1A & (1 << UDRE1)) );
    372a:	00 00       	nop
    372c:	88 ec       	ldi	r24, 0xC8	; 200
    372e:	90 e0       	ldi	r25, 0x00	; 0
    3730:	fc 01       	movw	r30, r24
    3732:	80 81       	ld	r24, Z
    3734:	88 2f       	mov	r24, r24
    3736:	90 e0       	ldi	r25, 0x00	; 0
    3738:	80 72       	andi	r24, 0x20	; 32
    373a:	99 27       	eor	r25, r25
    373c:	89 2b       	or	r24, r25
    373e:	b1 f3       	breq	.-20     	; 0x372c <altUart1Write+0xe>
	UDR1 = data;
    3740:	8e ec       	ldi	r24, 0xCE	; 206
    3742:	90 e0       	ldi	r25, 0x00	; 0
    3744:	29 81       	ldd	r18, Y+1	; 0x01
    3746:	fc 01       	movw	r30, r24
    3748:	20 83       	st	Z, r18
}
    374a:	0f 90       	pop	r0
    374c:	df 91       	pop	r29
    374e:	cf 91       	pop	r28
    3750:	08 95       	ret

00003752 <UART1_Write>:
**

**************************************************************************************************************************************/

void UART1_Write(unsigned char data)
{
    3752:	cf 93       	push	r28
    3754:	df 93       	push	r29
    3756:	1f 92       	push	r1
    3758:	cd b7       	in	r28, 0x3d	; 61
    375a:	de b7       	in	r29, 0x3e	; 62
    375c:	89 83       	std	Y+1, r24	; 0x01
	if( (UCSR1B >> TXCIE1) & 0x01)
    375e:	89 ec       	ldi	r24, 0xC9	; 201
    3760:	90 e0       	ldi	r25, 0x00	; 0
    3762:	fc 01       	movw	r30, r24
    3764:	80 81       	ld	r24, Z
    3766:	82 95       	swap	r24
    3768:	86 95       	lsr	r24
    376a:	86 95       	lsr	r24
    376c:	83 70       	andi	r24, 0x03	; 3
    376e:	88 2f       	mov	r24, r24
    3770:	90 e0       	ldi	r25, 0x00	; 0
    3772:	81 70       	andi	r24, 0x01	; 1
    3774:	99 27       	eor	r25, r25
    3776:	89 2b       	or	r24, r25
    3778:	99 f1       	breq	.+102    	; 0x37e0 <UART1_Write+0x8e>
	{
		while(tx1_counter == TX1_BUFFER_SIZE);
    377a:	00 00       	nop
    377c:	80 91 51 02 	lds	r24, 0x0251
    3780:	80 34       	cpi	r24, 0x40	; 64
    3782:	e1 f3       	breq	.-8      	; 0x377c <UART1_Write+0x2a>

		cli();
    3784:	f8 94       	cli

		if(tx1_counter || (UCSR1A & 0x20) == 0)
    3786:	80 91 51 02 	lds	r24, 0x0251
    378a:	88 23       	and	r24, r24
    378c:	51 f4       	brne	.+20     	; 0x37a2 <UART1_Write+0x50>
    378e:	88 ec       	ldi	r24, 0xC8	; 200
    3790:	90 e0       	ldi	r25, 0x00	; 0
    3792:	fc 01       	movw	r30, r24
    3794:	80 81       	ld	r24, Z
    3796:	88 2f       	mov	r24, r24
    3798:	90 e0       	ldi	r25, 0x00	; 0
    379a:	80 72       	andi	r24, 0x20	; 32
    379c:	99 27       	eor	r25, r25
    379e:	89 2b       	or	r24, r25
    37a0:	c1 f4       	brne	.+48     	; 0x37d2 <UART1_Write+0x80>
		{
			tx1_buffer[tx1_wr_index] = data;
    37a2:	80 91 50 02 	lds	r24, 0x0250
    37a6:	88 2f       	mov	r24, r24
    37a8:	90 e0       	ldi	r25, 0x00	; 0
    37aa:	80 5f       	subi	r24, 0xF0	; 240
    37ac:	9d 4f       	sbci	r25, 0xFD	; 253
    37ae:	29 81       	ldd	r18, Y+1	; 0x01
    37b0:	fc 01       	movw	r30, r24
    37b2:	20 83       	st	Z, r18

			if(++tx1_wr_index == TX1_BUFFER_SIZE)
    37b4:	80 91 50 02 	lds	r24, 0x0250
    37b8:	8f 5f       	subi	r24, 0xFF	; 255
    37ba:	80 93 50 02 	sts	0x0250, r24
    37be:	80 34       	cpi	r24, 0x40	; 64
    37c0:	11 f4       	brne	.+4      	; 0x37c6 <UART1_Write+0x74>
				tx1_wr_index = 0;
    37c2:	10 92 50 02 	sts	0x0250, r1

			tx1_counter++;
    37c6:	80 91 51 02 	lds	r24, 0x0251
    37ca:	8f 5f       	subi	r24, 0xFF	; 255
    37cc:	80 93 51 02 	sts	0x0251, r24
    37d0:	05 c0       	rjmp	.+10     	; 0x37dc <UART1_Write+0x8a>
		}
		else
			UDR1 = data;
    37d2:	8e ec       	ldi	r24, 0xCE	; 206
    37d4:	90 e0       	ldi	r25, 0x00	; 0
    37d6:	29 81       	ldd	r18, Y+1	; 0x01
    37d8:	fc 01       	movw	r30, r24
    37da:	20 83       	st	Z, r18

		sei();
    37dc:	78 94       	sei
    37de:	03 c0       	rjmp	.+6      	; 0x37e6 <UART1_Write+0x94>
	}
	else
		altUart1Write(data);
    37e0:	89 81       	ldd	r24, Y+1	; 0x01
    37e2:	0e 94 8f 1b 	call	0x371e	; 0x371e <altUart1Write>
}
    37e6:	0f 90       	pop	r0
    37e8:	df 91       	pop	r29
    37ea:	cf 91       	pop	r28
    37ec:	08 95       	ret

000037ee <UART1_Read>:

unsigned char UART1_Read(void)
{
    37ee:	cf 93       	push	r28
    37f0:	df 93       	push	r29
    37f2:	1f 92       	push	r1
    37f4:	cd b7       	in	r28, 0x3d	; 61
    37f6:	de b7       	in	r29, 0x3e	; 62
	unsigned char data;

	if((UCSR1B >> RXCIE1) & 0x01)
    37f8:	89 ec       	ldi	r24, 0xC9	; 201
    37fa:	90 e0       	ldi	r25, 0x00	; 0
    37fc:	fc 01       	movw	r30, r24
    37fe:	80 81       	ld	r24, Z
    3800:	88 1f       	adc	r24, r24
    3802:	88 27       	eor	r24, r24
    3804:	88 1f       	adc	r24, r24
    3806:	88 2f       	mov	r24, r24
    3808:	90 e0       	ldi	r25, 0x00	; 0
    380a:	81 70       	andi	r24, 0x01	; 1
    380c:	99 27       	eor	r25, r25
    380e:	89 2b       	or	r24, r25
    3810:	e9 f0       	breq	.+58     	; 0x384c <UART1_Read+0x5e>
	{
		while(rx1_counter == 0);
    3812:	00 00       	nop
    3814:	80 91 94 02 	lds	r24, 0x0294
    3818:	88 23       	and	r24, r24
    381a:	e1 f3       	breq	.-8      	; 0x3814 <UART1_Read+0x26>

		data = rx1_buffer[rx1_rd_index];
    381c:	80 91 95 02 	lds	r24, 0x0295
    3820:	88 2f       	mov	r24, r24
    3822:	90 e0       	ldi	r25, 0x00	; 0
    3824:	8d 5a       	subi	r24, 0xAD	; 173
    3826:	9d 4f       	sbci	r25, 0xFD	; 253
    3828:	fc 01       	movw	r30, r24
    382a:	80 81       	ld	r24, Z
    382c:	89 83       	std	Y+1, r24	; 0x01

		if(++rx1_rd_index == RX1_BUFFER_SIZE)
    382e:	80 91 95 02 	lds	r24, 0x0295
    3832:	8f 5f       	subi	r24, 0xFF	; 255
    3834:	80 93 95 02 	sts	0x0295, r24
    3838:	80 34       	cpi	r24, 0x40	; 64
    383a:	11 f4       	brne	.+4      	; 0x3840 <UART1_Read+0x52>
			rx1_rd_index = 0;
    383c:	10 92 95 02 	sts	0x0295, r1

		rx1_counter--;
    3840:	80 91 94 02 	lds	r24, 0x0294
    3844:	81 50       	subi	r24, 0x01	; 1
    3846:	80 93 94 02 	sts	0x0294, r24
    384a:	13 c0       	rjmp	.+38     	; 0x3872 <UART1_Read+0x84>
	}
	else
	{
		while( !((UCSR1A >> RXC1) & 0x01));
    384c:	00 00       	nop
    384e:	88 ec       	ldi	r24, 0xC8	; 200
    3850:	90 e0       	ldi	r25, 0x00	; 0
    3852:	fc 01       	movw	r30, r24
    3854:	80 81       	ld	r24, Z
    3856:	88 1f       	adc	r24, r24
    3858:	88 27       	eor	r24, r24
    385a:	88 1f       	adc	r24, r24
    385c:	88 2f       	mov	r24, r24
    385e:	90 e0       	ldi	r25, 0x00	; 0
    3860:	81 70       	andi	r24, 0x01	; 1
    3862:	99 27       	eor	r25, r25
    3864:	89 2b       	or	r24, r25
    3866:	99 f3       	breq	.-26     	; 0x384e <UART1_Read+0x60>
		data = UDR1;
    3868:	8e ec       	ldi	r24, 0xCE	; 206
    386a:	90 e0       	ldi	r25, 0x00	; 0
    386c:	fc 01       	movw	r30, r24
    386e:	80 81       	ld	r24, Z
    3870:	89 83       	std	Y+1, r24	; 0x01
	}

	return data;
    3872:	89 81       	ldd	r24, Y+1	; 0x01
}
    3874:	0f 90       	pop	r0
    3876:	df 91       	pop	r29
    3878:	cf 91       	pop	r28
    387a:	08 95       	ret

0000387c <yellowside>:
	{{100,0},LOW_SPEED,FORWARD,NULL}
};


void yellowside(void)
{
    387c:	cf 93       	push	r28
    387e:	df 93       	push	r29
    3880:	cd b7       	in	r28, 0x3d	; 61
    3882:	de b7       	in	r29, 0x3e	; 62
    3884:	2b 97       	sbiw	r28, 0x0b	; 11
    3886:	0f b6       	in	r0, 0x3f	; 63
    3888:	f8 94       	cli
    388a:	de bf       	out	0x3e, r29	; 62
    388c:	0f be       	out	0x3f, r0	; 63
    388e:	cd bf       	out	0x3d, r28	; 61
	struct odometry_position starting_position;
	uint8_t current_position 	= 0;
    3890:	19 82       	std	Y+1, r1	; 0x01
	uint8_t next_position 		= 0;
    3892:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t odometry_status;
	int8_t active_state 		= ROBOT_STATE_TACTIC_SIDE;
    3894:	81 e0       	ldi	r24, 0x01	; 1
    3896:	8b 83       	std	Y+3, r24	; 0x03
	// |
	// |	x
	// |----->
	//////////

	starting_position.x			= 282; // mm
    3898:	8a e1       	ldi	r24, 0x1A	; 26
    389a:	91 e0       	ldi	r25, 0x01	; 1
    389c:	9e 83       	std	Y+6, r25	; 0x06
    389e:	8d 83       	std	Y+5, r24	; 0x05
	starting_position.y			= 896; // mm
    38a0:	80 e8       	ldi	r24, 0x80	; 128
    38a2:	93 e0       	ldi	r25, 0x03	; 3
    38a4:	98 87       	std	Y+8, r25	; 0x08
    38a6:	8f 83       	std	Y+7, r24	; 0x07
	starting_position.angle 	= -75;
    38a8:	85 eb       	ldi	r24, 0xB5	; 181
    38aa:	9f ef       	ldi	r25, 0xFF	; 255
    38ac:	9a 87       	std	Y+10, r25	; 0x0a
    38ae:	89 87       	std	Y+9, r24	; 0x09

	odometry_set_position(&starting_position);
    38b0:	ce 01       	movw	r24, r28
    38b2:	05 96       	adiw	r24, 0x05	; 5
    38b4:	0e 94 61 13 	call	0x26c2	; 0x26c2 <odometry_set_position>

	while(1)
	{
		switch(active_state)
    38b8:	8b 81       	ldd	r24, Y+3	; 0x03
    38ba:	08 2e       	mov	r0, r24
    38bc:	00 0c       	add	r0, r0
    38be:	99 0b       	sbc	r25, r25
    38c0:	81 30       	cpi	r24, 0x01	; 1
    38c2:	91 05       	cpc	r25, r1
    38c4:	21 f0       	breq	.+8      	; 0x38ce <yellowside+0x52>
    38c6:	02 97       	sbiw	r24, 0x02	; 2
    38c8:	09 f4       	brne	.+2      	; 0x38cc <yellowside+0x50>
    38ca:	3f c0       	rjmp	.+126    	; 0x394a <yellowside+0xce>
    38cc:	7c c0       	rjmp	.+248    	; 0x39c6 <yellowside+0x14a>
		{
			case ROBOT_STATE_TACTIC_SIDE:
				for(current_position = next_position;current_position < TACTIC_SIDE_POSITION_COUNT; current_position++)
    38ce:	8a 81       	ldd	r24, Y+2	; 0x02
    38d0:	89 83       	std	Y+1, r24	; 0x01
    38d2:	38 c0       	rjmp	.+112    	; 0x3944 <yellowside+0xc8>
				{
					odometry_status = odometry_move_to_position(&(yellow_tactic_side_positions[current_position].point), yellow_tactic_side_positions[current_position].speed,
    38d4:	40 e0       	ldi	r20, 0x00	; 0
    38d6:	50 e0       	ldi	r21, 0x00	; 0
    38d8:	89 81       	ldd	r24, Y+1	; 0x01
    38da:	28 2f       	mov	r18, r24
    38dc:	30 e0       	ldi	r19, 0x00	; 0
    38de:	6b e0       	ldi	r22, 0x0B	; 11
    38e0:	62 9f       	mul	r22, r18
    38e2:	c0 01       	movw	r24, r0
    38e4:	63 9f       	mul	r22, r19
    38e6:	90 0d       	add	r25, r0
    38e8:	11 24       	eor	r1, r1
    38ea:	81 5d       	subi	r24, 0xD1	; 209
    38ec:	9e 4f       	sbci	r25, 0xFE	; 254
    38ee:	dc 01       	movw	r26, r24
    38f0:	ec 91       	ld	r30, X
    38f2:	89 81       	ldd	r24, Y+1	; 0x01
    38f4:	28 2f       	mov	r18, r24
    38f6:	30 e0       	ldi	r19, 0x00	; 0
    38f8:	6b e0       	ldi	r22, 0x0B	; 11
    38fa:	62 9f       	mul	r22, r18
    38fc:	c0 01       	movw	r24, r0
    38fe:	63 9f       	mul	r22, r19
    3900:	90 0d       	add	r25, r0
    3902:	11 24       	eor	r1, r1
    3904:	82 5d       	subi	r24, 0xD2	; 210
    3906:	9e 4f       	sbci	r25, 0xFE	; 254
    3908:	dc 01       	movw	r26, r24
    390a:	7c 91       	ld	r23, X
    390c:	89 81       	ldd	r24, Y+1	; 0x01
    390e:	28 2f       	mov	r18, r24
    3910:	30 e0       	ldi	r19, 0x00	; 0
    3912:	6b e0       	ldi	r22, 0x0B	; 11
    3914:	62 9f       	mul	r22, r18
    3916:	c0 01       	movw	r24, r0
    3918:	63 9f       	mul	r22, r19
    391a:	90 0d       	add	r25, r0
    391c:	11 24       	eor	r1, r1
    391e:	89 5d       	subi	r24, 0xD9	; 217
    3920:	9e 4f       	sbci	r25, 0xFE	; 254
    3922:	9a 01       	movw	r18, r20
    3924:	4e 2f       	mov	r20, r30
    3926:	67 2f       	mov	r22, r23
    3928:	0e 94 a3 12 	call	0x2546	; 0x2546 <odometry_move_to_position>
    392c:	8c 83       	std	Y+4, r24	; 0x04
					yellow_tactic_side_positions[current_position].direction,yellow_tactic_side_positions[current_position].callback);

					if(odometry_status == ODOMETRY_FAIL)
    392e:	8c 81       	ldd	r24, Y+4	; 0x04
    3930:	81 30       	cpi	r24, 0x01	; 1
    3932:	09 f4       	brne	.+2      	; 0x3936 <yellowside+0xba>
					{
						break;
    3934:	0a c0       	rjmp	.+20     	; 0x394a <yellowside+0xce>
					}
					if(current_position == TACTIC_SIDE_POSITION_COUNT - 1){		// when at the last position
    3936:	89 81       	ldd	r24, Y+1	; 0x01
    3938:	88 23       	and	r24, r24
    393a:	09 f4       	brne	.+2      	; 0x393e <yellowside+0xc2>
						while(1);
    393c:	ff cf       	rjmp	.-2      	; 0x393c <yellowside+0xc0>
	while(1)
	{
		switch(active_state)
		{
			case ROBOT_STATE_TACTIC_SIDE:
				for(current_position = next_position;current_position < TACTIC_SIDE_POSITION_COUNT; current_position++)
    393e:	89 81       	ldd	r24, Y+1	; 0x01
    3940:	8f 5f       	subi	r24, 0xFF	; 255
    3942:	89 83       	std	Y+1, r24	; 0x01
    3944:	89 81       	ldd	r24, Y+1	; 0x01
    3946:	88 23       	and	r24, r24
    3948:	29 f2       	breq	.-118    	; 0x38d4 <yellowside+0x58>
						while(1);
					}
				}//end for
				/* no break */
			case ROBOT_STATE_TACTIC_CENTER:
				for(current_position = next_position;current_position < TACTIC_CENTER_POSITION_COUNT; current_position++)
    394a:	8a 81       	ldd	r24, Y+2	; 0x02
    394c:	89 83       	std	Y+1, r24	; 0x01
    394e:	38 c0       	rjmp	.+112    	; 0x39c0 <yellowside+0x144>
				{
					odometry_status = odometry_move_to_position(&(yellow_tactic_center_positions[current_position].point), yellow_tactic_center_positions[current_position].speed,
    3950:	40 e0       	ldi	r20, 0x00	; 0
    3952:	50 e0       	ldi	r21, 0x00	; 0
    3954:	89 81       	ldd	r24, Y+1	; 0x01
    3956:	28 2f       	mov	r18, r24
    3958:	30 e0       	ldi	r19, 0x00	; 0
    395a:	6b e0       	ldi	r22, 0x0B	; 11
    395c:	62 9f       	mul	r22, r18
    395e:	c0 01       	movw	r24, r0
    3960:	63 9f       	mul	r22, r19
    3962:	90 0d       	add	r25, r0
    3964:	11 24       	eor	r1, r1
    3966:	86 5c       	subi	r24, 0xC6	; 198
    3968:	9e 4f       	sbci	r25, 0xFE	; 254
    396a:	dc 01       	movw	r26, r24
    396c:	ec 91       	ld	r30, X
    396e:	89 81       	ldd	r24, Y+1	; 0x01
    3970:	28 2f       	mov	r18, r24
    3972:	30 e0       	ldi	r19, 0x00	; 0
    3974:	6b e0       	ldi	r22, 0x0B	; 11
    3976:	62 9f       	mul	r22, r18
    3978:	c0 01       	movw	r24, r0
    397a:	63 9f       	mul	r22, r19
    397c:	90 0d       	add	r25, r0
    397e:	11 24       	eor	r1, r1
    3980:	87 5c       	subi	r24, 0xC7	; 199
    3982:	9e 4f       	sbci	r25, 0xFE	; 254
    3984:	dc 01       	movw	r26, r24
    3986:	7c 91       	ld	r23, X
    3988:	89 81       	ldd	r24, Y+1	; 0x01
    398a:	28 2f       	mov	r18, r24
    398c:	30 e0       	ldi	r19, 0x00	; 0
    398e:	6b e0       	ldi	r22, 0x0B	; 11
    3990:	62 9f       	mul	r22, r18
    3992:	c0 01       	movw	r24, r0
    3994:	63 9f       	mul	r22, r19
    3996:	90 0d       	add	r25, r0
    3998:	11 24       	eor	r1, r1
    399a:	8e 5c       	subi	r24, 0xCE	; 206
    399c:	9e 4f       	sbci	r25, 0xFE	; 254
    399e:	9a 01       	movw	r18, r20
    39a0:	4e 2f       	mov	r20, r30
    39a2:	67 2f       	mov	r22, r23
    39a4:	0e 94 a3 12 	call	0x2546	; 0x2546 <odometry_move_to_position>
    39a8:	8c 83       	std	Y+4, r24	; 0x04
					yellow_tactic_center_positions[current_position].direction,yellow_tactic_center_positions[current_position].callback);

					if(odometry_status == ODOMETRY_FAIL)
    39aa:	8c 81       	ldd	r24, Y+4	; 0x04
    39ac:	81 30       	cpi	r24, 0x01	; 1
    39ae:	09 f4       	brne	.+2      	; 0x39b2 <yellowside+0x136>
					{
						break;
    39b0:	0a c0       	rjmp	.+20     	; 0x39c6 <yellowside+0x14a>
					}
					if(current_position == TACTIC_CENTER_POSITION_COUNT - 1){	// when at the last position
    39b2:	89 81       	ldd	r24, Y+1	; 0x01
    39b4:	88 23       	and	r24, r24
    39b6:	09 f4       	brne	.+2      	; 0x39ba <yellowside+0x13e>
						while(1);
    39b8:	ff cf       	rjmp	.-2      	; 0x39b8 <yellowside+0x13c>
						while(1);
					}
				}//end for
				/* no break */
			case ROBOT_STATE_TACTIC_CENTER:
				for(current_position = next_position;current_position < TACTIC_CENTER_POSITION_COUNT; current_position++)
    39ba:	89 81       	ldd	r24, Y+1	; 0x01
    39bc:	8f 5f       	subi	r24, 0xFF	; 255
    39be:	89 83       	std	Y+1, r24	; 0x01
    39c0:	89 81       	ldd	r24, Y+1	; 0x01
    39c2:	88 23       	and	r24, r24
    39c4:	29 f2       	breq	.-118    	; 0x3950 <yellowside+0xd4>
					if(current_position == TACTIC_CENTER_POSITION_COUNT - 1){	// when at the last position
						while(1);
					}
				}//end for
		}//end switch
	}//end while
    39c6:	78 cf       	rjmp	.-272    	; 0x38b8 <yellowside+0x3c>

000039c8 <main>:
					||-----w||
					||      ||

*/
int main()
{
    39c8:	cf 93       	push	r28
    39ca:	df 93       	push	r29
    39cc:	cd b7       	in	r28, 0x3d	; 61
    39ce:	de b7       	in	r29, 0x3e	; 62
    39d0:	2e 97       	sbiw	r28, 0x0e	; 14
    39d2:	0f b6       	in	r0, 0x3f	; 63
    39d4:	f8 94       	cli
    39d6:	de bf       	out	0x3e, r29	; 62
    39d8:	0f be       	out	0x3f, r0	; 63
    39da:	cd bf       	out	0x3d, r28	; 61

	system_init();
    39dc:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <system_init>
    39e0:	80 e0       	ldi	r24, 0x00	; 0
    39e2:	90 e0       	ldi	r25, 0x00	; 0
    39e4:	a8 ec       	ldi	r26, 0xC8	; 200
    39e6:	b2 e4       	ldi	r27, 0x42	; 66
    39e8:	89 83       	std	Y+1, r24	; 0x01
    39ea:	9a 83       	std	Y+2, r25	; 0x02
    39ec:	ab 83       	std	Y+3, r26	; 0x03
    39ee:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    39f0:	20 e0       	ldi	r18, 0x00	; 0
    39f2:	30 e4       	ldi	r19, 0x40	; 64
    39f4:	4c e1       	ldi	r20, 0x1C	; 28
    39f6:	55 e4       	ldi	r21, 0x45	; 69
    39f8:	69 81       	ldd	r22, Y+1	; 0x01
    39fa:	7a 81       	ldd	r23, Y+2	; 0x02
    39fc:	8b 81       	ldd	r24, Y+3	; 0x03
    39fe:	9c 81       	ldd	r25, Y+4	; 0x04
    3a00:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__mulsf3>
    3a04:	dc 01       	movw	r26, r24
    3a06:	cb 01       	movw	r24, r22
    3a08:	8d 83       	std	Y+5, r24	; 0x05
    3a0a:	9e 83       	std	Y+6, r25	; 0x06
    3a0c:	af 83       	std	Y+7, r26	; 0x07
    3a0e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    3a10:	20 e0       	ldi	r18, 0x00	; 0
    3a12:	30 e0       	ldi	r19, 0x00	; 0
    3a14:	40 e8       	ldi	r20, 0x80	; 128
    3a16:	5f e3       	ldi	r21, 0x3F	; 63
    3a18:	6d 81       	ldd	r22, Y+5	; 0x05
    3a1a:	7e 81       	ldd	r23, Y+6	; 0x06
    3a1c:	8f 81       	ldd	r24, Y+7	; 0x07
    3a1e:	98 85       	ldd	r25, Y+8	; 0x08
    3a20:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <__cmpsf2>
    3a24:	88 23       	and	r24, r24
    3a26:	2c f4       	brge	.+10     	; 0x3a32 <main+0x6a>
		__ticks = 1;
    3a28:	81 e0       	ldi	r24, 0x01	; 1
    3a2a:	90 e0       	ldi	r25, 0x00	; 0
    3a2c:	9a 87       	std	Y+10, r25	; 0x0a
    3a2e:	89 87       	std	Y+9, r24	; 0x09
    3a30:	3f c0       	rjmp	.+126    	; 0x3ab0 <main+0xe8>
	else if (__tmp > 65535)
    3a32:	20 e0       	ldi	r18, 0x00	; 0
    3a34:	3f ef       	ldi	r19, 0xFF	; 255
    3a36:	4f e7       	ldi	r20, 0x7F	; 127
    3a38:	57 e4       	ldi	r21, 0x47	; 71
    3a3a:	6d 81       	ldd	r22, Y+5	; 0x05
    3a3c:	7e 81       	ldd	r23, Y+6	; 0x06
    3a3e:	8f 81       	ldd	r24, Y+7	; 0x07
    3a40:	98 85       	ldd	r25, Y+8	; 0x08
    3a42:	0e 94 75 1f 	call	0x3eea	; 0x3eea <__gesf2>
    3a46:	18 16       	cp	r1, r24
    3a48:	4c f5       	brge	.+82     	; 0x3a9c <main+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a4a:	20 e0       	ldi	r18, 0x00	; 0
    3a4c:	30 e0       	ldi	r19, 0x00	; 0
    3a4e:	40 e2       	ldi	r20, 0x20	; 32
    3a50:	51 e4       	ldi	r21, 0x41	; 65
    3a52:	69 81       	ldd	r22, Y+1	; 0x01
    3a54:	7a 81       	ldd	r23, Y+2	; 0x02
    3a56:	8b 81       	ldd	r24, Y+3	; 0x03
    3a58:	9c 81       	ldd	r25, Y+4	; 0x04
    3a5a:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__mulsf3>
    3a5e:	dc 01       	movw	r26, r24
    3a60:	cb 01       	movw	r24, r22
    3a62:	bc 01       	movw	r22, r24
    3a64:	cd 01       	movw	r24, r26
    3a66:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <__fixunssfsi>
    3a6a:	dc 01       	movw	r26, r24
    3a6c:	cb 01       	movw	r24, r22
    3a6e:	9a 87       	std	Y+10, r25	; 0x0a
    3a70:	89 87       	std	Y+9, r24	; 0x09
    3a72:	0f c0       	rjmp	.+30     	; 0x3a92 <main+0xca>
    3a74:	8a ef       	ldi	r24, 0xFA	; 250
    3a76:	90 e0       	ldi	r25, 0x00	; 0
    3a78:	9c 87       	std	Y+12, r25	; 0x0c
    3a7a:	8b 87       	std	Y+11, r24	; 0x0b
    3a7c:	8b 85       	ldd	r24, Y+11	; 0x0b
    3a7e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3a80:	01 97       	sbiw	r24, 0x01	; 1
    3a82:	f1 f7       	brne	.-4      	; 0x3a80 <main+0xb8>
    3a84:	9c 87       	std	Y+12, r25	; 0x0c
    3a86:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a88:	89 85       	ldd	r24, Y+9	; 0x09
    3a8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a8c:	01 97       	sbiw	r24, 0x01	; 1
    3a8e:	9a 87       	std	Y+10, r25	; 0x0a
    3a90:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a92:	89 85       	ldd	r24, Y+9	; 0x09
    3a94:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a96:	89 2b       	or	r24, r25
    3a98:	69 f7       	brne	.-38     	; 0x3a74 <main+0xac>
    3a9a:	14 c0       	rjmp	.+40     	; 0x3ac4 <main+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a9c:	6d 81       	ldd	r22, Y+5	; 0x05
    3a9e:	7e 81       	ldd	r23, Y+6	; 0x06
    3aa0:	8f 81       	ldd	r24, Y+7	; 0x07
    3aa2:	98 85       	ldd	r25, Y+8	; 0x08
    3aa4:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <__fixunssfsi>
    3aa8:	dc 01       	movw	r26, r24
    3aaa:	cb 01       	movw	r24, r22
    3aac:	9a 87       	std	Y+10, r25	; 0x0a
    3aae:	89 87       	std	Y+9, r24	; 0x09
    3ab0:	89 85       	ldd	r24, Y+9	; 0x09
    3ab2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ab4:	9e 87       	std	Y+14, r25	; 0x0e
    3ab6:	8d 87       	std	Y+13, r24	; 0x0d
    3ab8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3aba:	9e 85       	ldd	r25, Y+14	; 0x0e
    3abc:	01 97       	sbiw	r24, 0x01	; 1
    3abe:	f1 f7       	brne	.-4      	; 0x3abc <main+0xf4>
    3ac0:	9e 87       	std	Y+14, r25	; 0x0e
    3ac2:	8d 87       	std	Y+13, r24	; 0x0d
    3ac4:	80 e0       	ldi	r24, 0x00	; 0
    3ac6:	90 e0       	ldi	r25, 0x00	; 0
	_delay_ms(100);

	//yellowside();


}
    3ac8:	2e 96       	adiw	r28, 0x0e	; 14
    3aca:	0f b6       	in	r0, 0x3f	; 63
    3acc:	f8 94       	cli
    3ace:	de bf       	out	0x3e, r29	; 62
    3ad0:	0f be       	out	0x3f, r0	; 63
    3ad2:	cd bf       	out	0x3d, r28	; 61
    3ad4:	df 91       	pop	r29
    3ad6:	cf 91       	pop	r28
    3ad8:	08 95       	ret

00003ada <__udivmodsi4>:
    3ada:	a1 e2       	ldi	r26, 0x21	; 33
    3adc:	1a 2e       	mov	r1, r26
    3ade:	aa 1b       	sub	r26, r26
    3ae0:	bb 1b       	sub	r27, r27
    3ae2:	fd 01       	movw	r30, r26
    3ae4:	0d c0       	rjmp	.+26     	; 0x3b00 <__udivmodsi4_ep>

00003ae6 <__udivmodsi4_loop>:
    3ae6:	aa 1f       	adc	r26, r26
    3ae8:	bb 1f       	adc	r27, r27
    3aea:	ee 1f       	adc	r30, r30
    3aec:	ff 1f       	adc	r31, r31
    3aee:	a2 17       	cp	r26, r18
    3af0:	b3 07       	cpc	r27, r19
    3af2:	e4 07       	cpc	r30, r20
    3af4:	f5 07       	cpc	r31, r21
    3af6:	20 f0       	brcs	.+8      	; 0x3b00 <__udivmodsi4_ep>
    3af8:	a2 1b       	sub	r26, r18
    3afa:	b3 0b       	sbc	r27, r19
    3afc:	e4 0b       	sbc	r30, r20
    3afe:	f5 0b       	sbc	r31, r21

00003b00 <__udivmodsi4_ep>:
    3b00:	66 1f       	adc	r22, r22
    3b02:	77 1f       	adc	r23, r23
    3b04:	88 1f       	adc	r24, r24
    3b06:	99 1f       	adc	r25, r25
    3b08:	1a 94       	dec	r1
    3b0a:	69 f7       	brne	.-38     	; 0x3ae6 <__udivmodsi4_loop>
    3b0c:	60 95       	com	r22
    3b0e:	70 95       	com	r23
    3b10:	80 95       	com	r24
    3b12:	90 95       	com	r25
    3b14:	9b 01       	movw	r18, r22
    3b16:	ac 01       	movw	r20, r24
    3b18:	bd 01       	movw	r22, r26
    3b1a:	cf 01       	movw	r24, r30
    3b1c:	08 95       	ret

00003b1e <__muluhisi3>:
    3b1e:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <__umulhisi3>
    3b22:	a5 9f       	mul	r26, r21
    3b24:	90 0d       	add	r25, r0
    3b26:	b4 9f       	mul	r27, r20
    3b28:	90 0d       	add	r25, r0
    3b2a:	a4 9f       	mul	r26, r20
    3b2c:	80 0d       	add	r24, r0
    3b2e:	91 1d       	adc	r25, r1
    3b30:	11 24       	eor	r1, r1
    3b32:	08 95       	ret

00003b34 <__umulhisi3>:
    3b34:	a2 9f       	mul	r26, r18
    3b36:	b0 01       	movw	r22, r0
    3b38:	b3 9f       	mul	r27, r19
    3b3a:	c0 01       	movw	r24, r0
    3b3c:	a3 9f       	mul	r26, r19
    3b3e:	70 0d       	add	r23, r0
    3b40:	81 1d       	adc	r24, r1
    3b42:	11 24       	eor	r1, r1
    3b44:	91 1d       	adc	r25, r1
    3b46:	b2 9f       	mul	r27, r18
    3b48:	70 0d       	add	r23, r0
    3b4a:	81 1d       	adc	r24, r1
    3b4c:	11 24       	eor	r1, r1
    3b4e:	91 1d       	adc	r25, r1
    3b50:	08 95       	ret

00003b52 <__subsf3>:
    3b52:	50 58       	subi	r21, 0x80	; 128

00003b54 <__addsf3>:
    3b54:	bb 27       	eor	r27, r27
    3b56:	aa 27       	eor	r26, r26
    3b58:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <__addsf3x>
    3b5c:	0c 94 3b 1f 	jmp	0x3e76	; 0x3e76 <__fp_round>
    3b60:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <__fp_pscA>
    3b64:	38 f0       	brcs	.+14     	; 0x3b74 <__addsf3+0x20>
    3b66:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <__fp_pscB>
    3b6a:	20 f0       	brcs	.+8      	; 0x3b74 <__addsf3+0x20>
    3b6c:	39 f4       	brne	.+14     	; 0x3b7c <__addsf3+0x28>
    3b6e:	9f 3f       	cpi	r25, 0xFF	; 255
    3b70:	19 f4       	brne	.+6      	; 0x3b78 <__addsf3+0x24>
    3b72:	26 f4       	brtc	.+8      	; 0x3b7c <__addsf3+0x28>
    3b74:	0c 94 2a 1f 	jmp	0x3e54	; 0x3e54 <__fp_nan>
    3b78:	0e f4       	brtc	.+2      	; 0x3b7c <__addsf3+0x28>
    3b7a:	e0 95       	com	r30
    3b7c:	e7 fb       	bst	r30, 7
    3b7e:	0c 94 24 1f 	jmp	0x3e48	; 0x3e48 <__fp_inf>

00003b82 <__addsf3x>:
    3b82:	e9 2f       	mov	r30, r25
    3b84:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <__fp_split3>
    3b88:	58 f3       	brcs	.-42     	; 0x3b60 <__addsf3+0xc>
    3b8a:	ba 17       	cp	r27, r26
    3b8c:	62 07       	cpc	r22, r18
    3b8e:	73 07       	cpc	r23, r19
    3b90:	84 07       	cpc	r24, r20
    3b92:	95 07       	cpc	r25, r21
    3b94:	20 f0       	brcs	.+8      	; 0x3b9e <__addsf3x+0x1c>
    3b96:	79 f4       	brne	.+30     	; 0x3bb6 <__addsf3x+0x34>
    3b98:	a6 f5       	brtc	.+104    	; 0x3c02 <__addsf3x+0x80>
    3b9a:	0c 94 6e 1f 	jmp	0x3edc	; 0x3edc <__fp_zero>
    3b9e:	0e f4       	brtc	.+2      	; 0x3ba2 <__addsf3x+0x20>
    3ba0:	e0 95       	com	r30
    3ba2:	0b 2e       	mov	r0, r27
    3ba4:	ba 2f       	mov	r27, r26
    3ba6:	a0 2d       	mov	r26, r0
    3ba8:	0b 01       	movw	r0, r22
    3baa:	b9 01       	movw	r22, r18
    3bac:	90 01       	movw	r18, r0
    3bae:	0c 01       	movw	r0, r24
    3bb0:	ca 01       	movw	r24, r20
    3bb2:	a0 01       	movw	r20, r0
    3bb4:	11 24       	eor	r1, r1
    3bb6:	ff 27       	eor	r31, r31
    3bb8:	59 1b       	sub	r21, r25
    3bba:	99 f0       	breq	.+38     	; 0x3be2 <__addsf3x+0x60>
    3bbc:	59 3f       	cpi	r21, 0xF9	; 249
    3bbe:	50 f4       	brcc	.+20     	; 0x3bd4 <__addsf3x+0x52>
    3bc0:	50 3e       	cpi	r21, 0xE0	; 224
    3bc2:	68 f1       	brcs	.+90     	; 0x3c1e <__addsf3x+0x9c>
    3bc4:	1a 16       	cp	r1, r26
    3bc6:	f0 40       	sbci	r31, 0x00	; 0
    3bc8:	a2 2f       	mov	r26, r18
    3bca:	23 2f       	mov	r18, r19
    3bcc:	34 2f       	mov	r19, r20
    3bce:	44 27       	eor	r20, r20
    3bd0:	58 5f       	subi	r21, 0xF8	; 248
    3bd2:	f3 cf       	rjmp	.-26     	; 0x3bba <__addsf3x+0x38>
    3bd4:	46 95       	lsr	r20
    3bd6:	37 95       	ror	r19
    3bd8:	27 95       	ror	r18
    3bda:	a7 95       	ror	r26
    3bdc:	f0 40       	sbci	r31, 0x00	; 0
    3bde:	53 95       	inc	r21
    3be0:	c9 f7       	brne	.-14     	; 0x3bd4 <__addsf3x+0x52>
    3be2:	7e f4       	brtc	.+30     	; 0x3c02 <__addsf3x+0x80>
    3be4:	1f 16       	cp	r1, r31
    3be6:	ba 0b       	sbc	r27, r26
    3be8:	62 0b       	sbc	r22, r18
    3bea:	73 0b       	sbc	r23, r19
    3bec:	84 0b       	sbc	r24, r20
    3bee:	ba f0       	brmi	.+46     	; 0x3c1e <__addsf3x+0x9c>
    3bf0:	91 50       	subi	r25, 0x01	; 1
    3bf2:	a1 f0       	breq	.+40     	; 0x3c1c <__addsf3x+0x9a>
    3bf4:	ff 0f       	add	r31, r31
    3bf6:	bb 1f       	adc	r27, r27
    3bf8:	66 1f       	adc	r22, r22
    3bfa:	77 1f       	adc	r23, r23
    3bfc:	88 1f       	adc	r24, r24
    3bfe:	c2 f7       	brpl	.-16     	; 0x3bf0 <__addsf3x+0x6e>
    3c00:	0e c0       	rjmp	.+28     	; 0x3c1e <__addsf3x+0x9c>
    3c02:	ba 0f       	add	r27, r26
    3c04:	62 1f       	adc	r22, r18
    3c06:	73 1f       	adc	r23, r19
    3c08:	84 1f       	adc	r24, r20
    3c0a:	48 f4       	brcc	.+18     	; 0x3c1e <__addsf3x+0x9c>
    3c0c:	87 95       	ror	r24
    3c0e:	77 95       	ror	r23
    3c10:	67 95       	ror	r22
    3c12:	b7 95       	ror	r27
    3c14:	f7 95       	ror	r31
    3c16:	9e 3f       	cpi	r25, 0xFE	; 254
    3c18:	08 f0       	brcs	.+2      	; 0x3c1c <__addsf3x+0x9a>
    3c1a:	b0 cf       	rjmp	.-160    	; 0x3b7c <__addsf3+0x28>
    3c1c:	93 95       	inc	r25
    3c1e:	88 0f       	add	r24, r24
    3c20:	08 f0       	brcs	.+2      	; 0x3c24 <__addsf3x+0xa2>
    3c22:	99 27       	eor	r25, r25
    3c24:	ee 0f       	add	r30, r30
    3c26:	97 95       	ror	r25
    3c28:	87 95       	ror	r24
    3c2a:	08 95       	ret

00003c2c <__cmpsf2>:
    3c2c:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <__fp_cmp>
    3c30:	08 f4       	brcc	.+2      	; 0x3c34 <__cmpsf2+0x8>
    3c32:	81 e0       	ldi	r24, 0x01	; 1
    3c34:	08 95       	ret

00003c36 <__divsf3>:
    3c36:	0e 94 2f 1e 	call	0x3c5e	; 0x3c5e <__divsf3x>
    3c3a:	0c 94 3b 1f 	jmp	0x3e76	; 0x3e76 <__fp_round>
    3c3e:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <__fp_pscB>
    3c42:	58 f0       	brcs	.+22     	; 0x3c5a <__divsf3+0x24>
    3c44:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <__fp_pscA>
    3c48:	40 f0       	brcs	.+16     	; 0x3c5a <__divsf3+0x24>
    3c4a:	29 f4       	brne	.+10     	; 0x3c56 <__divsf3+0x20>
    3c4c:	5f 3f       	cpi	r21, 0xFF	; 255
    3c4e:	29 f0       	breq	.+10     	; 0x3c5a <__divsf3+0x24>
    3c50:	0c 94 24 1f 	jmp	0x3e48	; 0x3e48 <__fp_inf>
    3c54:	51 11       	cpse	r21, r1
    3c56:	0c 94 6f 1f 	jmp	0x3ede	; 0x3ede <__fp_szero>
    3c5a:	0c 94 2a 1f 	jmp	0x3e54	; 0x3e54 <__fp_nan>

00003c5e <__divsf3x>:
    3c5e:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <__fp_split3>
    3c62:	68 f3       	brcs	.-38     	; 0x3c3e <__divsf3+0x8>

00003c64 <__divsf3_pse>:
    3c64:	99 23       	and	r25, r25
    3c66:	b1 f3       	breq	.-20     	; 0x3c54 <__divsf3+0x1e>
    3c68:	55 23       	and	r21, r21
    3c6a:	91 f3       	breq	.-28     	; 0x3c50 <__divsf3+0x1a>
    3c6c:	95 1b       	sub	r25, r21
    3c6e:	55 0b       	sbc	r21, r21
    3c70:	bb 27       	eor	r27, r27
    3c72:	aa 27       	eor	r26, r26
    3c74:	62 17       	cp	r22, r18
    3c76:	73 07       	cpc	r23, r19
    3c78:	84 07       	cpc	r24, r20
    3c7a:	38 f0       	brcs	.+14     	; 0x3c8a <__divsf3_pse+0x26>
    3c7c:	9f 5f       	subi	r25, 0xFF	; 255
    3c7e:	5f 4f       	sbci	r21, 0xFF	; 255
    3c80:	22 0f       	add	r18, r18
    3c82:	33 1f       	adc	r19, r19
    3c84:	44 1f       	adc	r20, r20
    3c86:	aa 1f       	adc	r26, r26
    3c88:	a9 f3       	breq	.-22     	; 0x3c74 <__divsf3_pse+0x10>
    3c8a:	35 d0       	rcall	.+106    	; 0x3cf6 <__divsf3_pse+0x92>
    3c8c:	0e 2e       	mov	r0, r30
    3c8e:	3a f0       	brmi	.+14     	; 0x3c9e <__divsf3_pse+0x3a>
    3c90:	e0 e8       	ldi	r30, 0x80	; 128
    3c92:	32 d0       	rcall	.+100    	; 0x3cf8 <__divsf3_pse+0x94>
    3c94:	91 50       	subi	r25, 0x01	; 1
    3c96:	50 40       	sbci	r21, 0x00	; 0
    3c98:	e6 95       	lsr	r30
    3c9a:	00 1c       	adc	r0, r0
    3c9c:	ca f7       	brpl	.-14     	; 0x3c90 <__divsf3_pse+0x2c>
    3c9e:	2b d0       	rcall	.+86     	; 0x3cf6 <__divsf3_pse+0x92>
    3ca0:	fe 2f       	mov	r31, r30
    3ca2:	29 d0       	rcall	.+82     	; 0x3cf6 <__divsf3_pse+0x92>
    3ca4:	66 0f       	add	r22, r22
    3ca6:	77 1f       	adc	r23, r23
    3ca8:	88 1f       	adc	r24, r24
    3caa:	bb 1f       	adc	r27, r27
    3cac:	26 17       	cp	r18, r22
    3cae:	37 07       	cpc	r19, r23
    3cb0:	48 07       	cpc	r20, r24
    3cb2:	ab 07       	cpc	r26, r27
    3cb4:	b0 e8       	ldi	r27, 0x80	; 128
    3cb6:	09 f0       	breq	.+2      	; 0x3cba <__divsf3_pse+0x56>
    3cb8:	bb 0b       	sbc	r27, r27
    3cba:	80 2d       	mov	r24, r0
    3cbc:	bf 01       	movw	r22, r30
    3cbe:	ff 27       	eor	r31, r31
    3cc0:	93 58       	subi	r25, 0x83	; 131
    3cc2:	5f 4f       	sbci	r21, 0xFF	; 255
    3cc4:	3a f0       	brmi	.+14     	; 0x3cd4 <__divsf3_pse+0x70>
    3cc6:	9e 3f       	cpi	r25, 0xFE	; 254
    3cc8:	51 05       	cpc	r21, r1
    3cca:	78 f0       	brcs	.+30     	; 0x3cea <__divsf3_pse+0x86>
    3ccc:	0c 94 24 1f 	jmp	0x3e48	; 0x3e48 <__fp_inf>
    3cd0:	0c 94 6f 1f 	jmp	0x3ede	; 0x3ede <__fp_szero>
    3cd4:	5f 3f       	cpi	r21, 0xFF	; 255
    3cd6:	e4 f3       	brlt	.-8      	; 0x3cd0 <__divsf3_pse+0x6c>
    3cd8:	98 3e       	cpi	r25, 0xE8	; 232
    3cda:	d4 f3       	brlt	.-12     	; 0x3cd0 <__divsf3_pse+0x6c>
    3cdc:	86 95       	lsr	r24
    3cde:	77 95       	ror	r23
    3ce0:	67 95       	ror	r22
    3ce2:	b7 95       	ror	r27
    3ce4:	f7 95       	ror	r31
    3ce6:	9f 5f       	subi	r25, 0xFF	; 255
    3ce8:	c9 f7       	brne	.-14     	; 0x3cdc <__divsf3_pse+0x78>
    3cea:	88 0f       	add	r24, r24
    3cec:	91 1d       	adc	r25, r1
    3cee:	96 95       	lsr	r25
    3cf0:	87 95       	ror	r24
    3cf2:	97 f9       	bld	r25, 7
    3cf4:	08 95       	ret
    3cf6:	e1 e0       	ldi	r30, 0x01	; 1
    3cf8:	66 0f       	add	r22, r22
    3cfa:	77 1f       	adc	r23, r23
    3cfc:	88 1f       	adc	r24, r24
    3cfe:	bb 1f       	adc	r27, r27
    3d00:	62 17       	cp	r22, r18
    3d02:	73 07       	cpc	r23, r19
    3d04:	84 07       	cpc	r24, r20
    3d06:	ba 07       	cpc	r27, r26
    3d08:	20 f0       	brcs	.+8      	; 0x3d12 <__divsf3_pse+0xae>
    3d0a:	62 1b       	sub	r22, r18
    3d0c:	73 0b       	sbc	r23, r19
    3d0e:	84 0b       	sbc	r24, r20
    3d10:	ba 0b       	sbc	r27, r26
    3d12:	ee 1f       	adc	r30, r30
    3d14:	88 f7       	brcc	.-30     	; 0x3cf8 <__divsf3_pse+0x94>
    3d16:	e0 95       	com	r30
    3d18:	08 95       	ret

00003d1a <__fixsfsi>:
    3d1a:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <__fixunssfsi>
    3d1e:	68 94       	set
    3d20:	b1 11       	cpse	r27, r1
    3d22:	0c 94 6f 1f 	jmp	0x3ede	; 0x3ede <__fp_szero>
    3d26:	08 95       	ret

00003d28 <__fixunssfsi>:
    3d28:	0e 94 54 1f 	call	0x3ea8	; 0x3ea8 <__fp_splitA>
    3d2c:	88 f0       	brcs	.+34     	; 0x3d50 <__fixunssfsi+0x28>
    3d2e:	9f 57       	subi	r25, 0x7F	; 127
    3d30:	98 f0       	brcs	.+38     	; 0x3d58 <__fixunssfsi+0x30>
    3d32:	b9 2f       	mov	r27, r25
    3d34:	99 27       	eor	r25, r25
    3d36:	b7 51       	subi	r27, 0x17	; 23
    3d38:	b0 f0       	brcs	.+44     	; 0x3d66 <__fixunssfsi+0x3e>
    3d3a:	e1 f0       	breq	.+56     	; 0x3d74 <__fixunssfsi+0x4c>
    3d3c:	66 0f       	add	r22, r22
    3d3e:	77 1f       	adc	r23, r23
    3d40:	88 1f       	adc	r24, r24
    3d42:	99 1f       	adc	r25, r25
    3d44:	1a f0       	brmi	.+6      	; 0x3d4c <__fixunssfsi+0x24>
    3d46:	ba 95       	dec	r27
    3d48:	c9 f7       	brne	.-14     	; 0x3d3c <__fixunssfsi+0x14>
    3d4a:	14 c0       	rjmp	.+40     	; 0x3d74 <__fixunssfsi+0x4c>
    3d4c:	b1 30       	cpi	r27, 0x01	; 1
    3d4e:	91 f0       	breq	.+36     	; 0x3d74 <__fixunssfsi+0x4c>
    3d50:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <__fp_zero>
    3d54:	b1 e0       	ldi	r27, 0x01	; 1
    3d56:	08 95       	ret
    3d58:	0c 94 6e 1f 	jmp	0x3edc	; 0x3edc <__fp_zero>
    3d5c:	67 2f       	mov	r22, r23
    3d5e:	78 2f       	mov	r23, r24
    3d60:	88 27       	eor	r24, r24
    3d62:	b8 5f       	subi	r27, 0xF8	; 248
    3d64:	39 f0       	breq	.+14     	; 0x3d74 <__fixunssfsi+0x4c>
    3d66:	b9 3f       	cpi	r27, 0xF9	; 249
    3d68:	cc f3       	brlt	.-14     	; 0x3d5c <__fixunssfsi+0x34>
    3d6a:	86 95       	lsr	r24
    3d6c:	77 95       	ror	r23
    3d6e:	67 95       	ror	r22
    3d70:	b3 95       	inc	r27
    3d72:	d9 f7       	brne	.-10     	; 0x3d6a <__fixunssfsi+0x42>
    3d74:	3e f4       	brtc	.+14     	; 0x3d84 <__fixunssfsi+0x5c>
    3d76:	90 95       	com	r25
    3d78:	80 95       	com	r24
    3d7a:	70 95       	com	r23
    3d7c:	61 95       	neg	r22
    3d7e:	7f 4f       	sbci	r23, 0xFF	; 255
    3d80:	8f 4f       	sbci	r24, 0xFF	; 255
    3d82:	9f 4f       	sbci	r25, 0xFF	; 255
    3d84:	08 95       	ret

00003d86 <__floatunsisf>:
    3d86:	e8 94       	clt
    3d88:	09 c0       	rjmp	.+18     	; 0x3d9c <__floatsisf+0x12>

00003d8a <__floatsisf>:
    3d8a:	97 fb       	bst	r25, 7
    3d8c:	3e f4       	brtc	.+14     	; 0x3d9c <__floatsisf+0x12>
    3d8e:	90 95       	com	r25
    3d90:	80 95       	com	r24
    3d92:	70 95       	com	r23
    3d94:	61 95       	neg	r22
    3d96:	7f 4f       	sbci	r23, 0xFF	; 255
    3d98:	8f 4f       	sbci	r24, 0xFF	; 255
    3d9a:	9f 4f       	sbci	r25, 0xFF	; 255
    3d9c:	99 23       	and	r25, r25
    3d9e:	a9 f0       	breq	.+42     	; 0x3dca <__floatsisf+0x40>
    3da0:	f9 2f       	mov	r31, r25
    3da2:	96 e9       	ldi	r25, 0x96	; 150
    3da4:	bb 27       	eor	r27, r27
    3da6:	93 95       	inc	r25
    3da8:	f6 95       	lsr	r31
    3daa:	87 95       	ror	r24
    3dac:	77 95       	ror	r23
    3dae:	67 95       	ror	r22
    3db0:	b7 95       	ror	r27
    3db2:	f1 11       	cpse	r31, r1
    3db4:	f8 cf       	rjmp	.-16     	; 0x3da6 <__floatsisf+0x1c>
    3db6:	fa f4       	brpl	.+62     	; 0x3df6 <__floatsisf+0x6c>
    3db8:	bb 0f       	add	r27, r27
    3dba:	11 f4       	brne	.+4      	; 0x3dc0 <__floatsisf+0x36>
    3dbc:	60 ff       	sbrs	r22, 0
    3dbe:	1b c0       	rjmp	.+54     	; 0x3df6 <__floatsisf+0x6c>
    3dc0:	6f 5f       	subi	r22, 0xFF	; 255
    3dc2:	7f 4f       	sbci	r23, 0xFF	; 255
    3dc4:	8f 4f       	sbci	r24, 0xFF	; 255
    3dc6:	9f 4f       	sbci	r25, 0xFF	; 255
    3dc8:	16 c0       	rjmp	.+44     	; 0x3df6 <__floatsisf+0x6c>
    3dca:	88 23       	and	r24, r24
    3dcc:	11 f0       	breq	.+4      	; 0x3dd2 <__floatsisf+0x48>
    3dce:	96 e9       	ldi	r25, 0x96	; 150
    3dd0:	11 c0       	rjmp	.+34     	; 0x3df4 <__floatsisf+0x6a>
    3dd2:	77 23       	and	r23, r23
    3dd4:	21 f0       	breq	.+8      	; 0x3dde <__floatsisf+0x54>
    3dd6:	9e e8       	ldi	r25, 0x8E	; 142
    3dd8:	87 2f       	mov	r24, r23
    3dda:	76 2f       	mov	r23, r22
    3ddc:	05 c0       	rjmp	.+10     	; 0x3de8 <__floatsisf+0x5e>
    3dde:	66 23       	and	r22, r22
    3de0:	71 f0       	breq	.+28     	; 0x3dfe <__floatsisf+0x74>
    3de2:	96 e8       	ldi	r25, 0x86	; 134
    3de4:	86 2f       	mov	r24, r22
    3de6:	70 e0       	ldi	r23, 0x00	; 0
    3de8:	60 e0       	ldi	r22, 0x00	; 0
    3dea:	2a f0       	brmi	.+10     	; 0x3df6 <__floatsisf+0x6c>
    3dec:	9a 95       	dec	r25
    3dee:	66 0f       	add	r22, r22
    3df0:	77 1f       	adc	r23, r23
    3df2:	88 1f       	adc	r24, r24
    3df4:	da f7       	brpl	.-10     	; 0x3dec <__floatsisf+0x62>
    3df6:	88 0f       	add	r24, r24
    3df8:	96 95       	lsr	r25
    3dfa:	87 95       	ror	r24
    3dfc:	97 f9       	bld	r25, 7
    3dfe:	08 95       	ret

00003e00 <__fp_cmp>:
    3e00:	99 0f       	add	r25, r25
    3e02:	00 08       	sbc	r0, r0
    3e04:	55 0f       	add	r21, r21
    3e06:	aa 0b       	sbc	r26, r26
    3e08:	e0 e8       	ldi	r30, 0x80	; 128
    3e0a:	fe ef       	ldi	r31, 0xFE	; 254
    3e0c:	16 16       	cp	r1, r22
    3e0e:	17 06       	cpc	r1, r23
    3e10:	e8 07       	cpc	r30, r24
    3e12:	f9 07       	cpc	r31, r25
    3e14:	c0 f0       	brcs	.+48     	; 0x3e46 <__fp_cmp+0x46>
    3e16:	12 16       	cp	r1, r18
    3e18:	13 06       	cpc	r1, r19
    3e1a:	e4 07       	cpc	r30, r20
    3e1c:	f5 07       	cpc	r31, r21
    3e1e:	98 f0       	brcs	.+38     	; 0x3e46 <__fp_cmp+0x46>
    3e20:	62 1b       	sub	r22, r18
    3e22:	73 0b       	sbc	r23, r19
    3e24:	84 0b       	sbc	r24, r20
    3e26:	95 0b       	sbc	r25, r21
    3e28:	39 f4       	brne	.+14     	; 0x3e38 <__fp_cmp+0x38>
    3e2a:	0a 26       	eor	r0, r26
    3e2c:	61 f0       	breq	.+24     	; 0x3e46 <__fp_cmp+0x46>
    3e2e:	23 2b       	or	r18, r19
    3e30:	24 2b       	or	r18, r20
    3e32:	25 2b       	or	r18, r21
    3e34:	21 f4       	brne	.+8      	; 0x3e3e <__fp_cmp+0x3e>
    3e36:	08 95       	ret
    3e38:	0a 26       	eor	r0, r26
    3e3a:	09 f4       	brne	.+2      	; 0x3e3e <__fp_cmp+0x3e>
    3e3c:	a1 40       	sbci	r26, 0x01	; 1
    3e3e:	a6 95       	lsr	r26
    3e40:	8f ef       	ldi	r24, 0xFF	; 255
    3e42:	81 1d       	adc	r24, r1
    3e44:	81 1d       	adc	r24, r1
    3e46:	08 95       	ret

00003e48 <__fp_inf>:
    3e48:	97 f9       	bld	r25, 7
    3e4a:	9f 67       	ori	r25, 0x7F	; 127
    3e4c:	80 e8       	ldi	r24, 0x80	; 128
    3e4e:	70 e0       	ldi	r23, 0x00	; 0
    3e50:	60 e0       	ldi	r22, 0x00	; 0
    3e52:	08 95       	ret

00003e54 <__fp_nan>:
    3e54:	9f ef       	ldi	r25, 0xFF	; 255
    3e56:	80 ec       	ldi	r24, 0xC0	; 192
    3e58:	08 95       	ret

00003e5a <__fp_pscA>:
    3e5a:	00 24       	eor	r0, r0
    3e5c:	0a 94       	dec	r0
    3e5e:	16 16       	cp	r1, r22
    3e60:	17 06       	cpc	r1, r23
    3e62:	18 06       	cpc	r1, r24
    3e64:	09 06       	cpc	r0, r25
    3e66:	08 95       	ret

00003e68 <__fp_pscB>:
    3e68:	00 24       	eor	r0, r0
    3e6a:	0a 94       	dec	r0
    3e6c:	12 16       	cp	r1, r18
    3e6e:	13 06       	cpc	r1, r19
    3e70:	14 06       	cpc	r1, r20
    3e72:	05 06       	cpc	r0, r21
    3e74:	08 95       	ret

00003e76 <__fp_round>:
    3e76:	09 2e       	mov	r0, r25
    3e78:	03 94       	inc	r0
    3e7a:	00 0c       	add	r0, r0
    3e7c:	11 f4       	brne	.+4      	; 0x3e82 <__fp_round+0xc>
    3e7e:	88 23       	and	r24, r24
    3e80:	52 f0       	brmi	.+20     	; 0x3e96 <__fp_round+0x20>
    3e82:	bb 0f       	add	r27, r27
    3e84:	40 f4       	brcc	.+16     	; 0x3e96 <__fp_round+0x20>
    3e86:	bf 2b       	or	r27, r31
    3e88:	11 f4       	brne	.+4      	; 0x3e8e <__fp_round+0x18>
    3e8a:	60 ff       	sbrs	r22, 0
    3e8c:	04 c0       	rjmp	.+8      	; 0x3e96 <__fp_round+0x20>
    3e8e:	6f 5f       	subi	r22, 0xFF	; 255
    3e90:	7f 4f       	sbci	r23, 0xFF	; 255
    3e92:	8f 4f       	sbci	r24, 0xFF	; 255
    3e94:	9f 4f       	sbci	r25, 0xFF	; 255
    3e96:	08 95       	ret

00003e98 <__fp_split3>:
    3e98:	57 fd       	sbrc	r21, 7
    3e9a:	90 58       	subi	r25, 0x80	; 128
    3e9c:	44 0f       	add	r20, r20
    3e9e:	55 1f       	adc	r21, r21
    3ea0:	59 f0       	breq	.+22     	; 0x3eb8 <__fp_splitA+0x10>
    3ea2:	5f 3f       	cpi	r21, 0xFF	; 255
    3ea4:	71 f0       	breq	.+28     	; 0x3ec2 <__fp_splitA+0x1a>
    3ea6:	47 95       	ror	r20

00003ea8 <__fp_splitA>:
    3ea8:	88 0f       	add	r24, r24
    3eaa:	97 fb       	bst	r25, 7
    3eac:	99 1f       	adc	r25, r25
    3eae:	61 f0       	breq	.+24     	; 0x3ec8 <__fp_splitA+0x20>
    3eb0:	9f 3f       	cpi	r25, 0xFF	; 255
    3eb2:	79 f0       	breq	.+30     	; 0x3ed2 <__fp_splitA+0x2a>
    3eb4:	87 95       	ror	r24
    3eb6:	08 95       	ret
    3eb8:	12 16       	cp	r1, r18
    3eba:	13 06       	cpc	r1, r19
    3ebc:	14 06       	cpc	r1, r20
    3ebe:	55 1f       	adc	r21, r21
    3ec0:	f2 cf       	rjmp	.-28     	; 0x3ea6 <__fp_split3+0xe>
    3ec2:	46 95       	lsr	r20
    3ec4:	f1 df       	rcall	.-30     	; 0x3ea8 <__fp_splitA>
    3ec6:	08 c0       	rjmp	.+16     	; 0x3ed8 <__fp_splitA+0x30>
    3ec8:	16 16       	cp	r1, r22
    3eca:	17 06       	cpc	r1, r23
    3ecc:	18 06       	cpc	r1, r24
    3ece:	99 1f       	adc	r25, r25
    3ed0:	f1 cf       	rjmp	.-30     	; 0x3eb4 <__fp_splitA+0xc>
    3ed2:	86 95       	lsr	r24
    3ed4:	71 05       	cpc	r23, r1
    3ed6:	61 05       	cpc	r22, r1
    3ed8:	08 94       	sec
    3eda:	08 95       	ret

00003edc <__fp_zero>:
    3edc:	e8 94       	clt

00003ede <__fp_szero>:
    3ede:	bb 27       	eor	r27, r27
    3ee0:	66 27       	eor	r22, r22
    3ee2:	77 27       	eor	r23, r23
    3ee4:	cb 01       	movw	r24, r22
    3ee6:	97 f9       	bld	r25, 7
    3ee8:	08 95       	ret

00003eea <__gesf2>:
    3eea:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <__fp_cmp>
    3eee:	08 f4       	brcc	.+2      	; 0x3ef2 <__gesf2+0x8>
    3ef0:	8f ef       	ldi	r24, 0xFF	; 255
    3ef2:	08 95       	ret

00003ef4 <__mulsf3>:
    3ef4:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <__mulsf3x>
    3ef8:	0c 94 3b 1f 	jmp	0x3e76	; 0x3e76 <__fp_round>
    3efc:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <__fp_pscA>
    3f00:	38 f0       	brcs	.+14     	; 0x3f10 <__mulsf3+0x1c>
    3f02:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <__fp_pscB>
    3f06:	20 f0       	brcs	.+8      	; 0x3f10 <__mulsf3+0x1c>
    3f08:	95 23       	and	r25, r21
    3f0a:	11 f0       	breq	.+4      	; 0x3f10 <__mulsf3+0x1c>
    3f0c:	0c 94 24 1f 	jmp	0x3e48	; 0x3e48 <__fp_inf>
    3f10:	0c 94 2a 1f 	jmp	0x3e54	; 0x3e54 <__fp_nan>
    3f14:	11 24       	eor	r1, r1
    3f16:	0c 94 6f 1f 	jmp	0x3ede	; 0x3ede <__fp_szero>

00003f1a <__mulsf3x>:
    3f1a:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <__fp_split3>
    3f1e:	70 f3       	brcs	.-36     	; 0x3efc <__mulsf3+0x8>

00003f20 <__mulsf3_pse>:
    3f20:	95 9f       	mul	r25, r21
    3f22:	c1 f3       	breq	.-16     	; 0x3f14 <__mulsf3+0x20>
    3f24:	95 0f       	add	r25, r21
    3f26:	50 e0       	ldi	r21, 0x00	; 0
    3f28:	55 1f       	adc	r21, r21
    3f2a:	62 9f       	mul	r22, r18
    3f2c:	f0 01       	movw	r30, r0
    3f2e:	72 9f       	mul	r23, r18
    3f30:	bb 27       	eor	r27, r27
    3f32:	f0 0d       	add	r31, r0
    3f34:	b1 1d       	adc	r27, r1
    3f36:	63 9f       	mul	r22, r19
    3f38:	aa 27       	eor	r26, r26
    3f3a:	f0 0d       	add	r31, r0
    3f3c:	b1 1d       	adc	r27, r1
    3f3e:	aa 1f       	adc	r26, r26
    3f40:	64 9f       	mul	r22, r20
    3f42:	66 27       	eor	r22, r22
    3f44:	b0 0d       	add	r27, r0
    3f46:	a1 1d       	adc	r26, r1
    3f48:	66 1f       	adc	r22, r22
    3f4a:	82 9f       	mul	r24, r18
    3f4c:	22 27       	eor	r18, r18
    3f4e:	b0 0d       	add	r27, r0
    3f50:	a1 1d       	adc	r26, r1
    3f52:	62 1f       	adc	r22, r18
    3f54:	73 9f       	mul	r23, r19
    3f56:	b0 0d       	add	r27, r0
    3f58:	a1 1d       	adc	r26, r1
    3f5a:	62 1f       	adc	r22, r18
    3f5c:	83 9f       	mul	r24, r19
    3f5e:	a0 0d       	add	r26, r0
    3f60:	61 1d       	adc	r22, r1
    3f62:	22 1f       	adc	r18, r18
    3f64:	74 9f       	mul	r23, r20
    3f66:	33 27       	eor	r19, r19
    3f68:	a0 0d       	add	r26, r0
    3f6a:	61 1d       	adc	r22, r1
    3f6c:	23 1f       	adc	r18, r19
    3f6e:	84 9f       	mul	r24, r20
    3f70:	60 0d       	add	r22, r0
    3f72:	21 1d       	adc	r18, r1
    3f74:	82 2f       	mov	r24, r18
    3f76:	76 2f       	mov	r23, r22
    3f78:	6a 2f       	mov	r22, r26
    3f7a:	11 24       	eor	r1, r1
    3f7c:	9f 57       	subi	r25, 0x7F	; 127
    3f7e:	50 40       	sbci	r21, 0x00	; 0
    3f80:	9a f0       	brmi	.+38     	; 0x3fa8 <__mulsf3_pse+0x88>
    3f82:	f1 f0       	breq	.+60     	; 0x3fc0 <__mulsf3_pse+0xa0>
    3f84:	88 23       	and	r24, r24
    3f86:	4a f0       	brmi	.+18     	; 0x3f9a <__mulsf3_pse+0x7a>
    3f88:	ee 0f       	add	r30, r30
    3f8a:	ff 1f       	adc	r31, r31
    3f8c:	bb 1f       	adc	r27, r27
    3f8e:	66 1f       	adc	r22, r22
    3f90:	77 1f       	adc	r23, r23
    3f92:	88 1f       	adc	r24, r24
    3f94:	91 50       	subi	r25, 0x01	; 1
    3f96:	50 40       	sbci	r21, 0x00	; 0
    3f98:	a9 f7       	brne	.-22     	; 0x3f84 <__mulsf3_pse+0x64>
    3f9a:	9e 3f       	cpi	r25, 0xFE	; 254
    3f9c:	51 05       	cpc	r21, r1
    3f9e:	80 f0       	brcs	.+32     	; 0x3fc0 <__mulsf3_pse+0xa0>
    3fa0:	0c 94 24 1f 	jmp	0x3e48	; 0x3e48 <__fp_inf>
    3fa4:	0c 94 6f 1f 	jmp	0x3ede	; 0x3ede <__fp_szero>
    3fa8:	5f 3f       	cpi	r21, 0xFF	; 255
    3faa:	e4 f3       	brlt	.-8      	; 0x3fa4 <__mulsf3_pse+0x84>
    3fac:	98 3e       	cpi	r25, 0xE8	; 232
    3fae:	d4 f3       	brlt	.-12     	; 0x3fa4 <__mulsf3_pse+0x84>
    3fb0:	86 95       	lsr	r24
    3fb2:	77 95       	ror	r23
    3fb4:	67 95       	ror	r22
    3fb6:	b7 95       	ror	r27
    3fb8:	f7 95       	ror	r31
    3fba:	e7 95       	ror	r30
    3fbc:	9f 5f       	subi	r25, 0xFF	; 255
    3fbe:	c1 f7       	brne	.-16     	; 0x3fb0 <__mulsf3_pse+0x90>
    3fc0:	fe 2b       	or	r31, r30
    3fc2:	88 0f       	add	r24, r24
    3fc4:	91 1d       	adc	r25, r1
    3fc6:	96 95       	lsr	r25
    3fc8:	87 95       	ror	r24
    3fca:	97 f9       	bld	r25, 7
    3fcc:	08 95       	ret

00003fce <calloc>:
    3fce:	0f 93       	push	r16
    3fd0:	1f 93       	push	r17
    3fd2:	cf 93       	push	r28
    3fd4:	df 93       	push	r29
    3fd6:	86 9f       	mul	r24, r22
    3fd8:	80 01       	movw	r16, r0
    3fda:	87 9f       	mul	r24, r23
    3fdc:	10 0d       	add	r17, r0
    3fde:	96 9f       	mul	r25, r22
    3fe0:	10 0d       	add	r17, r0
    3fe2:	11 24       	eor	r1, r1
    3fe4:	c8 01       	movw	r24, r16
    3fe6:	0e 94 03 20 	call	0x4006	; 0x4006 <malloc>
    3fea:	ec 01       	movw	r28, r24
    3fec:	00 97       	sbiw	r24, 0x00	; 0
    3fee:	29 f0       	breq	.+10     	; 0x3ffa <calloc+0x2c>
    3ff0:	a8 01       	movw	r20, r16
    3ff2:	60 e0       	ldi	r22, 0x00	; 0
    3ff4:	70 e0       	ldi	r23, 0x00	; 0
    3ff6:	0e 94 30 21 	call	0x4260	; 0x4260 <memset>
    3ffa:	ce 01       	movw	r24, r28
    3ffc:	df 91       	pop	r29
    3ffe:	cf 91       	pop	r28
    4000:	1f 91       	pop	r17
    4002:	0f 91       	pop	r16
    4004:	08 95       	ret

00004006 <malloc>:
    4006:	cf 93       	push	r28
    4008:	df 93       	push	r29
    400a:	82 30       	cpi	r24, 0x02	; 2
    400c:	91 05       	cpc	r25, r1
    400e:	10 f4       	brcc	.+4      	; 0x4014 <malloc+0xe>
    4010:	82 e0       	ldi	r24, 0x02	; 2
    4012:	90 e0       	ldi	r25, 0x00	; 0
    4014:	e0 91 9c 02 	lds	r30, 0x029C
    4018:	f0 91 9d 02 	lds	r31, 0x029D
    401c:	20 e0       	ldi	r18, 0x00	; 0
    401e:	30 e0       	ldi	r19, 0x00	; 0
    4020:	c0 e0       	ldi	r28, 0x00	; 0
    4022:	d0 e0       	ldi	r29, 0x00	; 0
    4024:	30 97       	sbiw	r30, 0x00	; 0
    4026:	11 f1       	breq	.+68     	; 0x406c <malloc+0x66>
    4028:	40 81       	ld	r20, Z
    402a:	51 81       	ldd	r21, Z+1	; 0x01
    402c:	48 17       	cp	r20, r24
    402e:	59 07       	cpc	r21, r25
    4030:	c0 f0       	brcs	.+48     	; 0x4062 <malloc+0x5c>
    4032:	48 17       	cp	r20, r24
    4034:	59 07       	cpc	r21, r25
    4036:	61 f4       	brne	.+24     	; 0x4050 <malloc+0x4a>
    4038:	82 81       	ldd	r24, Z+2	; 0x02
    403a:	93 81       	ldd	r25, Z+3	; 0x03
    403c:	20 97       	sbiw	r28, 0x00	; 0
    403e:	19 f0       	breq	.+6      	; 0x4046 <malloc+0x40>
    4040:	9b 83       	std	Y+3, r25	; 0x03
    4042:	8a 83       	std	Y+2, r24	; 0x02
    4044:	2b c0       	rjmp	.+86     	; 0x409c <malloc+0x96>
    4046:	90 93 9d 02 	sts	0x029D, r25
    404a:	80 93 9c 02 	sts	0x029C, r24
    404e:	26 c0       	rjmp	.+76     	; 0x409c <malloc+0x96>
    4050:	21 15       	cp	r18, r1
    4052:	31 05       	cpc	r19, r1
    4054:	19 f0       	breq	.+6      	; 0x405c <malloc+0x56>
    4056:	42 17       	cp	r20, r18
    4058:	53 07       	cpc	r21, r19
    405a:	18 f4       	brcc	.+6      	; 0x4062 <malloc+0x5c>
    405c:	9a 01       	movw	r18, r20
    405e:	be 01       	movw	r22, r28
    4060:	df 01       	movw	r26, r30
    4062:	ef 01       	movw	r28, r30
    4064:	02 80       	ldd	r0, Z+2	; 0x02
    4066:	f3 81       	ldd	r31, Z+3	; 0x03
    4068:	e0 2d       	mov	r30, r0
    406a:	dc cf       	rjmp	.-72     	; 0x4024 <malloc+0x1e>
    406c:	21 15       	cp	r18, r1
    406e:	31 05       	cpc	r19, r1
    4070:	09 f1       	breq	.+66     	; 0x40b4 <malloc+0xae>
    4072:	28 1b       	sub	r18, r24
    4074:	39 0b       	sbc	r19, r25
    4076:	24 30       	cpi	r18, 0x04	; 4
    4078:	31 05       	cpc	r19, r1
    407a:	90 f4       	brcc	.+36     	; 0x40a0 <malloc+0x9a>
    407c:	12 96       	adiw	r26, 0x02	; 2
    407e:	8d 91       	ld	r24, X+
    4080:	9c 91       	ld	r25, X
    4082:	13 97       	sbiw	r26, 0x03	; 3
    4084:	61 15       	cp	r22, r1
    4086:	71 05       	cpc	r23, r1
    4088:	21 f0       	breq	.+8      	; 0x4092 <malloc+0x8c>
    408a:	fb 01       	movw	r30, r22
    408c:	93 83       	std	Z+3, r25	; 0x03
    408e:	82 83       	std	Z+2, r24	; 0x02
    4090:	04 c0       	rjmp	.+8      	; 0x409a <malloc+0x94>
    4092:	90 93 9d 02 	sts	0x029D, r25
    4096:	80 93 9c 02 	sts	0x029C, r24
    409a:	fd 01       	movw	r30, r26
    409c:	32 96       	adiw	r30, 0x02	; 2
    409e:	44 c0       	rjmp	.+136    	; 0x4128 <malloc+0x122>
    40a0:	fd 01       	movw	r30, r26
    40a2:	e2 0f       	add	r30, r18
    40a4:	f3 1f       	adc	r31, r19
    40a6:	81 93       	st	Z+, r24
    40a8:	91 93       	st	Z+, r25
    40aa:	22 50       	subi	r18, 0x02	; 2
    40ac:	31 09       	sbc	r19, r1
    40ae:	2d 93       	st	X+, r18
    40b0:	3c 93       	st	X, r19
    40b2:	3a c0       	rjmp	.+116    	; 0x4128 <malloc+0x122>
    40b4:	20 91 9a 02 	lds	r18, 0x029A
    40b8:	30 91 9b 02 	lds	r19, 0x029B
    40bc:	23 2b       	or	r18, r19
    40be:	41 f4       	brne	.+16     	; 0x40d0 <malloc+0xca>
    40c0:	20 91 02 01 	lds	r18, 0x0102
    40c4:	30 91 03 01 	lds	r19, 0x0103
    40c8:	30 93 9b 02 	sts	0x029B, r19
    40cc:	20 93 9a 02 	sts	0x029A, r18
    40d0:	20 91 00 01 	lds	r18, 0x0100
    40d4:	30 91 01 01 	lds	r19, 0x0101
    40d8:	21 15       	cp	r18, r1
    40da:	31 05       	cpc	r19, r1
    40dc:	41 f4       	brne	.+16     	; 0x40ee <malloc+0xe8>
    40de:	2d b7       	in	r18, 0x3d	; 61
    40e0:	3e b7       	in	r19, 0x3e	; 62
    40e2:	40 91 04 01 	lds	r20, 0x0104
    40e6:	50 91 05 01 	lds	r21, 0x0105
    40ea:	24 1b       	sub	r18, r20
    40ec:	35 0b       	sbc	r19, r21
    40ee:	e0 91 9a 02 	lds	r30, 0x029A
    40f2:	f0 91 9b 02 	lds	r31, 0x029B
    40f6:	e2 17       	cp	r30, r18
    40f8:	f3 07       	cpc	r31, r19
    40fa:	a0 f4       	brcc	.+40     	; 0x4124 <malloc+0x11e>
    40fc:	2e 1b       	sub	r18, r30
    40fe:	3f 0b       	sbc	r19, r31
    4100:	28 17       	cp	r18, r24
    4102:	39 07       	cpc	r19, r25
    4104:	78 f0       	brcs	.+30     	; 0x4124 <malloc+0x11e>
    4106:	ac 01       	movw	r20, r24
    4108:	4e 5f       	subi	r20, 0xFE	; 254
    410a:	5f 4f       	sbci	r21, 0xFF	; 255
    410c:	24 17       	cp	r18, r20
    410e:	35 07       	cpc	r19, r21
    4110:	48 f0       	brcs	.+18     	; 0x4124 <malloc+0x11e>
    4112:	4e 0f       	add	r20, r30
    4114:	5f 1f       	adc	r21, r31
    4116:	50 93 9b 02 	sts	0x029B, r21
    411a:	40 93 9a 02 	sts	0x029A, r20
    411e:	81 93       	st	Z+, r24
    4120:	91 93       	st	Z+, r25
    4122:	02 c0       	rjmp	.+4      	; 0x4128 <malloc+0x122>
    4124:	e0 e0       	ldi	r30, 0x00	; 0
    4126:	f0 e0       	ldi	r31, 0x00	; 0
    4128:	cf 01       	movw	r24, r30
    412a:	df 91       	pop	r29
    412c:	cf 91       	pop	r28
    412e:	08 95       	ret

00004130 <free>:
    4130:	0f 93       	push	r16
    4132:	1f 93       	push	r17
    4134:	cf 93       	push	r28
    4136:	df 93       	push	r29
    4138:	00 97       	sbiw	r24, 0x00	; 0
    413a:	09 f4       	brne	.+2      	; 0x413e <free+0xe>
    413c:	8c c0       	rjmp	.+280    	; 0x4256 <free+0x126>
    413e:	fc 01       	movw	r30, r24
    4140:	32 97       	sbiw	r30, 0x02	; 2
    4142:	13 82       	std	Z+3, r1	; 0x03
    4144:	12 82       	std	Z+2, r1	; 0x02
    4146:	00 91 9c 02 	lds	r16, 0x029C
    414a:	10 91 9d 02 	lds	r17, 0x029D
    414e:	01 15       	cp	r16, r1
    4150:	11 05       	cpc	r17, r1
    4152:	81 f4       	brne	.+32     	; 0x4174 <free+0x44>
    4154:	20 81       	ld	r18, Z
    4156:	31 81       	ldd	r19, Z+1	; 0x01
    4158:	82 0f       	add	r24, r18
    415a:	93 1f       	adc	r25, r19
    415c:	20 91 9a 02 	lds	r18, 0x029A
    4160:	30 91 9b 02 	lds	r19, 0x029B
    4164:	28 17       	cp	r18, r24
    4166:	39 07       	cpc	r19, r25
    4168:	79 f5       	brne	.+94     	; 0x41c8 <free+0x98>
    416a:	f0 93 9b 02 	sts	0x029B, r31
    416e:	e0 93 9a 02 	sts	0x029A, r30
    4172:	71 c0       	rjmp	.+226    	; 0x4256 <free+0x126>
    4174:	d8 01       	movw	r26, r16
    4176:	40 e0       	ldi	r20, 0x00	; 0
    4178:	50 e0       	ldi	r21, 0x00	; 0
    417a:	ae 17       	cp	r26, r30
    417c:	bf 07       	cpc	r27, r31
    417e:	50 f4       	brcc	.+20     	; 0x4194 <free+0x64>
    4180:	12 96       	adiw	r26, 0x02	; 2
    4182:	2d 91       	ld	r18, X+
    4184:	3c 91       	ld	r19, X
    4186:	13 97       	sbiw	r26, 0x03	; 3
    4188:	ad 01       	movw	r20, r26
    418a:	21 15       	cp	r18, r1
    418c:	31 05       	cpc	r19, r1
    418e:	09 f1       	breq	.+66     	; 0x41d2 <free+0xa2>
    4190:	d9 01       	movw	r26, r18
    4192:	f3 cf       	rjmp	.-26     	; 0x417a <free+0x4a>
    4194:	9d 01       	movw	r18, r26
    4196:	da 01       	movw	r26, r20
    4198:	33 83       	std	Z+3, r19	; 0x03
    419a:	22 83       	std	Z+2, r18	; 0x02
    419c:	60 81       	ld	r22, Z
    419e:	71 81       	ldd	r23, Z+1	; 0x01
    41a0:	86 0f       	add	r24, r22
    41a2:	97 1f       	adc	r25, r23
    41a4:	82 17       	cp	r24, r18
    41a6:	93 07       	cpc	r25, r19
    41a8:	69 f4       	brne	.+26     	; 0x41c4 <free+0x94>
    41aa:	ec 01       	movw	r28, r24
    41ac:	28 81       	ld	r18, Y
    41ae:	39 81       	ldd	r19, Y+1	; 0x01
    41b0:	26 0f       	add	r18, r22
    41b2:	37 1f       	adc	r19, r23
    41b4:	2e 5f       	subi	r18, 0xFE	; 254
    41b6:	3f 4f       	sbci	r19, 0xFF	; 255
    41b8:	31 83       	std	Z+1, r19	; 0x01
    41ba:	20 83       	st	Z, r18
    41bc:	8a 81       	ldd	r24, Y+2	; 0x02
    41be:	9b 81       	ldd	r25, Y+3	; 0x03
    41c0:	93 83       	std	Z+3, r25	; 0x03
    41c2:	82 83       	std	Z+2, r24	; 0x02
    41c4:	45 2b       	or	r20, r21
    41c6:	29 f4       	brne	.+10     	; 0x41d2 <free+0xa2>
    41c8:	f0 93 9d 02 	sts	0x029D, r31
    41cc:	e0 93 9c 02 	sts	0x029C, r30
    41d0:	42 c0       	rjmp	.+132    	; 0x4256 <free+0x126>
    41d2:	13 96       	adiw	r26, 0x03	; 3
    41d4:	fc 93       	st	X, r31
    41d6:	ee 93       	st	-X, r30
    41d8:	12 97       	sbiw	r26, 0x02	; 2
    41da:	ed 01       	movw	r28, r26
    41dc:	49 91       	ld	r20, Y+
    41de:	59 91       	ld	r21, Y+
    41e0:	9e 01       	movw	r18, r28
    41e2:	24 0f       	add	r18, r20
    41e4:	35 1f       	adc	r19, r21
    41e6:	e2 17       	cp	r30, r18
    41e8:	f3 07       	cpc	r31, r19
    41ea:	71 f4       	brne	.+28     	; 0x4208 <free+0xd8>
    41ec:	80 81       	ld	r24, Z
    41ee:	91 81       	ldd	r25, Z+1	; 0x01
    41f0:	84 0f       	add	r24, r20
    41f2:	95 1f       	adc	r25, r21
    41f4:	02 96       	adiw	r24, 0x02	; 2
    41f6:	11 96       	adiw	r26, 0x01	; 1
    41f8:	9c 93       	st	X, r25
    41fa:	8e 93       	st	-X, r24
    41fc:	82 81       	ldd	r24, Z+2	; 0x02
    41fe:	93 81       	ldd	r25, Z+3	; 0x03
    4200:	13 96       	adiw	r26, 0x03	; 3
    4202:	9c 93       	st	X, r25
    4204:	8e 93       	st	-X, r24
    4206:	12 97       	sbiw	r26, 0x02	; 2
    4208:	e0 e0       	ldi	r30, 0x00	; 0
    420a:	f0 e0       	ldi	r31, 0x00	; 0
    420c:	d8 01       	movw	r26, r16
    420e:	12 96       	adiw	r26, 0x02	; 2
    4210:	8d 91       	ld	r24, X+
    4212:	9c 91       	ld	r25, X
    4214:	13 97       	sbiw	r26, 0x03	; 3
    4216:	00 97       	sbiw	r24, 0x00	; 0
    4218:	19 f0       	breq	.+6      	; 0x4220 <free+0xf0>
    421a:	f8 01       	movw	r30, r16
    421c:	8c 01       	movw	r16, r24
    421e:	f6 cf       	rjmp	.-20     	; 0x420c <free+0xdc>
    4220:	8d 91       	ld	r24, X+
    4222:	9c 91       	ld	r25, X
    4224:	98 01       	movw	r18, r16
    4226:	2e 5f       	subi	r18, 0xFE	; 254
    4228:	3f 4f       	sbci	r19, 0xFF	; 255
    422a:	82 0f       	add	r24, r18
    422c:	93 1f       	adc	r25, r19
    422e:	20 91 9a 02 	lds	r18, 0x029A
    4232:	30 91 9b 02 	lds	r19, 0x029B
    4236:	28 17       	cp	r18, r24
    4238:	39 07       	cpc	r19, r25
    423a:	69 f4       	brne	.+26     	; 0x4256 <free+0x126>
    423c:	30 97       	sbiw	r30, 0x00	; 0
    423e:	29 f4       	brne	.+10     	; 0x424a <free+0x11a>
    4240:	10 92 9d 02 	sts	0x029D, r1
    4244:	10 92 9c 02 	sts	0x029C, r1
    4248:	02 c0       	rjmp	.+4      	; 0x424e <free+0x11e>
    424a:	13 82       	std	Z+3, r1	; 0x03
    424c:	12 82       	std	Z+2, r1	; 0x02
    424e:	10 93 9b 02 	sts	0x029B, r17
    4252:	00 93 9a 02 	sts	0x029A, r16
    4256:	df 91       	pop	r29
    4258:	cf 91       	pop	r28
    425a:	1f 91       	pop	r17
    425c:	0f 91       	pop	r16
    425e:	08 95       	ret

00004260 <memset>:
    4260:	dc 01       	movw	r26, r24
    4262:	01 c0       	rjmp	.+2      	; 0x4266 <memset+0x6>
    4264:	6d 93       	st	X+, r22
    4266:	41 50       	subi	r20, 0x01	; 1
    4268:	50 40       	sbci	r21, 0x00	; 0
    426a:	e0 f7       	brcc	.-8      	; 0x4264 <memset+0x4>
    426c:	08 95       	ret

0000426e <_exit>:
    426e:	f8 94       	cli

00004270 <__stop_program>:
    4270:	ff cf       	rjmp	.-2      	; 0x4270 <__stop_program>
