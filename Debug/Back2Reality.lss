
Back2Reality.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  000036fa  0000378e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000036fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000154  0080013e  0080013e  000037cc  2**0
                  ALLOC
  3 .stab         000052ec  00000000  00000000  000037cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001ef7  00000000  00000000  00008ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000a9af  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000a9c0  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
       4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      30:	0c 94 f3 10 	jmp	0x21e6	; 0x21e6 <__vector_12>
      34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      48:	0c 94 85 04 	jmp	0x90a	; 0x90a <__vector_18>
      4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      54:	0c 94 59 14 	jmp	0x28b2	; 0x28b2 <__vector_21>
      58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      5c:	0c 94 c9 13 	jmp	0x2792	; 0x2792 <__vector_23>
      60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      68:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      6c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      70:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      74:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      78:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      7c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      80:	0c 94 ae 15 	jmp	0x2b5c	; 0x2b5c <__vector_32>
      84:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      88:	0c 94 6c 15 	jmp	0x2ad8	; 0x2ad8 <__vector_34>
      8c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      90:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	ea ef       	ldi	r30, 0xFA	; 250
      a8:	f6 e3       	ldi	r31, 0x36	; 54
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	ae 33       	cpi	r26, 0x3E	; 62
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	22 e0       	ldi	r18, 0x02	; 2
      bc:	ae e3       	ldi	r26, 0x3E	; 62
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	a2 39       	cpi	r26, 0x92	; 146
      c6:	b2 07       	cpc	r27, r18
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <main>
      ce:	0c 94 7b 1b 	jmp	0x36f6	; 0x36f6 <_exit>

000000d2 <__bad_interrupt>:
      d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <servo_init>:
/*
 * 	void servo_init(unsigned int f_pwm)
 * 	init all pwm for servos
 */
void servo_init(unsigned int f_pwm)
{
      d6:	0f 93       	push	r16
      d8:	1f 93       	push	r17
      da:	cf 93       	push	r28
      dc:	df 93       	push	r29
      de:	00 d0       	rcall	.+0      	; 0xe0 <servo_init+0xa>
      e0:	cd b7       	in	r28, 0x3d	; 61
      e2:	de b7       	in	r29, 0x3e	; 62
      e4:	9a 83       	std	Y+2, r25	; 0x02
      e6:	89 83       	std	Y+1, r24	; 0x01
	DDRE |= ((1 << PINE3) | (1 << PINE4) | (1 << PINE5));
      e8:	8d e2       	ldi	r24, 0x2D	; 45
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	2d e2       	ldi	r18, 0x2D	; 45
      ee:	30 e0       	ldi	r19, 0x00	; 0
      f0:	f9 01       	movw	r30, r18
      f2:	20 81       	ld	r18, Z
      f4:	28 63       	ori	r18, 0x38	; 56
      f6:	fc 01       	movw	r30, r24
      f8:	20 83       	st	Z, r18
	DDRB |= (1 << PINB7);//OCR0A
      fa:	84 e2       	ldi	r24, 0x24	; 36
      fc:	90 e0       	ldi	r25, 0x00	; 0
      fe:	24 e2       	ldi	r18, 0x24	; 36
     100:	30 e0       	ldi	r19, 0x00	; 0
     102:	f9 01       	movw	r30, r18
     104:	20 81       	ld	r18, Z
     106:	20 68       	ori	r18, 0x80	; 128
     108:	fc 01       	movw	r30, r24
     10a:	20 83       	st	Z, r18
	
	TCNT3 = 0;
     10c:	84 e9       	ldi	r24, 0x94	; 148
     10e:	90 e0       	ldi	r25, 0x00	; 0
     110:	fc 01       	movw	r30, r24
     112:	11 82       	std	Z+1, r1	; 0x01
     114:	10 82       	st	Z, r1
	TCNT0 = 0;
     116:	86 e4       	ldi	r24, 0x46	; 70
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	fc 01       	movw	r30, r24
     11c:	10 82       	st	Z, r1

	OCR3A = 0;
     11e:	88 e9       	ldi	r24, 0x98	; 152
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	fc 01       	movw	r30, r24
     124:	11 82       	std	Z+1, r1	; 0x01
     126:	10 82       	st	Z, r1
	OCR3B = 0;
     128:	8a e9       	ldi	r24, 0x9A	; 154
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	fc 01       	movw	r30, r24
     12e:	11 82       	std	Z+1, r1	; 0x01
     130:	10 82       	st	Z, r1
	OCR3C = 0;
     132:	8c e9       	ldi	r24, 0x9C	; 156
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	fc 01       	movw	r30, r24
     138:	11 82       	std	Z+1, r1	; 0x01
     13a:	10 82       	st	Z, r1

	TCCR3A = (1 << COM3A1)  | (1 << COM3B1) | (1 << COM3B0) | (1 << COM3C1) | (1 << COM3C0) | (1 << WGM31);
     13c:	80 e9       	ldi	r24, 0x90	; 144
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	2e eb       	ldi	r18, 0xBE	; 190
     142:	fc 01       	movw	r30, r24
     144:	20 83       	st	Z, r18
	TCCR3B = (1<< CS31) | (1 << WGM32) | (1 << WGM33) ; // PRESKALER = 8
     146:	81 e9       	ldi	r24, 0x91	; 145
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	2a e1       	ldi	r18, 0x1A	; 26
     14c:	fc 01       	movw	r30, r24
     14e:	20 83       	st	Z, r18
	
	//8bit timer for pwm shit
	TCCR0A = (1 << WGM01) | (1 << WGM00) | (1 << COM0A1) | (1 << CS01) | (1 << CS00);
     150:	84 e4       	ldi	r24, 0x44	; 68
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	2b e6       	ldi	r18, 0x6B	; 107
     156:	fc 01       	movw	r30, r24
     158:	20 83       	st	Z, r18

	ICR3   = ((double)F_CPU) / (8.0 * f_pwm) + 0.5;
     15a:	06 e9       	ldi	r16, 0x96	; 150
     15c:	10 e0       	ldi	r17, 0x00	; 0
     15e:	89 81       	ldd	r24, Y+1	; 0x01
     160:	9a 81       	ldd	r25, Y+2	; 0x02
     162:	cc 01       	movw	r24, r24
     164:	a0 e0       	ldi	r26, 0x00	; 0
     166:	b0 e0       	ldi	r27, 0x00	; 0
     168:	bc 01       	movw	r22, r24
     16a:	cd 01       	movw	r24, r26
     16c:	0e 94 07 19 	call	0x320e	; 0x320e <__floatunsisf>
     170:	dc 01       	movw	r26, r24
     172:	cb 01       	movw	r24, r22
     174:	20 e0       	ldi	r18, 0x00	; 0
     176:	30 e0       	ldi	r19, 0x00	; 0
     178:	40 e0       	ldi	r20, 0x00	; 0
     17a:	51 e4       	ldi	r21, 0x41	; 65
     17c:	bc 01       	movw	r22, r24
     17e:	cd 01       	movw	r24, r26
     180:	0e 94 be 19 	call	0x337c	; 0x337c <__mulsf3>
     184:	dc 01       	movw	r26, r24
     186:	cb 01       	movw	r24, r22
     188:	9c 01       	movw	r18, r24
     18a:	ad 01       	movw	r20, r26
     18c:	60 e0       	ldi	r22, 0x00	; 0
     18e:	74 e2       	ldi	r23, 0x24	; 36
     190:	84 e7       	ldi	r24, 0x74	; 116
     192:	99 e4       	ldi	r25, 0x49	; 73
     194:	0e 94 66 18 	call	0x30cc	; 0x30cc <__divsf3>
     198:	dc 01       	movw	r26, r24
     19a:	cb 01       	movw	r24, r22
     19c:	20 e0       	ldi	r18, 0x00	; 0
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	40 e0       	ldi	r20, 0x00	; 0
     1a2:	5f e3       	ldi	r21, 0x3F	; 63
     1a4:	bc 01       	movw	r22, r24
     1a6:	cd 01       	movw	r24, r26
     1a8:	0e 94 f5 17 	call	0x2fea	; 0x2fea <__addsf3>
     1ac:	dc 01       	movw	r26, r24
     1ae:	cb 01       	movw	r24, r22
     1b0:	bc 01       	movw	r22, r24
     1b2:	cd 01       	movw	r24, r26
     1b4:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <__fixunssfsi>
     1b8:	dc 01       	movw	r26, r24
     1ba:	cb 01       	movw	r24, r22
     1bc:	f8 01       	movw	r30, r16
     1be:	91 83       	std	Z+1, r25	; 0x01
     1c0:	80 83       	st	Z, r24
}
     1c2:	0f 90       	pop	r0
     1c4:	0f 90       	pop	r0
     1c6:	df 91       	pop	r29
     1c8:	cf 91       	pop	r28
     1ca:	1f 91       	pop	r17
     1cc:	0f 91       	pop	r16
     1ce:	08 95       	ret

000001d0 <servo_set_duty_cycle_one>:
/*
 * 	static void servo_set_duty_cycle_one(int16_t value)
 *	OCR3A servo
 */
void servo_set_duty_cycle_one(int16_t value)
{
     1d0:	cf 92       	push	r12
     1d2:	df 92       	push	r13
     1d4:	ef 92       	push	r14
     1d6:	ff 92       	push	r15
     1d8:	cf 93       	push	r28
     1da:	df 93       	push	r29
     1dc:	00 d0       	rcall	.+0      	; 0x1de <servo_set_duty_cycle_one+0xe>
     1de:	00 d0       	rcall	.+0      	; 0x1e0 <servo_set_duty_cycle_one+0x10>
     1e0:	cd b7       	in	r28, 0x3d	; 61
     1e2:	de b7       	in	r29, 0x3e	; 62
     1e4:	9c 83       	std	Y+4, r25	; 0x04
     1e6:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     1e8:	86 e9       	ldi	r24, 0x96	; 150
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	fc 01       	movw	r30, r24
     1ee:	80 81       	ld	r24, Z
     1f0:	91 81       	ldd	r25, Z+1	; 0x01
     1f2:	cc 01       	movw	r24, r24
     1f4:	a0 e0       	ldi	r26, 0x00	; 0
     1f6:	b0 e0       	ldi	r27, 0x00	; 0
     1f8:	bc 01       	movw	r22, r24
     1fa:	cd 01       	movw	r24, r26
     1fc:	0e 94 07 19 	call	0x320e	; 0x320e <__floatunsisf>
     200:	dc 01       	movw	r26, r24
     202:	cb 01       	movw	r24, r22
     204:	20 e0       	ldi	r18, 0x00	; 0
     206:	30 e0       	ldi	r19, 0x00	; 0
     208:	4f e7       	ldi	r20, 0x7F	; 127
     20a:	53 e4       	ldi	r21, 0x43	; 67
     20c:	bc 01       	movw	r22, r24
     20e:	cd 01       	movw	r24, r26
     210:	0e 94 66 18 	call	0x30cc	; 0x30cc <__divsf3>
     214:	dc 01       	movw	r26, r24
     216:	cb 01       	movw	r24, r22
     218:	6c 01       	movw	r12, r24
     21a:	7d 01       	movw	r14, r26
     21c:	8b 81       	ldd	r24, Y+3	; 0x03
     21e:	9c 81       	ldd	r25, Y+4	; 0x04
     220:	09 2e       	mov	r0, r25
     222:	00 0c       	add	r0, r0
     224:	aa 0b       	sbc	r26, r26
     226:	bb 0b       	sbc	r27, r27
     228:	bc 01       	movw	r22, r24
     22a:	cd 01       	movw	r24, r26
     22c:	0e 94 09 19 	call	0x3212	; 0x3212 <__floatsisf>
     230:	dc 01       	movw	r26, r24
     232:	cb 01       	movw	r24, r22
     234:	9c 01       	movw	r18, r24
     236:	ad 01       	movw	r20, r26
     238:	c7 01       	movw	r24, r14
     23a:	b6 01       	movw	r22, r12
     23c:	0e 94 be 19 	call	0x337c	; 0x337c <__mulsf3>
     240:	dc 01       	movw	r26, r24
     242:	cb 01       	movw	r24, r22
     244:	20 e0       	ldi	r18, 0x00	; 0
     246:	30 e0       	ldi	r19, 0x00	; 0
     248:	40 e0       	ldi	r20, 0x00	; 0
     24a:	5f e3       	ldi	r21, 0x3F	; 63
     24c:	bc 01       	movw	r22, r24
     24e:	cd 01       	movw	r24, r26
     250:	0e 94 f5 17 	call	0x2fea	; 0x2fea <__addsf3>
     254:	dc 01       	movw	r26, r24
     256:	cb 01       	movw	r24, r22
     258:	bc 01       	movw	r22, r24
     25a:	cd 01       	movw	r24, r26
     25c:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <__fixunssfsi>
     260:	dc 01       	movw	r26, r24
     262:	cb 01       	movw	r24, r22
     264:	9a 83       	std	Y+2, r25	; 0x02
     266:	89 83       	std	Y+1, r24	; 0x01
	OCR3AH = temp >> 8;
     268:	89 e9       	ldi	r24, 0x99	; 153
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	29 81       	ldd	r18, Y+1	; 0x01
     26e:	3a 81       	ldd	r19, Y+2	; 0x02
     270:	23 2f       	mov	r18, r19
     272:	33 27       	eor	r19, r19
     274:	fc 01       	movw	r30, r24
     276:	20 83       	st	Z, r18
	OCR3AL = temp & 0xFF;
     278:	88 e9       	ldi	r24, 0x98	; 152
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	29 81       	ldd	r18, Y+1	; 0x01
     27e:	fc 01       	movw	r30, r24
     280:	20 83       	st	Z, r18
}
     282:	0f 90       	pop	r0
     284:	0f 90       	pop	r0
     286:	0f 90       	pop	r0
     288:	0f 90       	pop	r0
     28a:	df 91       	pop	r29
     28c:	cf 91       	pop	r28
     28e:	ff 90       	pop	r15
     290:	ef 90       	pop	r14
     292:	df 90       	pop	r13
     294:	cf 90       	pop	r12
     296:	08 95       	ret

00000298 <servo_set_duty_cycle_two>:
/*
 * 	static void servo_set_duty_cycle_two(int16_t value)
 * 	OCR3B servo
 */
void servo_set_duty_cycle_two(int16_t value)
{
     298:	cf 92       	push	r12
     29a:	df 92       	push	r13
     29c:	ef 92       	push	r14
     29e:	ff 92       	push	r15
     2a0:	cf 93       	push	r28
     2a2:	df 93       	push	r29
     2a4:	00 d0       	rcall	.+0      	; 0x2a6 <servo_set_duty_cycle_two+0xe>
     2a6:	00 d0       	rcall	.+0      	; 0x2a8 <servo_set_duty_cycle_two+0x10>
     2a8:	cd b7       	in	r28, 0x3d	; 61
     2aa:	de b7       	in	r29, 0x3e	; 62
     2ac:	9c 83       	std	Y+4, r25	; 0x04
     2ae:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     2b0:	86 e9       	ldi	r24, 0x96	; 150
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	fc 01       	movw	r30, r24
     2b6:	80 81       	ld	r24, Z
     2b8:	91 81       	ldd	r25, Z+1	; 0x01
     2ba:	cc 01       	movw	r24, r24
     2bc:	a0 e0       	ldi	r26, 0x00	; 0
     2be:	b0 e0       	ldi	r27, 0x00	; 0
     2c0:	bc 01       	movw	r22, r24
     2c2:	cd 01       	movw	r24, r26
     2c4:	0e 94 07 19 	call	0x320e	; 0x320e <__floatunsisf>
     2c8:	dc 01       	movw	r26, r24
     2ca:	cb 01       	movw	r24, r22
     2cc:	20 e0       	ldi	r18, 0x00	; 0
     2ce:	30 e0       	ldi	r19, 0x00	; 0
     2d0:	4f e7       	ldi	r20, 0x7F	; 127
     2d2:	53 e4       	ldi	r21, 0x43	; 67
     2d4:	bc 01       	movw	r22, r24
     2d6:	cd 01       	movw	r24, r26
     2d8:	0e 94 66 18 	call	0x30cc	; 0x30cc <__divsf3>
     2dc:	dc 01       	movw	r26, r24
     2de:	cb 01       	movw	r24, r22
     2e0:	6c 01       	movw	r12, r24
     2e2:	7d 01       	movw	r14, r26
     2e4:	8b 81       	ldd	r24, Y+3	; 0x03
     2e6:	9c 81       	ldd	r25, Y+4	; 0x04
     2e8:	09 2e       	mov	r0, r25
     2ea:	00 0c       	add	r0, r0
     2ec:	aa 0b       	sbc	r26, r26
     2ee:	bb 0b       	sbc	r27, r27
     2f0:	bc 01       	movw	r22, r24
     2f2:	cd 01       	movw	r24, r26
     2f4:	0e 94 09 19 	call	0x3212	; 0x3212 <__floatsisf>
     2f8:	dc 01       	movw	r26, r24
     2fa:	cb 01       	movw	r24, r22
     2fc:	9c 01       	movw	r18, r24
     2fe:	ad 01       	movw	r20, r26
     300:	c7 01       	movw	r24, r14
     302:	b6 01       	movw	r22, r12
     304:	0e 94 be 19 	call	0x337c	; 0x337c <__mulsf3>
     308:	dc 01       	movw	r26, r24
     30a:	cb 01       	movw	r24, r22
     30c:	20 e0       	ldi	r18, 0x00	; 0
     30e:	30 e0       	ldi	r19, 0x00	; 0
     310:	40 e0       	ldi	r20, 0x00	; 0
     312:	5f e3       	ldi	r21, 0x3F	; 63
     314:	bc 01       	movw	r22, r24
     316:	cd 01       	movw	r24, r26
     318:	0e 94 f5 17 	call	0x2fea	; 0x2fea <__addsf3>
     31c:	dc 01       	movw	r26, r24
     31e:	cb 01       	movw	r24, r22
     320:	bc 01       	movw	r22, r24
     322:	cd 01       	movw	r24, r26
     324:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <__fixunssfsi>
     328:	dc 01       	movw	r26, r24
     32a:	cb 01       	movw	r24, r22
     32c:	9a 83       	std	Y+2, r25	; 0x02
     32e:	89 83       	std	Y+1, r24	; 0x01
	OCR3BH = temp >> 8;
     330:	8b e9       	ldi	r24, 0x9B	; 155
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	29 81       	ldd	r18, Y+1	; 0x01
     336:	3a 81       	ldd	r19, Y+2	; 0x02
     338:	23 2f       	mov	r18, r19
     33a:	33 27       	eor	r19, r19
     33c:	fc 01       	movw	r30, r24
     33e:	20 83       	st	Z, r18
	OCR3BL = temp & 0xFF;
     340:	8a e9       	ldi	r24, 0x9A	; 154
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	29 81       	ldd	r18, Y+1	; 0x01
     346:	fc 01       	movw	r30, r24
     348:	20 83       	st	Z, r18
}
     34a:	0f 90       	pop	r0
     34c:	0f 90       	pop	r0
     34e:	0f 90       	pop	r0
     350:	0f 90       	pop	r0
     352:	df 91       	pop	r29
     354:	cf 91       	pop	r28
     356:	ff 90       	pop	r15
     358:	ef 90       	pop	r14
     35a:	df 90       	pop	r13
     35c:	cf 90       	pop	r12
     35e:	08 95       	ret

00000360 <servo_set_duty_cycle_three>:
/*
 * 	static void servo_set_duty_cycle_three(int16_t value)
 * 	OCR3C servo
 */
void servo_set_duty_cycle_three(int16_t value)
{
     360:	cf 92       	push	r12
     362:	df 92       	push	r13
     364:	ef 92       	push	r14
     366:	ff 92       	push	r15
     368:	cf 93       	push	r28
     36a:	df 93       	push	r29
     36c:	00 d0       	rcall	.+0      	; 0x36e <servo_set_duty_cycle_three+0xe>
     36e:	00 d0       	rcall	.+0      	; 0x370 <servo_set_duty_cycle_three+0x10>
     370:	cd b7       	in	r28, 0x3d	; 61
     372:	de b7       	in	r29, 0x3e	; 62
     374:	9c 83       	std	Y+4, r25	; 0x04
     376:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     378:	86 e9       	ldi	r24, 0x96	; 150
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	fc 01       	movw	r30, r24
     37e:	80 81       	ld	r24, Z
     380:	91 81       	ldd	r25, Z+1	; 0x01
     382:	cc 01       	movw	r24, r24
     384:	a0 e0       	ldi	r26, 0x00	; 0
     386:	b0 e0       	ldi	r27, 0x00	; 0
     388:	bc 01       	movw	r22, r24
     38a:	cd 01       	movw	r24, r26
     38c:	0e 94 07 19 	call	0x320e	; 0x320e <__floatunsisf>
     390:	dc 01       	movw	r26, r24
     392:	cb 01       	movw	r24, r22
     394:	20 e0       	ldi	r18, 0x00	; 0
     396:	30 e0       	ldi	r19, 0x00	; 0
     398:	4f e7       	ldi	r20, 0x7F	; 127
     39a:	53 e4       	ldi	r21, 0x43	; 67
     39c:	bc 01       	movw	r22, r24
     39e:	cd 01       	movw	r24, r26
     3a0:	0e 94 66 18 	call	0x30cc	; 0x30cc <__divsf3>
     3a4:	dc 01       	movw	r26, r24
     3a6:	cb 01       	movw	r24, r22
     3a8:	6c 01       	movw	r12, r24
     3aa:	7d 01       	movw	r14, r26
     3ac:	8b 81       	ldd	r24, Y+3	; 0x03
     3ae:	9c 81       	ldd	r25, Y+4	; 0x04
     3b0:	09 2e       	mov	r0, r25
     3b2:	00 0c       	add	r0, r0
     3b4:	aa 0b       	sbc	r26, r26
     3b6:	bb 0b       	sbc	r27, r27
     3b8:	bc 01       	movw	r22, r24
     3ba:	cd 01       	movw	r24, r26
     3bc:	0e 94 09 19 	call	0x3212	; 0x3212 <__floatsisf>
     3c0:	dc 01       	movw	r26, r24
     3c2:	cb 01       	movw	r24, r22
     3c4:	9c 01       	movw	r18, r24
     3c6:	ad 01       	movw	r20, r26
     3c8:	c7 01       	movw	r24, r14
     3ca:	b6 01       	movw	r22, r12
     3cc:	0e 94 be 19 	call	0x337c	; 0x337c <__mulsf3>
     3d0:	dc 01       	movw	r26, r24
     3d2:	cb 01       	movw	r24, r22
     3d4:	20 e0       	ldi	r18, 0x00	; 0
     3d6:	30 e0       	ldi	r19, 0x00	; 0
     3d8:	40 e0       	ldi	r20, 0x00	; 0
     3da:	5f e3       	ldi	r21, 0x3F	; 63
     3dc:	bc 01       	movw	r22, r24
     3de:	cd 01       	movw	r24, r26
     3e0:	0e 94 f5 17 	call	0x2fea	; 0x2fea <__addsf3>
     3e4:	dc 01       	movw	r26, r24
     3e6:	cb 01       	movw	r24, r22
     3e8:	bc 01       	movw	r22, r24
     3ea:	cd 01       	movw	r24, r26
     3ec:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <__fixunssfsi>
     3f0:	dc 01       	movw	r26, r24
     3f2:	cb 01       	movw	r24, r22
     3f4:	9a 83       	std	Y+2, r25	; 0x02
     3f6:	89 83       	std	Y+1, r24	; 0x01
	OCR3CH = temp >> 8;
     3f8:	8d e9       	ldi	r24, 0x9D	; 157
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	29 81       	ldd	r18, Y+1	; 0x01
     3fe:	3a 81       	ldd	r19, Y+2	; 0x02
     400:	23 2f       	mov	r18, r19
     402:	33 27       	eor	r19, r19
     404:	fc 01       	movw	r30, r24
     406:	20 83       	st	Z, r18
	OCR3CL = temp & 0xFF;
     408:	8c e9       	ldi	r24, 0x9C	; 156
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	29 81       	ldd	r18, Y+1	; 0x01
     40e:	fc 01       	movw	r30, r24
     410:	20 83       	st	Z, r18
}
     412:	0f 90       	pop	r0
     414:	0f 90       	pop	r0
     416:	0f 90       	pop	r0
     418:	0f 90       	pop	r0
     41a:	df 91       	pop	r29
     41c:	cf 91       	pop	r28
     41e:	ff 90       	pop	r15
     420:	ef 90       	pop	r14
     422:	df 90       	pop	r13
     424:	cf 90       	pop	r12
     426:	08 95       	ret

00000428 <actuator_setup>:
/*
 *  void actuator_setup()
 *  setup all the actuators
 */
void actuator_setup(void)
{
     428:	cf 93       	push	r28
     42a:	df 93       	push	r29
     42c:	cd b7       	in	r28, 0x3d	; 61
     42e:	de b7       	in	r29, 0x3e	; 62

}
     430:	df 91       	pop	r29
     432:	cf 91       	pop	r28
     434:	08 95       	ret

00000436 <ball_grabbers>:
 *	Parameters: 	unsigned char side 	- which side to control
 *					unsigned char state	- UP or DOWN state
 *	Description: 	controls the ball grabber servos through CAN communication with actuator board
 */
void ball_grabbers(unsigned char side, unsigned char state)
{
     436:	cf 93       	push	r28
     438:	df 93       	push	r29
     43a:	cd b7       	in	r28, 0x3d	; 61
     43c:	de b7       	in	r29, 0x3e	; 62
     43e:	68 97       	sbiw	r28, 0x18	; 24
     440:	0f b6       	in	r0, 0x3f	; 63
     442:	f8 94       	cli
     444:	de bf       	out	0x3e, r29	; 62
     446:	0f be       	out	0x3f, r0	; 63
     448:	cd bf       	out	0x3d, r28	; 61
     44a:	8f 8b       	std	Y+23, r24	; 0x17
     44c:	68 8f       	std	Y+24, r22	; 0x18
	// Side 	- LEFT or RIGHT
	// State 	- UP or DOWN

	uint8_t buffer[8];
	buffer[0] = 'A';		// indicating that I'm using
     44e:	81 e4       	ldi	r24, 0x41	; 65
     450:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = side;		// indicating which side
     452:	8f 89       	ldd	r24, Y+23	; 0x17
     454:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = state;		// indicating what state
     456:	88 8d       	ldd	r24, Y+24	; 0x18
     458:	89 8b       	std	Y+17, r24	; 0x11

	// send it off
	while(CAN_Write(buffer, DRIVER_LIFT_TX_IDENTIFICATOR))
     45a:	72 c0       	rjmp	.+228    	; 0x540 <ball_grabbers+0x10a>
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	a8 e4       	ldi	r26, 0x48	; 72
     462:	b2 e4       	ldi	r27, 0x42	; 66
     464:	89 83       	std	Y+1, r24	; 0x01
     466:	9a 83       	std	Y+2, r25	; 0x02
     468:	ab 83       	std	Y+3, r26	; 0x03
     46a:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     46c:	20 e0       	ldi	r18, 0x00	; 0
     46e:	30 e0       	ldi	r19, 0x00	; 0
     470:	4a e7       	ldi	r20, 0x7A	; 122
     472:	53 e4       	ldi	r21, 0x43	; 67
     474:	69 81       	ldd	r22, Y+1	; 0x01
     476:	7a 81       	ldd	r23, Y+2	; 0x02
     478:	8b 81       	ldd	r24, Y+3	; 0x03
     47a:	9c 81       	ldd	r25, Y+4	; 0x04
     47c:	0e 94 be 19 	call	0x337c	; 0x337c <__mulsf3>
     480:	dc 01       	movw	r26, r24
     482:	cb 01       	movw	r24, r22
     484:	8d 83       	std	Y+5, r24	; 0x05
     486:	9e 83       	std	Y+6, r25	; 0x06
     488:	af 83       	std	Y+7, r26	; 0x07
     48a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     48c:	20 e0       	ldi	r18, 0x00	; 0
     48e:	30 e0       	ldi	r19, 0x00	; 0
     490:	40 e8       	ldi	r20, 0x80	; 128
     492:	5f e3       	ldi	r21, 0x3F	; 63
     494:	6d 81       	ldd	r22, Y+5	; 0x05
     496:	7e 81       	ldd	r23, Y+6	; 0x06
     498:	8f 81       	ldd	r24, Y+7	; 0x07
     49a:	98 85       	ldd	r25, Y+8	; 0x08
     49c:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__cmpsf2>
     4a0:	88 23       	and	r24, r24
     4a2:	2c f4       	brge	.+10     	; 0x4ae <ball_grabbers+0x78>
		__ticks = 1;
     4a4:	81 e0       	ldi	r24, 0x01	; 1
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	9a 87       	std	Y+10, r25	; 0x0a
     4aa:	89 87       	std	Y+9, r24	; 0x09
     4ac:	3f c0       	rjmp	.+126    	; 0x52c <ball_grabbers+0xf6>
	else if (__tmp > 65535)
     4ae:	20 e0       	ldi	r18, 0x00	; 0
     4b0:	3f ef       	ldi	r19, 0xFF	; 255
     4b2:	4f e7       	ldi	r20, 0x7F	; 127
     4b4:	57 e4       	ldi	r21, 0x47	; 71
     4b6:	6d 81       	ldd	r22, Y+5	; 0x05
     4b8:	7e 81       	ldd	r23, Y+6	; 0x06
     4ba:	8f 81       	ldd	r24, Y+7	; 0x07
     4bc:	98 85       	ldd	r25, Y+8	; 0x08
     4be:	0e 94 b9 19 	call	0x3372	; 0x3372 <__gesf2>
     4c2:	18 16       	cp	r1, r24
     4c4:	4c f5       	brge	.+82     	; 0x518 <ball_grabbers+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4c6:	20 e0       	ldi	r18, 0x00	; 0
     4c8:	30 e0       	ldi	r19, 0x00	; 0
     4ca:	40 e2       	ldi	r20, 0x20	; 32
     4cc:	51 e4       	ldi	r21, 0x41	; 65
     4ce:	69 81       	ldd	r22, Y+1	; 0x01
     4d0:	7a 81       	ldd	r23, Y+2	; 0x02
     4d2:	8b 81       	ldd	r24, Y+3	; 0x03
     4d4:	9c 81       	ldd	r25, Y+4	; 0x04
     4d6:	0e 94 be 19 	call	0x337c	; 0x337c <__mulsf3>
     4da:	dc 01       	movw	r26, r24
     4dc:	cb 01       	movw	r24, r22
     4de:	bc 01       	movw	r22, r24
     4e0:	cd 01       	movw	r24, r26
     4e2:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <__fixunssfsi>
     4e6:	dc 01       	movw	r26, r24
     4e8:	cb 01       	movw	r24, r22
     4ea:	9a 87       	std	Y+10, r25	; 0x0a
     4ec:	89 87       	std	Y+9, r24	; 0x09
     4ee:	0f c0       	rjmp	.+30     	; 0x50e <ball_grabbers+0xd8>
     4f0:	89 e1       	ldi	r24, 0x19	; 25
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	9c 87       	std	Y+12, r25	; 0x0c
     4f6:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     4f8:	8b 85       	ldd	r24, Y+11	; 0x0b
     4fa:	9c 85       	ldd	r25, Y+12	; 0x0c
     4fc:	01 97       	sbiw	r24, 0x01	; 1
     4fe:	f1 f7       	brne	.-4      	; 0x4fc <ball_grabbers+0xc6>
     500:	9c 87       	std	Y+12, r25	; 0x0c
     502:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     504:	89 85       	ldd	r24, Y+9	; 0x09
     506:	9a 85       	ldd	r25, Y+10	; 0x0a
     508:	01 97       	sbiw	r24, 0x01	; 1
     50a:	9a 87       	std	Y+10, r25	; 0x0a
     50c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     50e:	89 85       	ldd	r24, Y+9	; 0x09
     510:	9a 85       	ldd	r25, Y+10	; 0x0a
     512:	89 2b       	or	r24, r25
     514:	69 f7       	brne	.-38     	; 0x4f0 <ball_grabbers+0xba>
     516:	14 c0       	rjmp	.+40     	; 0x540 <ball_grabbers+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     518:	6d 81       	ldd	r22, Y+5	; 0x05
     51a:	7e 81       	ldd	r23, Y+6	; 0x06
     51c:	8f 81       	ldd	r24, Y+7	; 0x07
     51e:	98 85       	ldd	r25, Y+8	; 0x08
     520:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <__fixunssfsi>
     524:	dc 01       	movw	r26, r24
     526:	cb 01       	movw	r24, r22
     528:	9a 87       	std	Y+10, r25	; 0x0a
     52a:	89 87       	std	Y+9, r24	; 0x09
     52c:	89 85       	ldd	r24, Y+9	; 0x09
     52e:	9a 85       	ldd	r25, Y+10	; 0x0a
     530:	9e 87       	std	Y+14, r25	; 0x0e
     532:	8d 87       	std	Y+13, r24	; 0x0d
     534:	8d 85       	ldd	r24, Y+13	; 0x0d
     536:	9e 85       	ldd	r25, Y+14	; 0x0e
     538:	01 97       	sbiw	r24, 0x01	; 1
     53a:	f1 f7       	brne	.-4      	; 0x538 <ball_grabbers+0x102>
     53c:	9e 87       	std	Y+14, r25	; 0x0e
     53e:	8d 87       	std	Y+13, r24	; 0x0d
     540:	ce 01       	movw	r24, r28
     542:	0f 96       	adiw	r24, 0x0f	; 15
     544:	64 ed       	ldi	r22, 0xD4	; 212
     546:	0e 94 33 07 	call	0xe66	; 0xe66 <CAN_Write>
     54a:	88 23       	and	r24, r24
     54c:	09 f0       	breq	.+2      	; 0x550 <ball_grabbers+0x11a>
     54e:	86 cf       	rjmp	.-244    	; 0x45c <ball_grabbers+0x26>
		_delay_ms(50);
}
     550:	68 96       	adiw	r28, 0x18	; 24
     552:	0f b6       	in	r0, 0x3f	; 63
     554:	f8 94       	cli
     556:	de bf       	out	0x3e, r29	; 62
     558:	0f be       	out	0x3f, r0	; 63
     55a:	cd bf       	out	0x3d, r28	; 61
     55c:	df 91       	pop	r29
     55e:	cf 91       	pop	r28
     560:	08 95       	ret

00000562 <dispenser>:
 *	Parameters: 	unsigned char side 	- which side to control
 *					unsigned char state	- UP or DOWN state
 *	Description: 	controls the dispenser servos through CAN communication with actuator board
 */
void dispenser(unsigned char side, unsigned char state)
{
     562:	cf 93       	push	r28
     564:	df 93       	push	r29
     566:	cd b7       	in	r28, 0x3d	; 61
     568:	de b7       	in	r29, 0x3e	; 62
     56a:	68 97       	sbiw	r28, 0x18	; 24
     56c:	0f b6       	in	r0, 0x3f	; 63
     56e:	f8 94       	cli
     570:	de bf       	out	0x3e, r29	; 62
     572:	0f be       	out	0x3f, r0	; 63
     574:	cd bf       	out	0x3d, r28	; 61
     576:	8f 8b       	std	Y+23, r24	; 0x17
     578:	68 8f       	std	Y+24, r22	; 0x18
	// Side 	- LEFT or RIGHT
	// State 	- UP or DOWN

	uint8_t buffer[8];
	buffer[0] = 'B';		// indicating that I'm using
     57a:	82 e4       	ldi	r24, 0x42	; 66
     57c:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = side;		// indicating which side
     57e:	8f 89       	ldd	r24, Y+23	; 0x17
     580:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = state;		// indicating what state
     582:	88 8d       	ldd	r24, Y+24	; 0x18
     584:	89 8b       	std	Y+17, r24	; 0x11

	// send it off
	while(CAN_Write(buffer, DRIVER_LIFT_TX_IDENTIFICATOR))
     586:	72 c0       	rjmp	.+228    	; 0x66c <dispenser+0x10a>
     588:	80 e0       	ldi	r24, 0x00	; 0
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	a8 e4       	ldi	r26, 0x48	; 72
     58e:	b2 e4       	ldi	r27, 0x42	; 66
     590:	89 83       	std	Y+1, r24	; 0x01
     592:	9a 83       	std	Y+2, r25	; 0x02
     594:	ab 83       	std	Y+3, r26	; 0x03
     596:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	30 e0       	ldi	r19, 0x00	; 0
     59c:	4a e7       	ldi	r20, 0x7A	; 122
     59e:	53 e4       	ldi	r21, 0x43	; 67
     5a0:	69 81       	ldd	r22, Y+1	; 0x01
     5a2:	7a 81       	ldd	r23, Y+2	; 0x02
     5a4:	8b 81       	ldd	r24, Y+3	; 0x03
     5a6:	9c 81       	ldd	r25, Y+4	; 0x04
     5a8:	0e 94 be 19 	call	0x337c	; 0x337c <__mulsf3>
     5ac:	dc 01       	movw	r26, r24
     5ae:	cb 01       	movw	r24, r22
     5b0:	8d 83       	std	Y+5, r24	; 0x05
     5b2:	9e 83       	std	Y+6, r25	; 0x06
     5b4:	af 83       	std	Y+7, r26	; 0x07
     5b6:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     5b8:	20 e0       	ldi	r18, 0x00	; 0
     5ba:	30 e0       	ldi	r19, 0x00	; 0
     5bc:	40 e8       	ldi	r20, 0x80	; 128
     5be:	5f e3       	ldi	r21, 0x3F	; 63
     5c0:	6d 81       	ldd	r22, Y+5	; 0x05
     5c2:	7e 81       	ldd	r23, Y+6	; 0x06
     5c4:	8f 81       	ldd	r24, Y+7	; 0x07
     5c6:	98 85       	ldd	r25, Y+8	; 0x08
     5c8:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__cmpsf2>
     5cc:	88 23       	and	r24, r24
     5ce:	2c f4       	brge	.+10     	; 0x5da <dispenser+0x78>
		__ticks = 1;
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	9a 87       	std	Y+10, r25	; 0x0a
     5d6:	89 87       	std	Y+9, r24	; 0x09
     5d8:	3f c0       	rjmp	.+126    	; 0x658 <dispenser+0xf6>
	else if (__tmp > 65535)
     5da:	20 e0       	ldi	r18, 0x00	; 0
     5dc:	3f ef       	ldi	r19, 0xFF	; 255
     5de:	4f e7       	ldi	r20, 0x7F	; 127
     5e0:	57 e4       	ldi	r21, 0x47	; 71
     5e2:	6d 81       	ldd	r22, Y+5	; 0x05
     5e4:	7e 81       	ldd	r23, Y+6	; 0x06
     5e6:	8f 81       	ldd	r24, Y+7	; 0x07
     5e8:	98 85       	ldd	r25, Y+8	; 0x08
     5ea:	0e 94 b9 19 	call	0x3372	; 0x3372 <__gesf2>
     5ee:	18 16       	cp	r1, r24
     5f0:	4c f5       	brge	.+82     	; 0x644 <dispenser+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5f2:	20 e0       	ldi	r18, 0x00	; 0
     5f4:	30 e0       	ldi	r19, 0x00	; 0
     5f6:	40 e2       	ldi	r20, 0x20	; 32
     5f8:	51 e4       	ldi	r21, 0x41	; 65
     5fa:	69 81       	ldd	r22, Y+1	; 0x01
     5fc:	7a 81       	ldd	r23, Y+2	; 0x02
     5fe:	8b 81       	ldd	r24, Y+3	; 0x03
     600:	9c 81       	ldd	r25, Y+4	; 0x04
     602:	0e 94 be 19 	call	0x337c	; 0x337c <__mulsf3>
     606:	dc 01       	movw	r26, r24
     608:	cb 01       	movw	r24, r22
     60a:	bc 01       	movw	r22, r24
     60c:	cd 01       	movw	r24, r26
     60e:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <__fixunssfsi>
     612:	dc 01       	movw	r26, r24
     614:	cb 01       	movw	r24, r22
     616:	9a 87       	std	Y+10, r25	; 0x0a
     618:	89 87       	std	Y+9, r24	; 0x09
     61a:	0f c0       	rjmp	.+30     	; 0x63a <dispenser+0xd8>
     61c:	89 e1       	ldi	r24, 0x19	; 25
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	9c 87       	std	Y+12, r25	; 0x0c
     622:	8b 87       	std	Y+11, r24	; 0x0b
     624:	8b 85       	ldd	r24, Y+11	; 0x0b
     626:	9c 85       	ldd	r25, Y+12	; 0x0c
     628:	01 97       	sbiw	r24, 0x01	; 1
     62a:	f1 f7       	brne	.-4      	; 0x628 <dispenser+0xc6>
     62c:	9c 87       	std	Y+12, r25	; 0x0c
     62e:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     630:	89 85       	ldd	r24, Y+9	; 0x09
     632:	9a 85       	ldd	r25, Y+10	; 0x0a
     634:	01 97       	sbiw	r24, 0x01	; 1
     636:	9a 87       	std	Y+10, r25	; 0x0a
     638:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     63a:	89 85       	ldd	r24, Y+9	; 0x09
     63c:	9a 85       	ldd	r25, Y+10	; 0x0a
     63e:	89 2b       	or	r24, r25
     640:	69 f7       	brne	.-38     	; 0x61c <dispenser+0xba>
     642:	14 c0       	rjmp	.+40     	; 0x66c <dispenser+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     644:	6d 81       	ldd	r22, Y+5	; 0x05
     646:	7e 81       	ldd	r23, Y+6	; 0x06
     648:	8f 81       	ldd	r24, Y+7	; 0x07
     64a:	98 85       	ldd	r25, Y+8	; 0x08
     64c:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <__fixunssfsi>
     650:	dc 01       	movw	r26, r24
     652:	cb 01       	movw	r24, r22
     654:	9a 87       	std	Y+10, r25	; 0x0a
     656:	89 87       	std	Y+9, r24	; 0x09
     658:	89 85       	ldd	r24, Y+9	; 0x09
     65a:	9a 85       	ldd	r25, Y+10	; 0x0a
     65c:	9e 87       	std	Y+14, r25	; 0x0e
     65e:	8d 87       	std	Y+13, r24	; 0x0d
     660:	8d 85       	ldd	r24, Y+13	; 0x0d
     662:	9e 85       	ldd	r25, Y+14	; 0x0e
     664:	01 97       	sbiw	r24, 0x01	; 1
     666:	f1 f7       	brne	.-4      	; 0x664 <dispenser+0x102>
     668:	9e 87       	std	Y+14, r25	; 0x0e
     66a:	8d 87       	std	Y+13, r24	; 0x0d
     66c:	ce 01       	movw	r24, r28
     66e:	0f 96       	adiw	r24, 0x0f	; 15
     670:	64 ed       	ldi	r22, 0xD4	; 212
     672:	0e 94 33 07 	call	0xe66	; 0xe66 <CAN_Write>
     676:	88 23       	and	r24, r24
     678:	09 f0       	breq	.+2      	; 0x67c <dispenser+0x11a>
     67a:	86 cf       	rjmp	.-244    	; 0x588 <dispenser+0x26>
		_delay_ms(50);
}
     67c:	68 96       	adiw	r28, 0x18	; 24
     67e:	0f b6       	in	r0, 0x3f	; 63
     680:	f8 94       	cli
     682:	de bf       	out	0x3e, r29	; 62
     684:	0f be       	out	0x3f, r0	; 63
     686:	cd bf       	out	0x3d, r28	; 61
     688:	df 91       	pop	r29
     68a:	cf 91       	pop	r28
     68c:	08 95       	ret

0000068e <diafram>:
 *	Parameters: 	unsigned char side 	- which side to control
 *					unsigned char state	- ON or OFF state
 *	Description: 	controls the diaframs through CAN communication with actuator board
 */
void diafram(unsigned char side, unsigned char state)
{
     68e:	cf 93       	push	r28
     690:	df 93       	push	r29
     692:	cd b7       	in	r28, 0x3d	; 61
     694:	de b7       	in	r29, 0x3e	; 62
     696:	68 97       	sbiw	r28, 0x18	; 24
     698:	0f b6       	in	r0, 0x3f	; 63
     69a:	f8 94       	cli
     69c:	de bf       	out	0x3e, r29	; 62
     69e:	0f be       	out	0x3f, r0	; 63
     6a0:	cd bf       	out	0x3d, r28	; 61
     6a2:	8f 8b       	std	Y+23, r24	; 0x17
     6a4:	68 8f       	std	Y+24, r22	; 0x18
	// Side 	- LEFT or RIGHT
	// State 	- ON or OFF

	uint8_t buffer[8];
	buffer[0] = 'C';		// indicating that I'm using diafram
     6a6:	83 e4       	ldi	r24, 0x43	; 67
     6a8:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = side;		// indicating which side
     6aa:	8f 89       	ldd	r24, Y+23	; 0x17
     6ac:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = state;		// indicating what state
     6ae:	88 8d       	ldd	r24, Y+24	; 0x18
     6b0:	89 8b       	std	Y+17, r24	; 0x11

	// send it off
	while(CAN_Write(buffer, DRIVER_LIFT_TX_IDENTIFICATOR))
     6b2:	72 c0       	rjmp	.+228    	; 0x798 <diafram+0x10a>
     6b4:	80 e0       	ldi	r24, 0x00	; 0
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	a8 e4       	ldi	r26, 0x48	; 72
     6ba:	b2 e4       	ldi	r27, 0x42	; 66
     6bc:	89 83       	std	Y+1, r24	; 0x01
     6be:	9a 83       	std	Y+2, r25	; 0x02
     6c0:	ab 83       	std	Y+3, r26	; 0x03
     6c2:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     6c4:	20 e0       	ldi	r18, 0x00	; 0
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	4a e7       	ldi	r20, 0x7A	; 122
     6ca:	53 e4       	ldi	r21, 0x43	; 67
     6cc:	69 81       	ldd	r22, Y+1	; 0x01
     6ce:	7a 81       	ldd	r23, Y+2	; 0x02
     6d0:	8b 81       	ldd	r24, Y+3	; 0x03
     6d2:	9c 81       	ldd	r25, Y+4	; 0x04
     6d4:	0e 94 be 19 	call	0x337c	; 0x337c <__mulsf3>
     6d8:	dc 01       	movw	r26, r24
     6da:	cb 01       	movw	r24, r22
     6dc:	8d 83       	std	Y+5, r24	; 0x05
     6de:	9e 83       	std	Y+6, r25	; 0x06
     6e0:	af 83       	std	Y+7, r26	; 0x07
     6e2:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     6e4:	20 e0       	ldi	r18, 0x00	; 0
     6e6:	30 e0       	ldi	r19, 0x00	; 0
     6e8:	40 e8       	ldi	r20, 0x80	; 128
     6ea:	5f e3       	ldi	r21, 0x3F	; 63
     6ec:	6d 81       	ldd	r22, Y+5	; 0x05
     6ee:	7e 81       	ldd	r23, Y+6	; 0x06
     6f0:	8f 81       	ldd	r24, Y+7	; 0x07
     6f2:	98 85       	ldd	r25, Y+8	; 0x08
     6f4:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__cmpsf2>
     6f8:	88 23       	and	r24, r24
     6fa:	2c f4       	brge	.+10     	; 0x706 <diafram+0x78>
		__ticks = 1;
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	9a 87       	std	Y+10, r25	; 0x0a
     702:	89 87       	std	Y+9, r24	; 0x09
     704:	3f c0       	rjmp	.+126    	; 0x784 <diafram+0xf6>
	else if (__tmp > 65535)
     706:	20 e0       	ldi	r18, 0x00	; 0
     708:	3f ef       	ldi	r19, 0xFF	; 255
     70a:	4f e7       	ldi	r20, 0x7F	; 127
     70c:	57 e4       	ldi	r21, 0x47	; 71
     70e:	6d 81       	ldd	r22, Y+5	; 0x05
     710:	7e 81       	ldd	r23, Y+6	; 0x06
     712:	8f 81       	ldd	r24, Y+7	; 0x07
     714:	98 85       	ldd	r25, Y+8	; 0x08
     716:	0e 94 b9 19 	call	0x3372	; 0x3372 <__gesf2>
     71a:	18 16       	cp	r1, r24
     71c:	4c f5       	brge	.+82     	; 0x770 <diafram+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     71e:	20 e0       	ldi	r18, 0x00	; 0
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	40 e2       	ldi	r20, 0x20	; 32
     724:	51 e4       	ldi	r21, 0x41	; 65
     726:	69 81       	ldd	r22, Y+1	; 0x01
     728:	7a 81       	ldd	r23, Y+2	; 0x02
     72a:	8b 81       	ldd	r24, Y+3	; 0x03
     72c:	9c 81       	ldd	r25, Y+4	; 0x04
     72e:	0e 94 be 19 	call	0x337c	; 0x337c <__mulsf3>
     732:	dc 01       	movw	r26, r24
     734:	cb 01       	movw	r24, r22
     736:	bc 01       	movw	r22, r24
     738:	cd 01       	movw	r24, r26
     73a:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <__fixunssfsi>
     73e:	dc 01       	movw	r26, r24
     740:	cb 01       	movw	r24, r22
     742:	9a 87       	std	Y+10, r25	; 0x0a
     744:	89 87       	std	Y+9, r24	; 0x09
     746:	0f c0       	rjmp	.+30     	; 0x766 <diafram+0xd8>
     748:	89 e1       	ldi	r24, 0x19	; 25
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	9c 87       	std	Y+12, r25	; 0x0c
     74e:	8b 87       	std	Y+11, r24	; 0x0b
     750:	8b 85       	ldd	r24, Y+11	; 0x0b
     752:	9c 85       	ldd	r25, Y+12	; 0x0c
     754:	01 97       	sbiw	r24, 0x01	; 1
     756:	f1 f7       	brne	.-4      	; 0x754 <diafram+0xc6>
     758:	9c 87       	std	Y+12, r25	; 0x0c
     75a:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     75c:	89 85       	ldd	r24, Y+9	; 0x09
     75e:	9a 85       	ldd	r25, Y+10	; 0x0a
     760:	01 97       	sbiw	r24, 0x01	; 1
     762:	9a 87       	std	Y+10, r25	; 0x0a
     764:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     766:	89 85       	ldd	r24, Y+9	; 0x09
     768:	9a 85       	ldd	r25, Y+10	; 0x0a
     76a:	89 2b       	or	r24, r25
     76c:	69 f7       	brne	.-38     	; 0x748 <diafram+0xba>
     76e:	14 c0       	rjmp	.+40     	; 0x798 <diafram+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     770:	6d 81       	ldd	r22, Y+5	; 0x05
     772:	7e 81       	ldd	r23, Y+6	; 0x06
     774:	8f 81       	ldd	r24, Y+7	; 0x07
     776:	98 85       	ldd	r25, Y+8	; 0x08
     778:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <__fixunssfsi>
     77c:	dc 01       	movw	r26, r24
     77e:	cb 01       	movw	r24, r22
     780:	9a 87       	std	Y+10, r25	; 0x0a
     782:	89 87       	std	Y+9, r24	; 0x09
     784:	89 85       	ldd	r24, Y+9	; 0x09
     786:	9a 85       	ldd	r25, Y+10	; 0x0a
     788:	9e 87       	std	Y+14, r25	; 0x0e
     78a:	8d 87       	std	Y+13, r24	; 0x0d
     78c:	8d 85       	ldd	r24, Y+13	; 0x0d
     78e:	9e 85       	ldd	r25, Y+14	; 0x0e
     790:	01 97       	sbiw	r24, 0x01	; 1
     792:	f1 f7       	brne	.-4      	; 0x790 <diafram+0x102>
     794:	9e 87       	std	Y+14, r25	; 0x0e
     796:	8d 87       	std	Y+13, r24	; 0x0d
     798:	ce 01       	movw	r24, r28
     79a:	0f 96       	adiw	r24, 0x0f	; 15
     79c:	64 ed       	ldi	r22, 0xD4	; 212
     79e:	0e 94 33 07 	call	0xe66	; 0xe66 <CAN_Write>
     7a2:	88 23       	and	r24, r24
     7a4:	09 f0       	breq	.+2      	; 0x7a8 <diafram+0x11a>
     7a6:	86 cf       	rjmp	.-244    	; 0x6b4 <diafram+0x26>
		_delay_ms(50);
}
     7a8:	68 96       	adiw	r28, 0x18	; 24
     7aa:	0f b6       	in	r0, 0x3f	; 63
     7ac:	f8 94       	cli
     7ae:	de bf       	out	0x3e, r29	; 62
     7b0:	0f be       	out	0x3f, r0	; 63
     7b2:	cd bf       	out	0x3d, r28	; 61
     7b4:	df 91       	pop	r29
     7b6:	cf 91       	pop	r28
     7b8:	08 95       	ret

000007ba <blueside>:
	{{100,0},LOW_SPEED,FORWARD,NULL}
};


void blueside(void)
{
     7ba:	cf 93       	push	r28
     7bc:	df 93       	push	r29
     7be:	cd b7       	in	r28, 0x3d	; 61
     7c0:	de b7       	in	r29, 0x3e	; 62
     7c2:	2b 97       	sbiw	r28, 0x0b	; 11
     7c4:	0f b6       	in	r0, 0x3f	; 63
     7c6:	f8 94       	cli
     7c8:	de bf       	out	0x3e, r29	; 62
     7ca:	0f be       	out	0x3f, r0	; 63
     7cc:	cd bf       	out	0x3d, r28	; 61
	struct odometry_position starting_position;
	uint8_t current_position = 0;
     7ce:	19 82       	std	Y+1, r1	; 0x01
	uint8_t next_position = 0;
     7d0:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t odometry_status;
	int8_t active_state = ROBOT_STATE_TACTIC_SIDE;
     7d2:	81 e0       	ldi	r24, 0x01	; 1
     7d4:	8b 83       	std	Y+3, r24	; 0x03

	starting_position.x		= 0;
     7d6:	1e 82       	std	Y+6, r1	; 0x06
     7d8:	1d 82       	std	Y+5, r1	; 0x05
	starting_position.y		= 0;
     7da:	18 86       	std	Y+8, r1	; 0x08
     7dc:	1f 82       	std	Y+7, r1	; 0x07
	starting_position.angle = 0;
     7de:	1a 86       	std	Y+10, r1	; 0x0a
     7e0:	19 86       	std	Y+9, r1	; 0x09

	odometry_set_position(&starting_position);
     7e2:	ce 01       	movw	r24, r28
     7e4:	05 96       	adiw	r24, 0x05	; 5
     7e6:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <odometry_set_position>

	while(1)
	{
		switch(active_state)
     7ea:	8b 81       	ldd	r24, Y+3	; 0x03
     7ec:	08 2e       	mov	r0, r24
     7ee:	00 0c       	add	r0, r0
     7f0:	99 0b       	sbc	r25, r25
     7f2:	81 30       	cpi	r24, 0x01	; 1
     7f4:	91 05       	cpc	r25, r1
     7f6:	21 f0       	breq	.+8      	; 0x800 <blueside+0x46>
     7f8:	02 97       	sbiw	r24, 0x02	; 2
     7fa:	09 f4       	brne	.+2      	; 0x7fe <blueside+0x44>
     7fc:	43 c0       	rjmp	.+134    	; 0x884 <blueside+0xca>
     7fe:	84 c0       	rjmp	.+264    	; 0x908 <blueside+0x14e>
		{
			case ROBOT_STATE_TACTIC_SIDE:
				for(current_position = next_position;current_position < TACTIC_SIDE_POSITION_COUNT; current_position++)
     800:	8a 81       	ldd	r24, Y+2	; 0x02
     802:	89 83       	std	Y+1, r24	; 0x01
     804:	3c c0       	rjmp	.+120    	; 0x87e <blueside+0xc4>
				{
					odometry_status = odometry_move_to_position(&(blue_tactic_side_positions[current_position].point), blue_tactic_side_positions[current_position].speed,
     806:	40 e0       	ldi	r20, 0x00	; 0
     808:	50 e0       	ldi	r21, 0x00	; 0
					blue_tactic_side_positions[current_position].direction,blue_tactic_side_positions[current_position].callback);
     80a:	89 81       	ldd	r24, Y+1	; 0x01
     80c:	28 2f       	mov	r18, r24
     80e:	30 e0       	ldi	r19, 0x00	; 0
     810:	6b e0       	ldi	r22, 0x0B	; 11
     812:	62 9f       	mul	r22, r18
     814:	c0 01       	movw	r24, r0
     816:	63 9f       	mul	r22, r19
     818:	90 0d       	add	r25, r0
     81a:	11 24       	eor	r1, r1
     81c:	87 5e       	subi	r24, 0xE7	; 231
     81e:	9e 4f       	sbci	r25, 0xFE	; 254
     820:	dc 01       	movw	r26, r24
     822:	8c 91       	ld	r24, X
		switch(active_state)
		{
			case ROBOT_STATE_TACTIC_SIDE:
				for(current_position = next_position;current_position < TACTIC_SIDE_POSITION_COUNT; current_position++)
				{
					odometry_status = odometry_move_to_position(&(blue_tactic_side_positions[current_position].point), blue_tactic_side_positions[current_position].speed,
     824:	e8 2f       	mov	r30, r24
     826:	89 81       	ldd	r24, Y+1	; 0x01
     828:	28 2f       	mov	r18, r24
     82a:	30 e0       	ldi	r19, 0x00	; 0
     82c:	6b e0       	ldi	r22, 0x0B	; 11
     82e:	62 9f       	mul	r22, r18
     830:	c0 01       	movw	r24, r0
     832:	63 9f       	mul	r22, r19
     834:	90 0d       	add	r25, r0
     836:	11 24       	eor	r1, r1
     838:	88 5e       	subi	r24, 0xE8	; 232
     83a:	9e 4f       	sbci	r25, 0xFE	; 254
     83c:	dc 01       	movw	r26, r24
     83e:	7c 91       	ld	r23, X
     840:	89 81       	ldd	r24, Y+1	; 0x01
     842:	28 2f       	mov	r18, r24
     844:	30 e0       	ldi	r19, 0x00	; 0
     846:	6b e0       	ldi	r22, 0x0B	; 11
     848:	62 9f       	mul	r22, r18
     84a:	c0 01       	movw	r24, r0
     84c:	63 9f       	mul	r22, r19
     84e:	90 0d       	add	r25, r0
     850:	11 24       	eor	r1, r1
     852:	8f 5e       	subi	r24, 0xEF	; 239
     854:	9e 4f       	sbci	r25, 0xFE	; 254
     856:	9a 01       	movw	r18, r20
     858:	4e 2f       	mov	r20, r30
     85a:	67 2f       	mov	r22, r23
     85c:	0e 94 75 0d 	call	0x1aea	; 0x1aea <odometry_move_to_position>
     860:	8c 83       	std	Y+4, r24	; 0x04
					blue_tactic_side_positions[current_position].direction,blue_tactic_side_positions[current_position].callback);

					if(odometry_status == ODOMETRY_FAIL)
     862:	8c 81       	ldd	r24, Y+4	; 0x04
     864:	81 30       	cpi	r24, 0x01	; 1
     866:	09 f4       	brne	.+2      	; 0x86a <blueside+0xb0>
					{
						break;
     868:	0d c0       	rjmp	.+26     	; 0x884 <blueside+0xca>
					}
					if(current_position == 1){
     86a:	89 81       	ldd	r24, Y+1	; 0x01
     86c:	81 30       	cpi	r24, 0x01	; 1
     86e:	21 f4       	brne	.+8      	; 0x878 <blueside+0xbe>
						odometry_stop(HARD_STOP);
     870:	83 e5       	ldi	r24, 0x53	; 83
     872:	0e 94 2d 0c 	call	0x185a	; 0x185a <odometry_stop>
						while(1);
     876:	ff cf       	rjmp	.-2      	; 0x876 <blueside+0xbc>
	while(1)
	{
		switch(active_state)
		{
			case ROBOT_STATE_TACTIC_SIDE:
				for(current_position = next_position;current_position < TACTIC_SIDE_POSITION_COUNT; current_position++)
     878:	89 81       	ldd	r24, Y+1	; 0x01
     87a:	8f 5f       	subi	r24, 0xFF	; 255
     87c:	89 83       	std	Y+1, r24	; 0x01
     87e:	89 81       	ldd	r24, Y+1	; 0x01
     880:	88 23       	and	r24, r24
     882:	09 f2       	breq	.-126    	; 0x806 <blueside+0x4c>
						while(1);
					}
				}//end for
				/* no break */
			case ROBOT_STATE_TACTIC_CENTER:
				for(current_position = next_position;current_position < TACTIC_CENTER_POSITION_COUNT; current_position++)
     884:	8a 81       	ldd	r24, Y+2	; 0x02
     886:	89 83       	std	Y+1, r24	; 0x01
     888:	3c c0       	rjmp	.+120    	; 0x902 <blueside+0x148>
				{
					odometry_status = odometry_move_to_position(&(blue_tactic_center_positions[current_position].point), blue_tactic_center_positions[current_position].speed,
     88a:	40 e0       	ldi	r20, 0x00	; 0
     88c:	50 e0       	ldi	r21, 0x00	; 0
					blue_tactic_center_positions[current_position].direction,blue_tactic_center_positions[current_position].callback);
     88e:	89 81       	ldd	r24, Y+1	; 0x01
     890:	28 2f       	mov	r18, r24
     892:	30 e0       	ldi	r19, 0x00	; 0
     894:	6b e0       	ldi	r22, 0x0B	; 11
     896:	62 9f       	mul	r22, r18
     898:	c0 01       	movw	r24, r0
     89a:	63 9f       	mul	r22, r19
     89c:	90 0d       	add	r25, r0
     89e:	11 24       	eor	r1, r1
     8a0:	8c 5d       	subi	r24, 0xDC	; 220
     8a2:	9e 4f       	sbci	r25, 0xFE	; 254
     8a4:	fc 01       	movw	r30, r24
     8a6:	80 81       	ld	r24, Z
				}//end for
				/* no break */
			case ROBOT_STATE_TACTIC_CENTER:
				for(current_position = next_position;current_position < TACTIC_CENTER_POSITION_COUNT; current_position++)
				{
					odometry_status = odometry_move_to_position(&(blue_tactic_center_positions[current_position].point), blue_tactic_center_positions[current_position].speed,
     8a8:	e8 2f       	mov	r30, r24
     8aa:	89 81       	ldd	r24, Y+1	; 0x01
     8ac:	28 2f       	mov	r18, r24
     8ae:	30 e0       	ldi	r19, 0x00	; 0
     8b0:	6b e0       	ldi	r22, 0x0B	; 11
     8b2:	62 9f       	mul	r22, r18
     8b4:	c0 01       	movw	r24, r0
     8b6:	63 9f       	mul	r22, r19
     8b8:	90 0d       	add	r25, r0
     8ba:	11 24       	eor	r1, r1
     8bc:	8d 5d       	subi	r24, 0xDD	; 221
     8be:	9e 4f       	sbci	r25, 0xFE	; 254
     8c0:	dc 01       	movw	r26, r24
     8c2:	7c 91       	ld	r23, X
     8c4:	89 81       	ldd	r24, Y+1	; 0x01
     8c6:	28 2f       	mov	r18, r24
     8c8:	30 e0       	ldi	r19, 0x00	; 0
     8ca:	6b e0       	ldi	r22, 0x0B	; 11
     8cc:	62 9f       	mul	r22, r18
     8ce:	c0 01       	movw	r24, r0
     8d0:	63 9f       	mul	r22, r19
     8d2:	90 0d       	add	r25, r0
     8d4:	11 24       	eor	r1, r1
     8d6:	84 5e       	subi	r24, 0xE4	; 228
     8d8:	9e 4f       	sbci	r25, 0xFE	; 254
     8da:	9a 01       	movw	r18, r20
     8dc:	4e 2f       	mov	r20, r30
     8de:	67 2f       	mov	r22, r23
     8e0:	0e 94 75 0d 	call	0x1aea	; 0x1aea <odometry_move_to_position>
     8e4:	8c 83       	std	Y+4, r24	; 0x04
					blue_tactic_center_positions[current_position].direction,blue_tactic_center_positions[current_position].callback);

					if(odometry_status == ODOMETRY_FAIL)
     8e6:	8c 81       	ldd	r24, Y+4	; 0x04
     8e8:	81 30       	cpi	r24, 0x01	; 1
     8ea:	09 f4       	brne	.+2      	; 0x8ee <blueside+0x134>
					{
						break;
     8ec:	0d c0       	rjmp	.+26     	; 0x908 <blueside+0x14e>
					}
					if(current_position == 1){
     8ee:	89 81       	ldd	r24, Y+1	; 0x01
     8f0:	81 30       	cpi	r24, 0x01	; 1
     8f2:	21 f4       	brne	.+8      	; 0x8fc <blueside+0x142>
						odometry_stop(HARD_STOP);
     8f4:	83 e5       	ldi	r24, 0x53	; 83
     8f6:	0e 94 2d 0c 	call	0x185a	; 0x185a <odometry_stop>
						while(1);
     8fa:	ff cf       	rjmp	.-2      	; 0x8fa <blueside+0x140>
						while(1);
					}
				}//end for
				/* no break */
			case ROBOT_STATE_TACTIC_CENTER:
				for(current_position = next_position;current_position < TACTIC_CENTER_POSITION_COUNT; current_position++)
     8fc:	89 81       	ldd	r24, Y+1	; 0x01
     8fe:	8f 5f       	subi	r24, 0xFF	; 255
     900:	89 83       	std	Y+1, r24	; 0x01
     902:	89 81       	ldd	r24, Y+1	; 0x01
     904:	88 23       	and	r24, r24
     906:	09 f2       	breq	.-126    	; 0x88a <blueside+0xd0>
						odometry_stop(HARD_STOP);
						while(1);
					}
				}//end for
		}//end switch
	}//end while
     908:	70 cf       	rjmp	.-288    	; 0x7ea <blueside+0x30>

0000090a <__vector_18>:
static volatile unsigned char rxCounter[10];
//volatile static long canTime;

// Interrupt Service Routine
ISR(CANIT_vect)
{
     90a:	1f 92       	push	r1
     90c:	0f 92       	push	r0
     90e:	00 90 5f 00 	lds	r0, 0x005F
     912:	0f 92       	push	r0
     914:	11 24       	eor	r1, r1
     916:	00 90 5b 00 	lds	r0, 0x005B
     91a:	0f 92       	push	r0
     91c:	2f 93       	push	r18
     91e:	3f 93       	push	r19
     920:	4f 93       	push	r20
     922:	5f 93       	push	r21
     924:	8f 93       	push	r24
     926:	9f 93       	push	r25
     928:	ef 93       	push	r30
     92a:	ff 93       	push	r31
     92c:	cf 93       	push	r28
     92e:	df 93       	push	r29
     930:	00 d0       	rcall	.+0      	; 0x932 <__vector_18+0x28>
     932:	00 d0       	rcall	.+0      	; 0x934 <__vector_18+0x2a>
     934:	cd b7       	in	r28, 0x3d	; 61
     936:	de b7       	in	r29, 0x3e	; 62
	unsigned char tempPage = CANPAGE;
     938:	8d ee       	ldi	r24, 0xED	; 237
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	fc 01       	movw	r30, r24
     93e:	80 81       	ld	r24, Z
     940:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     942:	19 82       	std	Y+1, r1	; 0x01
     944:	a4 c0       	rjmp	.+328    	; 0xa8e <__vector_18+0x184>
	{
		CANPAGE = ch << 4;
     946:	8d ee       	ldi	r24, 0xED	; 237
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	29 81       	ldd	r18, Y+1	; 0x01
     94c:	22 95       	swap	r18
     94e:	20 7f       	andi	r18, 0xF0	; 240
     950:	fc 01       	movw	r30, r24
     952:	20 83       	st	Z, r18

		// receive interrupt
		if( (CANSTMOB >> RXOK) & 0x01)
     954:	8e ee       	ldi	r24, 0xEE	; 238
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	fc 01       	movw	r30, r24
     95a:	80 81       	ld	r24, Z
     95c:	82 95       	swap	r24
     95e:	86 95       	lsr	r24
     960:	87 70       	andi	r24, 0x07	; 7
     962:	88 2f       	mov	r24, r24
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	81 70       	andi	r24, 0x01	; 1
     968:	99 27       	eor	r25, r25
     96a:	89 2b       	or	r24, r25
     96c:	09 f4       	brne	.+2      	; 0x970 <__vector_18+0x66>
     96e:	70 c0       	rjmp	.+224    	; 0xa50 <__vector_18+0x146>
		{
			// PRIJEMNI MOb- ovi uvek ostaju prijemni!
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
     970:	8f ee       	ldi	r24, 0xEF	; 239
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	20 e8       	ldi	r18, 0x80	; 128
     976:	fc 01       	movw	r30, r24
     978:	20 83       	st	Z, r18
			CANSTMOB &= ~(1 << RXOK); // resetujem flag
     97a:	8e ee       	ldi	r24, 0xEE	; 238
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	2e ee       	ldi	r18, 0xEE	; 238
     980:	30 e0       	ldi	r19, 0x00	; 0
     982:	f9 01       	movw	r30, r18
     984:	20 81       	ld	r18, Z
     986:	2f 7d       	andi	r18, 0xDF	; 223
     988:	fc 01       	movw	r30, r24
     98a:	20 83       	st	Z, r18

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);
     98c:	82 ef       	ldi	r24, 0xF2	; 242
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	fc 01       	movw	r30, r24
     992:	80 81       	ld	r24, Z
     994:	82 95       	swap	r24
     996:	86 95       	lsr	r24
     998:	87 70       	andi	r24, 0x07	; 7
     99a:	28 2f       	mov	r18, r24
     99c:	83 ef       	ldi	r24, 0xF3	; 243
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	fc 01       	movw	r30, r24
     9a2:	80 81       	ld	r24, Z
     9a4:	88 2f       	mov	r24, r24
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	88 0f       	add	r24, r24
     9aa:	99 1f       	adc	r25, r25
     9ac:	88 0f       	add	r24, r24
     9ae:	99 1f       	adc	r25, r25
     9b0:	88 0f       	add	r24, r24
     9b2:	99 1f       	adc	r25, r25
     9b4:	82 2b       	or	r24, r18
     9b6:	8c 83       	std	Y+4, r24	; 0x04

			for(i = 0; i < 8; ++i)
     9b8:	1a 82       	std	Y+2, r1	; 0x02
     9ba:	26 c0       	rjmp	.+76     	; 0xa08 <__vector_18+0xfe>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;
     9bc:	8c 81       	ldd	r24, Y+4	; 0x04
     9be:	88 2f       	mov	r24, r24
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	81 50       	subi	r24, 0x01	; 1
     9c4:	90 48       	sbci	r25, 0x80	; 128
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	82 5c       	subi	r24, 0xC2	; 194
     9cc:	9e 4f       	sbci	r25, 0xFE	; 254
     9ce:	fc 01       	movw	r30, r24
     9d0:	20 81       	ld	r18, Z
     9d2:	31 81       	ldd	r19, Z+1	; 0x01
     9d4:	8c 81       	ldd	r24, Y+4	; 0x04
     9d6:	88 2f       	mov	r24, r24
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	01 97       	sbiw	r24, 0x01	; 1
     9dc:	8e 5a       	subi	r24, 0xAE	; 174
     9de:	9e 4f       	sbci	r25, 0xFE	; 254
     9e0:	fc 01       	movw	r30, r24
     9e2:	80 81       	ld	r24, Z
     9e4:	48 2f       	mov	r20, r24
     9e6:	50 e0       	ldi	r21, 0x00	; 0
     9e8:	8a 81       	ldd	r24, Y+2	; 0x02
     9ea:	88 2f       	mov	r24, r24
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	84 0f       	add	r24, r20
     9f0:	95 1f       	adc	r25, r21
     9f2:	82 0f       	add	r24, r18
     9f4:	93 1f       	adc	r25, r19
     9f6:	2a ef       	ldi	r18, 0xFA	; 250
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	f9 01       	movw	r30, r18
     9fc:	20 81       	ld	r18, Z
     9fe:	fc 01       	movw	r30, r24
     a00:	20 83       	st	Z, r18
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
			CANSTMOB &= ~(1 << RXOK); // resetujem flag

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);

			for(i = 0; i < 8; ++i)
     a02:	8a 81       	ldd	r24, Y+2	; 0x02
     a04:	8f 5f       	subi	r24, 0xFF	; 255
     a06:	8a 83       	std	Y+2, r24	; 0x02
     a08:	8a 81       	ldd	r24, Y+2	; 0x02
     a0a:	88 30       	cpi	r24, 0x08	; 8
     a0c:	b8 f2       	brcs	.-82     	; 0x9bc <__vector_18+0xb2>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;

			if(++(*(rxWrIndex + ide - 1)) == RX_BUFFER_SIZE)
     a0e:	8c 81       	ldd	r24, Y+4	; 0x04
     a10:	88 2f       	mov	r24, r24
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	01 97       	sbiw	r24, 0x01	; 1
     a16:	8e 5a       	subi	r24, 0xAE	; 174
     a18:	9e 4f       	sbci	r25, 0xFE	; 254
     a1a:	fc 01       	movw	r30, r24
     a1c:	20 81       	ld	r18, Z
     a1e:	2f 5f       	subi	r18, 0xFF	; 255
     a20:	fc 01       	movw	r30, r24
     a22:	20 83       	st	Z, r18
     a24:	25 30       	cpi	r18, 0x05	; 5
     a26:	41 f4       	brne	.+16     	; 0xa38 <__vector_18+0x12e>
				*(rxWrIndex + ide - 1) = 0;
     a28:	8c 81       	ldd	r24, Y+4	; 0x04
     a2a:	88 2f       	mov	r24, r24
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	01 97       	sbiw	r24, 0x01	; 1
     a30:	8e 5a       	subi	r24, 0xAE	; 174
     a32:	9e 4f       	sbci	r25, 0xFE	; 254
     a34:	fc 01       	movw	r30, r24
     a36:	10 82       	st	Z, r1

			(*(rxCounter + ide - 1))++;
     a38:	8c 81       	ldd	r24, Y+4	; 0x04
     a3a:	88 2f       	mov	r24, r24
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	01 97       	sbiw	r24, 0x01	; 1
     a40:	8a 59       	subi	r24, 0x9A	; 154
     a42:	9e 4f       	sbci	r25, 0xFE	; 254
     a44:	fc 01       	movw	r30, r24
     a46:	20 81       	ld	r18, Z
     a48:	2f 5f       	subi	r18, 0xFF	; 255
     a4a:	fc 01       	movw	r30, r24
     a4c:	20 83       	st	Z, r18

			break;
     a4e:	23 c0       	rjmp	.+70     	; 0xa96 <__vector_18+0x18c>
		}

		//transmit interrupt
		if( (CANSTMOB >> TXOK) & 0x01)
     a50:	8e ee       	ldi	r24, 0xEE	; 238
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	fc 01       	movw	r30, r24
     a56:	80 81       	ld	r24, Z
     a58:	82 95       	swap	r24
     a5a:	86 95       	lsr	r24
     a5c:	86 95       	lsr	r24
     a5e:	83 70       	andi	r24, 0x03	; 3
     a60:	88 2f       	mov	r24, r24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	81 70       	andi	r24, 0x01	; 1
     a66:	99 27       	eor	r25, r25
     a68:	89 2b       	or	r24, r25
     a6a:	71 f0       	breq	.+28     	; 0xa88 <__vector_18+0x17e>
		{
			CANCDMOB = 0; // disable mob
     a6c:	8f ee       	ldi	r24, 0xEF	; 239
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	fc 01       	movw	r30, r24
     a72:	10 82       	st	Z, r1
			CANSTMOB &= ~(1 << TXOK); // resetujem flag
     a74:	8e ee       	ldi	r24, 0xEE	; 238
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	2e ee       	ldi	r18, 0xEE	; 238
     a7a:	30 e0       	ldi	r19, 0x00	; 0
     a7c:	f9 01       	movw	r30, r18
     a7e:	20 81       	ld	r18, Z
     a80:	2f 7b       	andi	r18, 0xBF	; 191
     a82:	fc 01       	movw	r30, r24
     a84:	20 83       	st	Z, r18

			break;
     a86:	07 c0       	rjmp	.+14     	; 0xa96 <__vector_18+0x18c>
	unsigned char tempPage = CANPAGE;
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     a88:	89 81       	ldd	r24, Y+1	; 0x01
     a8a:	8f 5f       	subi	r24, 0xFF	; 255
     a8c:	89 83       	std	Y+1, r24	; 0x01
     a8e:	89 81       	ldd	r24, Y+1	; 0x01
     a90:	8f 30       	cpi	r24, 0x0F	; 15
     a92:	08 f4       	brcc	.+2      	; 0xa96 <__vector_18+0x18c>
     a94:	58 cf       	rjmp	.-336    	; 0x946 <__vector_18+0x3c>

			break;
		}
	}

	CANPAGE = tempPage;
     a96:	8d ee       	ldi	r24, 0xED	; 237
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	2b 81       	ldd	r18, Y+3	; 0x03
     a9c:	fc 01       	movw	r30, r24
     a9e:	20 83       	st	Z, r18
	//CANGIT = CANGIT; // zato sto tako treba.
}
     aa0:	0f 90       	pop	r0
     aa2:	0f 90       	pop	r0
     aa4:	0f 90       	pop	r0
     aa6:	0f 90       	pop	r0
     aa8:	df 91       	pop	r29
     aaa:	cf 91       	pop	r28
     aac:	ff 91       	pop	r31
     aae:	ef 91       	pop	r30
     ab0:	9f 91       	pop	r25
     ab2:	8f 91       	pop	r24
     ab4:	5f 91       	pop	r21
     ab6:	4f 91       	pop	r20
     ab8:	3f 91       	pop	r19
     aba:	2f 91       	pop	r18
     abc:	0f 90       	pop	r0
     abe:	00 92 5b 00 	sts	0x005B, r0
     ac2:	0f 90       	pop	r0
     ac4:	00 92 5f 00 	sts	0x005F, r0
     ac8:	0f 90       	pop	r0
     aca:	1f 90       	pop	r1
     acc:	18 95       	reti

00000ace <CAN_InitModule>:


static void CAN_InitModule(void)
{
     ace:	cf 93       	push	r28
     ad0:	df 93       	push	r29
     ad2:	00 d0       	rcall	.+0      	; 0xad4 <CAN_InitModule+0x6>
     ad4:	cd b7       	in	r28, 0x3d	; 61
     ad6:	de b7       	in	r29, 0x3e	; 62
	unsigned char ch;
	unsigned char data;

	// Reset the CAN controller
	CANGCON = 0x01;
     ad8:	88 ed       	ldi	r24, 0xD8	; 216
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	21 e0       	ldi	r18, 0x01	; 1
     ade:	fc 01       	movw	r30, r24
     ae0:	20 83       	st	Z, r18

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
     ae2:	19 82       	std	Y+1, r1	; 0x01
     ae4:	3e c0       	rjmp	.+124    	; 0xb62 <CAN_InitModule+0x94>
	{
		CANPAGE = ch << 4;
     ae6:	8d ee       	ldi	r24, 0xED	; 237
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	29 81       	ldd	r18, Y+1	; 0x01
     aec:	22 95       	swap	r18
     aee:	20 7f       	andi	r18, 0xF0	; 240
     af0:	fc 01       	movw	r30, r24
     af2:	20 83       	st	Z, r18

		CANSTMOB = 0;
     af4:	8e ee       	ldi	r24, 0xEE	; 238
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	fc 01       	movw	r30, r24
     afa:	10 82       	st	Z, r1
		CANCDMOB = 0;
     afc:	8f ee       	ldi	r24, 0xEF	; 239
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	fc 01       	movw	r30, r24
     b02:	10 82       	st	Z, r1

		CANIDT1 = 0;
     b04:	83 ef       	ldi	r24, 0xF3	; 243
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	fc 01       	movw	r30, r24
     b0a:	10 82       	st	Z, r1
		CANIDT2 = 0;
     b0c:	82 ef       	ldi	r24, 0xF2	; 242
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	fc 01       	movw	r30, r24
     b12:	10 82       	st	Z, r1
		CANIDT3 = 0;
     b14:	81 ef       	ldi	r24, 0xF1	; 241
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	fc 01       	movw	r30, r24
     b1a:	10 82       	st	Z, r1
		CANIDT4 = 0;
     b1c:	80 ef       	ldi	r24, 0xF0	; 240
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	fc 01       	movw	r30, r24
     b22:	10 82       	st	Z, r1
		CANIDM1 = 0;
     b24:	87 ef       	ldi	r24, 0xF7	; 247
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	fc 01       	movw	r30, r24
     b2a:	10 82       	st	Z, r1
		CANIDM2 = 0;
     b2c:	86 ef       	ldi	r24, 0xF6	; 246
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	fc 01       	movw	r30, r24
     b32:	10 82       	st	Z, r1
		CANIDM3 = 0;
     b34:	85 ef       	ldi	r24, 0xF5	; 245
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	fc 01       	movw	r30, r24
     b3a:	10 82       	st	Z, r1
		CANIDM4 = 0;
     b3c:	84 ef       	ldi	r24, 0xF4	; 244
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	fc 01       	movw	r30, r24
     b42:	10 82       	st	Z, r1

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
     b44:	1a 82       	std	Y+2, r1	; 0x02
     b46:	07 c0       	rjmp	.+14     	; 0xb56 <CAN_InitModule+0x88>
			CANMSG = 0;
     b48:	8a ef       	ldi	r24, 0xFA	; 250
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	fc 01       	movw	r30, r24
     b4e:	10 82       	st	Z, r1
		CANIDM3 = 0;
		CANIDM4 = 0;

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
     b50:	8a 81       	ldd	r24, Y+2	; 0x02
     b52:	8f 5f       	subi	r24, 0xFF	; 255
     b54:	8a 83       	std	Y+2, r24	; 0x02
     b56:	8a 81       	ldd	r24, Y+2	; 0x02
     b58:	88 30       	cpi	r24, 0x08	; 8
     b5a:	b0 f3       	brcs	.-20     	; 0xb48 <CAN_InitModule+0x7a>

	// Reset the CAN controller
	CANGCON = 0x01;

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
     b5c:	89 81       	ldd	r24, Y+1	; 0x01
     b5e:	8f 5f       	subi	r24, 0xFF	; 255
     b60:	89 83       	std	Y+1, r24	; 0x01
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	8f 30       	cpi	r24, 0x0F	; 15
     b66:	08 f4       	brcc	.+2      	; 0xb6a <CAN_InitModule+0x9c>
     b68:	be cf       	rjmp	.-132    	; 0xae6 <CAN_InitModule+0x18>
			CANMSG = 0;
	}


	// Enable the CAN controller
	CANGCON = 0x02;
     b6a:	88 ed       	ldi	r24, 0xD8	; 216
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	22 e0       	ldi	r18, 0x02	; 2
     b70:	fc 01       	movw	r30, r24
     b72:	20 83       	st	Z, r18

	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	//CANBT1 = 0x08; // Fcan = 2Mhz-> Tq = 0.5us
	CANBT1 = 0x01;
     b74:	82 ee       	ldi	r24, 0xE2	; 226
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	21 e0       	ldi	r18, 0x01	; 1
     b7a:	fc 01       	movw	r30, r24
     b7c:	20 83       	st	Z, r18
	CANBT2 = (1 << PRS2); // Propagation Time Segment-> 5xTq
     b7e:	83 ee       	ldi	r24, 0xE3	; 227
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	28 e0       	ldi	r18, 0x08	; 8
     b84:	fc 01       	movw	r30, r24
     b86:	20 83       	st	Z, r18
	CANBT3 = (1 << PHS22) | (1 << PHS20) | (1 << PHS10) | (1 << PHS11) | (1 << PHS12); // Phase Segment 2-> 6xTq, Phase Segment 1-> 8xTq
     b88:	84 ee       	ldi	r24, 0xE4	; 228
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	2e e5       	ldi	r18, 0x5E	; 94
     b8e:	fc 01       	movw	r30, r24
     b90:	20 83       	st	Z, r18

	/// Sjw je podesen na 1... 1 + 5 + 6 + 8 = 22
	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	CANTCON = 0; // preskaler za CAN timer-> ne koristimo ga pa ova vrednost nije vazna
     b92:	85 ee       	ldi	r24, 0xE5	; 229
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	fc 01       	movw	r30, r24
     b98:	10 82       	st	Z, r1

	// ukljucujem interrupte- ENIT-> Enable All Interrupts
	// ENRX-> Enable RX interrupt
	// ENTX-> Enable TX interrupt
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);
     b9a:	8b ed       	ldi	r24, 0xDB	; 219
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	20 eb       	ldi	r18, 0xB0	; 176
     ba0:	fc 01       	movw	r30, r24
     ba2:	20 83       	st	Z, r18
	// interrupti svih MOb- ova su ukljuceni
	CANIE1 = 0xFF >> 1; // glupo govno trazi da MSB mora biti nula prilikom upisivanja u registar
     ba4:	8f ed       	ldi	r24, 0xDF	; 223
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	2f e7       	ldi	r18, 0x7F	; 127
     baa:	fc 01       	movw	r30, r24
     bac:	20 83       	st	Z, r18
	CANIE2 = 0xFF;
     bae:	8e ed       	ldi	r24, 0xDE	; 222
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	2f ef       	ldi	r18, 0xFF	; 255
     bb4:	fc 01       	movw	r30, r24
     bb6:	20 83       	st	Z, r18
	sei();
     bb8:	78 94       	sei
}
     bba:	0f 90       	pop	r0
     bbc:	0f 90       	pop	r0
     bbe:	df 91       	pop	r29
     bc0:	cf 91       	pop	r28
     bc2:	08 95       	ret

00000bc4 <CAN_InitRxMob>:


static char CAN_InitRxMob(unsigned int ide)
{
     bc4:	cf 93       	push	r28
     bc6:	df 93       	push	r29
     bc8:	00 d0       	rcall	.+0      	; 0xbca <CAN_InitRxMob+0x6>
     bca:	00 d0       	rcall	.+0      	; 0xbcc <CAN_InitRxMob+0x8>
     bcc:	cd b7       	in	r28, 0x3d	; 61
     bce:	de b7       	in	r29, 0x3e	; 62
     bd0:	9c 83       	std	Y+4, r25	; 0x04
     bd2:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char ch;
	unsigned char tempPage = CANPAGE;
     bd4:	8d ee       	ldi	r24, 0xED	; 237
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	fc 01       	movw	r30, r24
     bda:	80 81       	ld	r24, Z
     bdc:	8a 83       	std	Y+2, r24	; 0x02

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
     bde:	00 00       	nop
     be0:	89 ed       	ldi	r24, 0xD9	; 217
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	fc 01       	movw	r30, r24
     be6:	80 81       	ld	r24, Z
     be8:	82 95       	swap	r24
     bea:	8f 70       	andi	r24, 0x0F	; 15
     bec:	88 2f       	mov	r24, r24
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	81 70       	andi	r24, 0x01	; 1
     bf2:	99 27       	eor	r25, r25
     bf4:	89 2b       	or	r24, r25
     bf6:	a1 f7       	brne	.-24     	; 0xbe0 <CAN_InitRxMob+0x1c>
     bf8:	89 ed       	ldi	r24, 0xD9	; 217
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	fc 01       	movw	r30, r24
     bfe:	80 81       	ld	r24, Z
     c00:	86 95       	lsr	r24
     c02:	86 95       	lsr	r24
     c04:	86 95       	lsr	r24
     c06:	88 2f       	mov	r24, r24
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	81 70       	andi	r24, 0x01	; 1
     c0c:	99 27       	eor	r25, r25
     c0e:	89 2b       	or	r24, r25
     c10:	39 f7       	brne	.-50     	; 0xbe0 <CAN_InitRxMob+0x1c>

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
     c12:	19 82       	std	Y+1, r1	; 0x01
     c14:	49 c0       	rjmp	.+146    	; 0xca8 <CAN_InitRxMob+0xe4>
	{
		CANPAGE = ch << 4;
     c16:	8d ee       	ldi	r24, 0xED	; 237
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	29 81       	ldd	r18, Y+1	; 0x01
     c1c:	22 95       	swap	r18
     c1e:	20 7f       	andi	r18, 0xF0	; 240
     c20:	fc 01       	movw	r30, r24
     c22:	20 83       	st	Z, r18

		// ako je MOb vec zauzet nastavi dalje
		if((CANCDMOB >> 6))
     c24:	8f ee       	ldi	r24, 0xEF	; 239
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	fc 01       	movw	r30, r24
     c2a:	80 81       	ld	r24, Z
     c2c:	82 95       	swap	r24
     c2e:	86 95       	lsr	r24
     c30:	86 95       	lsr	r24
     c32:	83 70       	andi	r24, 0x03	; 3
     c34:	88 23       	and	r24, r24
     c36:	21 f0       	breq	.+8      	; 0xc40 <CAN_InitRxMob+0x7c>

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
     c38:	89 81       	ldd	r24, Y+1	; 0x01
     c3a:	8f 5f       	subi	r24, 0xFF	; 255
     c3c:	89 83       	std	Y+1, r24	; 0x01
     c3e:	34 c0       	rjmp	.+104    	; 0xca8 <CAN_InitRxMob+0xe4>
		// ako je MOb vec zauzet nastavi dalje
		if((CANCDMOB >> 6))
			continue;

		//uvek primam 8 bajtova
		CANCDMOB = (1 << DLC0) | (1 << DLC1) | (1 << DLC2) | (1 << DLC3);
     c40:	8f ee       	ldi	r24, 0xEF	; 239
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	2f e0       	ldi	r18, 0x0F	; 15
     c46:	fc 01       	movw	r30, r24
     c48:	20 83       	st	Z, r18

		// podesavam identifikator
		CANIDT1 = (0x00FF & ide) >> 3;
     c4a:	83 ef       	ldi	r24, 0xF3	; 243
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	2b 81       	ldd	r18, Y+3	; 0x03
     c50:	3c 81       	ldd	r19, Y+4	; 0x04
     c52:	33 27       	eor	r19, r19
     c54:	36 95       	lsr	r19
     c56:	27 95       	ror	r18
     c58:	36 95       	lsr	r19
     c5a:	27 95       	ror	r18
     c5c:	36 95       	lsr	r19
     c5e:	27 95       	ror	r18
     c60:	fc 01       	movw	r30, r24
     c62:	20 83       	st	Z, r18
		CANIDT2 = (ide & 0x00FF) << 5;
     c64:	82 ef       	ldi	r24, 0xF2	; 242
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	2b 81       	ldd	r18, Y+3	; 0x03
     c6a:	22 95       	swap	r18
     c6c:	22 0f       	add	r18, r18
     c6e:	20 7e       	andi	r18, 0xE0	; 224
     c70:	fc 01       	movw	r30, r24
     c72:	20 83       	st	Z, r18

		// podesavam masku- gledam sve bitove
		CANIDM2 = 0x07 << 5;
     c74:	86 ef       	ldi	r24, 0xF6	; 246
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	20 ee       	ldi	r18, 0xE0	; 224
     c7a:	fc 01       	movw	r30, r24
     c7c:	20 83       	st	Z, r18
		CANIDM1 = 0xFF;
     c7e:	87 ef       	ldi	r24, 0xF7	; 247
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	2f ef       	ldi	r18, 0xFF	; 255
     c84:	fc 01       	movw	r30, r24
     c86:	20 83       	st	Z, r18

		// podesavam MOb kao receiver
		CANCDMOB |= (1 << CONMOB1);
     c88:	8f ee       	ldi	r24, 0xEF	; 239
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	2f ee       	ldi	r18, 0xEF	; 239
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	f9 01       	movw	r30, r18
     c92:	20 81       	ld	r18, Z
     c94:	20 68       	ori	r18, 0x80	; 128
     c96:	fc 01       	movw	r30, r24
     c98:	20 83       	st	Z, r18

		CANPAGE = tempPage;
     c9a:	8d ee       	ldi	r24, 0xED	; 237
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	2a 81       	ldd	r18, Y+2	; 0x02
     ca0:	fc 01       	movw	r30, r24
     ca2:	20 83       	st	Z, r18

		return 1;
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	0a c0       	rjmp	.+20     	; 0xcbc <CAN_InitRxMob+0xf8>

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
     ca8:	89 81       	ldd	r24, Y+1	; 0x01
     caa:	8f 30       	cpi	r24, 0x0F	; 15
     cac:	08 f4       	brcc	.+2      	; 0xcb0 <CAN_InitRxMob+0xec>
     cae:	b3 cf       	rjmp	.-154    	; 0xc16 <CAN_InitRxMob+0x52>
		CANPAGE = tempPage;

		return 1;
	}

	CANPAGE = tempPage;
     cb0:	8d ee       	ldi	r24, 0xED	; 237
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	2a 81       	ldd	r18, Y+2	; 0x02
     cb6:	fc 01       	movw	r30, r24
     cb8:	20 83       	st	Z, r18

	return 0;
     cba:	80 e0       	ldi	r24, 0x00	; 0
}
     cbc:	0f 90       	pop	r0
     cbe:	0f 90       	pop	r0
     cc0:	0f 90       	pop	r0
     cc2:	0f 90       	pop	r0
     cc4:	df 91       	pop	r29
     cc6:	cf 91       	pop	r28
     cc8:	08 95       	ret

00000cca <CAN_Init>:


void CAN_Init(unsigned char numOfNodes)
{
     cca:	0f 93       	push	r16
     ccc:	1f 93       	push	r17
     cce:	cf 93       	push	r28
     cd0:	df 93       	push	r29
     cd2:	00 d0       	rcall	.+0      	; 0xcd4 <CAN_Init+0xa>
     cd4:	cd b7       	in	r28, 0x3d	; 61
     cd6:	de b7       	in	r29, 0x3e	; 62
     cd8:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char i;
	CAN_InitModule();
     cda:	0e 94 67 05 	call	0xace	; 0xace <CAN_InitModule>

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
     cde:	19 82       	std	Y+1, r1	; 0x01
     ce0:	30 c0       	rjmp	.+96     	; 0xd42 <CAN_Init+0x78>
	{
		CAN_InitRxMob(i + 1);
     ce2:	89 81       	ldd	r24, Y+1	; 0x01
     ce4:	88 2f       	mov	r24, r24
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	01 96       	adiw	r24, 0x01	; 1
     cea:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <CAN_InitRxMob>
		*(rxBuffers + i) = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
     cee:	89 81       	ldd	r24, Y+1	; 0x01
     cf0:	88 2f       	mov	r24, r24
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	88 0f       	add	r24, r24
     cf6:	99 1f       	adc	r25, r25
     cf8:	8c 01       	movw	r16, r24
     cfa:	02 5c       	subi	r16, 0xC2	; 194
     cfc:	1e 4f       	sbci	r17, 0xFE	; 254
     cfe:	61 e0       	ldi	r22, 0x01	; 1
     d00:	70 e0       	ldi	r23, 0x00	; 0
     d02:	85 e0       	ldi	r24, 0x05	; 5
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	0e 94 2b 1a 	call	0x3456	; 0x3456 <calloc>
     d0a:	f8 01       	movw	r30, r16
     d0c:	91 83       	std	Z+1, r25	; 0x01
     d0e:	80 83       	st	Z, r24
		//*(rxBuffers + i) = (unsigned char *) malloc(RX_BUFFER_SIZE * sizeof(unsigned char));
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
     d10:	89 81       	ldd	r24, Y+1	; 0x01
     d12:	88 2f       	mov	r24, r24
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	29 81       	ldd	r18, Y+1	; 0x01
     d18:	22 2f       	mov	r18, r18
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	49 81       	ldd	r20, Y+1	; 0x01
     d1e:	44 2f       	mov	r20, r20
     d20:	50 e0       	ldi	r21, 0x00	; 0
     d22:	60 e0       	ldi	r22, 0x00	; 0
     d24:	4a 59       	subi	r20, 0x9A	; 154
     d26:	5e 4f       	sbci	r21, 0xFE	; 254
     d28:	fa 01       	movw	r30, r20
     d2a:	60 83       	st	Z, r22
     d2c:	24 5a       	subi	r18, 0xA4	; 164
     d2e:	3e 4f       	sbci	r19, 0xFE	; 254
     d30:	f9 01       	movw	r30, r18
     d32:	60 83       	st	Z, r22
     d34:	8e 5a       	subi	r24, 0xAE	; 174
     d36:	9e 4f       	sbci	r25, 0xFE	; 254
     d38:	fc 01       	movw	r30, r24
     d3a:	60 83       	st	Z, r22

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
     d3c:	89 81       	ldd	r24, Y+1	; 0x01
     d3e:	8f 5f       	subi	r24, 0xFF	; 255
     d40:	89 83       	std	Y+1, r24	; 0x01
     d42:	99 81       	ldd	r25, Y+1	; 0x01
     d44:	8a 81       	ldd	r24, Y+2	; 0x02
     d46:	98 17       	cp	r25, r24
     d48:	60 f2       	brcs	.-104    	; 0xce2 <CAN_Init+0x18>
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
	}

	//rxWrIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
	//rxRdIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
}
     d4a:	0f 90       	pop	r0
     d4c:	0f 90       	pop	r0
     d4e:	df 91       	pop	r29
     d50:	cf 91       	pop	r28
     d52:	1f 91       	pop	r17
     d54:	0f 91       	pop	r16
     d56:	08 95       	ret

00000d58 <CAN_CheckRX>:


unsigned char CAN_CheckRX(unsigned char nodeID)
{
     d58:	cf 93       	push	r28
     d5a:	df 93       	push	r29
     d5c:	1f 92       	push	r1
     d5e:	cd b7       	in	r28, 0x3d	; 61
     d60:	de b7       	in	r29, 0x3e	; 62
     d62:	89 83       	std	Y+1, r24	; 0x01
	return rxCounter[nodeID - 1];
     d64:	89 81       	ldd	r24, Y+1	; 0x01
     d66:	88 2f       	mov	r24, r24
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	01 97       	sbiw	r24, 0x01	; 1
     d6c:	8a 59       	subi	r24, 0x9A	; 154
     d6e:	9e 4f       	sbci	r25, 0xFE	; 254
     d70:	fc 01       	movw	r30, r24
     d72:	80 81       	ld	r24, Z
}
     d74:	0f 90       	pop	r0
     d76:	df 91       	pop	r29
     d78:	cf 91       	pop	r28
     d7a:	08 95       	ret

00000d7c <CAN_Read>:


char CAN_Read(unsigned char *buffer, unsigned char sendingNodeID)
{
     d7c:	cf 93       	push	r28
     d7e:	df 93       	push	r29
     d80:	00 d0       	rcall	.+0      	; 0xd82 <CAN_Read+0x6>
     d82:	00 d0       	rcall	.+0      	; 0xd84 <CAN_Read+0x8>
     d84:	cd b7       	in	r28, 0x3d	; 61
     d86:	de b7       	in	r29, 0x3e	; 62
     d88:	9b 83       	std	Y+3, r25	; 0x03
     d8a:	8a 83       	std	Y+2, r24	; 0x02
     d8c:	6c 83       	std	Y+4, r22	; 0x04
	unsigned char i;
	PORTG = 0xff;
     d8e:	84 e3       	ldi	r24, 0x34	; 52
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	2f ef       	ldi	r18, 0xFF	; 255
     d94:	fc 01       	movw	r30, r24
     d96:	20 83       	st	Z, r18
	// sve dok ne stigne neki podatak ostajem u funkciji
	while(!rxCounter[sendingNodeID - 1]);
     d98:	00 00       	nop
     d9a:	8c 81       	ldd	r24, Y+4	; 0x04
     d9c:	88 2f       	mov	r24, r24
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	01 97       	sbiw	r24, 0x01	; 1
     da2:	8a 59       	subi	r24, 0x9A	; 154
     da4:	9e 4f       	sbci	r25, 0xFE	; 254
     da6:	fc 01       	movw	r30, r24
     da8:	80 81       	ld	r24, Z
     daa:	88 23       	and	r24, r24
     dac:	b1 f3       	breq	.-20     	; 0xd9a <CAN_Read+0x1e>

	for(i = 0; i < 8; ++i)
     dae:	19 82       	std	Y+1, r1	; 0x01
     db0:	2c c0       	rjmp	.+88     	; 0xe0a <CAN_Read+0x8e>
	*(buffer + i) = (*(rxBuffers + sendingNodeID - 1) + sizeof(unsigned char) * (*(rxRdIndex + sendingNodeID - 1)))[i];
     db2:	89 81       	ldd	r24, Y+1	; 0x01
     db4:	88 2f       	mov	r24, r24
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	2a 81       	ldd	r18, Y+2	; 0x02
     dba:	3b 81       	ldd	r19, Y+3	; 0x03
     dbc:	82 0f       	add	r24, r18
     dbe:	93 1f       	adc	r25, r19
     dc0:	2c 81       	ldd	r18, Y+4	; 0x04
     dc2:	22 2f       	mov	r18, r18
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	21 50       	subi	r18, 0x01	; 1
     dc8:	30 48       	sbci	r19, 0x80	; 128
     dca:	22 0f       	add	r18, r18
     dcc:	33 1f       	adc	r19, r19
     dce:	22 5c       	subi	r18, 0xC2	; 194
     dd0:	3e 4f       	sbci	r19, 0xFE	; 254
     dd2:	f9 01       	movw	r30, r18
     dd4:	40 81       	ld	r20, Z
     dd6:	51 81       	ldd	r21, Z+1	; 0x01
     dd8:	2c 81       	ldd	r18, Y+4	; 0x04
     dda:	22 2f       	mov	r18, r18
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	21 50       	subi	r18, 0x01	; 1
     de0:	31 09       	sbc	r19, r1
     de2:	24 5a       	subi	r18, 0xA4	; 164
     de4:	3e 4f       	sbci	r19, 0xFE	; 254
     de6:	f9 01       	movw	r30, r18
     de8:	20 81       	ld	r18, Z
     dea:	62 2f       	mov	r22, r18
     dec:	70 e0       	ldi	r23, 0x00	; 0
     dee:	29 81       	ldd	r18, Y+1	; 0x01
     df0:	22 2f       	mov	r18, r18
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	26 0f       	add	r18, r22
     df6:	37 1f       	adc	r19, r23
     df8:	24 0f       	add	r18, r20
     dfa:	35 1f       	adc	r19, r21
     dfc:	f9 01       	movw	r30, r18
     dfe:	20 81       	ld	r18, Z
     e00:	fc 01       	movw	r30, r24
     e02:	20 83       	st	Z, r18
	unsigned char i;
	PORTG = 0xff;
	// sve dok ne stigne neki podatak ostajem u funkciji
	while(!rxCounter[sendingNodeID - 1]);

	for(i = 0; i < 8; ++i)
     e04:	89 81       	ldd	r24, Y+1	; 0x01
     e06:	8f 5f       	subi	r24, 0xFF	; 255
     e08:	89 83       	std	Y+1, r24	; 0x01
     e0a:	89 81       	ldd	r24, Y+1	; 0x01
     e0c:	88 30       	cpi	r24, 0x08	; 8
     e0e:	88 f2       	brcs	.-94     	; 0xdb2 <CAN_Read+0x36>
	*(buffer + i) = (*(rxBuffers + sendingNodeID - 1) + sizeof(unsigned char) * (*(rxRdIndex + sendingNodeID - 1)))[i];

	if(++(*(rxRdIndex + sendingNodeID - 1)) == RX_BUFFER_SIZE)
     e10:	8c 81       	ldd	r24, Y+4	; 0x04
     e12:	88 2f       	mov	r24, r24
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	01 97       	sbiw	r24, 0x01	; 1
     e18:	84 5a       	subi	r24, 0xA4	; 164
     e1a:	9e 4f       	sbci	r25, 0xFE	; 254
     e1c:	fc 01       	movw	r30, r24
     e1e:	20 81       	ld	r18, Z
     e20:	2f 5f       	subi	r18, 0xFF	; 255
     e22:	fc 01       	movw	r30, r24
     e24:	20 83       	st	Z, r18
     e26:	25 30       	cpi	r18, 0x05	; 5
     e28:	41 f4       	brne	.+16     	; 0xe3a <CAN_Read+0xbe>
	*(rxRdIndex + sendingNodeID - 1) = 0;
     e2a:	8c 81       	ldd	r24, Y+4	; 0x04
     e2c:	88 2f       	mov	r24, r24
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	01 97       	sbiw	r24, 0x01	; 1
     e32:	84 5a       	subi	r24, 0xA4	; 164
     e34:	9e 4f       	sbci	r25, 0xFE	; 254
     e36:	fc 01       	movw	r30, r24
     e38:	10 82       	st	Z, r1

	rxCounter[sendingNodeID - 1]--;
     e3a:	8c 81       	ldd	r24, Y+4	; 0x04
     e3c:	88 2f       	mov	r24, r24
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	01 97       	sbiw	r24, 0x01	; 1
     e42:	9c 01       	movw	r18, r24
     e44:	2a 59       	subi	r18, 0x9A	; 154
     e46:	3e 4f       	sbci	r19, 0xFE	; 254
     e48:	f9 01       	movw	r30, r18
     e4a:	20 81       	ld	r18, Z
     e4c:	21 50       	subi	r18, 0x01	; 1
     e4e:	8a 59       	subi	r24, 0x9A	; 154
     e50:	9e 4f       	sbci	r25, 0xFE	; 254
     e52:	fc 01       	movw	r30, r24
     e54:	20 83       	st	Z, r18

	return 0;
     e56:	80 e0       	ldi	r24, 0x00	; 0
}
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	0f 90       	pop	r0
     e5e:	0f 90       	pop	r0
     e60:	df 91       	pop	r29
     e62:	cf 91       	pop	r28
     e64:	08 95       	ret

00000e66 <CAN_Write>:

char CAN_Write(unsigned char *data, unsigned char receivingNodeAddress)
{
     e66:	cf 93       	push	r28
     e68:	df 93       	push	r29
     e6a:	00 d0       	rcall	.+0      	; 0xe6c <CAN_Write+0x6>
     e6c:	00 d0       	rcall	.+0      	; 0xe6e <CAN_Write+0x8>
     e6e:	00 d0       	rcall	.+0      	; 0xe70 <CAN_Write+0xa>
     e70:	cd b7       	in	r28, 0x3d	; 61
     e72:	de b7       	in	r29, 0x3e	; 62
     e74:	9d 83       	std	Y+5, r25	; 0x05
     e76:	8c 83       	std	Y+4, r24	; 0x04
     e78:	6e 83       	std	Y+6, r22	; 0x06
    unsigned char i;
	// Cekam sve dok je magistrala zauzeta-> da li je neophodno?
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
     e7a:	00 00       	nop
     e7c:	89 ed       	ldi	r24, 0xD9	; 217
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	fc 01       	movw	r30, r24
     e82:	80 81       	ld	r24, Z
     e84:	82 95       	swap	r24
     e86:	8f 70       	andi	r24, 0x0F	; 15
     e88:	88 2f       	mov	r24, r24
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	81 70       	andi	r24, 0x01	; 1
     e8e:	99 27       	eor	r25, r25
     e90:	89 2b       	or	r24, r25
     e92:	a1 f7       	brne	.-24     	; 0xe7c <CAN_Write+0x16>
     e94:	89 ed       	ldi	r24, 0xD9	; 217
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	fc 01       	movw	r30, r24
     e9a:	80 81       	ld	r24, Z
     e9c:	86 95       	lsr	r24
     e9e:	86 95       	lsr	r24
     ea0:	86 95       	lsr	r24
     ea2:	88 2f       	mov	r24, r24
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	81 70       	andi	r24, 0x01	; 1
     ea8:	99 27       	eor	r25, r25
     eaa:	89 2b       	or	r24, r25
     eac:	39 f7       	brne	.-50     	; 0xe7c <CAN_Write+0x16>

	unsigned char ch;
	unsigned char tempPage = CANPAGE;
     eae:	8d ee       	ldi	r24, 0xED	; 237
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	fc 01       	movw	r30, r24
     eb4:	80 81       	ld	r24, Z
     eb6:	8b 83       	std	Y+3, r24	; 0x03

	// trazim slobodan MOb
	for(ch = 0; ch < 15; ch++)
     eb8:	1a 82       	std	Y+2, r1	; 0x02
     eba:	15 c0       	rjmp	.+42     	; 0xee6 <CAN_Write+0x80>
	{
		CANPAGE = ch << 4;
     ebc:	8d ee       	ldi	r24, 0xED	; 237
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	2a 81       	ldd	r18, Y+2	; 0x02
     ec2:	22 95       	swap	r18
     ec4:	20 7f       	andi	r18, 0xF0	; 240
     ec6:	fc 01       	movw	r30, r24
     ec8:	20 83       	st	Z, r18

		if(!(CANCDMOB >> 6))
     eca:	8f ee       	ldi	r24, 0xEF	; 239
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	fc 01       	movw	r30, r24
     ed0:	80 81       	ld	r24, Z
     ed2:	82 95       	swap	r24
     ed4:	86 95       	lsr	r24
     ed6:	86 95       	lsr	r24
     ed8:	83 70       	andi	r24, 0x03	; 3
     eda:	88 23       	and	r24, r24
     edc:	09 f4       	brne	.+2      	; 0xee0 <CAN_Write+0x7a>
			break;
     ede:	06 c0       	rjmp	.+12     	; 0xeec <CAN_Write+0x86>

	unsigned char ch;
	unsigned char tempPage = CANPAGE;

	// trazim slobodan MOb
	for(ch = 0; ch < 15; ch++)
     ee0:	8a 81       	ldd	r24, Y+2	; 0x02
     ee2:	8f 5f       	subi	r24, 0xFF	; 255
     ee4:	8a 83       	std	Y+2, r24	; 0x02
     ee6:	8a 81       	ldd	r24, Y+2	; 0x02
     ee8:	8f 30       	cpi	r24, 0x0F	; 15
     eea:	40 f3       	brcs	.-48     	; 0xebc <CAN_Write+0x56>
		if(!(CANCDMOB >> 6))
			break;
	}

	// nema slobodnih MOb- ova
	if(ch == 15)
     eec:	8a 81       	ldd	r24, Y+2	; 0x02
     eee:	8f 30       	cpi	r24, 0x0F	; 15
     ef0:	11 f4       	brne	.+4      	; 0xef6 <CAN_Write+0x90>
		return -1;
     ef2:	8f ef       	ldi	r24, 0xFF	; 255
     ef4:	39 c0       	rjmp	.+114    	; 0xf68 <CAN_Write+0x102>


	//ova dva registra sadrze identifikator poruke koja ce se slati! efektivno to je adresa cvora koji ce primiti poruku
	CANIDT2 = (receivingNodeAddress & 0x0F) << 5;
     ef6:	82 ef       	ldi	r24, 0xF2	; 242
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	2e 81       	ldd	r18, Y+6	; 0x06
     efc:	22 95       	swap	r18
     efe:	22 0f       	add	r18, r18
     f00:	20 7e       	andi	r18, 0xE0	; 224
     f02:	fc 01       	movw	r30, r24
     f04:	20 83       	st	Z, r18
	CANIDT1 = (receivingNodeAddress) >> 3;
     f06:	83 ef       	ldi	r24, 0xF3	; 243
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	2e 81       	ldd	r18, Y+6	; 0x06
     f0c:	26 95       	lsr	r18
     f0e:	26 95       	lsr	r18
     f10:	26 95       	lsr	r18
     f12:	fc 01       	movw	r30, r24
     f14:	20 83       	st	Z, r18

	// DLC = 8
	CANCDMOB = 8;
     f16:	8f ee       	ldi	r24, 0xEF	; 239
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	28 e0       	ldi	r18, 0x08	; 8
     f1c:	fc 01       	movw	r30, r24
     f1e:	20 83       	st	Z, r18

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(i = 0; i < 8; i++)
     f20:	19 82       	std	Y+1, r1	; 0x01
     f22:	10 c0       	rjmp	.+32     	; 0xf44 <CAN_Write+0xde>
		CANMSG = data[i];
     f24:	8a ef       	ldi	r24, 0xFA	; 250
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	29 81       	ldd	r18, Y+1	; 0x01
     f2a:	22 2f       	mov	r18, r18
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	4c 81       	ldd	r20, Y+4	; 0x04
     f30:	5d 81       	ldd	r21, Y+5	; 0x05
     f32:	24 0f       	add	r18, r20
     f34:	35 1f       	adc	r19, r21
     f36:	f9 01       	movw	r30, r18
     f38:	20 81       	ld	r18, Z
     f3a:	fc 01       	movw	r30, r24
     f3c:	20 83       	st	Z, r18

	// DLC = 8
	CANCDMOB = 8;

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(i = 0; i < 8; i++)
     f3e:	89 81       	ldd	r24, Y+1	; 0x01
     f40:	8f 5f       	subi	r24, 0xFF	; 255
     f42:	89 83       	std	Y+1, r24	; 0x01
     f44:	89 81       	ldd	r24, Y+1	; 0x01
     f46:	88 30       	cpi	r24, 0x08	; 8
     f48:	68 f3       	brcs	.-38     	; 0xf24 <CAN_Write+0xbe>
		CANMSG = data[i];

	// podesavam ga kao predajnik
	CANCDMOB |= (1 << CONMOB0);
     f4a:	8f ee       	ldi	r24, 0xEF	; 239
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	2f ee       	ldi	r18, 0xEF	; 239
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	f9 01       	movw	r30, r18
     f54:	20 81       	ld	r18, Z
     f56:	20 64       	ori	r18, 0x40	; 64
     f58:	fc 01       	movw	r30, r24
     f5a:	20 83       	st	Z, r18

	CANPAGE = tempPage;
     f5c:	8d ee       	ldi	r24, 0xED	; 237
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	2b 81       	ldd	r18, Y+3	; 0x03
     f62:	fc 01       	movw	r30, r24
     f64:	20 83       	st	Z, r18

	return 0;
     f66:	80 e0       	ldi	r24, 0x00	; 0
}
     f68:	26 96       	adiw	r28, 0x06	; 6
     f6a:	0f b6       	in	r0, 0x3f	; 63
     f6c:	f8 94       	cli
     f6e:	de bf       	out	0x3e, r29	; 62
     f70:	0f be       	out	0x3f, r0	; 63
     f72:	cd bf       	out	0x3d, r28	; 61
     f74:	df 91       	pop	r29
     f76:	cf 91       	pop	r28
     f78:	08 95       	ret

00000f7a <__list_add>:
        pos = list_next_entry(pos, member))

static inline void __list_add(struct list_head* new,
                              struct list_head* prev,
                              struct list_head* next)
{
     f7a:	cf 93       	push	r28
     f7c:	df 93       	push	r29
     f7e:	00 d0       	rcall	.+0      	; 0xf80 <__list_add+0x6>
     f80:	00 d0       	rcall	.+0      	; 0xf82 <__list_add+0x8>
     f82:	00 d0       	rcall	.+0      	; 0xf84 <__list_add+0xa>
     f84:	cd b7       	in	r28, 0x3d	; 61
     f86:	de b7       	in	r29, 0x3e	; 62
     f88:	9a 83       	std	Y+2, r25	; 0x02
     f8a:	89 83       	std	Y+1, r24	; 0x01
     f8c:	7c 83       	std	Y+4, r23	; 0x04
     f8e:	6b 83       	std	Y+3, r22	; 0x03
     f90:	5e 83       	std	Y+6, r21	; 0x06
     f92:	4d 83       	std	Y+5, r20	; 0x05
    next->prev = new;
     f94:	8d 81       	ldd	r24, Y+5	; 0x05
     f96:	9e 81       	ldd	r25, Y+6	; 0x06
     f98:	29 81       	ldd	r18, Y+1	; 0x01
     f9a:	3a 81       	ldd	r19, Y+2	; 0x02
     f9c:	fc 01       	movw	r30, r24
     f9e:	31 83       	std	Z+1, r19	; 0x01
     fa0:	20 83       	st	Z, r18
    new->next = next;
     fa2:	89 81       	ldd	r24, Y+1	; 0x01
     fa4:	9a 81       	ldd	r25, Y+2	; 0x02
     fa6:	2d 81       	ldd	r18, Y+5	; 0x05
     fa8:	3e 81       	ldd	r19, Y+6	; 0x06
     faa:	fc 01       	movw	r30, r24
     fac:	33 83       	std	Z+3, r19	; 0x03
     fae:	22 83       	std	Z+2, r18	; 0x02
    new->prev = prev;
     fb0:	89 81       	ldd	r24, Y+1	; 0x01
     fb2:	9a 81       	ldd	r25, Y+2	; 0x02
     fb4:	2b 81       	ldd	r18, Y+3	; 0x03
     fb6:	3c 81       	ldd	r19, Y+4	; 0x04
     fb8:	fc 01       	movw	r30, r24
     fba:	31 83       	std	Z+1, r19	; 0x01
     fbc:	20 83       	st	Z, r18
    prev->next = new;
     fbe:	8b 81       	ldd	r24, Y+3	; 0x03
     fc0:	9c 81       	ldd	r25, Y+4	; 0x04
     fc2:	29 81       	ldd	r18, Y+1	; 0x01
     fc4:	3a 81       	ldd	r19, Y+2	; 0x02
     fc6:	fc 01       	movw	r30, r24
     fc8:	33 83       	std	Z+3, r19	; 0x03
     fca:	22 83       	std	Z+2, r18	; 0x02
}
     fcc:	26 96       	adiw	r28, 0x06	; 6
     fce:	0f b6       	in	r0, 0x3f	; 63
     fd0:	f8 94       	cli
     fd2:	de bf       	out	0x3e, r29	; 62
     fd4:	0f be       	out	0x3f, r0	; 63
     fd6:	cd bf       	out	0x3d, r28	; 61
     fd8:	df 91       	pop	r29
     fda:	cf 91       	pop	r28
     fdc:	08 95       	ret

00000fde <list_add>:

static inline void list_add(struct list_head* new, struct list_head* head)
{
     fde:	cf 93       	push	r28
     fe0:	df 93       	push	r29
     fe2:	00 d0       	rcall	.+0      	; 0xfe4 <list_add+0x6>
     fe4:	00 d0       	rcall	.+0      	; 0xfe6 <list_add+0x8>
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
     fea:	9a 83       	std	Y+2, r25	; 0x02
     fec:	89 83       	std	Y+1, r24	; 0x01
     fee:	7c 83       	std	Y+4, r23	; 0x04
     ff0:	6b 83       	std	Y+3, r22	; 0x03
    __list_add(new, head, head->next);
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	9c 81       	ldd	r25, Y+4	; 0x04
     ff6:	fc 01       	movw	r30, r24
     ff8:	42 81       	ldd	r20, Z+2	; 0x02
     ffa:	53 81       	ldd	r21, Z+3	; 0x03
     ffc:	2b 81       	ldd	r18, Y+3	; 0x03
     ffe:	3c 81       	ldd	r19, Y+4	; 0x04
    1000:	89 81       	ldd	r24, Y+1	; 0x01
    1002:	9a 81       	ldd	r25, Y+2	; 0x02
    1004:	b9 01       	movw	r22, r18
    1006:	0e 94 bd 07 	call	0xf7a	; 0xf7a <__list_add>
}
    100a:	0f 90       	pop	r0
    100c:	0f 90       	pop	r0
    100e:	0f 90       	pop	r0
    1010:	0f 90       	pop	r0
    1012:	df 91       	pop	r29
    1014:	cf 91       	pop	r28
    1016:	08 95       	ret

00001018 <gpio_register_pin>:
};

LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
    1018:	cf 93       	push	r28
    101a:	df 93       	push	r29
    101c:	cd b7       	in	r28, 0x3d	; 61
    101e:	de b7       	in	r29, 0x3e	; 62
    1020:	2b 97       	sbiw	r28, 0x0b	; 11
    1022:	0f b6       	in	r0, 0x3f	; 63
    1024:	f8 94       	cli
    1026:	de bf       	out	0x3e, r29	; 62
    1028:	0f be       	out	0x3f, r0	; 63
    102a:	cd bf       	out	0x3d, r28	; 61
    102c:	89 87       	std	Y+9, r24	; 0x09
    102e:	6a 87       	std	Y+10, r22	; 0x0a
    1030:	4b 87       	std	Y+11, r20	; 0x0b
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    1032:	80 91 08 01 	lds	r24, 0x0108
    1036:	90 91 09 01 	lds	r25, 0x0109
    103a:	9c 83       	std	Y+4, r25	; 0x04
    103c:	8b 83       	std	Y+3, r24	; 0x03
    103e:	8b 81       	ldd	r24, Y+3	; 0x03
    1040:	9c 81       	ldd	r25, Y+4	; 0x04
    1042:	06 97       	sbiw	r24, 0x06	; 6
    1044:	9a 83       	std	Y+2, r25	; 0x02
    1046:	89 83       	std	Y+1, r24	; 0x01
    1048:	15 c0       	rjmp	.+42     	; 0x1074 <gpio_register_pin+0x5c>
    {
        if(input->pin == pin)
    104a:	89 81       	ldd	r24, Y+1	; 0x01
    104c:	9a 81       	ldd	r25, Y+2	; 0x02
    104e:	fc 01       	movw	r30, r24
    1050:	90 81       	ld	r25, Z
    1052:	89 85       	ldd	r24, Y+9	; 0x09
    1054:	98 17       	cp	r25, r24
    1056:	11 f4       	brne	.+4      	; 0x105c <gpio_register_pin+0x44>
            return 1;
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	e5 c0       	rjmp	.+458    	; 0x1226 <__stack+0x127>
LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    105c:	89 81       	ldd	r24, Y+1	; 0x01
    105e:	9a 81       	ldd	r25, Y+2	; 0x02
    1060:	fc 01       	movw	r30, r24
    1062:	80 85       	ldd	r24, Z+8	; 0x08
    1064:	91 85       	ldd	r25, Z+9	; 0x09
    1066:	9e 83       	std	Y+6, r25	; 0x06
    1068:	8d 83       	std	Y+5, r24	; 0x05
    106a:	8d 81       	ldd	r24, Y+5	; 0x05
    106c:	9e 81       	ldd	r25, Y+6	; 0x06
    106e:	06 97       	sbiw	r24, 0x06	; 6
    1070:	9a 83       	std	Y+2, r25	; 0x02
    1072:	89 83       	std	Y+1, r24	; 0x01
    1074:	89 81       	ldd	r24, Y+1	; 0x01
    1076:	9a 81       	ldd	r25, Y+2	; 0x02
    1078:	06 96       	adiw	r24, 0x06	; 6
    107a:	86 50       	subi	r24, 0x06	; 6
    107c:	91 40       	sbci	r25, 0x01	; 1
    107e:	29 f7       	brne	.-54     	; 0x104a <gpio_register_pin+0x32>
    {
        if(input->pin == pin)
            return 1;
    }

	uint8_t port	= 1 + pin / 8;
    1080:	89 85       	ldd	r24, Y+9	; 0x09
    1082:	86 95       	lsr	r24
    1084:	86 95       	lsr	r24
    1086:	86 95       	lsr	r24
    1088:	8f 5f       	subi	r24, 0xFF	; 255
    108a:	8f 83       	std	Y+7, r24	; 0x07
	uint8_t pin_reg = pin % 8;
    108c:	89 85       	ldd	r24, Y+9	; 0x09
    108e:	87 70       	andi	r24, 0x07	; 7
    1090:	88 87       	std	Y+8, r24	; 0x08
	if(direction == GPIO_DIRECTION_OUTPUT)
    1092:	8a 85       	ldd	r24, Y+10	; 0x0a
    1094:	81 30       	cpi	r24, 0x01	; 1
    1096:	09 f0       	breq	.+2      	; 0x109a <gpio_register_pin+0x82>
    1098:	55 c0       	rjmp	.+170    	; 0x1144 <__stack+0x45>
	{
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) |= (1 << pin_reg);
    109a:	8f 81       	ldd	r24, Y+7	; 0x07
    109c:	88 2f       	mov	r24, r24
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	9c 01       	movw	r18, r24
    10a2:	21 50       	subi	r18, 0x01	; 1
    10a4:	31 09       	sbc	r19, r1
    10a6:	c9 01       	movw	r24, r18
    10a8:	88 0f       	add	r24, r24
    10aa:	99 1f       	adc	r25, r25
    10ac:	82 0f       	add	r24, r18
    10ae:	93 1f       	adc	r25, r19
    10b0:	81 96       	adiw	r24, 0x21	; 33
    10b2:	ac 01       	movw	r20, r24
    10b4:	8f 81       	ldd	r24, Y+7	; 0x07
    10b6:	88 2f       	mov	r24, r24
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	9c 01       	movw	r18, r24
    10bc:	21 50       	subi	r18, 0x01	; 1
    10be:	31 09       	sbc	r19, r1
    10c0:	c9 01       	movw	r24, r18
    10c2:	88 0f       	add	r24, r24
    10c4:	99 1f       	adc	r25, r25
    10c6:	82 0f       	add	r24, r18
    10c8:	93 1f       	adc	r25, r19
    10ca:	81 96       	adiw	r24, 0x21	; 33
    10cc:	fc 01       	movw	r30, r24
    10ce:	80 81       	ld	r24, Z
    10d0:	68 2f       	mov	r22, r24
    10d2:	88 85       	ldd	r24, Y+8	; 0x08
    10d4:	28 2f       	mov	r18, r24
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	02 c0       	rjmp	.+4      	; 0x10e2 <gpio_register_pin+0xca>
    10de:	88 0f       	add	r24, r24
    10e0:	99 1f       	adc	r25, r25
    10e2:	2a 95       	dec	r18
    10e4:	e2 f7       	brpl	.-8      	; 0x10de <gpio_register_pin+0xc6>
    10e6:	86 2b       	or	r24, r22
    10e8:	fa 01       	movw	r30, r20
    10ea:	80 83       	st	Z, r24
		*(volatile uint8_t*)(0x22 + 3 *  (port - 1)) &= ~(1 << pin_reg);
    10ec:	8f 81       	ldd	r24, Y+7	; 0x07
    10ee:	88 2f       	mov	r24, r24
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	9c 01       	movw	r18, r24
    10f4:	21 50       	subi	r18, 0x01	; 1
    10f6:	31 09       	sbc	r19, r1
    10f8:	c9 01       	movw	r24, r18
    10fa:	88 0f       	add	r24, r24
    10fc:	99 1f       	adc	r25, r25
    10fe:	82 0f       	add	r24, r18
    1100:	93 1f       	adc	r25, r19
    1102:	82 96       	adiw	r24, 0x22	; 34
    1104:	ac 01       	movw	r20, r24
    1106:	8f 81       	ldd	r24, Y+7	; 0x07
    1108:	88 2f       	mov	r24, r24
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	9c 01       	movw	r18, r24
    110e:	21 50       	subi	r18, 0x01	; 1
    1110:	31 09       	sbc	r19, r1
    1112:	c9 01       	movw	r24, r18
    1114:	88 0f       	add	r24, r24
    1116:	99 1f       	adc	r25, r25
    1118:	82 0f       	add	r24, r18
    111a:	93 1f       	adc	r25, r19
    111c:	82 96       	adiw	r24, 0x22	; 34
    111e:	fc 01       	movw	r30, r24
    1120:	80 81       	ld	r24, Z
    1122:	68 2f       	mov	r22, r24
    1124:	88 85       	ldd	r24, Y+8	; 0x08
    1126:	28 2f       	mov	r18, r24
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	02 c0       	rjmp	.+4      	; 0x1134 <__stack+0x35>
    1130:	88 0f       	add	r24, r24
    1132:	99 1f       	adc	r25, r25
    1134:	2a 95       	dec	r18
    1136:	e2 f7       	brpl	.-8      	; 0x1130 <__stack+0x31>
    1138:	80 95       	com	r24
    113a:	86 23       	and	r24, r22
    113c:	fa 01       	movw	r30, r20
    113e:	80 83       	st	Z, r24
        return 0;
    1140:	80 e0       	ldi	r24, 0x00	; 0
    1142:	71 c0       	rjmp	.+226    	; 0x1226 <__stack+0x127>
	}
	else
	{
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) &= ~(1 << pin_reg);
    1144:	8f 81       	ldd	r24, Y+7	; 0x07
    1146:	88 2f       	mov	r24, r24
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	9c 01       	movw	r18, r24
    114c:	21 50       	subi	r18, 0x01	; 1
    114e:	31 09       	sbc	r19, r1
    1150:	c9 01       	movw	r24, r18
    1152:	88 0f       	add	r24, r24
    1154:	99 1f       	adc	r25, r25
    1156:	82 0f       	add	r24, r18
    1158:	93 1f       	adc	r25, r19
    115a:	81 96       	adiw	r24, 0x21	; 33
    115c:	ac 01       	movw	r20, r24
    115e:	8f 81       	ldd	r24, Y+7	; 0x07
    1160:	88 2f       	mov	r24, r24
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	9c 01       	movw	r18, r24
    1166:	21 50       	subi	r18, 0x01	; 1
    1168:	31 09       	sbc	r19, r1
    116a:	c9 01       	movw	r24, r18
    116c:	88 0f       	add	r24, r24
    116e:	99 1f       	adc	r25, r25
    1170:	82 0f       	add	r24, r18
    1172:	93 1f       	adc	r25, r19
    1174:	81 96       	adiw	r24, 0x21	; 33
    1176:	fc 01       	movw	r30, r24
    1178:	80 81       	ld	r24, Z
    117a:	68 2f       	mov	r22, r24
    117c:	88 85       	ldd	r24, Y+8	; 0x08
    117e:	28 2f       	mov	r18, r24
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	02 c0       	rjmp	.+4      	; 0x118c <__stack+0x8d>
    1188:	88 0f       	add	r24, r24
    118a:	99 1f       	adc	r25, r25
    118c:	2a 95       	dec	r18
    118e:	e2 f7       	brpl	.-8      	; 0x1188 <__stack+0x89>
    1190:	80 95       	com	r24
    1192:	86 23       	and	r24, r22
    1194:	fa 01       	movw	r30, r20
    1196:	80 83       	st	Z, r24
		*(volatile uint8_t*)(0x22 + 3 *  (port - 1)) |= (1 << pin_reg);
    1198:	8f 81       	ldd	r24, Y+7	; 0x07
    119a:	88 2f       	mov	r24, r24
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	9c 01       	movw	r18, r24
    11a0:	21 50       	subi	r18, 0x01	; 1
    11a2:	31 09       	sbc	r19, r1
    11a4:	c9 01       	movw	r24, r18
    11a6:	88 0f       	add	r24, r24
    11a8:	99 1f       	adc	r25, r25
    11aa:	82 0f       	add	r24, r18
    11ac:	93 1f       	adc	r25, r19
    11ae:	82 96       	adiw	r24, 0x22	; 34
    11b0:	ac 01       	movw	r20, r24
    11b2:	8f 81       	ldd	r24, Y+7	; 0x07
    11b4:	88 2f       	mov	r24, r24
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	9c 01       	movw	r18, r24
    11ba:	21 50       	subi	r18, 0x01	; 1
    11bc:	31 09       	sbc	r19, r1
    11be:	c9 01       	movw	r24, r18
    11c0:	88 0f       	add	r24, r24
    11c2:	99 1f       	adc	r25, r25
    11c4:	82 0f       	add	r24, r18
    11c6:	93 1f       	adc	r25, r19
    11c8:	82 96       	adiw	r24, 0x22	; 34
    11ca:	fc 01       	movw	r30, r24
    11cc:	80 81       	ld	r24, Z
    11ce:	68 2f       	mov	r22, r24
    11d0:	88 85       	ldd	r24, Y+8	; 0x08
    11d2:	28 2f       	mov	r18, r24
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	02 c0       	rjmp	.+4      	; 0x11e0 <__stack+0xe1>
    11dc:	88 0f       	add	r24, r24
    11de:	99 1f       	adc	r25, r25
    11e0:	2a 95       	dec	r18
    11e2:	e2 f7       	brpl	.-8      	; 0x11dc <__stack+0xdd>
    11e4:	86 2b       	or	r24, r22
    11e6:	fa 01       	movw	r30, r20
    11e8:	80 83       	st	Z, r24
	}
    input = (struct gpio_input*)malloc(sizeof(struct gpio_input));
    11ea:	8a e0       	ldi	r24, 0x0A	; 10
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	0e 94 47 1a 	call	0x348e	; 0x348e <malloc>
    11f2:	9a 83       	std	Y+2, r25	; 0x02
    11f4:	89 83       	std	Y+1, r24	; 0x01
    if(input == NULL)
    11f6:	89 81       	ldd	r24, Y+1	; 0x01
    11f8:	9a 81       	ldd	r25, Y+2	; 0x02
    11fa:	89 2b       	or	r24, r25
    11fc:	11 f4       	brne	.+4      	; 0x1202 <__stack+0x103>
        return 1;
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	12 c0       	rjmp	.+36     	; 0x1226 <__stack+0x127>

    input->pin       = pin;
    1202:	89 81       	ldd	r24, Y+1	; 0x01
    1204:	9a 81       	ldd	r25, Y+2	; 0x02
    1206:	29 85       	ldd	r18, Y+9	; 0x09
    1208:	fc 01       	movw	r30, r24
    120a:	20 83       	st	Z, r18
    input->pulled_up = pulled_up;
    120c:	89 81       	ldd	r24, Y+1	; 0x01
    120e:	9a 81       	ldd	r25, Y+2	; 0x02
    1210:	2b 85       	ldd	r18, Y+11	; 0x0b
    1212:	fc 01       	movw	r30, r24
    1214:	21 83       	std	Z+1, r18	; 0x01
    list_add(&input->list, &gpio_inputs);
    1216:	89 81       	ldd	r24, Y+1	; 0x01
    1218:	9a 81       	ldd	r25, Y+2	; 0x02
    121a:	06 96       	adiw	r24, 0x06	; 6
    121c:	66 e0       	ldi	r22, 0x06	; 6
    121e:	71 e0       	ldi	r23, 0x01	; 1
    1220:	0e 94 ef 07 	call	0xfde	; 0xfde <list_add>

    return 0;
    1224:	80 e0       	ldi	r24, 0x00	; 0
}
    1226:	2b 96       	adiw	r28, 0x0b	; 11
    1228:	0f b6       	in	r0, 0x3f	; 63
    122a:	f8 94       	cli
    122c:	de bf       	out	0x3e, r29	; 62
    122e:	0f be       	out	0x3f, r0	; 63
    1230:	cd bf       	out	0x3d, r28	; 61
    1232:	df 91       	pop	r29
    1234:	cf 91       	pop	r28
    1236:	08 95       	ret

00001238 <gpio_write_pin>:

uint8_t gpio_write_pin(uint8_t pin, bool value)
{
    1238:	cf 93       	push	r28
    123a:	df 93       	push	r29
    123c:	00 d0       	rcall	.+0      	; 0x123e <gpio_write_pin+0x6>
    123e:	00 d0       	rcall	.+0      	; 0x1240 <gpio_write_pin+0x8>
    1240:	cd b7       	in	r28, 0x3d	; 61
    1242:	de b7       	in	r29, 0x3e	; 62
    1244:	8b 83       	std	Y+3, r24	; 0x03
    1246:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t port = 1 + pin / 8;
    1248:	8b 81       	ldd	r24, Y+3	; 0x03
    124a:	86 95       	lsr	r24
    124c:	86 95       	lsr	r24
    124e:	86 95       	lsr	r24
    1250:	8f 5f       	subi	r24, 0xFF	; 255
    1252:	89 83       	std	Y+1, r24	; 0x01
	pin = pin % 8;
    1254:	8b 81       	ldd	r24, Y+3	; 0x03
    1256:	87 70       	andi	r24, 0x07	; 7
    1258:	8b 83       	std	Y+3, r24	; 0x03

	uint8_t temp = *(volatile uint32_t*)(0x22 + 3 * (port - 1));
    125a:	89 81       	ldd	r24, Y+1	; 0x01
    125c:	88 2f       	mov	r24, r24
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	9c 01       	movw	r18, r24
    1262:	21 50       	subi	r18, 0x01	; 1
    1264:	31 09       	sbc	r19, r1
    1266:	c9 01       	movw	r24, r18
    1268:	88 0f       	add	r24, r24
    126a:	99 1f       	adc	r25, r25
    126c:	82 0f       	add	r24, r18
    126e:	93 1f       	adc	r25, r19
    1270:	82 96       	adiw	r24, 0x22	; 34
    1272:	fc 01       	movw	r30, r24
    1274:	80 81       	ld	r24, Z
    1276:	91 81       	ldd	r25, Z+1	; 0x01
    1278:	a2 81       	ldd	r26, Z+2	; 0x02
    127a:	b3 81       	ldd	r27, Z+3	; 0x03
    127c:	8a 83       	std	Y+2, r24	; 0x02
	if(value != 0)
    127e:	8c 81       	ldd	r24, Y+4	; 0x04
    1280:	88 23       	and	r24, r24
    1282:	31 f1       	breq	.+76     	; 0x12d0 <gpio_write_pin+0x98>
		*(volatile uint32_t*)(0x22 + 3 * (port - 1)) = temp | (1 << pin);
    1284:	89 81       	ldd	r24, Y+1	; 0x01
    1286:	88 2f       	mov	r24, r24
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	9c 01       	movw	r18, r24
    128c:	21 50       	subi	r18, 0x01	; 1
    128e:	31 09       	sbc	r19, r1
    1290:	c9 01       	movw	r24, r18
    1292:	88 0f       	add	r24, r24
    1294:	99 1f       	adc	r25, r25
    1296:	82 0f       	add	r24, r18
    1298:	93 1f       	adc	r25, r19
    129a:	82 96       	adiw	r24, 0x22	; 34
    129c:	ac 01       	movw	r20, r24
    129e:	8a 81       	ldd	r24, Y+2	; 0x02
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	8b 81       	ldd	r24, Y+3	; 0x03
    12a6:	68 2f       	mov	r22, r24
    12a8:	70 e0       	ldi	r23, 0x00	; 0
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	02 c0       	rjmp	.+4      	; 0x12b4 <gpio_write_pin+0x7c>
    12b0:	88 0f       	add	r24, r24
    12b2:	99 1f       	adc	r25, r25
    12b4:	6a 95       	dec	r22
    12b6:	e2 f7       	brpl	.-8      	; 0x12b0 <gpio_write_pin+0x78>
    12b8:	82 2b       	or	r24, r18
    12ba:	93 2b       	or	r25, r19
    12bc:	09 2e       	mov	r0, r25
    12be:	00 0c       	add	r0, r0
    12c0:	aa 0b       	sbc	r26, r26
    12c2:	bb 0b       	sbc	r27, r27
    12c4:	fa 01       	movw	r30, r20
    12c6:	80 83       	st	Z, r24
    12c8:	91 83       	std	Z+1, r25	; 0x01
    12ca:	a2 83       	std	Z+2, r26	; 0x02
    12cc:	b3 83       	std	Z+3, r27	; 0x03
    12ce:	27 c0       	rjmp	.+78     	; 0x131e <gpio_write_pin+0xe6>
	else
		*(volatile uint32_t*)(0x22 + 3 * (port - 1)) = temp & ~(1 << pin);
    12d0:	89 81       	ldd	r24, Y+1	; 0x01
    12d2:	88 2f       	mov	r24, r24
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	9c 01       	movw	r18, r24
    12d8:	21 50       	subi	r18, 0x01	; 1
    12da:	31 09       	sbc	r19, r1
    12dc:	c9 01       	movw	r24, r18
    12de:	88 0f       	add	r24, r24
    12e0:	99 1f       	adc	r25, r25
    12e2:	82 0f       	add	r24, r18
    12e4:	93 1f       	adc	r25, r19
    12e6:	82 96       	adiw	r24, 0x22	; 34
    12e8:	ac 01       	movw	r20, r24
    12ea:	8a 81       	ldd	r24, Y+2	; 0x02
    12ec:	28 2f       	mov	r18, r24
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	8b 81       	ldd	r24, Y+3	; 0x03
    12f2:	68 2f       	mov	r22, r24
    12f4:	70 e0       	ldi	r23, 0x00	; 0
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	02 c0       	rjmp	.+4      	; 0x1300 <gpio_write_pin+0xc8>
    12fc:	88 0f       	add	r24, r24
    12fe:	99 1f       	adc	r25, r25
    1300:	6a 95       	dec	r22
    1302:	e2 f7       	brpl	.-8      	; 0x12fc <gpio_write_pin+0xc4>
    1304:	80 95       	com	r24
    1306:	90 95       	com	r25
    1308:	82 23       	and	r24, r18
    130a:	93 23       	and	r25, r19
    130c:	09 2e       	mov	r0, r25
    130e:	00 0c       	add	r0, r0
    1310:	aa 0b       	sbc	r26, r26
    1312:	bb 0b       	sbc	r27, r27
    1314:	fa 01       	movw	r30, r20
    1316:	80 83       	st	Z, r24
    1318:	91 83       	std	Z+1, r25	; 0x01
    131a:	a2 83       	std	Z+2, r26	; 0x02
    131c:	b3 83       	std	Z+3, r27	; 0x03
	return 0;
    131e:	80 e0       	ldi	r24, 0x00	; 0
}
    1320:	0f 90       	pop	r0
    1322:	0f 90       	pop	r0
    1324:	0f 90       	pop	r0
    1326:	0f 90       	pop	r0
    1328:	df 91       	pop	r29
    132a:	cf 91       	pop	r28
    132c:	08 95       	ret

0000132e <__gpio_read_pin>:

static uint8_t __gpio_read_pin(uint8_t pin)
{
    132e:	cf 93       	push	r28
    1330:	df 93       	push	r29
    1332:	00 d0       	rcall	.+0      	; 0x1334 <__gpio_read_pin+0x6>
    1334:	1f 92       	push	r1
    1336:	cd b7       	in	r28, 0x3d	; 61
    1338:	de b7       	in	r29, 0x3e	; 62
    133a:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t port = 1 + pin / 8;
    133c:	8b 81       	ldd	r24, Y+3	; 0x03
    133e:	86 95       	lsr	r24
    1340:	86 95       	lsr	r24
    1342:	86 95       	lsr	r24
    1344:	8f 5f       	subi	r24, 0xFF	; 255
    1346:	89 83       	std	Y+1, r24	; 0x01
    pin = pin % 8;
    1348:	8b 81       	ldd	r24, Y+3	; 0x03
    134a:	87 70       	andi	r24, 0x07	; 7
    134c:	8b 83       	std	Y+3, r24	; 0x03
	
	uint8_t temp = (*((volatile uint8_t*)(0x20 + 3 * (port - 1))));
    134e:	89 81       	ldd	r24, Y+1	; 0x01
    1350:	88 2f       	mov	r24, r24
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	9c 01       	movw	r18, r24
    1356:	21 50       	subi	r18, 0x01	; 1
    1358:	31 09       	sbc	r19, r1
    135a:	c9 01       	movw	r24, r18
    135c:	88 0f       	add	r24, r24
    135e:	99 1f       	adc	r25, r25
    1360:	82 0f       	add	r24, r18
    1362:	93 1f       	adc	r25, r19
    1364:	80 96       	adiw	r24, 0x20	; 32
    1366:	fc 01       	movw	r30, r24
    1368:	80 81       	ld	r24, Z
    136a:	8a 83       	std	Y+2, r24	; 0x02

    return ((temp >> pin) & 0x01);
    136c:	8a 81       	ldd	r24, Y+2	; 0x02
    136e:	88 2f       	mov	r24, r24
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	2b 81       	ldd	r18, Y+3	; 0x03
    1374:	22 2f       	mov	r18, r18
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	02 c0       	rjmp	.+4      	; 0x137e <__gpio_read_pin+0x50>
    137a:	95 95       	asr	r25
    137c:	87 95       	ror	r24
    137e:	2a 95       	dec	r18
    1380:	e2 f7       	brpl	.-8      	; 0x137a <__gpio_read_pin+0x4c>
    1382:	81 70       	andi	r24, 0x01	; 1
}
    1384:	0f 90       	pop	r0
    1386:	0f 90       	pop	r0
    1388:	0f 90       	pop	r0
    138a:	df 91       	pop	r29
    138c:	cf 91       	pop	r28
    138e:	08 95       	ret

00001390 <gpio_read_pin>:

uint8_t gpio_read_pin(uint8_t pin)
{
    1390:	cf 93       	push	r28
    1392:	df 93       	push	r29
    1394:	cd b7       	in	r28, 0x3d	; 61
    1396:	de b7       	in	r29, 0x3e	; 62
    1398:	29 97       	sbiw	r28, 0x09	; 9
    139a:	0f b6       	in	r0, 0x3f	; 63
    139c:	f8 94       	cli
    139e:	de bf       	out	0x3e, r29	; 62
    13a0:	0f be       	out	0x3f, r0	; 63
    13a2:	cd bf       	out	0x3d, r28	; 61
    13a4:	89 87       	std	Y+9, r24	; 0x09
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    13a6:	80 91 08 01 	lds	r24, 0x0108
    13aa:	90 91 09 01 	lds	r25, 0x0109
    13ae:	9d 83       	std	Y+5, r25	; 0x05
    13b0:	8c 83       	std	Y+4, r24	; 0x04
    13b2:	8c 81       	ldd	r24, Y+4	; 0x04
    13b4:	9d 81       	ldd	r25, Y+5	; 0x05
    13b6:	06 97       	sbiw	r24, 0x06	; 6
    13b8:	9a 83       	std	Y+2, r25	; 0x02
    13ba:	89 83       	std	Y+1, r24	; 0x01
    13bc:	55 c0       	rjmp	.+170    	; 0x1468 <gpio_read_pin+0xd8>
    {
        if(pin == input->pin)
    13be:	89 81       	ldd	r24, Y+1	; 0x01
    13c0:	9a 81       	ldd	r25, Y+2	; 0x02
    13c2:	fc 01       	movw	r30, r24
    13c4:	90 81       	ld	r25, Z
    13c6:	89 85       	ldd	r24, Y+9	; 0x09
    13c8:	98 17       	cp	r25, r24
    13ca:	09 f0       	breq	.+2      	; 0x13ce <gpio_read_pin+0x3e>
    13cc:	41 c0       	rjmp	.+130    	; 0x1450 <gpio_read_pin+0xc0>
        {
            uint8_t i = 0;
    13ce:	1b 82       	std	Y+3, r1	; 0x03
            while(i < GPIO_DEBOUNCE_COUNT - 1)
    13d0:	1f c0       	rjmp	.+62     	; 0x1410 <gpio_read_pin+0x80>
            {
                if(input->values[i] != input->values[i + 1])
    13d2:	8b 81       	ldd	r24, Y+3	; 0x03
    13d4:	88 2f       	mov	r24, r24
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	29 81       	ldd	r18, Y+1	; 0x01
    13da:	3a 81       	ldd	r19, Y+2	; 0x02
    13dc:	82 0f       	add	r24, r18
    13de:	93 1f       	adc	r25, r19
    13e0:	02 96       	adiw	r24, 0x02	; 2
    13e2:	fc 01       	movw	r30, r24
    13e4:	40 81       	ld	r20, Z
    13e6:	8b 81       	ldd	r24, Y+3	; 0x03
    13e8:	88 2f       	mov	r24, r24
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	01 96       	adiw	r24, 0x01	; 1
    13ee:	29 81       	ldd	r18, Y+1	; 0x01
    13f0:	3a 81       	ldd	r19, Y+2	; 0x02
    13f2:	82 0f       	add	r24, r18
    13f4:	93 1f       	adc	r25, r19
    13f6:	02 96       	adiw	r24, 0x02	; 2
    13f8:	fc 01       	movw	r30, r24
    13fa:	80 81       	ld	r24, Z
    13fc:	48 17       	cp	r20, r24
    13fe:	29 f0       	breq	.+10     	; 0x140a <gpio_read_pin+0x7a>
                    return input->previous_state;
    1400:	89 81       	ldd	r24, Y+1	; 0x01
    1402:	9a 81       	ldd	r25, Y+2	; 0x02
    1404:	fc 01       	movw	r30, r24
    1406:	85 81       	ldd	r24, Z+5	; 0x05
    1408:	37 c0       	rjmp	.+110    	; 0x1478 <gpio_read_pin+0xe8>
                i++;
    140a:	8b 81       	ldd	r24, Y+3	; 0x03
    140c:	8f 5f       	subi	r24, 0xFF	; 255
    140e:	8b 83       	std	Y+3, r24	; 0x03
    list_for_each_entry(input, &gpio_inputs, list)
    {
        if(pin == input->pin)
        {
            uint8_t i = 0;
            while(i < GPIO_DEBOUNCE_COUNT - 1)
    1410:	8b 81       	ldd	r24, Y+3	; 0x03
    1412:	82 30       	cpi	r24, 0x02	; 2
    1414:	f0 f2       	brcs	.-68     	; 0x13d2 <gpio_read_pin+0x42>
                if(input->values[i] != input->values[i + 1])
                    return input->previous_state;
                i++;
            }

            uint8_t state = input->pulled_up == false ? (input->values[0]) : !(input->values[0]);
    1416:	89 81       	ldd	r24, Y+1	; 0x01
    1418:	9a 81       	ldd	r25, Y+2	; 0x02
    141a:	fc 01       	movw	r30, r24
    141c:	91 81       	ldd	r25, Z+1	; 0x01
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	89 27       	eor	r24, r25
    1422:	88 23       	and	r24, r24
    1424:	29 f0       	breq	.+10     	; 0x1430 <gpio_read_pin+0xa0>
    1426:	89 81       	ldd	r24, Y+1	; 0x01
    1428:	9a 81       	ldd	r25, Y+2	; 0x02
    142a:	fc 01       	movw	r30, r24
    142c:	82 81       	ldd	r24, Z+2	; 0x02
    142e:	08 c0       	rjmp	.+16     	; 0x1440 <gpio_read_pin+0xb0>
    1430:	89 81       	ldd	r24, Y+1	; 0x01
    1432:	9a 81       	ldd	r25, Y+2	; 0x02
    1434:	fc 01       	movw	r30, r24
    1436:	92 81       	ldd	r25, Z+2	; 0x02
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	99 23       	and	r25, r25
    143c:	09 f0       	breq	.+2      	; 0x1440 <gpio_read_pin+0xb0>
    143e:	80 e0       	ldi	r24, 0x00	; 0
    1440:	88 87       	std	Y+8, r24	; 0x08
            input->previous_state = state;
    1442:	89 81       	ldd	r24, Y+1	; 0x01
    1444:	9a 81       	ldd	r25, Y+2	; 0x02
    1446:	28 85       	ldd	r18, Y+8	; 0x08
    1448:	fc 01       	movw	r30, r24
    144a:	25 83       	std	Z+5, r18	; 0x05

            return state;
    144c:	88 85       	ldd	r24, Y+8	; 0x08
    144e:	14 c0       	rjmp	.+40     	; 0x1478 <gpio_read_pin+0xe8>
}

uint8_t gpio_read_pin(uint8_t pin)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    1450:	89 81       	ldd	r24, Y+1	; 0x01
    1452:	9a 81       	ldd	r25, Y+2	; 0x02
    1454:	fc 01       	movw	r30, r24
    1456:	80 85       	ldd	r24, Z+8	; 0x08
    1458:	91 85       	ldd	r25, Z+9	; 0x09
    145a:	9f 83       	std	Y+7, r25	; 0x07
    145c:	8e 83       	std	Y+6, r24	; 0x06
    145e:	8e 81       	ldd	r24, Y+6	; 0x06
    1460:	9f 81       	ldd	r25, Y+7	; 0x07
    1462:	06 97       	sbiw	r24, 0x06	; 6
    1464:	9a 83       	std	Y+2, r25	; 0x02
    1466:	89 83       	std	Y+1, r24	; 0x01
    1468:	89 81       	ldd	r24, Y+1	; 0x01
    146a:	9a 81       	ldd	r25, Y+2	; 0x02
    146c:	06 96       	adiw	r24, 0x06	; 6
    146e:	86 50       	subi	r24, 0x06	; 6
    1470:	91 40       	sbci	r25, 0x01	; 1
    1472:	09 f0       	breq	.+2      	; 0x1476 <gpio_read_pin+0xe6>
    1474:	a4 cf       	rjmp	.-184    	; 0x13be <gpio_read_pin+0x2e>

            return state;
        }
    }

    return 1;
    1476:	81 e0       	ldi	r24, 0x01	; 1
}
    1478:	29 96       	adiw	r28, 0x09	; 9
    147a:	0f b6       	in	r0, 0x3f	; 63
    147c:	f8 94       	cli
    147e:	de bf       	out	0x3e, r29	; 62
    1480:	0f be       	out	0x3f, r0	; 63
    1482:	cd bf       	out	0x3d, r28	; 61
    1484:	df 91       	pop	r29
    1486:	cf 91       	pop	r28
    1488:	08 95       	ret

0000148a <gpio_debouncer>:
uint16_t test = 0;
void gpio_debouncer(void)
{
    148a:	0f 93       	push	r16
    148c:	1f 93       	push	r17
    148e:	cf 93       	push	r28
    1490:	df 93       	push	r29
    1492:	00 d0       	rcall	.+0      	; 0x1494 <gpio_debouncer+0xa>
    1494:	00 d0       	rcall	.+0      	; 0x1496 <gpio_debouncer+0xc>
    1496:	00 d0       	rcall	.+0      	; 0x1498 <gpio_debouncer+0xe>
    1498:	cd b7       	in	r28, 0x3d	; 61
    149a:	de b7       	in	r29, 0x3e	; 62
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    149c:	80 91 08 01 	lds	r24, 0x0108
    14a0:	90 91 09 01 	lds	r25, 0x0109
    14a4:	9c 83       	std	Y+4, r25	; 0x04
    14a6:	8b 83       	std	Y+3, r24	; 0x03
    14a8:	8b 81       	ldd	r24, Y+3	; 0x03
    14aa:	9c 81       	ldd	r25, Y+4	; 0x04
    14ac:	06 97       	sbiw	r24, 0x06	; 6
    14ae:	9a 83       	std	Y+2, r25	; 0x02
    14b0:	89 83       	std	Y+1, r24	; 0x01
    14b2:	1e c0       	rjmp	.+60     	; 0x14f0 <gpio_debouncer+0x66>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    14b4:	00 91 72 01 	lds	r16, 0x0172
    14b8:	10 91 73 01 	lds	r17, 0x0173
    14bc:	89 81       	ldd	r24, Y+1	; 0x01
    14be:	9a 81       	ldd	r25, Y+2	; 0x02
    14c0:	fc 01       	movw	r30, r24
    14c2:	80 81       	ld	r24, Z
    14c4:	0e 94 97 09 	call	0x132e	; 0x132e <__gpio_read_pin>
    14c8:	28 2f       	mov	r18, r24
    14ca:	89 81       	ldd	r24, Y+1	; 0x01
    14cc:	9a 81       	ldd	r25, Y+2	; 0x02
    14ce:	80 0f       	add	r24, r16
    14d0:	91 1f       	adc	r25, r17
    14d2:	02 96       	adiw	r24, 0x02	; 2
    14d4:	fc 01       	movw	r30, r24
    14d6:	20 83       	st	Z, r18
uint16_t test = 0;
void gpio_debouncer(void)
{
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    14d8:	89 81       	ldd	r24, Y+1	; 0x01
    14da:	9a 81       	ldd	r25, Y+2	; 0x02
    14dc:	fc 01       	movw	r30, r24
    14de:	80 85       	ldd	r24, Z+8	; 0x08
    14e0:	91 85       	ldd	r25, Z+9	; 0x09
    14e2:	9e 83       	std	Y+6, r25	; 0x06
    14e4:	8d 83       	std	Y+5, r24	; 0x05
    14e6:	8d 81       	ldd	r24, Y+5	; 0x05
    14e8:	9e 81       	ldd	r25, Y+6	; 0x06
    14ea:	06 97       	sbiw	r24, 0x06	; 6
    14ec:	9a 83       	std	Y+2, r25	; 0x02
    14ee:	89 83       	std	Y+1, r24	; 0x01
    14f0:	89 81       	ldd	r24, Y+1	; 0x01
    14f2:	9a 81       	ldd	r25, Y+2	; 0x02
    14f4:	06 96       	adiw	r24, 0x06	; 6
    14f6:	86 50       	subi	r24, 0x06	; 6
    14f8:	91 40       	sbci	r25, 0x01	; 1
    14fa:	e1 f6       	brne	.-72     	; 0x14b4 <gpio_debouncer+0x2a>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    }

    if(++count == GPIO_DEBOUNCE_COUNT)
    14fc:	80 91 72 01 	lds	r24, 0x0172
    1500:	90 91 73 01 	lds	r25, 0x0173
    1504:	01 96       	adiw	r24, 0x01	; 1
    1506:	90 93 73 01 	sts	0x0173, r25
    150a:	80 93 72 01 	sts	0x0172, r24
    150e:	03 97       	sbiw	r24, 0x03	; 3
    1510:	21 f4       	brne	.+8      	; 0x151a <gpio_debouncer+0x90>
        count = 0;
    1512:	10 92 73 01 	sts	0x0173, r1
    1516:	10 92 72 01 	sts	0x0172, r1
	
}
    151a:	26 96       	adiw	r28, 0x06	; 6
    151c:	0f b6       	in	r0, 0x3f	; 63
    151e:	f8 94       	cli
    1520:	de bf       	out	0x3e, r29	; 62
    1522:	0f be       	out	0x3f, r0	; 63
    1524:	cd bf       	out	0x3d, r28	; 61
    1526:	df 91       	pop	r29
    1528:	cf 91       	pop	r28
    152a:	1f 91       	pop	r17
    152c:	0f 91       	pop	r16
    152e:	08 95       	ret

00001530 <odometry_set_speed>:
	.angle = 0,
	.state = IDLE
};

void odometry_set_speed(uint8_t speed)
{
    1530:	cf 93       	push	r28
    1532:	df 93       	push	r29
    1534:	cd b7       	in	r28, 0x3d	; 61
    1536:	de b7       	in	r29, 0x3e	; 62
    1538:	67 97       	sbiw	r28, 0x17	; 23
    153a:	0f b6       	in	r0, 0x3f	; 63
    153c:	f8 94       	cli
    153e:	de bf       	out	0x3e, r29	; 62
    1540:	0f be       	out	0x3f, r0	; 63
    1542:	cd bf       	out	0x3d, r28	; 61
    1544:	8f 8b       	std	Y+23, r24	; 0x17
	if(speed == current_speed)
    1546:	80 91 74 01 	lds	r24, 0x0174
    154a:	9f 89       	ldd	r25, Y+23	; 0x17
    154c:	98 17       	cp	r25, r24
    154e:	09 f4       	brne	.+2      	; 0x1552 <odometry_set_speed+0x22>
    1550:	82 c0       	rjmp	.+260    	; 0x1656 <odometry_set_speed+0x126>
	return;

	uint8_t buffer[8];
	buffer[0] = 'V';
    1552:	86 e5       	ldi	r24, 0x56	; 86
    1554:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = speed;
    1556:	8f 89       	ldd	r24, Y+23	; 0x17
    1558:	88 8b       	std	Y+16, r24	; 0x10
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    155a:	72 c0       	rjmp	.+228    	; 0x1640 <odometry_set_speed+0x110>
    155c:	80 e0       	ldi	r24, 0x00	; 0
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	a8 e4       	ldi	r26, 0x48	; 72
    1562:	b2 e4       	ldi	r27, 0x42	; 66
    1564:	89 83       	std	Y+1, r24	; 0x01
    1566:	9a 83       	std	Y+2, r25	; 0x02
    1568:	ab 83       	std	Y+3, r26	; 0x03
    156a:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    156c:	20 e0       	ldi	r18, 0x00	; 0
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	4a e7       	ldi	r20, 0x7A	; 122
    1572:	53 e4       	ldi	r21, 0x43	; 67
    1574:	69 81       	ldd	r22, Y+1	; 0x01
    1576:	7a 81       	ldd	r23, Y+2	; 0x02
    1578:	8b 81       	ldd	r24, Y+3	; 0x03
    157a:	9c 81       	ldd	r25, Y+4	; 0x04
    157c:	0e 94 be 19 	call	0x337c	; 0x337c <__mulsf3>
    1580:	dc 01       	movw	r26, r24
    1582:	cb 01       	movw	r24, r22
    1584:	8d 83       	std	Y+5, r24	; 0x05
    1586:	9e 83       	std	Y+6, r25	; 0x06
    1588:	af 83       	std	Y+7, r26	; 0x07
    158a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    158c:	20 e0       	ldi	r18, 0x00	; 0
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	40 e8       	ldi	r20, 0x80	; 128
    1592:	5f e3       	ldi	r21, 0x3F	; 63
    1594:	6d 81       	ldd	r22, Y+5	; 0x05
    1596:	7e 81       	ldd	r23, Y+6	; 0x06
    1598:	8f 81       	ldd	r24, Y+7	; 0x07
    159a:	98 85       	ldd	r25, Y+8	; 0x08
    159c:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__cmpsf2>
    15a0:	88 23       	and	r24, r24
    15a2:	2c f4       	brge	.+10     	; 0x15ae <odometry_set_speed+0x7e>
		__ticks = 1;
    15a4:	81 e0       	ldi	r24, 0x01	; 1
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	9a 87       	std	Y+10, r25	; 0x0a
    15aa:	89 87       	std	Y+9, r24	; 0x09
    15ac:	3f c0       	rjmp	.+126    	; 0x162c <odometry_set_speed+0xfc>
	else if (__tmp > 65535)
    15ae:	20 e0       	ldi	r18, 0x00	; 0
    15b0:	3f ef       	ldi	r19, 0xFF	; 255
    15b2:	4f e7       	ldi	r20, 0x7F	; 127
    15b4:	57 e4       	ldi	r21, 0x47	; 71
    15b6:	6d 81       	ldd	r22, Y+5	; 0x05
    15b8:	7e 81       	ldd	r23, Y+6	; 0x06
    15ba:	8f 81       	ldd	r24, Y+7	; 0x07
    15bc:	98 85       	ldd	r25, Y+8	; 0x08
    15be:	0e 94 b9 19 	call	0x3372	; 0x3372 <__gesf2>
    15c2:	18 16       	cp	r1, r24
    15c4:	4c f5       	brge	.+82     	; 0x1618 <odometry_set_speed+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15c6:	20 e0       	ldi	r18, 0x00	; 0
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	40 e2       	ldi	r20, 0x20	; 32
    15cc:	51 e4       	ldi	r21, 0x41	; 65
    15ce:	69 81       	ldd	r22, Y+1	; 0x01
    15d0:	7a 81       	ldd	r23, Y+2	; 0x02
    15d2:	8b 81       	ldd	r24, Y+3	; 0x03
    15d4:	9c 81       	ldd	r25, Y+4	; 0x04
    15d6:	0e 94 be 19 	call	0x337c	; 0x337c <__mulsf3>
    15da:	dc 01       	movw	r26, r24
    15dc:	cb 01       	movw	r24, r22
    15de:	bc 01       	movw	r22, r24
    15e0:	cd 01       	movw	r24, r26
    15e2:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <__fixunssfsi>
    15e6:	dc 01       	movw	r26, r24
    15e8:	cb 01       	movw	r24, r22
    15ea:	9a 87       	std	Y+10, r25	; 0x0a
    15ec:	89 87       	std	Y+9, r24	; 0x09
    15ee:	0f c0       	rjmp	.+30     	; 0x160e <odometry_set_speed+0xde>
    15f0:	89 e1       	ldi	r24, 0x19	; 25
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	9c 87       	std	Y+12, r25	; 0x0c
    15f6:	8b 87       	std	Y+11, r24	; 0x0b
    15f8:	8b 85       	ldd	r24, Y+11	; 0x0b
    15fa:	9c 85       	ldd	r25, Y+12	; 0x0c
    15fc:	01 97       	sbiw	r24, 0x01	; 1
    15fe:	f1 f7       	brne	.-4      	; 0x15fc <odometry_set_speed+0xcc>
    1600:	9c 87       	std	Y+12, r25	; 0x0c
    1602:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1604:	89 85       	ldd	r24, Y+9	; 0x09
    1606:	9a 85       	ldd	r25, Y+10	; 0x0a
    1608:	01 97       	sbiw	r24, 0x01	; 1
    160a:	9a 87       	std	Y+10, r25	; 0x0a
    160c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    160e:	89 85       	ldd	r24, Y+9	; 0x09
    1610:	9a 85       	ldd	r25, Y+10	; 0x0a
    1612:	89 2b       	or	r24, r25
    1614:	69 f7       	brne	.-38     	; 0x15f0 <odometry_set_speed+0xc0>
    1616:	14 c0       	rjmp	.+40     	; 0x1640 <odometry_set_speed+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1618:	6d 81       	ldd	r22, Y+5	; 0x05
    161a:	7e 81       	ldd	r23, Y+6	; 0x06
    161c:	8f 81       	ldd	r24, Y+7	; 0x07
    161e:	98 85       	ldd	r25, Y+8	; 0x08
    1620:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <__fixunssfsi>
    1624:	dc 01       	movw	r26, r24
    1626:	cb 01       	movw	r24, r22
    1628:	9a 87       	std	Y+10, r25	; 0x0a
    162a:	89 87       	std	Y+9, r24	; 0x09
    162c:	89 85       	ldd	r24, Y+9	; 0x09
    162e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1630:	9e 87       	std	Y+14, r25	; 0x0e
    1632:	8d 87       	std	Y+13, r24	; 0x0d
    1634:	8d 85       	ldd	r24, Y+13	; 0x0d
    1636:	9e 85       	ldd	r25, Y+14	; 0x0e
    1638:	01 97       	sbiw	r24, 0x01	; 1
    163a:	f1 f7       	brne	.-4      	; 0x1638 <odometry_set_speed+0x108>
    163c:	9e 87       	std	Y+14, r25	; 0x0e
    163e:	8d 87       	std	Y+13, r24	; 0x0d
    1640:	ce 01       	movw	r24, r28
    1642:	0f 96       	adiw	r24, 0x0f	; 15
    1644:	63 ec       	ldi	r22, 0xC3	; 195
    1646:	0e 94 33 07 	call	0xe66	; 0xe66 <CAN_Write>
    164a:	88 23       	and	r24, r24
    164c:	09 f0       	breq	.+2      	; 0x1650 <odometry_set_speed+0x120>
    164e:	86 cf       	rjmp	.-244    	; 0x155c <odometry_set_speed+0x2c>
	_delay_ms(50);

	current_speed = speed;
    1650:	8f 89       	ldd	r24, Y+23	; 0x17
    1652:	80 93 74 01 	sts	0x0174, r24
}
    1656:	67 96       	adiw	r28, 0x17	; 23
    1658:	0f b6       	in	r0, 0x3f	; 63
    165a:	f8 94       	cli
    165c:	de bf       	out	0x3e, r29	; 62
    165e:	0f be       	out	0x3f, r0	; 63
    1660:	cd bf       	out	0x3d, r28	; 61
    1662:	df 91       	pop	r29
    1664:	cf 91       	pop	r28
    1666:	08 95       	ret

00001668 <odometry_query_position>:

static void odometry_query_position(void)
{
    1668:	cf 93       	push	r28
    166a:	df 93       	push	r29
    166c:	cd b7       	in	r28, 0x3d	; 61
    166e:	de b7       	in	r29, 0x3e	; 62
    1670:	66 97       	sbiw	r28, 0x16	; 22
    1672:	0f b6       	in	r0, 0x3f	; 63
    1674:	f8 94       	cli
    1676:	de bf       	out	0x3e, r29	; 62
    1678:	0f be       	out	0x3f, r0	; 63
    167a:	cd bf       	out	0x3d, r28	; 61
	uint8_t buffer[8];
	buffer[0] = 'P';
    167c:	80 e5       	ldi	r24, 0x50	; 80
    167e:	8f 87       	std	Y+15, r24	; 0x0f
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1680:	72 c0       	rjmp	.+228    	; 0x1766 <odometry_query_position+0xfe>
    1682:	80 e0       	ldi	r24, 0x00	; 0
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	a8 e4       	ldi	r26, 0x48	; 72
    1688:	b2 e4       	ldi	r27, 0x42	; 66
    168a:	89 83       	std	Y+1, r24	; 0x01
    168c:	9a 83       	std	Y+2, r25	; 0x02
    168e:	ab 83       	std	Y+3, r26	; 0x03
    1690:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1692:	20 e0       	ldi	r18, 0x00	; 0
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	4a e7       	ldi	r20, 0x7A	; 122
    1698:	53 e4       	ldi	r21, 0x43	; 67
    169a:	69 81       	ldd	r22, Y+1	; 0x01
    169c:	7a 81       	ldd	r23, Y+2	; 0x02
    169e:	8b 81       	ldd	r24, Y+3	; 0x03
    16a0:	9c 81       	ldd	r25, Y+4	; 0x04
    16a2:	0e 94 be 19 	call	0x337c	; 0x337c <__mulsf3>
    16a6:	dc 01       	movw	r26, r24
    16a8:	cb 01       	movw	r24, r22
    16aa:	8d 83       	std	Y+5, r24	; 0x05
    16ac:	9e 83       	std	Y+6, r25	; 0x06
    16ae:	af 83       	std	Y+7, r26	; 0x07
    16b0:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    16b2:	20 e0       	ldi	r18, 0x00	; 0
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	40 e8       	ldi	r20, 0x80	; 128
    16b8:	5f e3       	ldi	r21, 0x3F	; 63
    16ba:	6d 81       	ldd	r22, Y+5	; 0x05
    16bc:	7e 81       	ldd	r23, Y+6	; 0x06
    16be:	8f 81       	ldd	r24, Y+7	; 0x07
    16c0:	98 85       	ldd	r25, Y+8	; 0x08
    16c2:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__cmpsf2>
    16c6:	88 23       	and	r24, r24
    16c8:	2c f4       	brge	.+10     	; 0x16d4 <odometry_query_position+0x6c>
		__ticks = 1;
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	9a 87       	std	Y+10, r25	; 0x0a
    16d0:	89 87       	std	Y+9, r24	; 0x09
    16d2:	3f c0       	rjmp	.+126    	; 0x1752 <odometry_query_position+0xea>
	else if (__tmp > 65535)
    16d4:	20 e0       	ldi	r18, 0x00	; 0
    16d6:	3f ef       	ldi	r19, 0xFF	; 255
    16d8:	4f e7       	ldi	r20, 0x7F	; 127
    16da:	57 e4       	ldi	r21, 0x47	; 71
    16dc:	6d 81       	ldd	r22, Y+5	; 0x05
    16de:	7e 81       	ldd	r23, Y+6	; 0x06
    16e0:	8f 81       	ldd	r24, Y+7	; 0x07
    16e2:	98 85       	ldd	r25, Y+8	; 0x08
    16e4:	0e 94 b9 19 	call	0x3372	; 0x3372 <__gesf2>
    16e8:	18 16       	cp	r1, r24
    16ea:	4c f5       	brge	.+82     	; 0x173e <odometry_query_position+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16ec:	20 e0       	ldi	r18, 0x00	; 0
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	40 e2       	ldi	r20, 0x20	; 32
    16f2:	51 e4       	ldi	r21, 0x41	; 65
    16f4:	69 81       	ldd	r22, Y+1	; 0x01
    16f6:	7a 81       	ldd	r23, Y+2	; 0x02
    16f8:	8b 81       	ldd	r24, Y+3	; 0x03
    16fa:	9c 81       	ldd	r25, Y+4	; 0x04
    16fc:	0e 94 be 19 	call	0x337c	; 0x337c <__mulsf3>
    1700:	dc 01       	movw	r26, r24
    1702:	cb 01       	movw	r24, r22
    1704:	bc 01       	movw	r22, r24
    1706:	cd 01       	movw	r24, r26
    1708:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <__fixunssfsi>
    170c:	dc 01       	movw	r26, r24
    170e:	cb 01       	movw	r24, r22
    1710:	9a 87       	std	Y+10, r25	; 0x0a
    1712:	89 87       	std	Y+9, r24	; 0x09
    1714:	0f c0       	rjmp	.+30     	; 0x1734 <odometry_query_position+0xcc>
    1716:	89 e1       	ldi	r24, 0x19	; 25
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	9c 87       	std	Y+12, r25	; 0x0c
    171c:	8b 87       	std	Y+11, r24	; 0x0b
    171e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1720:	9c 85       	ldd	r25, Y+12	; 0x0c
    1722:	01 97       	sbiw	r24, 0x01	; 1
    1724:	f1 f7       	brne	.-4      	; 0x1722 <odometry_query_position+0xba>
    1726:	9c 87       	std	Y+12, r25	; 0x0c
    1728:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    172a:	89 85       	ldd	r24, Y+9	; 0x09
    172c:	9a 85       	ldd	r25, Y+10	; 0x0a
    172e:	01 97       	sbiw	r24, 0x01	; 1
    1730:	9a 87       	std	Y+10, r25	; 0x0a
    1732:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1734:	89 85       	ldd	r24, Y+9	; 0x09
    1736:	9a 85       	ldd	r25, Y+10	; 0x0a
    1738:	89 2b       	or	r24, r25
    173a:	69 f7       	brne	.-38     	; 0x1716 <odometry_query_position+0xae>
    173c:	14 c0       	rjmp	.+40     	; 0x1766 <odometry_query_position+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    173e:	6d 81       	ldd	r22, Y+5	; 0x05
    1740:	7e 81       	ldd	r23, Y+6	; 0x06
    1742:	8f 81       	ldd	r24, Y+7	; 0x07
    1744:	98 85       	ldd	r25, Y+8	; 0x08
    1746:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <__fixunssfsi>
    174a:	dc 01       	movw	r26, r24
    174c:	cb 01       	movw	r24, r22
    174e:	9a 87       	std	Y+10, r25	; 0x0a
    1750:	89 87       	std	Y+9, r24	; 0x09
    1752:	89 85       	ldd	r24, Y+9	; 0x09
    1754:	9a 85       	ldd	r25, Y+10	; 0x0a
    1756:	9e 87       	std	Y+14, r25	; 0x0e
    1758:	8d 87       	std	Y+13, r24	; 0x0d
    175a:	8d 85       	ldd	r24, Y+13	; 0x0d
    175c:	9e 85       	ldd	r25, Y+14	; 0x0e
    175e:	01 97       	sbiw	r24, 0x01	; 1
    1760:	f1 f7       	brne	.-4      	; 0x175e <odometry_query_position+0xf6>
    1762:	9e 87       	std	Y+14, r25	; 0x0e
    1764:	8d 87       	std	Y+13, r24	; 0x0d
    1766:	ce 01       	movw	r24, r28
    1768:	0f 96       	adiw	r24, 0x0f	; 15
    176a:	63 ec       	ldi	r22, 0xC3	; 195
    176c:	0e 94 33 07 	call	0xe66	; 0xe66 <CAN_Write>
    1770:	88 23       	and	r24, r24
    1772:	09 f0       	breq	.+2      	; 0x1776 <odometry_query_position+0x10e>
    1774:	86 cf       	rjmp	.-244    	; 0x1682 <odometry_query_position+0x1a>
		_delay_ms(50);
	CAN_Read(buffer, DRIVER_RX_IDENTIFICATOR);
    1776:	ce 01       	movw	r24, r28
    1778:	0f 96       	adiw	r24, 0x0f	; 15
    177a:	61 e0       	ldi	r22, 0x01	; 1
    177c:	0e 94 be 06 	call	0xd7c	; 0xd7c <CAN_Read>
	position.state = buffer[0];
    1780:	8f 85       	ldd	r24, Y+15	; 0x0f
    1782:	80 93 10 01 	sts	0x0110, r24
	position.x	   = (buffer[1] << 8) | buffer[2];
    1786:	88 89       	ldd	r24, Y+16	; 0x10
    1788:	88 2f       	mov	r24, r24
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	38 2f       	mov	r19, r24
    178e:	22 27       	eor	r18, r18
    1790:	89 89       	ldd	r24, Y+17	; 0x11
    1792:	88 2f       	mov	r24, r24
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	82 2b       	or	r24, r18
    1798:	93 2b       	or	r25, r19
    179a:	90 93 0b 01 	sts	0x010B, r25
    179e:	80 93 0a 01 	sts	0x010A, r24
	position.y	   = (buffer[3] << 8) | buffer[4];
    17a2:	8a 89       	ldd	r24, Y+18	; 0x12
    17a4:	88 2f       	mov	r24, r24
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	38 2f       	mov	r19, r24
    17aa:	22 27       	eor	r18, r18
    17ac:	8b 89       	ldd	r24, Y+19	; 0x13
    17ae:	88 2f       	mov	r24, r24
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	82 2b       	or	r24, r18
    17b4:	93 2b       	or	r25, r19
    17b6:	90 93 0d 01 	sts	0x010D, r25
    17ba:	80 93 0c 01 	sts	0x010C, r24
	position.angle = (buffer[5] << 8) | buffer[6];
    17be:	8c 89       	ldd	r24, Y+20	; 0x14
    17c0:	88 2f       	mov	r24, r24
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	38 2f       	mov	r19, r24
    17c6:	22 27       	eor	r18, r18
    17c8:	8d 89       	ldd	r24, Y+21	; 0x15
    17ca:	88 2f       	mov	r24, r24
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	82 2b       	or	r24, r18
    17d0:	93 2b       	or	r25, r19
    17d2:	90 93 0f 01 	sts	0x010F, r25
    17d6:	80 93 0e 01 	sts	0x010E, r24
}
    17da:	66 96       	adiw	r28, 0x16	; 22
    17dc:	0f b6       	in	r0, 0x3f	; 63
    17de:	f8 94       	cli
    17e0:	de bf       	out	0x3e, r29	; 62
    17e2:	0f be       	out	0x3f, r0	; 63
    17e4:	cd bf       	out	0x3d, r28	; 61
    17e6:	df 91       	pop	r29
    17e8:	cf 91       	pop	r28
    17ea:	08 95       	ret

000017ec <odometry_wait_until_done>:

static uint8_t odometry_wait_until_done(uint8_t (*callback)(uint32_t start_time))
{
    17ec:	cf 93       	push	r28
    17ee:	df 93       	push	r29
    17f0:	00 d0       	rcall	.+0      	; 0x17f2 <odometry_wait_until_done+0x6>
    17f2:	00 d0       	rcall	.+0      	; 0x17f4 <odometry_wait_until_done+0x8>
    17f4:	00 d0       	rcall	.+0      	; 0x17f6 <odometry_wait_until_done+0xa>
    17f6:	cd b7       	in	r28, 0x3d	; 61
    17f8:	de b7       	in	r29, 0x3e	; 62
    17fa:	9e 83       	std	Y+6, r25	; 0x06
    17fc:	8d 83       	std	Y+5, r24	; 0x05
	uint32_t time = system_get_system_time();
    17fe:	0e 94 8e 11 	call	0x231c	; 0x231c <system_get_system_time>
    1802:	dc 01       	movw	r26, r24
    1804:	cb 01       	movw	r24, r22
    1806:	89 83       	std	Y+1, r24	; 0x01
    1808:	9a 83       	std	Y+2, r25	; 0x02
    180a:	ab 83       	std	Y+3, r26	; 0x03
    180c:	bc 83       	std	Y+4, r27	; 0x04
	do
	{
		odometry_query_position();
    180e:	0e 94 34 0b 	call	0x1668	; 0x1668 <odometry_query_position>
		if(callback != NULL)
    1812:	8d 81       	ldd	r24, Y+5	; 0x05
    1814:	9e 81       	ldd	r25, Y+6	; 0x06
    1816:	89 2b       	or	r24, r25
    1818:	71 f0       	breq	.+28     	; 0x1836 <odometry_wait_until_done+0x4a>
		{
			if(callback(time) == 1)
    181a:	89 81       	ldd	r24, Y+1	; 0x01
    181c:	9a 81       	ldd	r25, Y+2	; 0x02
    181e:	ab 81       	ldd	r26, Y+3	; 0x03
    1820:	bc 81       	ldd	r27, Y+4	; 0x04
    1822:	2d 81       	ldd	r18, Y+5	; 0x05
    1824:	3e 81       	ldd	r19, Y+6	; 0x06
    1826:	bc 01       	movw	r22, r24
    1828:	cd 01       	movw	r24, r26
    182a:	f9 01       	movw	r30, r18
    182c:	09 95       	icall
    182e:	81 30       	cpi	r24, 0x01	; 1
    1830:	11 f4       	brne	.+4      	; 0x1836 <odometry_wait_until_done+0x4a>
				return ODOMETRY_FAIL;
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	09 c0       	rjmp	.+18     	; 0x1848 <odometry_wait_until_done+0x5c>
		}
	}while(position.state == MOVING || position.state == ROTATING);
    1836:	80 91 10 01 	lds	r24, 0x0110
    183a:	8d 34       	cpi	r24, 0x4D	; 77
    183c:	41 f3       	breq	.-48     	; 0x180e <odometry_wait_until_done+0x22>
    183e:	80 91 10 01 	lds	r24, 0x0110
    1842:	82 35       	cpi	r24, 0x52	; 82
    1844:	21 f3       	breq	.-56     	; 0x180e <odometry_wait_until_done+0x22>
	
	return ODOMETRY_SUCCESS;
    1846:	80 e0       	ldi	r24, 0x00	; 0
}
    1848:	26 96       	adiw	r28, 0x06	; 6
    184a:	0f b6       	in	r0, 0x3f	; 63
    184c:	f8 94       	cli
    184e:	de bf       	out	0x3e, r29	; 62
    1850:	0f be       	out	0x3f, r0	; 63
    1852:	cd bf       	out	0x3d, r28	; 61
    1854:	df 91       	pop	r29
    1856:	cf 91       	pop	r28
    1858:	08 95       	ret

0000185a <odometry_stop>:

void odometry_stop(int8_t type)
{
    185a:	cf 93       	push	r28
    185c:	df 93       	push	r29
    185e:	cd b7       	in	r28, 0x3d	; 61
    1860:	de b7       	in	r29, 0x3e	; 62
    1862:	67 97       	sbiw	r28, 0x17	; 23
    1864:	0f b6       	in	r0, 0x3f	; 63
    1866:	f8 94       	cli
    1868:	de bf       	out	0x3e, r29	; 62
    186a:	0f be       	out	0x3f, r0	; 63
    186c:	cd bf       	out	0x3d, r28	; 61
    186e:	8f 8b       	std	Y+23, r24	; 0x17
	uint8_t buffer[8];

	do
	{
		buffer[0] = type;
    1870:	8f 89       	ldd	r24, Y+23	; 0x17
    1872:	8f 87       	std	Y+15, r24	; 0x0f

		while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1874:	72 c0       	rjmp	.+228    	; 0x195a <odometry_stop+0x100>
    1876:	80 e0       	ldi	r24, 0x00	; 0
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	a8 e4       	ldi	r26, 0x48	; 72
    187c:	b2 e4       	ldi	r27, 0x42	; 66
    187e:	89 83       	std	Y+1, r24	; 0x01
    1880:	9a 83       	std	Y+2, r25	; 0x02
    1882:	ab 83       	std	Y+3, r26	; 0x03
    1884:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1886:	20 e0       	ldi	r18, 0x00	; 0
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	4a e7       	ldi	r20, 0x7A	; 122
    188c:	53 e4       	ldi	r21, 0x43	; 67
    188e:	69 81       	ldd	r22, Y+1	; 0x01
    1890:	7a 81       	ldd	r23, Y+2	; 0x02
    1892:	8b 81       	ldd	r24, Y+3	; 0x03
    1894:	9c 81       	ldd	r25, Y+4	; 0x04
    1896:	0e 94 be 19 	call	0x337c	; 0x337c <__mulsf3>
    189a:	dc 01       	movw	r26, r24
    189c:	cb 01       	movw	r24, r22
    189e:	8d 83       	std	Y+5, r24	; 0x05
    18a0:	9e 83       	std	Y+6, r25	; 0x06
    18a2:	af 83       	std	Y+7, r26	; 0x07
    18a4:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    18a6:	20 e0       	ldi	r18, 0x00	; 0
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	40 e8       	ldi	r20, 0x80	; 128
    18ac:	5f e3       	ldi	r21, 0x3F	; 63
    18ae:	6d 81       	ldd	r22, Y+5	; 0x05
    18b0:	7e 81       	ldd	r23, Y+6	; 0x06
    18b2:	8f 81       	ldd	r24, Y+7	; 0x07
    18b4:	98 85       	ldd	r25, Y+8	; 0x08
    18b6:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__cmpsf2>
    18ba:	88 23       	and	r24, r24
    18bc:	2c f4       	brge	.+10     	; 0x18c8 <odometry_stop+0x6e>
		__ticks = 1;
    18be:	81 e0       	ldi	r24, 0x01	; 1
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	9a 87       	std	Y+10, r25	; 0x0a
    18c4:	89 87       	std	Y+9, r24	; 0x09
    18c6:	3f c0       	rjmp	.+126    	; 0x1946 <odometry_stop+0xec>
	else if (__tmp > 65535)
    18c8:	20 e0       	ldi	r18, 0x00	; 0
    18ca:	3f ef       	ldi	r19, 0xFF	; 255
    18cc:	4f e7       	ldi	r20, 0x7F	; 127
    18ce:	57 e4       	ldi	r21, 0x47	; 71
    18d0:	6d 81       	ldd	r22, Y+5	; 0x05
    18d2:	7e 81       	ldd	r23, Y+6	; 0x06
    18d4:	8f 81       	ldd	r24, Y+7	; 0x07
    18d6:	98 85       	ldd	r25, Y+8	; 0x08
    18d8:	0e 94 b9 19 	call	0x3372	; 0x3372 <__gesf2>
    18dc:	18 16       	cp	r1, r24
    18de:	4c f5       	brge	.+82     	; 0x1932 <odometry_stop+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18e0:	20 e0       	ldi	r18, 0x00	; 0
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	40 e2       	ldi	r20, 0x20	; 32
    18e6:	51 e4       	ldi	r21, 0x41	; 65
    18e8:	69 81       	ldd	r22, Y+1	; 0x01
    18ea:	7a 81       	ldd	r23, Y+2	; 0x02
    18ec:	8b 81       	ldd	r24, Y+3	; 0x03
    18ee:	9c 81       	ldd	r25, Y+4	; 0x04
    18f0:	0e 94 be 19 	call	0x337c	; 0x337c <__mulsf3>
    18f4:	dc 01       	movw	r26, r24
    18f6:	cb 01       	movw	r24, r22
    18f8:	bc 01       	movw	r22, r24
    18fa:	cd 01       	movw	r24, r26
    18fc:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <__fixunssfsi>
    1900:	dc 01       	movw	r26, r24
    1902:	cb 01       	movw	r24, r22
    1904:	9a 87       	std	Y+10, r25	; 0x0a
    1906:	89 87       	std	Y+9, r24	; 0x09
    1908:	0f c0       	rjmp	.+30     	; 0x1928 <odometry_stop+0xce>
    190a:	89 e1       	ldi	r24, 0x19	; 25
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	9c 87       	std	Y+12, r25	; 0x0c
    1910:	8b 87       	std	Y+11, r24	; 0x0b
    1912:	8b 85       	ldd	r24, Y+11	; 0x0b
    1914:	9c 85       	ldd	r25, Y+12	; 0x0c
    1916:	01 97       	sbiw	r24, 0x01	; 1
    1918:	f1 f7       	brne	.-4      	; 0x1916 <odometry_stop+0xbc>
    191a:	9c 87       	std	Y+12, r25	; 0x0c
    191c:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    191e:	89 85       	ldd	r24, Y+9	; 0x09
    1920:	9a 85       	ldd	r25, Y+10	; 0x0a
    1922:	01 97       	sbiw	r24, 0x01	; 1
    1924:	9a 87       	std	Y+10, r25	; 0x0a
    1926:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1928:	89 85       	ldd	r24, Y+9	; 0x09
    192a:	9a 85       	ldd	r25, Y+10	; 0x0a
    192c:	89 2b       	or	r24, r25
    192e:	69 f7       	brne	.-38     	; 0x190a <odometry_stop+0xb0>
    1930:	14 c0       	rjmp	.+40     	; 0x195a <odometry_stop+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1932:	6d 81       	ldd	r22, Y+5	; 0x05
    1934:	7e 81       	ldd	r23, Y+6	; 0x06
    1936:	8f 81       	ldd	r24, Y+7	; 0x07
    1938:	98 85       	ldd	r25, Y+8	; 0x08
    193a:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <__fixunssfsi>
    193e:	dc 01       	movw	r26, r24
    1940:	cb 01       	movw	r24, r22
    1942:	9a 87       	std	Y+10, r25	; 0x0a
    1944:	89 87       	std	Y+9, r24	; 0x09
    1946:	89 85       	ldd	r24, Y+9	; 0x09
    1948:	9a 85       	ldd	r25, Y+10	; 0x0a
    194a:	9e 87       	std	Y+14, r25	; 0x0e
    194c:	8d 87       	std	Y+13, r24	; 0x0d
    194e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1950:	9e 85       	ldd	r25, Y+14	; 0x0e
    1952:	01 97       	sbiw	r24, 0x01	; 1
    1954:	f1 f7       	brne	.-4      	; 0x1952 <odometry_stop+0xf8>
    1956:	9e 87       	std	Y+14, r25	; 0x0e
    1958:	8d 87       	std	Y+13, r24	; 0x0d
    195a:	ce 01       	movw	r24, r28
    195c:	0f 96       	adiw	r24, 0x0f	; 15
    195e:	63 ec       	ldi	r22, 0xC3	; 195
    1960:	0e 94 33 07 	call	0xe66	; 0xe66 <CAN_Write>
    1964:	88 23       	and	r24, r24
    1966:	09 f0       	breq	.+2      	; 0x196a <odometry_stop+0x110>
    1968:	86 cf       	rjmp	.-244    	; 0x1876 <odometry_stop+0x1c>
			_delay_ms(50);

		odometry_query_position();
    196a:	0e 94 34 0b 	call	0x1668	; 0x1668 <odometry_query_position>
	}while(position.state == MOVING || position.state == ROTATING);
    196e:	80 91 10 01 	lds	r24, 0x0110
    1972:	8d 34       	cpi	r24, 0x4D	; 77
    1974:	09 f4       	brne	.+2      	; 0x1978 <odometry_stop+0x11e>
    1976:	7c cf       	rjmp	.-264    	; 0x1870 <odometry_stop+0x16>
    1978:	80 91 10 01 	lds	r24, 0x0110
    197c:	82 35       	cpi	r24, 0x52	; 82
    197e:	09 f4       	brne	.+2      	; 0x1982 <odometry_stop+0x128>
    1980:	77 cf       	rjmp	.-274    	; 0x1870 <odometry_stop+0x16>
}
    1982:	67 96       	adiw	r28, 0x17	; 23
    1984:	0f b6       	in	r0, 0x3f	; 63
    1986:	f8 94       	cli
    1988:	de bf       	out	0x3e, r29	; 62
    198a:	0f be       	out	0x3f, r0	; 63
    198c:	cd bf       	out	0x3d, r28	; 61
    198e:	df 91       	pop	r29
    1990:	cf 91       	pop	r28
    1992:	08 95       	ret

00001994 <odometry_move_straight>:

uint8_t odometry_move_straight(int16_t distance, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    1994:	cf 93       	push	r28
    1996:	df 93       	push	r29
    1998:	cd b7       	in	r28, 0x3d	; 61
    199a:	de b7       	in	r29, 0x3e	; 62
    199c:	6b 97       	sbiw	r28, 0x1b	; 27
    199e:	0f b6       	in	r0, 0x3f	; 63
    19a0:	f8 94       	cli
    19a2:	de bf       	out	0x3e, r29	; 62
    19a4:	0f be       	out	0x3f, r0	; 63
    19a6:	cd bf       	out	0x3d, r28	; 61
    19a8:	98 8f       	std	Y+24, r25	; 0x18
    19aa:	8f 8b       	std	Y+23, r24	; 0x17
    19ac:	69 8f       	std	Y+25, r22	; 0x19
    19ae:	5b 8f       	std	Y+27, r21	; 0x1b
    19b0:	4a 8f       	std	Y+26, r20	; 0x1a
	uint8_t buffer[8];
	odometry_set_speed(speed);
    19b2:	89 8d       	ldd	r24, Y+25	; 0x19
    19b4:	0e 94 98 0a 	call	0x1530	; 0x1530 <odometry_set_speed>
	distance *= -1;
    19b8:	8f 89       	ldd	r24, Y+23	; 0x17
    19ba:	98 8d       	ldd	r25, Y+24	; 0x18
    19bc:	91 95       	neg	r25
    19be:	81 95       	neg	r24
    19c0:	91 09       	sbc	r25, r1
    19c2:	98 8f       	std	Y+24, r25	; 0x18
    19c4:	8f 8b       	std	Y+23, r24	; 0x17
	buffer[0] = 'D';
    19c6:	84 e4       	ldi	r24, 0x44	; 68
    19c8:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = distance >> 8;
    19ca:	8f 89       	ldd	r24, Y+23	; 0x17
    19cc:	98 8d       	ldd	r25, Y+24	; 0x18
    19ce:	89 2f       	mov	r24, r25
    19d0:	99 0f       	add	r25, r25
    19d2:	99 0b       	sbc	r25, r25
    19d4:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = distance & 0xFF;
    19d6:	8f 89       	ldd	r24, Y+23	; 0x17
    19d8:	89 8b       	std	Y+17, r24	; 0x11
	
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    19da:	72 c0       	rjmp	.+228    	; 0x1ac0 <odometry_move_straight+0x12c>
    19dc:	80 e0       	ldi	r24, 0x00	; 0
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	a8 e4       	ldi	r26, 0x48	; 72
    19e2:	b2 e4       	ldi	r27, 0x42	; 66
    19e4:	89 83       	std	Y+1, r24	; 0x01
    19e6:	9a 83       	std	Y+2, r25	; 0x02
    19e8:	ab 83       	std	Y+3, r26	; 0x03
    19ea:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    19ec:	20 e0       	ldi	r18, 0x00	; 0
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	4a e7       	ldi	r20, 0x7A	; 122
    19f2:	53 e4       	ldi	r21, 0x43	; 67
    19f4:	69 81       	ldd	r22, Y+1	; 0x01
    19f6:	7a 81       	ldd	r23, Y+2	; 0x02
    19f8:	8b 81       	ldd	r24, Y+3	; 0x03
    19fa:	9c 81       	ldd	r25, Y+4	; 0x04
    19fc:	0e 94 be 19 	call	0x337c	; 0x337c <__mulsf3>
    1a00:	dc 01       	movw	r26, r24
    1a02:	cb 01       	movw	r24, r22
    1a04:	8d 83       	std	Y+5, r24	; 0x05
    1a06:	9e 83       	std	Y+6, r25	; 0x06
    1a08:	af 83       	std	Y+7, r26	; 0x07
    1a0a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1a0c:	20 e0       	ldi	r18, 0x00	; 0
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	40 e8       	ldi	r20, 0x80	; 128
    1a12:	5f e3       	ldi	r21, 0x3F	; 63
    1a14:	6d 81       	ldd	r22, Y+5	; 0x05
    1a16:	7e 81       	ldd	r23, Y+6	; 0x06
    1a18:	8f 81       	ldd	r24, Y+7	; 0x07
    1a1a:	98 85       	ldd	r25, Y+8	; 0x08
    1a1c:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__cmpsf2>
    1a20:	88 23       	and	r24, r24
    1a22:	2c f4       	brge	.+10     	; 0x1a2e <odometry_move_straight+0x9a>
		__ticks = 1;
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	9a 87       	std	Y+10, r25	; 0x0a
    1a2a:	89 87       	std	Y+9, r24	; 0x09
    1a2c:	3f c0       	rjmp	.+126    	; 0x1aac <odometry_move_straight+0x118>
	else if (__tmp > 65535)
    1a2e:	20 e0       	ldi	r18, 0x00	; 0
    1a30:	3f ef       	ldi	r19, 0xFF	; 255
    1a32:	4f e7       	ldi	r20, 0x7F	; 127
    1a34:	57 e4       	ldi	r21, 0x47	; 71
    1a36:	6d 81       	ldd	r22, Y+5	; 0x05
    1a38:	7e 81       	ldd	r23, Y+6	; 0x06
    1a3a:	8f 81       	ldd	r24, Y+7	; 0x07
    1a3c:	98 85       	ldd	r25, Y+8	; 0x08
    1a3e:	0e 94 b9 19 	call	0x3372	; 0x3372 <__gesf2>
    1a42:	18 16       	cp	r1, r24
    1a44:	4c f5       	brge	.+82     	; 0x1a98 <odometry_move_straight+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	40 e2       	ldi	r20, 0x20	; 32
    1a4c:	51 e4       	ldi	r21, 0x41	; 65
    1a4e:	69 81       	ldd	r22, Y+1	; 0x01
    1a50:	7a 81       	ldd	r23, Y+2	; 0x02
    1a52:	8b 81       	ldd	r24, Y+3	; 0x03
    1a54:	9c 81       	ldd	r25, Y+4	; 0x04
    1a56:	0e 94 be 19 	call	0x337c	; 0x337c <__mulsf3>
    1a5a:	dc 01       	movw	r26, r24
    1a5c:	cb 01       	movw	r24, r22
    1a5e:	bc 01       	movw	r22, r24
    1a60:	cd 01       	movw	r24, r26
    1a62:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <__fixunssfsi>
    1a66:	dc 01       	movw	r26, r24
    1a68:	cb 01       	movw	r24, r22
    1a6a:	9a 87       	std	Y+10, r25	; 0x0a
    1a6c:	89 87       	std	Y+9, r24	; 0x09
    1a6e:	0f c0       	rjmp	.+30     	; 0x1a8e <odometry_move_straight+0xfa>
    1a70:	89 e1       	ldi	r24, 0x19	; 25
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	9c 87       	std	Y+12, r25	; 0x0c
    1a76:	8b 87       	std	Y+11, r24	; 0x0b
    1a78:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a7a:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a7c:	01 97       	sbiw	r24, 0x01	; 1
    1a7e:	f1 f7       	brne	.-4      	; 0x1a7c <odometry_move_straight+0xe8>
    1a80:	9c 87       	std	Y+12, r25	; 0x0c
    1a82:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a84:	89 85       	ldd	r24, Y+9	; 0x09
    1a86:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a88:	01 97       	sbiw	r24, 0x01	; 1
    1a8a:	9a 87       	std	Y+10, r25	; 0x0a
    1a8c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a8e:	89 85       	ldd	r24, Y+9	; 0x09
    1a90:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a92:	89 2b       	or	r24, r25
    1a94:	69 f7       	brne	.-38     	; 0x1a70 <odometry_move_straight+0xdc>
    1a96:	14 c0       	rjmp	.+40     	; 0x1ac0 <odometry_move_straight+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a98:	6d 81       	ldd	r22, Y+5	; 0x05
    1a9a:	7e 81       	ldd	r23, Y+6	; 0x06
    1a9c:	8f 81       	ldd	r24, Y+7	; 0x07
    1a9e:	98 85       	ldd	r25, Y+8	; 0x08
    1aa0:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <__fixunssfsi>
    1aa4:	dc 01       	movw	r26, r24
    1aa6:	cb 01       	movw	r24, r22
    1aa8:	9a 87       	std	Y+10, r25	; 0x0a
    1aaa:	89 87       	std	Y+9, r24	; 0x09
    1aac:	89 85       	ldd	r24, Y+9	; 0x09
    1aae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ab0:	9e 87       	std	Y+14, r25	; 0x0e
    1ab2:	8d 87       	std	Y+13, r24	; 0x0d
    1ab4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ab6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ab8:	01 97       	sbiw	r24, 0x01	; 1
    1aba:	f1 f7       	brne	.-4      	; 0x1ab8 <odometry_move_straight+0x124>
    1abc:	9e 87       	std	Y+14, r25	; 0x0e
    1abe:	8d 87       	std	Y+13, r24	; 0x0d
    1ac0:	ce 01       	movw	r24, r28
    1ac2:	0f 96       	adiw	r24, 0x0f	; 15
    1ac4:	63 ec       	ldi	r22, 0xC3	; 195
    1ac6:	0e 94 33 07 	call	0xe66	; 0xe66 <CAN_Write>
    1aca:	88 23       	and	r24, r24
    1acc:	09 f0       	breq	.+2      	; 0x1ad0 <odometry_move_straight+0x13c>
    1ace:	86 cf       	rjmp	.-244    	; 0x19dc <odometry_move_straight+0x48>
		_delay_ms(50);
		
	return odometry_wait_until_done(callback);
    1ad0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1ad2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1ad4:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <odometry_wait_until_done>
}
    1ad8:	6b 96       	adiw	r28, 0x1b	; 27
    1ada:	0f b6       	in	r0, 0x3f	; 63
    1adc:	f8 94       	cli
    1ade:	de bf       	out	0x3e, r29	; 62
    1ae0:	0f be       	out	0x3f, r0	; 63
    1ae2:	cd bf       	out	0x3d, r28	; 61
    1ae4:	df 91       	pop	r29
    1ae6:	cf 91       	pop	r28
    1ae8:	08 95       	ret

00001aea <odometry_move_to_position>:

uint8_t odometry_move_to_position(struct odometry_position* position, uint8_t speed, int8_t direction, uint8_t (*callback)(uint32_t start_time))
{
    1aea:	cf 93       	push	r28
    1aec:	df 93       	push	r29
    1aee:	cd b7       	in	r28, 0x3d	; 61
    1af0:	de b7       	in	r29, 0x3e	; 62
    1af2:	6c 97       	sbiw	r28, 0x1c	; 28
    1af4:	0f b6       	in	r0, 0x3f	; 63
    1af6:	f8 94       	cli
    1af8:	de bf       	out	0x3e, r29	; 62
    1afa:	0f be       	out	0x3f, r0	; 63
    1afc:	cd bf       	out	0x3d, r28	; 61
    1afe:	98 8f       	std	Y+24, r25	; 0x18
    1b00:	8f 8b       	std	Y+23, r24	; 0x17
    1b02:	69 8f       	std	Y+25, r22	; 0x19
    1b04:	4a 8f       	std	Y+26, r20	; 0x1a
    1b06:	3c 8f       	std	Y+28, r19	; 0x1c
    1b08:	2b 8f       	std	Y+27, r18	; 0x1b
	uint8_t buffer[8];

	odometry_set_speed(speed);
    1b0a:	89 8d       	ldd	r24, Y+25	; 0x19
    1b0c:	0e 94 98 0a 	call	0x1530	; 0x1530 <odometry_set_speed>

	buffer[0] = 'G';
    1b10:	87 e4       	ldi	r24, 0x47	; 71
    1b12:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = position->x >> 8;
    1b14:	8f 89       	ldd	r24, Y+23	; 0x17
    1b16:	98 8d       	ldd	r25, Y+24	; 0x18
    1b18:	fc 01       	movw	r30, r24
    1b1a:	80 81       	ld	r24, Z
    1b1c:	91 81       	ldd	r25, Z+1	; 0x01
    1b1e:	89 2f       	mov	r24, r25
    1b20:	99 0f       	add	r25, r25
    1b22:	99 0b       	sbc	r25, r25
    1b24:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = position->x & 0xFF;
    1b26:	8f 89       	ldd	r24, Y+23	; 0x17
    1b28:	98 8d       	ldd	r25, Y+24	; 0x18
    1b2a:	fc 01       	movw	r30, r24
    1b2c:	80 81       	ld	r24, Z
    1b2e:	91 81       	ldd	r25, Z+1	; 0x01
    1b30:	89 8b       	std	Y+17, r24	; 0x11
	buffer[3] = position->y >> 8;
    1b32:	8f 89       	ldd	r24, Y+23	; 0x17
    1b34:	98 8d       	ldd	r25, Y+24	; 0x18
    1b36:	fc 01       	movw	r30, r24
    1b38:	82 81       	ldd	r24, Z+2	; 0x02
    1b3a:	93 81       	ldd	r25, Z+3	; 0x03
    1b3c:	89 2f       	mov	r24, r25
    1b3e:	99 0f       	add	r25, r25
    1b40:	99 0b       	sbc	r25, r25
    1b42:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[4] = position->y & 0xFF;
    1b44:	8f 89       	ldd	r24, Y+23	; 0x17
    1b46:	98 8d       	ldd	r25, Y+24	; 0x18
    1b48:	fc 01       	movw	r30, r24
    1b4a:	82 81       	ldd	r24, Z+2	; 0x02
    1b4c:	93 81       	ldd	r25, Z+3	; 0x03
    1b4e:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[5] = 0;
    1b50:	1c 8a       	std	Y+20, r1	; 0x14
	buffer[6] = direction * -1;
    1b52:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1b54:	81 95       	neg	r24
    1b56:	8d 8b       	std	Y+21, r24	; 0x15
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1b58:	72 c0       	rjmp	.+228    	; 0x1c3e <odometry_move_to_position+0x154>
    1b5a:	80 e0       	ldi	r24, 0x00	; 0
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	a8 e4       	ldi	r26, 0x48	; 72
    1b60:	b2 e4       	ldi	r27, 0x42	; 66
    1b62:	89 83       	std	Y+1, r24	; 0x01
    1b64:	9a 83       	std	Y+2, r25	; 0x02
    1b66:	ab 83       	std	Y+3, r26	; 0x03
    1b68:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1b6a:	20 e0       	ldi	r18, 0x00	; 0
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	4a e7       	ldi	r20, 0x7A	; 122
    1b70:	53 e4       	ldi	r21, 0x43	; 67
    1b72:	69 81       	ldd	r22, Y+1	; 0x01
    1b74:	7a 81       	ldd	r23, Y+2	; 0x02
    1b76:	8b 81       	ldd	r24, Y+3	; 0x03
    1b78:	9c 81       	ldd	r25, Y+4	; 0x04
    1b7a:	0e 94 be 19 	call	0x337c	; 0x337c <__mulsf3>
    1b7e:	dc 01       	movw	r26, r24
    1b80:	cb 01       	movw	r24, r22
    1b82:	8d 83       	std	Y+5, r24	; 0x05
    1b84:	9e 83       	std	Y+6, r25	; 0x06
    1b86:	af 83       	std	Y+7, r26	; 0x07
    1b88:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1b8a:	20 e0       	ldi	r18, 0x00	; 0
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	40 e8       	ldi	r20, 0x80	; 128
    1b90:	5f e3       	ldi	r21, 0x3F	; 63
    1b92:	6d 81       	ldd	r22, Y+5	; 0x05
    1b94:	7e 81       	ldd	r23, Y+6	; 0x06
    1b96:	8f 81       	ldd	r24, Y+7	; 0x07
    1b98:	98 85       	ldd	r25, Y+8	; 0x08
    1b9a:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__cmpsf2>
    1b9e:	88 23       	and	r24, r24
    1ba0:	2c f4       	brge	.+10     	; 0x1bac <odometry_move_to_position+0xc2>
		__ticks = 1;
    1ba2:	81 e0       	ldi	r24, 0x01	; 1
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	9a 87       	std	Y+10, r25	; 0x0a
    1ba8:	89 87       	std	Y+9, r24	; 0x09
    1baa:	3f c0       	rjmp	.+126    	; 0x1c2a <odometry_move_to_position+0x140>
	else if (__tmp > 65535)
    1bac:	20 e0       	ldi	r18, 0x00	; 0
    1bae:	3f ef       	ldi	r19, 0xFF	; 255
    1bb0:	4f e7       	ldi	r20, 0x7F	; 127
    1bb2:	57 e4       	ldi	r21, 0x47	; 71
    1bb4:	6d 81       	ldd	r22, Y+5	; 0x05
    1bb6:	7e 81       	ldd	r23, Y+6	; 0x06
    1bb8:	8f 81       	ldd	r24, Y+7	; 0x07
    1bba:	98 85       	ldd	r25, Y+8	; 0x08
    1bbc:	0e 94 b9 19 	call	0x3372	; 0x3372 <__gesf2>
    1bc0:	18 16       	cp	r1, r24
    1bc2:	4c f5       	brge	.+82     	; 0x1c16 <odometry_move_to_position+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bc4:	20 e0       	ldi	r18, 0x00	; 0
    1bc6:	30 e0       	ldi	r19, 0x00	; 0
    1bc8:	40 e2       	ldi	r20, 0x20	; 32
    1bca:	51 e4       	ldi	r21, 0x41	; 65
    1bcc:	69 81       	ldd	r22, Y+1	; 0x01
    1bce:	7a 81       	ldd	r23, Y+2	; 0x02
    1bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd4:	0e 94 be 19 	call	0x337c	; 0x337c <__mulsf3>
    1bd8:	dc 01       	movw	r26, r24
    1bda:	cb 01       	movw	r24, r22
    1bdc:	bc 01       	movw	r22, r24
    1bde:	cd 01       	movw	r24, r26
    1be0:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <__fixunssfsi>
    1be4:	dc 01       	movw	r26, r24
    1be6:	cb 01       	movw	r24, r22
    1be8:	9a 87       	std	Y+10, r25	; 0x0a
    1bea:	89 87       	std	Y+9, r24	; 0x09
    1bec:	0f c0       	rjmp	.+30     	; 0x1c0c <odometry_move_to_position+0x122>
    1bee:	89 e1       	ldi	r24, 0x19	; 25
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	9c 87       	std	Y+12, r25	; 0x0c
    1bf4:	8b 87       	std	Y+11, r24	; 0x0b
    1bf6:	8b 85       	ldd	r24, Y+11	; 0x0b
    1bf8:	9c 85       	ldd	r25, Y+12	; 0x0c
    1bfa:	01 97       	sbiw	r24, 0x01	; 1
    1bfc:	f1 f7       	brne	.-4      	; 0x1bfa <odometry_move_to_position+0x110>
    1bfe:	9c 87       	std	Y+12, r25	; 0x0c
    1c00:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c02:	89 85       	ldd	r24, Y+9	; 0x09
    1c04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c06:	01 97       	sbiw	r24, 0x01	; 1
    1c08:	9a 87       	std	Y+10, r25	; 0x0a
    1c0a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c0c:	89 85       	ldd	r24, Y+9	; 0x09
    1c0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c10:	89 2b       	or	r24, r25
    1c12:	69 f7       	brne	.-38     	; 0x1bee <odometry_move_to_position+0x104>
    1c14:	14 c0       	rjmp	.+40     	; 0x1c3e <odometry_move_to_position+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c16:	6d 81       	ldd	r22, Y+5	; 0x05
    1c18:	7e 81       	ldd	r23, Y+6	; 0x06
    1c1a:	8f 81       	ldd	r24, Y+7	; 0x07
    1c1c:	98 85       	ldd	r25, Y+8	; 0x08
    1c1e:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <__fixunssfsi>
    1c22:	dc 01       	movw	r26, r24
    1c24:	cb 01       	movw	r24, r22
    1c26:	9a 87       	std	Y+10, r25	; 0x0a
    1c28:	89 87       	std	Y+9, r24	; 0x09
    1c2a:	89 85       	ldd	r24, Y+9	; 0x09
    1c2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c2e:	9e 87       	std	Y+14, r25	; 0x0e
    1c30:	8d 87       	std	Y+13, r24	; 0x0d
    1c32:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c34:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c36:	01 97       	sbiw	r24, 0x01	; 1
    1c38:	f1 f7       	brne	.-4      	; 0x1c36 <odometry_move_to_position+0x14c>
    1c3a:	9e 87       	std	Y+14, r25	; 0x0e
    1c3c:	8d 87       	std	Y+13, r24	; 0x0d
    1c3e:	ce 01       	movw	r24, r28
    1c40:	0f 96       	adiw	r24, 0x0f	; 15
    1c42:	63 ec       	ldi	r22, 0xC3	; 195
    1c44:	0e 94 33 07 	call	0xe66	; 0xe66 <CAN_Write>
    1c48:	88 23       	and	r24, r24
    1c4a:	09 f0       	breq	.+2      	; 0x1c4e <odometry_move_to_position+0x164>
    1c4c:	86 cf       	rjmp	.-244    	; 0x1b5a <odometry_move_to_position+0x70>
		_delay_ms(50);
	
	return 0;
    1c4e:	80 e0       	ldi	r24, 0x00	; 0
	//return odometry_wait_until_done(callback);
}
    1c50:	6c 96       	adiw	r28, 0x1c	; 28
    1c52:	0f b6       	in	r0, 0x3f	; 63
    1c54:	f8 94       	cli
    1c56:	de bf       	out	0x3e, r29	; 62
    1c58:	0f be       	out	0x3f, r0	; 63
    1c5a:	cd bf       	out	0x3d, r28	; 61
    1c5c:	df 91       	pop	r29
    1c5e:	cf 91       	pop	r28
    1c60:	08 95       	ret

00001c62 <odometry_set_position>:

void odometry_set_position(struct odometry_position* new_position)
{
    1c62:	cf 93       	push	r28
    1c64:	df 93       	push	r29
    1c66:	cd b7       	in	r28, 0x3d	; 61
    1c68:	de b7       	in	r29, 0x3e	; 62
    1c6a:	69 97       	sbiw	r28, 0x19	; 25
    1c6c:	0f b6       	in	r0, 0x3f	; 63
    1c6e:	f8 94       	cli
    1c70:	de bf       	out	0x3e, r29	; 62
    1c72:	0f be       	out	0x3f, r0	; 63
    1c74:	cd bf       	out	0x3d, r28	; 61
    1c76:	99 8f       	std	Y+25, r25	; 0x19
    1c78:	88 8f       	std	Y+24, r24	; 0x18
	uint8_t buffer[8];

	buffer[0] = 'I';
    1c7a:	89 e4       	ldi	r24, 0x49	; 73
    1c7c:	88 8b       	std	Y+16, r24	; 0x10
	buffer[1] = new_position->x >> 8;
    1c7e:	88 8d       	ldd	r24, Y+24	; 0x18
    1c80:	99 8d       	ldd	r25, Y+25	; 0x19
    1c82:	fc 01       	movw	r30, r24
    1c84:	80 81       	ld	r24, Z
    1c86:	91 81       	ldd	r25, Z+1	; 0x01
    1c88:	89 2f       	mov	r24, r25
    1c8a:	99 0f       	add	r25, r25
    1c8c:	99 0b       	sbc	r25, r25
    1c8e:	89 8b       	std	Y+17, r24	; 0x11
	buffer[2] = new_position->x & 0xFF;
    1c90:	88 8d       	ldd	r24, Y+24	; 0x18
    1c92:	99 8d       	ldd	r25, Y+25	; 0x19
    1c94:	fc 01       	movw	r30, r24
    1c96:	80 81       	ld	r24, Z
    1c98:	91 81       	ldd	r25, Z+1	; 0x01
    1c9a:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[3] = new_position->y >> 8;
    1c9c:	88 8d       	ldd	r24, Y+24	; 0x18
    1c9e:	99 8d       	ldd	r25, Y+25	; 0x19
    1ca0:	fc 01       	movw	r30, r24
    1ca2:	82 81       	ldd	r24, Z+2	; 0x02
    1ca4:	93 81       	ldd	r25, Z+3	; 0x03
    1ca6:	89 2f       	mov	r24, r25
    1ca8:	99 0f       	add	r25, r25
    1caa:	99 0b       	sbc	r25, r25
    1cac:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[4] = new_position->y & 0xFF;
    1cae:	88 8d       	ldd	r24, Y+24	; 0x18
    1cb0:	99 8d       	ldd	r25, Y+25	; 0x19
    1cb2:	fc 01       	movw	r30, r24
    1cb4:	82 81       	ldd	r24, Z+2	; 0x02
    1cb6:	93 81       	ldd	r25, Z+3	; 0x03
    1cb8:	8c 8b       	std	Y+20, r24	; 0x14
	
	int8_t temp = new_position->angle * -1;
    1cba:	88 8d       	ldd	r24, Y+24	; 0x18
    1cbc:	99 8d       	ldd	r25, Y+25	; 0x19
    1cbe:	fc 01       	movw	r30, r24
    1cc0:	84 81       	ldd	r24, Z+4	; 0x04
    1cc2:	95 81       	ldd	r25, Z+5	; 0x05
    1cc4:	81 95       	neg	r24
    1cc6:	89 83       	std	Y+1, r24	; 0x01
	buffer[5] = temp >> 8;
    1cc8:	89 81       	ldd	r24, Y+1	; 0x01
    1cca:	08 2e       	mov	r0, r24
    1ccc:	00 0c       	add	r0, r0
    1cce:	99 0b       	sbc	r25, r25
    1cd0:	89 2f       	mov	r24, r25
    1cd2:	99 0f       	add	r25, r25
    1cd4:	99 0b       	sbc	r25, r25
    1cd6:	8d 8b       	std	Y+21, r24	; 0x15
	buffer[6] = temp & 0xFF;
    1cd8:	89 81       	ldd	r24, Y+1	; 0x01
    1cda:	8e 8b       	std	Y+22, r24	; 0x16

	position.x	   = new_position->x;
    1cdc:	88 8d       	ldd	r24, Y+24	; 0x18
    1cde:	99 8d       	ldd	r25, Y+25	; 0x19
    1ce0:	fc 01       	movw	r30, r24
    1ce2:	80 81       	ld	r24, Z
    1ce4:	91 81       	ldd	r25, Z+1	; 0x01
    1ce6:	90 93 0b 01 	sts	0x010B, r25
    1cea:	80 93 0a 01 	sts	0x010A, r24
	position.y	   = new_position->y;
    1cee:	88 8d       	ldd	r24, Y+24	; 0x18
    1cf0:	99 8d       	ldd	r25, Y+25	; 0x19
    1cf2:	fc 01       	movw	r30, r24
    1cf4:	82 81       	ldd	r24, Z+2	; 0x02
    1cf6:	93 81       	ldd	r25, Z+3	; 0x03
    1cf8:	90 93 0d 01 	sts	0x010D, r25
    1cfc:	80 93 0c 01 	sts	0x010C, r24
	position.angle = -1 * new_position->angle;
    1d00:	88 8d       	ldd	r24, Y+24	; 0x18
    1d02:	99 8d       	ldd	r25, Y+25	; 0x19
    1d04:	fc 01       	movw	r30, r24
    1d06:	84 81       	ldd	r24, Z+4	; 0x04
    1d08:	95 81       	ldd	r25, Z+5	; 0x05
    1d0a:	91 95       	neg	r25
    1d0c:	81 95       	neg	r24
    1d0e:	91 09       	sbc	r25, r1
    1d10:	90 93 0f 01 	sts	0x010F, r25
    1d14:	80 93 0e 01 	sts	0x010E, r24

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1d18:	72 c0       	rjmp	.+228    	; 0x1dfe <odometry_set_position+0x19c>
    1d1a:	80 e0       	ldi	r24, 0x00	; 0
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	a8 e4       	ldi	r26, 0x48	; 72
    1d20:	b2 e4       	ldi	r27, 0x42	; 66
    1d22:	8a 83       	std	Y+2, r24	; 0x02
    1d24:	9b 83       	std	Y+3, r25	; 0x03
    1d26:	ac 83       	std	Y+4, r26	; 0x04
    1d28:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1d2a:	20 e0       	ldi	r18, 0x00	; 0
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	4a e7       	ldi	r20, 0x7A	; 122
    1d30:	53 e4       	ldi	r21, 0x43	; 67
    1d32:	6a 81       	ldd	r22, Y+2	; 0x02
    1d34:	7b 81       	ldd	r23, Y+3	; 0x03
    1d36:	8c 81       	ldd	r24, Y+4	; 0x04
    1d38:	9d 81       	ldd	r25, Y+5	; 0x05
    1d3a:	0e 94 be 19 	call	0x337c	; 0x337c <__mulsf3>
    1d3e:	dc 01       	movw	r26, r24
    1d40:	cb 01       	movw	r24, r22
    1d42:	8e 83       	std	Y+6, r24	; 0x06
    1d44:	9f 83       	std	Y+7, r25	; 0x07
    1d46:	a8 87       	std	Y+8, r26	; 0x08
    1d48:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
    1d4a:	20 e0       	ldi	r18, 0x00	; 0
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	40 e8       	ldi	r20, 0x80	; 128
    1d50:	5f e3       	ldi	r21, 0x3F	; 63
    1d52:	6e 81       	ldd	r22, Y+6	; 0x06
    1d54:	7f 81       	ldd	r23, Y+7	; 0x07
    1d56:	88 85       	ldd	r24, Y+8	; 0x08
    1d58:	99 85       	ldd	r25, Y+9	; 0x09
    1d5a:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__cmpsf2>
    1d5e:	88 23       	and	r24, r24
    1d60:	2c f4       	brge	.+10     	; 0x1d6c <odometry_set_position+0x10a>
		__ticks = 1;
    1d62:	81 e0       	ldi	r24, 0x01	; 1
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	9b 87       	std	Y+11, r25	; 0x0b
    1d68:	8a 87       	std	Y+10, r24	; 0x0a
    1d6a:	3f c0       	rjmp	.+126    	; 0x1dea <odometry_set_position+0x188>
	else if (__tmp > 65535)
    1d6c:	20 e0       	ldi	r18, 0x00	; 0
    1d6e:	3f ef       	ldi	r19, 0xFF	; 255
    1d70:	4f e7       	ldi	r20, 0x7F	; 127
    1d72:	57 e4       	ldi	r21, 0x47	; 71
    1d74:	6e 81       	ldd	r22, Y+6	; 0x06
    1d76:	7f 81       	ldd	r23, Y+7	; 0x07
    1d78:	88 85       	ldd	r24, Y+8	; 0x08
    1d7a:	99 85       	ldd	r25, Y+9	; 0x09
    1d7c:	0e 94 b9 19 	call	0x3372	; 0x3372 <__gesf2>
    1d80:	18 16       	cp	r1, r24
    1d82:	4c f5       	brge	.+82     	; 0x1dd6 <odometry_set_position+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d84:	20 e0       	ldi	r18, 0x00	; 0
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	40 e2       	ldi	r20, 0x20	; 32
    1d8a:	51 e4       	ldi	r21, 0x41	; 65
    1d8c:	6a 81       	ldd	r22, Y+2	; 0x02
    1d8e:	7b 81       	ldd	r23, Y+3	; 0x03
    1d90:	8c 81       	ldd	r24, Y+4	; 0x04
    1d92:	9d 81       	ldd	r25, Y+5	; 0x05
    1d94:	0e 94 be 19 	call	0x337c	; 0x337c <__mulsf3>
    1d98:	dc 01       	movw	r26, r24
    1d9a:	cb 01       	movw	r24, r22
    1d9c:	bc 01       	movw	r22, r24
    1d9e:	cd 01       	movw	r24, r26
    1da0:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <__fixunssfsi>
    1da4:	dc 01       	movw	r26, r24
    1da6:	cb 01       	movw	r24, r22
    1da8:	9b 87       	std	Y+11, r25	; 0x0b
    1daa:	8a 87       	std	Y+10, r24	; 0x0a
    1dac:	0f c0       	rjmp	.+30     	; 0x1dcc <odometry_set_position+0x16a>
    1dae:	89 e1       	ldi	r24, 0x19	; 25
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	9d 87       	std	Y+13, r25	; 0x0d
    1db4:	8c 87       	std	Y+12, r24	; 0x0c
    1db6:	8c 85       	ldd	r24, Y+12	; 0x0c
    1db8:	9d 85       	ldd	r25, Y+13	; 0x0d
    1dba:	01 97       	sbiw	r24, 0x01	; 1
    1dbc:	f1 f7       	brne	.-4      	; 0x1dba <odometry_set_position+0x158>
    1dbe:	9d 87       	std	Y+13, r25	; 0x0d
    1dc0:	8c 87       	std	Y+12, r24	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dc2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1dc4:	9b 85       	ldd	r25, Y+11	; 0x0b
    1dc6:	01 97       	sbiw	r24, 0x01	; 1
    1dc8:	9b 87       	std	Y+11, r25	; 0x0b
    1dca:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dcc:	8a 85       	ldd	r24, Y+10	; 0x0a
    1dce:	9b 85       	ldd	r25, Y+11	; 0x0b
    1dd0:	89 2b       	or	r24, r25
    1dd2:	69 f7       	brne	.-38     	; 0x1dae <odometry_set_position+0x14c>
    1dd4:	14 c0       	rjmp	.+40     	; 0x1dfe <odometry_set_position+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dd6:	6e 81       	ldd	r22, Y+6	; 0x06
    1dd8:	7f 81       	ldd	r23, Y+7	; 0x07
    1dda:	88 85       	ldd	r24, Y+8	; 0x08
    1ddc:	99 85       	ldd	r25, Y+9	; 0x09
    1dde:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <__fixunssfsi>
    1de2:	dc 01       	movw	r26, r24
    1de4:	cb 01       	movw	r24, r22
    1de6:	9b 87       	std	Y+11, r25	; 0x0b
    1de8:	8a 87       	std	Y+10, r24	; 0x0a
    1dea:	8a 85       	ldd	r24, Y+10	; 0x0a
    1dec:	9b 85       	ldd	r25, Y+11	; 0x0b
    1dee:	9f 87       	std	Y+15, r25	; 0x0f
    1df0:	8e 87       	std	Y+14, r24	; 0x0e
    1df2:	8e 85       	ldd	r24, Y+14	; 0x0e
    1df4:	9f 85       	ldd	r25, Y+15	; 0x0f
    1df6:	01 97       	sbiw	r24, 0x01	; 1
    1df8:	f1 f7       	brne	.-4      	; 0x1df6 <odometry_set_position+0x194>
    1dfa:	9f 87       	std	Y+15, r25	; 0x0f
    1dfc:	8e 87       	std	Y+14, r24	; 0x0e
    1dfe:	ce 01       	movw	r24, r28
    1e00:	40 96       	adiw	r24, 0x10	; 16
    1e02:	63 ec       	ldi	r22, 0xC3	; 195
    1e04:	0e 94 33 07 	call	0xe66	; 0xe66 <CAN_Write>
    1e08:	88 23       	and	r24, r24
    1e0a:	09 f0       	breq	.+2      	; 0x1e0e <odometry_set_position+0x1ac>
    1e0c:	86 cf       	rjmp	.-244    	; 0x1d1a <odometry_set_position+0xb8>
		_delay_ms(50);
}
    1e0e:	69 96       	adiw	r28, 0x19	; 25
    1e10:	0f b6       	in	r0, 0x3f	; 63
    1e12:	f8 94       	cli
    1e14:	de bf       	out	0x3e, r29	; 62
    1e16:	0f be       	out	0x3f, r0	; 63
    1e18:	cd bf       	out	0x3d, r28	; 61
    1e1a:	df 91       	pop	r29
    1e1c:	cf 91       	pop	r28
    1e1e:	08 95       	ret

00001e20 <odometry_rotate>:

uint8_t odometry_rotate(int16_t angle,uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    1e20:	cf 93       	push	r28
    1e22:	df 93       	push	r29
    1e24:	cd b7       	in	r28, 0x3d	; 61
    1e26:	de b7       	in	r29, 0x3e	; 62
    1e28:	6b 97       	sbiw	r28, 0x1b	; 27
    1e2a:	0f b6       	in	r0, 0x3f	; 63
    1e2c:	f8 94       	cli
    1e2e:	de bf       	out	0x3e, r29	; 62
    1e30:	0f be       	out	0x3f, r0	; 63
    1e32:	cd bf       	out	0x3d, r28	; 61
    1e34:	98 8f       	std	Y+24, r25	; 0x18
    1e36:	8f 8b       	std	Y+23, r24	; 0x17
    1e38:	69 8f       	std	Y+25, r22	; 0x19
    1e3a:	5b 8f       	std	Y+27, r21	; 0x1b
    1e3c:	4a 8f       	std	Y+26, r20	; 0x1a
	uint8_t buffer[8];
	odometry_set_speed(speed);
    1e3e:	89 8d       	ldd	r24, Y+25	; 0x19
    1e40:	0e 94 98 0a 	call	0x1530	; 0x1530 <odometry_set_speed>

	angle *= -1;
    1e44:	8f 89       	ldd	r24, Y+23	; 0x17
    1e46:	98 8d       	ldd	r25, Y+24	; 0x18
    1e48:	91 95       	neg	r25
    1e4a:	81 95       	neg	r24
    1e4c:	91 09       	sbc	r25, r1
    1e4e:	98 8f       	std	Y+24, r25	; 0x18
    1e50:	8f 8b       	std	Y+23, r24	; 0x17
	buffer[0] = 'T';
    1e52:	84 e5       	ldi	r24, 0x54	; 84
    1e54:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = angle >> 8;
    1e56:	8f 89       	ldd	r24, Y+23	; 0x17
    1e58:	98 8d       	ldd	r25, Y+24	; 0x18
    1e5a:	89 2f       	mov	r24, r25
    1e5c:	99 0f       	add	r25, r25
    1e5e:	99 0b       	sbc	r25, r25
    1e60:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = angle & 0xFF;
    1e62:	8f 89       	ldd	r24, Y+23	; 0x17
    1e64:	89 8b       	std	Y+17, r24	; 0x11

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1e66:	72 c0       	rjmp	.+228    	; 0x1f4c <odometry_rotate+0x12c>
    1e68:	80 e0       	ldi	r24, 0x00	; 0
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	a8 e4       	ldi	r26, 0x48	; 72
    1e6e:	b2 e4       	ldi	r27, 0x42	; 66
    1e70:	89 83       	std	Y+1, r24	; 0x01
    1e72:	9a 83       	std	Y+2, r25	; 0x02
    1e74:	ab 83       	std	Y+3, r26	; 0x03
    1e76:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1e78:	20 e0       	ldi	r18, 0x00	; 0
    1e7a:	30 e0       	ldi	r19, 0x00	; 0
    1e7c:	4a e7       	ldi	r20, 0x7A	; 122
    1e7e:	53 e4       	ldi	r21, 0x43	; 67
    1e80:	69 81       	ldd	r22, Y+1	; 0x01
    1e82:	7a 81       	ldd	r23, Y+2	; 0x02
    1e84:	8b 81       	ldd	r24, Y+3	; 0x03
    1e86:	9c 81       	ldd	r25, Y+4	; 0x04
    1e88:	0e 94 be 19 	call	0x337c	; 0x337c <__mulsf3>
    1e8c:	dc 01       	movw	r26, r24
    1e8e:	cb 01       	movw	r24, r22
    1e90:	8d 83       	std	Y+5, r24	; 0x05
    1e92:	9e 83       	std	Y+6, r25	; 0x06
    1e94:	af 83       	std	Y+7, r26	; 0x07
    1e96:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1e98:	20 e0       	ldi	r18, 0x00	; 0
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	40 e8       	ldi	r20, 0x80	; 128
    1e9e:	5f e3       	ldi	r21, 0x3F	; 63
    1ea0:	6d 81       	ldd	r22, Y+5	; 0x05
    1ea2:	7e 81       	ldd	r23, Y+6	; 0x06
    1ea4:	8f 81       	ldd	r24, Y+7	; 0x07
    1ea6:	98 85       	ldd	r25, Y+8	; 0x08
    1ea8:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__cmpsf2>
    1eac:	88 23       	and	r24, r24
    1eae:	2c f4       	brge	.+10     	; 0x1eba <odometry_rotate+0x9a>
		__ticks = 1;
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	9a 87       	std	Y+10, r25	; 0x0a
    1eb6:	89 87       	std	Y+9, r24	; 0x09
    1eb8:	3f c0       	rjmp	.+126    	; 0x1f38 <odometry_rotate+0x118>
	else if (__tmp > 65535)
    1eba:	20 e0       	ldi	r18, 0x00	; 0
    1ebc:	3f ef       	ldi	r19, 0xFF	; 255
    1ebe:	4f e7       	ldi	r20, 0x7F	; 127
    1ec0:	57 e4       	ldi	r21, 0x47	; 71
    1ec2:	6d 81       	ldd	r22, Y+5	; 0x05
    1ec4:	7e 81       	ldd	r23, Y+6	; 0x06
    1ec6:	8f 81       	ldd	r24, Y+7	; 0x07
    1ec8:	98 85       	ldd	r25, Y+8	; 0x08
    1eca:	0e 94 b9 19 	call	0x3372	; 0x3372 <__gesf2>
    1ece:	18 16       	cp	r1, r24
    1ed0:	4c f5       	brge	.+82     	; 0x1f24 <odometry_rotate+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ed2:	20 e0       	ldi	r18, 0x00	; 0
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	40 e2       	ldi	r20, 0x20	; 32
    1ed8:	51 e4       	ldi	r21, 0x41	; 65
    1eda:	69 81       	ldd	r22, Y+1	; 0x01
    1edc:	7a 81       	ldd	r23, Y+2	; 0x02
    1ede:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee2:	0e 94 be 19 	call	0x337c	; 0x337c <__mulsf3>
    1ee6:	dc 01       	movw	r26, r24
    1ee8:	cb 01       	movw	r24, r22
    1eea:	bc 01       	movw	r22, r24
    1eec:	cd 01       	movw	r24, r26
    1eee:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <__fixunssfsi>
    1ef2:	dc 01       	movw	r26, r24
    1ef4:	cb 01       	movw	r24, r22
    1ef6:	9a 87       	std	Y+10, r25	; 0x0a
    1ef8:	89 87       	std	Y+9, r24	; 0x09
    1efa:	0f c0       	rjmp	.+30     	; 0x1f1a <odometry_rotate+0xfa>
    1efc:	89 e1       	ldi	r24, 0x19	; 25
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	9c 87       	std	Y+12, r25	; 0x0c
    1f02:	8b 87       	std	Y+11, r24	; 0x0b
    1f04:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f06:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f08:	01 97       	sbiw	r24, 0x01	; 1
    1f0a:	f1 f7       	brne	.-4      	; 0x1f08 <odometry_rotate+0xe8>
    1f0c:	9c 87       	std	Y+12, r25	; 0x0c
    1f0e:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f10:	89 85       	ldd	r24, Y+9	; 0x09
    1f12:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f14:	01 97       	sbiw	r24, 0x01	; 1
    1f16:	9a 87       	std	Y+10, r25	; 0x0a
    1f18:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f1a:	89 85       	ldd	r24, Y+9	; 0x09
    1f1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f1e:	89 2b       	or	r24, r25
    1f20:	69 f7       	brne	.-38     	; 0x1efc <odometry_rotate+0xdc>
    1f22:	14 c0       	rjmp	.+40     	; 0x1f4c <odometry_rotate+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f24:	6d 81       	ldd	r22, Y+5	; 0x05
    1f26:	7e 81       	ldd	r23, Y+6	; 0x06
    1f28:	8f 81       	ldd	r24, Y+7	; 0x07
    1f2a:	98 85       	ldd	r25, Y+8	; 0x08
    1f2c:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <__fixunssfsi>
    1f30:	dc 01       	movw	r26, r24
    1f32:	cb 01       	movw	r24, r22
    1f34:	9a 87       	std	Y+10, r25	; 0x0a
    1f36:	89 87       	std	Y+9, r24	; 0x09
    1f38:	89 85       	ldd	r24, Y+9	; 0x09
    1f3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f3c:	9e 87       	std	Y+14, r25	; 0x0e
    1f3e:	8d 87       	std	Y+13, r24	; 0x0d
    1f40:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f42:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f44:	01 97       	sbiw	r24, 0x01	; 1
    1f46:	f1 f7       	brne	.-4      	; 0x1f44 <odometry_rotate+0x124>
    1f48:	9e 87       	std	Y+14, r25	; 0x0e
    1f4a:	8d 87       	std	Y+13, r24	; 0x0d
    1f4c:	ce 01       	movw	r24, r28
    1f4e:	0f 96       	adiw	r24, 0x0f	; 15
    1f50:	63 ec       	ldi	r22, 0xC3	; 195
    1f52:	0e 94 33 07 	call	0xe66	; 0xe66 <CAN_Write>
    1f56:	88 23       	and	r24, r24
    1f58:	09 f0       	breq	.+2      	; 0x1f5c <odometry_rotate+0x13c>
    1f5a:	86 cf       	rjmp	.-244    	; 0x1e68 <odometry_rotate+0x48>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    1f5c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f5e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1f60:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <odometry_wait_until_done>

}
    1f64:	6b 96       	adiw	r28, 0x1b	; 27
    1f66:	0f b6       	in	r0, 0x3f	; 63
    1f68:	f8 94       	cli
    1f6a:	de bf       	out	0x3e, r29	; 62
    1f6c:	0f be       	out	0x3f, r0	; 63
    1f6e:	cd bf       	out	0x3d, r28	; 61
    1f70:	df 91       	pop	r29
    1f72:	cf 91       	pop	r28
    1f74:	08 95       	ret

00001f76 <odometry_set_angle>:

uint8_t odometry_set_angle(int16_t angle, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    1f76:	cf 93       	push	r28
    1f78:	df 93       	push	r29
    1f7a:	cd b7       	in	r28, 0x3d	; 61
    1f7c:	de b7       	in	r29, 0x3e	; 62
    1f7e:	6b 97       	sbiw	r28, 0x1b	; 27
    1f80:	0f b6       	in	r0, 0x3f	; 63
    1f82:	f8 94       	cli
    1f84:	de bf       	out	0x3e, r29	; 62
    1f86:	0f be       	out	0x3f, r0	; 63
    1f88:	cd bf       	out	0x3d, r28	; 61
    1f8a:	98 8f       	std	Y+24, r25	; 0x18
    1f8c:	8f 8b       	std	Y+23, r24	; 0x17
    1f8e:	69 8f       	std	Y+25, r22	; 0x19
    1f90:	5b 8f       	std	Y+27, r21	; 0x1b
    1f92:	4a 8f       	std	Y+26, r20	; 0x1a
	uint8_t buffer[8];
	odometry_set_speed(speed);
    1f94:	89 8d       	ldd	r24, Y+25	; 0x19
    1f96:	0e 94 98 0a 	call	0x1530	; 0x1530 <odometry_set_speed>

	angle *= -1;
    1f9a:	8f 89       	ldd	r24, Y+23	; 0x17
    1f9c:	98 8d       	ldd	r25, Y+24	; 0x18
    1f9e:	91 95       	neg	r25
    1fa0:	81 95       	neg	r24
    1fa2:	91 09       	sbc	r25, r1
    1fa4:	98 8f       	std	Y+24, r25	; 0x18
    1fa6:	8f 8b       	std	Y+23, r24	; 0x17
	buffer[0] = 'A';
    1fa8:	81 e4       	ldi	r24, 0x41	; 65
    1faa:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = angle >> 8;
    1fac:	8f 89       	ldd	r24, Y+23	; 0x17
    1fae:	98 8d       	ldd	r25, Y+24	; 0x18
    1fb0:	89 2f       	mov	r24, r25
    1fb2:	99 0f       	add	r25, r25
    1fb4:	99 0b       	sbc	r25, r25
    1fb6:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = angle & 0xFF;
    1fb8:	8f 89       	ldd	r24, Y+23	; 0x17
    1fba:	89 8b       	std	Y+17, r24	; 0x11
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1fbc:	72 c0       	rjmp	.+228    	; 0x20a2 <odometry_set_angle+0x12c>
    1fbe:	80 e0       	ldi	r24, 0x00	; 0
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	a8 e4       	ldi	r26, 0x48	; 72
    1fc4:	b2 e4       	ldi	r27, 0x42	; 66
    1fc6:	89 83       	std	Y+1, r24	; 0x01
    1fc8:	9a 83       	std	Y+2, r25	; 0x02
    1fca:	ab 83       	std	Y+3, r26	; 0x03
    1fcc:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1fce:	20 e0       	ldi	r18, 0x00	; 0
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	4a e7       	ldi	r20, 0x7A	; 122
    1fd4:	53 e4       	ldi	r21, 0x43	; 67
    1fd6:	69 81       	ldd	r22, Y+1	; 0x01
    1fd8:	7a 81       	ldd	r23, Y+2	; 0x02
    1fda:	8b 81       	ldd	r24, Y+3	; 0x03
    1fdc:	9c 81       	ldd	r25, Y+4	; 0x04
    1fde:	0e 94 be 19 	call	0x337c	; 0x337c <__mulsf3>
    1fe2:	dc 01       	movw	r26, r24
    1fe4:	cb 01       	movw	r24, r22
    1fe6:	8d 83       	std	Y+5, r24	; 0x05
    1fe8:	9e 83       	std	Y+6, r25	; 0x06
    1fea:	af 83       	std	Y+7, r26	; 0x07
    1fec:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1fee:	20 e0       	ldi	r18, 0x00	; 0
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	40 e8       	ldi	r20, 0x80	; 128
    1ff4:	5f e3       	ldi	r21, 0x3F	; 63
    1ff6:	6d 81       	ldd	r22, Y+5	; 0x05
    1ff8:	7e 81       	ldd	r23, Y+6	; 0x06
    1ffa:	8f 81       	ldd	r24, Y+7	; 0x07
    1ffc:	98 85       	ldd	r25, Y+8	; 0x08
    1ffe:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__cmpsf2>
    2002:	88 23       	and	r24, r24
    2004:	2c f4       	brge	.+10     	; 0x2010 <odometry_set_angle+0x9a>
		__ticks = 1;
    2006:	81 e0       	ldi	r24, 0x01	; 1
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	9a 87       	std	Y+10, r25	; 0x0a
    200c:	89 87       	std	Y+9, r24	; 0x09
    200e:	3f c0       	rjmp	.+126    	; 0x208e <odometry_set_angle+0x118>
	else if (__tmp > 65535)
    2010:	20 e0       	ldi	r18, 0x00	; 0
    2012:	3f ef       	ldi	r19, 0xFF	; 255
    2014:	4f e7       	ldi	r20, 0x7F	; 127
    2016:	57 e4       	ldi	r21, 0x47	; 71
    2018:	6d 81       	ldd	r22, Y+5	; 0x05
    201a:	7e 81       	ldd	r23, Y+6	; 0x06
    201c:	8f 81       	ldd	r24, Y+7	; 0x07
    201e:	98 85       	ldd	r25, Y+8	; 0x08
    2020:	0e 94 b9 19 	call	0x3372	; 0x3372 <__gesf2>
    2024:	18 16       	cp	r1, r24
    2026:	4c f5       	brge	.+82     	; 0x207a <odometry_set_angle+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2028:	20 e0       	ldi	r18, 0x00	; 0
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	40 e2       	ldi	r20, 0x20	; 32
    202e:	51 e4       	ldi	r21, 0x41	; 65
    2030:	69 81       	ldd	r22, Y+1	; 0x01
    2032:	7a 81       	ldd	r23, Y+2	; 0x02
    2034:	8b 81       	ldd	r24, Y+3	; 0x03
    2036:	9c 81       	ldd	r25, Y+4	; 0x04
    2038:	0e 94 be 19 	call	0x337c	; 0x337c <__mulsf3>
    203c:	dc 01       	movw	r26, r24
    203e:	cb 01       	movw	r24, r22
    2040:	bc 01       	movw	r22, r24
    2042:	cd 01       	movw	r24, r26
    2044:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <__fixunssfsi>
    2048:	dc 01       	movw	r26, r24
    204a:	cb 01       	movw	r24, r22
    204c:	9a 87       	std	Y+10, r25	; 0x0a
    204e:	89 87       	std	Y+9, r24	; 0x09
    2050:	0f c0       	rjmp	.+30     	; 0x2070 <odometry_set_angle+0xfa>
    2052:	89 e1       	ldi	r24, 0x19	; 25
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	9c 87       	std	Y+12, r25	; 0x0c
    2058:	8b 87       	std	Y+11, r24	; 0x0b
    205a:	8b 85       	ldd	r24, Y+11	; 0x0b
    205c:	9c 85       	ldd	r25, Y+12	; 0x0c
    205e:	01 97       	sbiw	r24, 0x01	; 1
    2060:	f1 f7       	brne	.-4      	; 0x205e <odometry_set_angle+0xe8>
    2062:	9c 87       	std	Y+12, r25	; 0x0c
    2064:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2066:	89 85       	ldd	r24, Y+9	; 0x09
    2068:	9a 85       	ldd	r25, Y+10	; 0x0a
    206a:	01 97       	sbiw	r24, 0x01	; 1
    206c:	9a 87       	std	Y+10, r25	; 0x0a
    206e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2070:	89 85       	ldd	r24, Y+9	; 0x09
    2072:	9a 85       	ldd	r25, Y+10	; 0x0a
    2074:	89 2b       	or	r24, r25
    2076:	69 f7       	brne	.-38     	; 0x2052 <odometry_set_angle+0xdc>
    2078:	14 c0       	rjmp	.+40     	; 0x20a2 <odometry_set_angle+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    207a:	6d 81       	ldd	r22, Y+5	; 0x05
    207c:	7e 81       	ldd	r23, Y+6	; 0x06
    207e:	8f 81       	ldd	r24, Y+7	; 0x07
    2080:	98 85       	ldd	r25, Y+8	; 0x08
    2082:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <__fixunssfsi>
    2086:	dc 01       	movw	r26, r24
    2088:	cb 01       	movw	r24, r22
    208a:	9a 87       	std	Y+10, r25	; 0x0a
    208c:	89 87       	std	Y+9, r24	; 0x09
    208e:	89 85       	ldd	r24, Y+9	; 0x09
    2090:	9a 85       	ldd	r25, Y+10	; 0x0a
    2092:	9e 87       	std	Y+14, r25	; 0x0e
    2094:	8d 87       	std	Y+13, r24	; 0x0d
    2096:	8d 85       	ldd	r24, Y+13	; 0x0d
    2098:	9e 85       	ldd	r25, Y+14	; 0x0e
    209a:	01 97       	sbiw	r24, 0x01	; 1
    209c:	f1 f7       	brne	.-4      	; 0x209a <odometry_set_angle+0x124>
    209e:	9e 87       	std	Y+14, r25	; 0x0e
    20a0:	8d 87       	std	Y+13, r24	; 0x0d
    20a2:	ce 01       	movw	r24, r28
    20a4:	0f 96       	adiw	r24, 0x0f	; 15
    20a6:	63 ec       	ldi	r22, 0xC3	; 195
    20a8:	0e 94 33 07 	call	0xe66	; 0xe66 <CAN_Write>
    20ac:	88 23       	and	r24, r24
    20ae:	09 f0       	breq	.+2      	; 0x20b2 <odometry_set_angle+0x13c>
    20b0:	86 cf       	rjmp	.-244    	; 0x1fbe <odometry_set_angle+0x48>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    20b2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    20b4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    20b6:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <odometry_wait_until_done>
}
    20ba:	6b 96       	adiw	r28, 0x1b	; 27
    20bc:	0f b6       	in	r0, 0x3f	; 63
    20be:	f8 94       	cli
    20c0:	de bf       	out	0x3e, r29	; 62
    20c2:	0f be       	out	0x3f, r0	; 63
    20c4:	cd bf       	out	0x3d, r28	; 61
    20c6:	df 91       	pop	r29
    20c8:	cf 91       	pop	r28
    20ca:	08 95       	ret

000020cc <getState>:

uint8_t getState(void)
{
    20cc:	cf 93       	push	r28
    20ce:	df 93       	push	r29
    20d0:	cd b7       	in	r28, 0x3d	; 61
    20d2:	de b7       	in	r29, 0x3e	; 62
	return position.state;
    20d4:	80 91 10 01 	lds	r24, 0x0110
}
    20d8:	df 91       	pop	r29
    20da:	cf 91       	pop	r28
    20dc:	08 95       	ret

000020de <odometry_get_x>:

int16_t odometry_get_x(void)
{
    20de:	cf 93       	push	r28
    20e0:	df 93       	push	r29
    20e2:	cd b7       	in	r28, 0x3d	; 61
    20e4:	de b7       	in	r29, 0x3e	; 62
	return position.x;
    20e6:	80 91 0a 01 	lds	r24, 0x010A
    20ea:	90 91 0b 01 	lds	r25, 0x010B
}
    20ee:	df 91       	pop	r29
    20f0:	cf 91       	pop	r28
    20f2:	08 95       	ret

000020f4 <odometry_get_y>:

int16_t odometry_get_y(void)
{
    20f4:	cf 93       	push	r28
    20f6:	df 93       	push	r29
    20f8:	cd b7       	in	r28, 0x3d	; 61
    20fa:	de b7       	in	r29, 0x3e	; 62
	return position.y;
    20fc:	80 91 0c 01 	lds	r24, 0x010C
    2100:	90 91 0d 01 	lds	r25, 0x010D
}
    2104:	df 91       	pop	r29
    2106:	cf 91       	pop	r28
    2108:	08 95       	ret

0000210a <odometry_get_angle>:

int16_t odometry_get_angle(void)
{
    210a:	cf 93       	push	r28
    210c:	df 93       	push	r29
    210e:	cd b7       	in	r28, 0x3d	; 61
    2110:	de b7       	in	r29, 0x3e	; 62
	return position.angle;
    2112:	80 91 0e 01 	lds	r24, 0x010E
    2116:	90 91 0f 01 	lds	r25, 0x010F
}
    211a:	df 91       	pop	r29
    211c:	cf 91       	pop	r28
    211e:	08 95       	ret

00002120 <timer_register_callback>:
/*
 * 	void timer_register_callback(void (*callback)(void))
 * 	set the callback function
 */
void timer_register_callback(void (*callback)(void))
{
    2120:	cf 93       	push	r28
    2122:	df 93       	push	r29
    2124:	00 d0       	rcall	.+0      	; 0x2126 <timer_register_callback+0x6>
    2126:	cd b7       	in	r28, 0x3d	; 61
    2128:	de b7       	in	r29, 0x3e	; 62
    212a:	9a 83       	std	Y+2, r25	; 0x02
    212c:	89 83       	std	Y+1, r24	; 0x01
    timer_callback = callback;
    212e:	89 81       	ldd	r24, Y+1	; 0x01
    2130:	9a 81       	ldd	r25, Y+2	; 0x02
    2132:	90 93 7b 01 	sts	0x017B, r25
    2136:	80 93 7a 01 	sts	0x017A, r24
}
    213a:	0f 90       	pop	r0
    213c:	0f 90       	pop	r0
    213e:	df 91       	pop	r29
    2140:	cf 91       	pop	r28
    2142:	08 95       	ret

00002144 <timer_init>:
/*
 *	void timer_init(unsigned int freq)
 *	set the frequency, and init the timer
 */
void timer_init(unsigned int freq)
{
    2144:	0f 93       	push	r16
    2146:	1f 93       	push	r17
    2148:	cf 93       	push	r28
    214a:	df 93       	push	r29
    214c:	00 d0       	rcall	.+0      	; 0x214e <timer_init+0xa>
    214e:	cd b7       	in	r28, 0x3d	; 61
    2150:	de b7       	in	r29, 0x3e	; 62
    2152:	9a 83       	std	Y+2, r25	; 0x02
    2154:	89 83       	std	Y+1, r24	; 0x01
    TCCR1A = 0;
    2156:	80 e8       	ldi	r24, 0x80	; 128
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	fc 01       	movw	r30, r24
    215c:	10 82       	st	Z, r1
	TCCR1B = (1 << WGM12) | (1 << CS10);
    215e:	81 e8       	ldi	r24, 0x81	; 129
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	29 e0       	ldi	r18, 0x09	; 9
    2164:	fc 01       	movw	r30, r24
    2166:	20 83       	st	Z, r18
	OCR1A = (double)F_CPU / (double)freq + 0.5;
    2168:	08 e8       	ldi	r16, 0x88	; 136
    216a:	10 e0       	ldi	r17, 0x00	; 0
    216c:	89 81       	ldd	r24, Y+1	; 0x01
    216e:	9a 81       	ldd	r25, Y+2	; 0x02
    2170:	cc 01       	movw	r24, r24
    2172:	a0 e0       	ldi	r26, 0x00	; 0
    2174:	b0 e0       	ldi	r27, 0x00	; 0
    2176:	bc 01       	movw	r22, r24
    2178:	cd 01       	movw	r24, r26
    217a:	0e 94 07 19 	call	0x320e	; 0x320e <__floatunsisf>
    217e:	dc 01       	movw	r26, r24
    2180:	cb 01       	movw	r24, r22
    2182:	9c 01       	movw	r18, r24
    2184:	ad 01       	movw	r20, r26
    2186:	60 e0       	ldi	r22, 0x00	; 0
    2188:	74 e2       	ldi	r23, 0x24	; 36
    218a:	84 e7       	ldi	r24, 0x74	; 116
    218c:	99 e4       	ldi	r25, 0x49	; 73
    218e:	0e 94 66 18 	call	0x30cc	; 0x30cc <__divsf3>
    2192:	dc 01       	movw	r26, r24
    2194:	cb 01       	movw	r24, r22
    2196:	20 e0       	ldi	r18, 0x00	; 0
    2198:	30 e0       	ldi	r19, 0x00	; 0
    219a:	40 e0       	ldi	r20, 0x00	; 0
    219c:	5f e3       	ldi	r21, 0x3F	; 63
    219e:	bc 01       	movw	r22, r24
    21a0:	cd 01       	movw	r24, r26
    21a2:	0e 94 f5 17 	call	0x2fea	; 0x2fea <__addsf3>
    21a6:	dc 01       	movw	r26, r24
    21a8:	cb 01       	movw	r24, r22
    21aa:	bc 01       	movw	r22, r24
    21ac:	cd 01       	movw	r24, r26
    21ae:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <__fixunssfsi>
    21b2:	dc 01       	movw	r26, r24
    21b4:	cb 01       	movw	r24, r22
    21b6:	f8 01       	movw	r30, r16
    21b8:	91 83       	std	Z+1, r25	; 0x01
    21ba:	80 83       	st	Z, r24
	TIMSK1 = 1 << OCIE1A;
    21bc:	8f e6       	ldi	r24, 0x6F	; 111
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	22 e0       	ldi	r18, 0x02	; 2
    21c2:	fc 01       	movw	r30, r24
    21c4:	20 83       	st	Z, r18

	SREG |= 0x80;
    21c6:	8f e5       	ldi	r24, 0x5F	; 95
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	2f e5       	ldi	r18, 0x5F	; 95
    21cc:	30 e0       	ldi	r19, 0x00	; 0
    21ce:	f9 01       	movw	r30, r18
    21d0:	20 81       	ld	r18, Z
    21d2:	20 68       	ori	r18, 0x80	; 128
    21d4:	fc 01       	movw	r30, r24
    21d6:	20 83       	st	Z, r18
}
    21d8:	0f 90       	pop	r0
    21da:	0f 90       	pop	r0
    21dc:	df 91       	pop	r29
    21de:	cf 91       	pop	r28
    21e0:	1f 91       	pop	r17
    21e2:	0f 91       	pop	r16
    21e4:	08 95       	ret

000021e6 <__vector_12>:
/*
 * 	ISR(TIMER1_COMPA_vect)
 * 	timer for the match
 */
ISR(TIMER1_COMPA_vect)
{
    21e6:	1f 92       	push	r1
    21e8:	0f 92       	push	r0
    21ea:	00 90 5f 00 	lds	r0, 0x005F
    21ee:	0f 92       	push	r0
    21f0:	11 24       	eor	r1, r1
    21f2:	00 90 5b 00 	lds	r0, 0x005B
    21f6:	0f 92       	push	r0
    21f8:	2f 93       	push	r18
    21fa:	3f 93       	push	r19
    21fc:	4f 93       	push	r20
    21fe:	5f 93       	push	r21
    2200:	6f 93       	push	r22
    2202:	7f 93       	push	r23
    2204:	8f 93       	push	r24
    2206:	9f 93       	push	r25
    2208:	af 93       	push	r26
    220a:	bf 93       	push	r27
    220c:	ef 93       	push	r30
    220e:	ff 93       	push	r31
    2210:	cf 93       	push	r28
    2212:	df 93       	push	r29
    2214:	cd b7       	in	r28, 0x3d	; 61
    2216:	de b7       	in	r29, 0x3e	; 62
    if(timer_callback != NULL)
    2218:	80 91 7a 01 	lds	r24, 0x017A
    221c:	90 91 7b 01 	lds	r25, 0x017B
    2220:	89 2b       	or	r24, r25
    2222:	31 f0       	breq	.+12     	; 0x2230 <__vector_12+0x4a>
        timer_callback();
    2224:	80 91 7a 01 	lds	r24, 0x017A
    2228:	90 91 7b 01 	lds	r25, 0x017B
    222c:	fc 01       	movw	r30, r24
    222e:	09 95       	icall
	if(sys_time >= 90000)			// if match end
    2230:	80 91 75 01 	lds	r24, 0x0175
    2234:	90 91 76 01 	lds	r25, 0x0176
    2238:	a0 91 77 01 	lds	r26, 0x0177
    223c:	b0 91 78 01 	lds	r27, 0x0178
    2240:	80 39       	cpi	r24, 0x90	; 144
    2242:	9f 45       	sbci	r25, 0x5F	; 95
    2244:	a1 40       	sbci	r26, 0x01	; 1
    2246:	b1 05       	cpc	r27, r1
    2248:	40 f0       	brcs	.+16     	; 0x225a <__vector_12+0x74>
	{
		if(system_get_match_started())
    224a:	0e 94 9f 11 	call	0x233e	; 0x233e <system_get_match_started>
    224e:	88 23       	and	r24, r24
    2250:	21 f0       	breq	.+8      	; 0x225a <__vector_12+0x74>
		{
			odometry_stop(HARD_STOP);
    2252:	83 e5       	ldi	r24, 0x53	; 83
    2254:	0e 94 2d 0c 	call	0x185a	; 0x185a <odometry_stop>
			while(1);
    2258:	ff cf       	rjmp	.-2      	; 0x2258 <__vector_12+0x72>
		}
	}
	sys_time++;
    225a:	80 91 75 01 	lds	r24, 0x0175
    225e:	90 91 76 01 	lds	r25, 0x0176
    2262:	a0 91 77 01 	lds	r26, 0x0177
    2266:	b0 91 78 01 	lds	r27, 0x0178
    226a:	01 96       	adiw	r24, 0x01	; 1
    226c:	a1 1d       	adc	r26, r1
    226e:	b1 1d       	adc	r27, r1
    2270:	80 93 75 01 	sts	0x0175, r24
    2274:	90 93 76 01 	sts	0x0176, r25
    2278:	a0 93 77 01 	sts	0x0177, r26
    227c:	b0 93 78 01 	sts	0x0178, r27
}
    2280:	df 91       	pop	r29
    2282:	cf 91       	pop	r28
    2284:	ff 91       	pop	r31
    2286:	ef 91       	pop	r30
    2288:	bf 91       	pop	r27
    228a:	af 91       	pop	r26
    228c:	9f 91       	pop	r25
    228e:	8f 91       	pop	r24
    2290:	7f 91       	pop	r23
    2292:	6f 91       	pop	r22
    2294:	5f 91       	pop	r21
    2296:	4f 91       	pop	r20
    2298:	3f 91       	pop	r19
    229a:	2f 91       	pop	r18
    229c:	0f 90       	pop	r0
    229e:	00 92 5b 00 	sts	0x005B, r0
    22a2:	0f 90       	pop	r0
    22a4:	00 92 5f 00 	sts	0x005F, r0
    22a8:	0f 90       	pop	r0
    22aa:	1f 90       	pop	r1
    22ac:	18 95       	reti

000022ae <sides_switch_check>:
/*
 * 	signed char sides_switch_check(void)
 * 	checking the side pin (which side we are on)
 */
signed char sides_switch_check(void)
{
    22ae:	cf 93       	push	r28
    22b0:	df 93       	push	r29
    22b2:	cd b7       	in	r28, 0x3d	; 61
    22b4:	de b7       	in	r29, 0x3e	; 62
	if(gpio_read_pin(SIDE_PIN) == 1)
    22b6:	89 e2       	ldi	r24, 0x29	; 41
    22b8:	0e 94 c8 09 	call	0x1390	; 0x1390 <gpio_read_pin>
    22bc:	81 30       	cpi	r24, 0x01	; 1
    22be:	11 f4       	brne	.+4      	; 0x22c4 <sides_switch_check+0x16>
	{
		return 1;
    22c0:	81 e0       	ldi	r24, 0x01	; 1
    22c2:	01 c0       	rjmp	.+2      	; 0x22c6 <sides_switch_check+0x18>
	}
	return 0;
    22c4:	80 e0       	ldi	r24, 0x00	; 0
}
    22c6:	df 91       	pop	r29
    22c8:	cf 91       	pop	r28
    22ca:	08 95       	ret

000022cc <tactic_switch_check>:
/*
 * 	signed char tactic_switch_check(void)
 * 	check the tactic pin
 */
signed char tactic_switch_check(void)
{
    22cc:	cf 93       	push	r28
    22ce:	df 93       	push	r29
    22d0:	cd b7       	in	r28, 0x3d	; 61
    22d2:	de b7       	in	r29, 0x3e	; 62
	if(gpio_read_pin(TACTIC_PIN) == 1)
    22d4:	8a e2       	ldi	r24, 0x2A	; 42
    22d6:	0e 94 c8 09 	call	0x1390	; 0x1390 <gpio_read_pin>
    22da:	81 30       	cpi	r24, 0x01	; 1
    22dc:	11 f4       	brne	.+4      	; 0x22e2 <tactic_switch_check+0x16>
	{
		return 1;
    22de:	81 e0       	ldi	r24, 0x01	; 1
    22e0:	01 c0       	rjmp	.+2      	; 0x22e4 <tactic_switch_check+0x18>
	}
	return 0;
    22e2:	80 e0       	ldi	r24, 0x00	; 0
}
    22e4:	df 91       	pop	r29
    22e6:	cf 91       	pop	r28
    22e8:	08 95       	ret

000022ea <system_reset_system_time>:
/*
 * 	void system_reset_system_time(void)
 * 	reseting the system time
 */
void system_reset_system_time(void)
{
    22ea:	cf 93       	push	r28
    22ec:	df 93       	push	r29
    22ee:	cd b7       	in	r28, 0x3d	; 61
    22f0:	de b7       	in	r29, 0x3e	; 62
	sys_time = 0;
    22f2:	10 92 75 01 	sts	0x0175, r1
    22f6:	10 92 76 01 	sts	0x0176, r1
    22fa:	10 92 77 01 	sts	0x0177, r1
    22fe:	10 92 78 01 	sts	0x0178, r1
}
    2302:	df 91       	pop	r29
    2304:	cf 91       	pop	r28
    2306:	08 95       	ret

00002308 <system_set_match_started>:
/*
 * 	void system_set_match_started(void)
 * 	match has started!
 */
void system_set_match_started(void)
{
    2308:	cf 93       	push	r28
    230a:	df 93       	push	r29
    230c:	cd b7       	in	r28, 0x3d	; 61
    230e:	de b7       	in	r29, 0x3e	; 62
	match_started = 1;
    2310:	81 e0       	ldi	r24, 0x01	; 1
    2312:	80 93 79 01 	sts	0x0179, r24
}
    2316:	df 91       	pop	r29
    2318:	cf 91       	pop	r28
    231a:	08 95       	ret

0000231c <system_get_system_time>:
/*
 *	uint32_t system_get_system_time(void)
 *	returns current sys_time
 */
uint32_t system_get_system_time(void)
{
    231c:	cf 93       	push	r28
    231e:	df 93       	push	r29
    2320:	cd b7       	in	r28, 0x3d	; 61
    2322:	de b7       	in	r29, 0x3e	; 62
	return sys_time;
    2324:	80 91 75 01 	lds	r24, 0x0175
    2328:	90 91 76 01 	lds	r25, 0x0176
    232c:	a0 91 77 01 	lds	r26, 0x0177
    2330:	b0 91 78 01 	lds	r27, 0x0178
}
    2334:	bc 01       	movw	r22, r24
    2336:	cd 01       	movw	r24, r26
    2338:	df 91       	pop	r29
    233a:	cf 91       	pop	r28
    233c:	08 95       	ret

0000233e <system_get_match_started>:
/*
 * 	uint8_t system_get_match_started(void)
 * 	return match_started
 */
uint8_t system_get_match_started(void)
{
    233e:	cf 93       	push	r28
    2340:	df 93       	push	r29
    2342:	cd b7       	in	r28, 0x3d	; 61
    2344:	de b7       	in	r29, 0x3e	; 62
	return match_started;
    2346:	80 91 79 01 	lds	r24, 0x0179
}
    234a:	df 91       	pop	r29
    234c:	cf 91       	pop	r28
    234e:	08 95       	ret

00002350 <return_active_state>:
/*
 * 	uint8_t return_active_state(void)
 * 	returns the active satate
 */
uint8_t return_active_state(void)
{
    2350:	cf 93       	push	r28
    2352:	df 93       	push	r29
    2354:	cd b7       	in	r28, 0x3d	; 61
    2356:	de b7       	in	r29, 0x3e	; 62
	return active_state;
    2358:	80 91 8b 02 	lds	r24, 0x028B
    235c:	90 91 8c 02 	lds	r25, 0x028C
}
    2360:	df 91       	pop	r29
    2362:	cf 91       	pop	r28
    2364:	08 95       	ret

00002366 <system_init>:
/*
 * 	void system_init(void)
 * 	Inits the system
 */
void system_init(void)
{	
    2366:	cf 93       	push	r28
    2368:	df 93       	push	r29
    236a:	cd b7       	in	r28, 0x3d	; 61
    236c:	de b7       	in	r29, 0x3e	; 62
    236e:	6c 97       	sbiw	r28, 0x1c	; 28
    2370:	0f b6       	in	r0, 0x3f	; 63
    2372:	f8 94       	cli
    2374:	de bf       	out	0x3e, r29	; 62
    2376:	0f be       	out	0x3f, r0	; 63
    2378:	cd bf       	out	0x3d, r28	; 61

	// sets debouncer
	timer_register_callback(gpio_debouncer);
    237a:	85 e4       	ldi	r24, 0x45	; 69
    237c:	9a e0       	ldi	r25, 0x0A	; 10
    237e:	0e 94 90 10 	call	0x2120	; 0x2120 <timer_register_callback>
    2382:	80 e0       	ldi	r24, 0x00	; 0
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	a8 ec       	ldi	r26, 0xC8	; 200
    2388:	b2 e4       	ldi	r27, 0x42	; 66
    238a:	89 83       	std	Y+1, r24	; 0x01
    238c:	9a 83       	std	Y+2, r25	; 0x02
    238e:	ab 83       	std	Y+3, r26	; 0x03
    2390:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2392:	20 e0       	ldi	r18, 0x00	; 0
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	4a e7       	ldi	r20, 0x7A	; 122
    2398:	53 e4       	ldi	r21, 0x43	; 67
    239a:	69 81       	ldd	r22, Y+1	; 0x01
    239c:	7a 81       	ldd	r23, Y+2	; 0x02
    239e:	8b 81       	ldd	r24, Y+3	; 0x03
    23a0:	9c 81       	ldd	r25, Y+4	; 0x04
    23a2:	0e 94 be 19 	call	0x337c	; 0x337c <__mulsf3>
    23a6:	dc 01       	movw	r26, r24
    23a8:	cb 01       	movw	r24, r22
    23aa:	8d 83       	std	Y+5, r24	; 0x05
    23ac:	9e 83       	std	Y+6, r25	; 0x06
    23ae:	af 83       	std	Y+7, r26	; 0x07
    23b0:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    23b2:	20 e0       	ldi	r18, 0x00	; 0
    23b4:	30 e0       	ldi	r19, 0x00	; 0
    23b6:	40 e8       	ldi	r20, 0x80	; 128
    23b8:	5f e3       	ldi	r21, 0x3F	; 63
    23ba:	6d 81       	ldd	r22, Y+5	; 0x05
    23bc:	7e 81       	ldd	r23, Y+6	; 0x06
    23be:	8f 81       	ldd	r24, Y+7	; 0x07
    23c0:	98 85       	ldd	r25, Y+8	; 0x08
    23c2:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__cmpsf2>
    23c6:	88 23       	and	r24, r24
    23c8:	2c f4       	brge	.+10     	; 0x23d4 <system_init+0x6e>
		__ticks = 1;
    23ca:	81 e0       	ldi	r24, 0x01	; 1
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	9a 87       	std	Y+10, r25	; 0x0a
    23d0:	89 87       	std	Y+9, r24	; 0x09
    23d2:	3f c0       	rjmp	.+126    	; 0x2452 <system_init+0xec>
	else if (__tmp > 65535)
    23d4:	20 e0       	ldi	r18, 0x00	; 0
    23d6:	3f ef       	ldi	r19, 0xFF	; 255
    23d8:	4f e7       	ldi	r20, 0x7F	; 127
    23da:	57 e4       	ldi	r21, 0x47	; 71
    23dc:	6d 81       	ldd	r22, Y+5	; 0x05
    23de:	7e 81       	ldd	r23, Y+6	; 0x06
    23e0:	8f 81       	ldd	r24, Y+7	; 0x07
    23e2:	98 85       	ldd	r25, Y+8	; 0x08
    23e4:	0e 94 b9 19 	call	0x3372	; 0x3372 <__gesf2>
    23e8:	18 16       	cp	r1, r24
    23ea:	4c f5       	brge	.+82     	; 0x243e <system_init+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ec:	20 e0       	ldi	r18, 0x00	; 0
    23ee:	30 e0       	ldi	r19, 0x00	; 0
    23f0:	40 e2       	ldi	r20, 0x20	; 32
    23f2:	51 e4       	ldi	r21, 0x41	; 65
    23f4:	69 81       	ldd	r22, Y+1	; 0x01
    23f6:	7a 81       	ldd	r23, Y+2	; 0x02
    23f8:	8b 81       	ldd	r24, Y+3	; 0x03
    23fa:	9c 81       	ldd	r25, Y+4	; 0x04
    23fc:	0e 94 be 19 	call	0x337c	; 0x337c <__mulsf3>
    2400:	dc 01       	movw	r26, r24
    2402:	cb 01       	movw	r24, r22
    2404:	bc 01       	movw	r22, r24
    2406:	cd 01       	movw	r24, r26
    2408:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <__fixunssfsi>
    240c:	dc 01       	movw	r26, r24
    240e:	cb 01       	movw	r24, r22
    2410:	9a 87       	std	Y+10, r25	; 0x0a
    2412:	89 87       	std	Y+9, r24	; 0x09
    2414:	0f c0       	rjmp	.+30     	; 0x2434 <system_init+0xce>
    2416:	89 e1       	ldi	r24, 0x19	; 25
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	9c 87       	std	Y+12, r25	; 0x0c
    241c:	8b 87       	std	Y+11, r24	; 0x0b
    241e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2420:	9c 85       	ldd	r25, Y+12	; 0x0c
    2422:	01 97       	sbiw	r24, 0x01	; 1
    2424:	f1 f7       	brne	.-4      	; 0x2422 <system_init+0xbc>
    2426:	9c 87       	std	Y+12, r25	; 0x0c
    2428:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    242a:	89 85       	ldd	r24, Y+9	; 0x09
    242c:	9a 85       	ldd	r25, Y+10	; 0x0a
    242e:	01 97       	sbiw	r24, 0x01	; 1
    2430:	9a 87       	std	Y+10, r25	; 0x0a
    2432:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2434:	89 85       	ldd	r24, Y+9	; 0x09
    2436:	9a 85       	ldd	r25, Y+10	; 0x0a
    2438:	89 2b       	or	r24, r25
    243a:	69 f7       	brne	.-38     	; 0x2416 <system_init+0xb0>
    243c:	14 c0       	rjmp	.+40     	; 0x2466 <system_init+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    243e:	6d 81       	ldd	r22, Y+5	; 0x05
    2440:	7e 81       	ldd	r23, Y+6	; 0x06
    2442:	8f 81       	ldd	r24, Y+7	; 0x07
    2444:	98 85       	ldd	r25, Y+8	; 0x08
    2446:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <__fixunssfsi>
    244a:	dc 01       	movw	r26, r24
    244c:	cb 01       	movw	r24, r22
    244e:	9a 87       	std	Y+10, r25	; 0x0a
    2450:	89 87       	std	Y+9, r24	; 0x09
    2452:	89 85       	ldd	r24, Y+9	; 0x09
    2454:	9a 85       	ldd	r25, Y+10	; 0x0a
    2456:	9e 87       	std	Y+14, r25	; 0x0e
    2458:	8d 87       	std	Y+13, r24	; 0x0d
    245a:	8d 85       	ldd	r24, Y+13	; 0x0d
    245c:	9e 85       	ldd	r25, Y+14	; 0x0e
    245e:	01 97       	sbiw	r24, 0x01	; 1
    2460:	f1 f7       	brne	.-4      	; 0x245e <system_init+0xf8>
    2462:	9e 87       	std	Y+14, r25	; 0x0e
    2464:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(100);
	
	/*
	 *	gpio setups
	 */
	gpio_register_pin(JUMPER_PIN,GPIO_DIRECTION_INPUT,TRUE);							//jumper
    2466:	40 e0       	ldi	r20, 0x00	; 0
    2468:	60 e0       	ldi	r22, 0x00	; 0
    246a:	88 e2       	ldi	r24, 0x28	; 40
    246c:	0e 94 0c 08 	call	0x1018	; 0x1018 <gpio_register_pin>
	gpio_register_pin(SIDE_PIN,GPIO_DIRECTION_INPUT,TRUE);								//prekidac za stranu
    2470:	40 e0       	ldi	r20, 0x00	; 0
    2472:	60 e0       	ldi	r22, 0x00	; 0
    2474:	89 e2       	ldi	r24, 0x29	; 41
    2476:	0e 94 0c 08 	call	0x1018	; 0x1018 <gpio_register_pin>
	gpio_register_pin(SENSOR_B_L_PIN,GPIO_DIRECTION_INPUT,TRUE);						//sensor back left
	gpio_register_pin(SENSOR_B_R_PIN,GPIO_DIRECTION_INPUT,TRUE);						//sensor back right
	*/

	// led debugs
	DDRG = 0xff;
    247a:	83 e3       	ldi	r24, 0x33	; 51
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	2f ef       	ldi	r18, 0xFF	; 255
    2480:	fc 01       	movw	r30, r24
    2482:	20 83       	st	Z, r18
	PORTG = 0x00;
    2484:	84 e3       	ldi	r24, 0x34	; 52
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	fc 01       	movw	r30, r24
    248a:	10 82       	st	Z, r1

	// inits
	servo_init(50);
    248c:	82 e3       	ldi	r24, 0x32	; 50
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	0e 94 6b 00 	call	0xd6	; 0xd6 <servo_init>
	timer_init(1000);
    2494:	88 ee       	ldi	r24, 0xE8	; 232
    2496:	93 e0       	ldi	r25, 0x03	; 3
    2498:	0e 94 a2 10 	call	0x2144	; 0x2144 <timer_init>
	CAN_Init(1);
    249c:	81 e0       	ldi	r24, 0x01	; 1
    249e:	0e 94 65 06 	call	0xcca	; 0xcca <CAN_Init>
	initUart1(UART1_BAUD,UART_ISR_OFF);
    24a2:	40 e0       	ldi	r20, 0x00	; 0
    24a4:	60 e8       	ldi	r22, 0x80	; 128
    24a6:	75 e2       	ldi	r23, 0x25	; 37
    24a8:	80 e0       	ldi	r24, 0x00	; 0
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <initUart1>
	actuator_setup();
    24b0:	0e 94 14 02 	call	0x428	; 0x428 <actuator_setup>
	
	// waiting for the jumper
	while(!(gpio_read_pin(JUMPER_PIN)));
    24b4:	00 00       	nop
    24b6:	88 e2       	ldi	r24, 0x28	; 40
    24b8:	0e 94 c8 09 	call	0x1390	; 0x1390 <gpio_read_pin>
    24bc:	88 23       	and	r24, r24
    24be:	d9 f3       	breq	.-10     	; 0x24b6 <system_init+0x150>
    24c0:	80 e0       	ldi	r24, 0x00	; 0
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	a0 e2       	ldi	r26, 0x20	; 32
    24c6:	b1 e4       	ldi	r27, 0x41	; 65
    24c8:	8f 87       	std	Y+15, r24	; 0x0f
    24ca:	98 8b       	std	Y+16, r25	; 0x10
    24cc:	a9 8b       	std	Y+17, r26	; 0x11
    24ce:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    24d0:	20 e0       	ldi	r18, 0x00	; 0
    24d2:	30 e0       	ldi	r19, 0x00	; 0
    24d4:	4a e7       	ldi	r20, 0x7A	; 122
    24d6:	53 e4       	ldi	r21, 0x43	; 67
    24d8:	6f 85       	ldd	r22, Y+15	; 0x0f
    24da:	78 89       	ldd	r23, Y+16	; 0x10
    24dc:	89 89       	ldd	r24, Y+17	; 0x11
    24de:	9a 89       	ldd	r25, Y+18	; 0x12
    24e0:	0e 94 be 19 	call	0x337c	; 0x337c <__mulsf3>
    24e4:	dc 01       	movw	r26, r24
    24e6:	cb 01       	movw	r24, r22
    24e8:	8b 8b       	std	Y+19, r24	; 0x13
    24ea:	9c 8b       	std	Y+20, r25	; 0x14
    24ec:	ad 8b       	std	Y+21, r26	; 0x15
    24ee:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    24f0:	20 e0       	ldi	r18, 0x00	; 0
    24f2:	30 e0       	ldi	r19, 0x00	; 0
    24f4:	40 e8       	ldi	r20, 0x80	; 128
    24f6:	5f e3       	ldi	r21, 0x3F	; 63
    24f8:	6b 89       	ldd	r22, Y+19	; 0x13
    24fa:	7c 89       	ldd	r23, Y+20	; 0x14
    24fc:	8d 89       	ldd	r24, Y+21	; 0x15
    24fe:	9e 89       	ldd	r25, Y+22	; 0x16
    2500:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__cmpsf2>
    2504:	88 23       	and	r24, r24
    2506:	2c f4       	brge	.+10     	; 0x2512 <system_init+0x1ac>
		__ticks = 1;
    2508:	81 e0       	ldi	r24, 0x01	; 1
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	98 8f       	std	Y+24, r25	; 0x18
    250e:	8f 8b       	std	Y+23, r24	; 0x17
    2510:	3f c0       	rjmp	.+126    	; 0x2590 <system_init+0x22a>
	else if (__tmp > 65535)
    2512:	20 e0       	ldi	r18, 0x00	; 0
    2514:	3f ef       	ldi	r19, 0xFF	; 255
    2516:	4f e7       	ldi	r20, 0x7F	; 127
    2518:	57 e4       	ldi	r21, 0x47	; 71
    251a:	6b 89       	ldd	r22, Y+19	; 0x13
    251c:	7c 89       	ldd	r23, Y+20	; 0x14
    251e:	8d 89       	ldd	r24, Y+21	; 0x15
    2520:	9e 89       	ldd	r25, Y+22	; 0x16
    2522:	0e 94 b9 19 	call	0x3372	; 0x3372 <__gesf2>
    2526:	18 16       	cp	r1, r24
    2528:	4c f5       	brge	.+82     	; 0x257c <system_init+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    252a:	20 e0       	ldi	r18, 0x00	; 0
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	40 e2       	ldi	r20, 0x20	; 32
    2530:	51 e4       	ldi	r21, 0x41	; 65
    2532:	6f 85       	ldd	r22, Y+15	; 0x0f
    2534:	78 89       	ldd	r23, Y+16	; 0x10
    2536:	89 89       	ldd	r24, Y+17	; 0x11
    2538:	9a 89       	ldd	r25, Y+18	; 0x12
    253a:	0e 94 be 19 	call	0x337c	; 0x337c <__mulsf3>
    253e:	dc 01       	movw	r26, r24
    2540:	cb 01       	movw	r24, r22
    2542:	bc 01       	movw	r22, r24
    2544:	cd 01       	movw	r24, r26
    2546:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <__fixunssfsi>
    254a:	dc 01       	movw	r26, r24
    254c:	cb 01       	movw	r24, r22
    254e:	98 8f       	std	Y+24, r25	; 0x18
    2550:	8f 8b       	std	Y+23, r24	; 0x17
    2552:	0f c0       	rjmp	.+30     	; 0x2572 <system_init+0x20c>
    2554:	89 e1       	ldi	r24, 0x19	; 25
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	9a 8f       	std	Y+26, r25	; 0x1a
    255a:	89 8f       	std	Y+25, r24	; 0x19
    255c:	89 8d       	ldd	r24, Y+25	; 0x19
    255e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2560:	01 97       	sbiw	r24, 0x01	; 1
    2562:	f1 f7       	brne	.-4      	; 0x2560 <system_init+0x1fa>
    2564:	9a 8f       	std	Y+26, r25	; 0x1a
    2566:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2568:	8f 89       	ldd	r24, Y+23	; 0x17
    256a:	98 8d       	ldd	r25, Y+24	; 0x18
    256c:	01 97       	sbiw	r24, 0x01	; 1
    256e:	98 8f       	std	Y+24, r25	; 0x18
    2570:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2572:	8f 89       	ldd	r24, Y+23	; 0x17
    2574:	98 8d       	ldd	r25, Y+24	; 0x18
    2576:	89 2b       	or	r24, r25
    2578:	69 f7       	brne	.-38     	; 0x2554 <system_init+0x1ee>
    257a:	14 c0       	rjmp	.+40     	; 0x25a4 <system_init+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    257c:	6b 89       	ldd	r22, Y+19	; 0x13
    257e:	7c 89       	ldd	r23, Y+20	; 0x14
    2580:	8d 89       	ldd	r24, Y+21	; 0x15
    2582:	9e 89       	ldd	r25, Y+22	; 0x16
    2584:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <__fixunssfsi>
    2588:	dc 01       	movw	r26, r24
    258a:	cb 01       	movw	r24, r22
    258c:	98 8f       	std	Y+24, r25	; 0x18
    258e:	8f 8b       	std	Y+23, r24	; 0x17
    2590:	8f 89       	ldd	r24, Y+23	; 0x17
    2592:	98 8d       	ldd	r25, Y+24	; 0x18
    2594:	9c 8f       	std	Y+28, r25	; 0x1c
    2596:	8b 8f       	std	Y+27, r24	; 0x1b
    2598:	8b 8d       	ldd	r24, Y+27	; 0x1b
    259a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    259c:	01 97       	sbiw	r24, 0x01	; 1
    259e:	f1 f7       	brne	.-4      	; 0x259c <system_init+0x236>
    25a0:	9c 8f       	std	Y+28, r25	; 0x1c
    25a2:	8b 8f       	std	Y+27, r24	; 0x1b
		_delay_ms(10);
		
	// indicating the led's
	PORTG = 0xff;
    25a4:	84 e3       	ldi	r24, 0x34	; 52
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	2f ef       	ldi	r18, 0xFF	; 255
    25aa:	fc 01       	movw	r30, r24
    25ac:	20 83       	st	Z, r18
	
	system_reset_system_time();															// reset system time
    25ae:	0e 94 75 11 	call	0x22ea	; 0x22ea <system_reset_system_time>
	system_set_match_started();															// match has started!
    25b2:	0e 94 84 11 	call	0x2308	; 0x2308 <system_set_match_started>

	
}
    25b6:	6c 96       	adiw	r28, 0x1c	; 28
    25b8:	0f b6       	in	r0, 0x3f	; 63
    25ba:	f8 94       	cli
    25bc:	de bf       	out	0x3e, r29	; 62
    25be:	0f be       	out	0x3f, r0	; 63
    25c0:	cd bf       	out	0x3d, r28	; 61
    25c2:	df 91       	pop	r29
    25c4:	cf 91       	pop	r28
    25c6:	08 95       	ret

000025c8 <check_sensor>:
/*
 *	signed char check_sensor(signed char robot_side, signed char sensor_side)
 *	checking all them sensors
 */
signed char check_sensor(signed char robot_side, signed char sensor_side)
{
    25c8:	cf 93       	push	r28
    25ca:	df 93       	push	r29
    25cc:	00 d0       	rcall	.+0      	; 0x25ce <check_sensor+0x6>
    25ce:	cd b7       	in	r28, 0x3d	; 61
    25d0:	de b7       	in	r29, 0x3e	; 62
    25d2:	89 83       	std	Y+1, r24	; 0x01
    25d4:	6a 83       	std	Y+2, r22	; 0x02
	if(robot_side == ROBOT_SIDE_FRONT)
    25d6:	89 81       	ldd	r24, Y+1	; 0x01
    25d8:	81 30       	cpi	r24, 0x01	; 1
    25da:	49 f5       	brne	.+82     	; 0x262e <check_sensor+0x66>
	{
		if(sensor_side == ALL)
    25dc:	8a 81       	ldd	r24, Y+2	; 0x02
    25de:	81 30       	cpi	r24, 0x01	; 1
    25e0:	71 f4       	brne	.+28     	; 0x25fe <check_sensor+0x36>
		{
			// check if ! or normal
			if(!(gpio_read_pin(SENSOR_F_L_PIN)) || !(gpio_read_pin(SENSOR_F_R_PIN)))
    25e2:	88 e0       	ldi	r24, 0x08	; 8
    25e4:	0e 94 c8 09 	call	0x1390	; 0x1390 <gpio_read_pin>
    25e8:	88 23       	and	r24, r24
    25ea:	29 f0       	breq	.+10     	; 0x25f6 <check_sensor+0x2e>
    25ec:	8a e0       	ldi	r24, 0x0A	; 10
    25ee:	0e 94 c8 09 	call	0x1390	; 0x1390 <gpio_read_pin>
    25f2:	88 23       	and	r24, r24
    25f4:	11 f4       	brne	.+4      	; 0x25fa <check_sensor+0x32>
			{
				return DETECTED;
    25f6:	81 e0       	ldi	r24, 0x01	; 1
    25f8:	47 c0       	rjmp	.+142    	; 0x2688 <check_sensor+0xc0>
			}
			return NOT_DETECTED;
    25fa:	80 e0       	ldi	r24, 0x00	; 0
    25fc:	45 c0       	rjmp	.+138    	; 0x2688 <check_sensor+0xc0>
		}
		else if(sensor_side == LEFT)
    25fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2600:	81 30       	cpi	r24, 0x01	; 1
    2602:	49 f4       	brne	.+18     	; 0x2616 <check_sensor+0x4e>
		{
			if(!(gpio_read_pin(SENSOR_F_L_PIN)))
    2604:	88 e0       	ldi	r24, 0x08	; 8
    2606:	0e 94 c8 09 	call	0x1390	; 0x1390 <gpio_read_pin>
    260a:	88 23       	and	r24, r24
    260c:	11 f4       	brne	.+4      	; 0x2612 <check_sensor+0x4a>
			{
				return DETECTED;
    260e:	81 e0       	ldi	r24, 0x01	; 1
    2610:	3b c0       	rjmp	.+118    	; 0x2688 <check_sensor+0xc0>
			}
			return NOT_DETECTED;
    2612:	80 e0       	ldi	r24, 0x00	; 0
    2614:	39 c0       	rjmp	.+114    	; 0x2688 <check_sensor+0xc0>
		}
		else if(sensor_side == RIGHT)
    2616:	8a 81       	ldd	r24, Y+2	; 0x02
    2618:	88 23       	and	r24, r24
    261a:	a9 f5       	brne	.+106    	; 0x2686 <check_sensor+0xbe>
		{
			if(!(gpio_read_pin(SENSOR_F_R_PIN)))
    261c:	8a e0       	ldi	r24, 0x0A	; 10
    261e:	0e 94 c8 09 	call	0x1390	; 0x1390 <gpio_read_pin>
    2622:	88 23       	and	r24, r24
    2624:	11 f4       	brne	.+4      	; 0x262a <check_sensor+0x62>
			{
				return DETECTED;
    2626:	81 e0       	ldi	r24, 0x01	; 1
    2628:	2f c0       	rjmp	.+94     	; 0x2688 <check_sensor+0xc0>
			}
			return NOT_DETECTED;
    262a:	80 e0       	ldi	r24, 0x00	; 0
    262c:	2d c0       	rjmp	.+90     	; 0x2688 <check_sensor+0xc0>
		}
	}
	else if(robot_side == ROBOT_SIDE_BACK)
    262e:	89 81       	ldd	r24, Y+1	; 0x01
    2630:	82 30       	cpi	r24, 0x02	; 2
    2632:	49 f5       	brne	.+82     	; 0x2686 <check_sensor+0xbe>
	{
		if(sensor_side == ALL)
    2634:	8a 81       	ldd	r24, Y+2	; 0x02
    2636:	81 30       	cpi	r24, 0x01	; 1
    2638:	71 f4       	brne	.+28     	; 0x2656 <check_sensor+0x8e>
		{
			// check if ! or normal
			if(!(gpio_read_pin(SENSOR_B_L_PIN)) || !(gpio_read_pin(SENSOR_B_R_PIN)))
    263a:	8c e0       	ldi	r24, 0x0C	; 12
    263c:	0e 94 c8 09 	call	0x1390	; 0x1390 <gpio_read_pin>
    2640:	88 23       	and	r24, r24
    2642:	29 f0       	breq	.+10     	; 0x264e <check_sensor+0x86>
    2644:	8e e0       	ldi	r24, 0x0E	; 14
    2646:	0e 94 c8 09 	call	0x1390	; 0x1390 <gpio_read_pin>
    264a:	88 23       	and	r24, r24
    264c:	11 f4       	brne	.+4      	; 0x2652 <check_sensor+0x8a>
			{
				return DETECTED;
    264e:	81 e0       	ldi	r24, 0x01	; 1
    2650:	1b c0       	rjmp	.+54     	; 0x2688 <check_sensor+0xc0>
			}
			return NOT_DETECTED;
    2652:	80 e0       	ldi	r24, 0x00	; 0
    2654:	19 c0       	rjmp	.+50     	; 0x2688 <check_sensor+0xc0>
		}
		else if(sensor_side == LEFT)
    2656:	8a 81       	ldd	r24, Y+2	; 0x02
    2658:	81 30       	cpi	r24, 0x01	; 1
    265a:	49 f4       	brne	.+18     	; 0x266e <check_sensor+0xa6>
		{
			if(!(gpio_read_pin(SENSOR_B_L_PIN)))
    265c:	8c e0       	ldi	r24, 0x0C	; 12
    265e:	0e 94 c8 09 	call	0x1390	; 0x1390 <gpio_read_pin>
    2662:	88 23       	and	r24, r24
    2664:	11 f4       	brne	.+4      	; 0x266a <check_sensor+0xa2>
			{
				return DETECTED;
    2666:	81 e0       	ldi	r24, 0x01	; 1
    2668:	0f c0       	rjmp	.+30     	; 0x2688 <check_sensor+0xc0>
			}
			return NOT_DETECTED;
    266a:	80 e0       	ldi	r24, 0x00	; 0
    266c:	0d c0       	rjmp	.+26     	; 0x2688 <check_sensor+0xc0>
		}
		else if(sensor_side == RIGHT)
    266e:	8a 81       	ldd	r24, Y+2	; 0x02
    2670:	88 23       	and	r24, r24
    2672:	49 f4       	brne	.+18     	; 0x2686 <check_sensor+0xbe>
		{
			if(!(gpio_read_pin(SENSOR_B_R_PIN)))
    2674:	8e e0       	ldi	r24, 0x0E	; 14
    2676:	0e 94 c8 09 	call	0x1390	; 0x1390 <gpio_read_pin>
    267a:	88 23       	and	r24, r24
    267c:	11 f4       	brne	.+4      	; 0x2682 <check_sensor+0xba>
			{
				return DETECTED;
    267e:	81 e0       	ldi	r24, 0x01	; 1
    2680:	03 c0       	rjmp	.+6      	; 0x2688 <check_sensor+0xc0>
			}
			return NOT_DETECTED;
    2682:	80 e0       	ldi	r24, 0x00	; 0
    2684:	01 c0       	rjmp	.+2      	; 0x2688 <check_sensor+0xc0>
		}
	}
	return NOT_DETECTED;
    2686:	80 e0       	ldi	r24, 0x00	; 0
}
    2688:	0f 90       	pop	r0
    268a:	0f 90       	pop	r0
    268c:	df 91       	pop	r29
    268e:	cf 91       	pop	r28
    2690:	08 95       	ret

00002692 <UART0_Init>:
* Parameters        : unsigned int baud
					  char isrOnOff
* Return Value      : void
*********************************************************************************/
void UART0_Init(unsigned long baud, char isrOnOff)
{
    2692:	cf 93       	push	r28
    2694:	df 93       	push	r29
    2696:	cd b7       	in	r28, 0x3d	; 61
    2698:	de b7       	in	r29, 0x3e	; 62
    269a:	27 97       	sbiw	r28, 0x07	; 7
    269c:	0f b6       	in	r0, 0x3f	; 63
    269e:	f8 94       	cli
    26a0:	de bf       	out	0x3e, r29	; 62
    26a2:	0f be       	out	0x3f, r0	; 63
    26a4:	cd bf       	out	0x3d, r28	; 61
    26a6:	6b 83       	std	Y+3, r22	; 0x03
    26a8:	7c 83       	std	Y+4, r23	; 0x04
    26aa:	8d 83       	std	Y+5, r24	; 0x05
    26ac:	9e 83       	std	Y+6, r25	; 0x06
    26ae:	4f 83       	std	Y+7, r20	; 0x07
	unsigned int temp;

	UCSR0A = 0;
    26b0:	80 ec       	ldi	r24, 0xC0	; 192
    26b2:	90 e0       	ldi	r25, 0x00	; 0
    26b4:	fc 01       	movw	r30, r24
    26b6:	10 82       	st	Z, r1
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
    26b8:	81 ec       	ldi	r24, 0xC1	; 193
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	28 e1       	ldi	r18, 0x18	; 24
    26be:	fc 01       	movw	r30, r24
    26c0:	20 83       	st	Z, r18
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
    26c2:	82 ec       	ldi	r24, 0xC2	; 194
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	26 e0       	ldi	r18, 0x06	; 6
    26c8:	fc 01       	movw	r30, r24
    26ca:	20 83       	st	Z, r18

	if(isrOnOff == UART_ISR_ON)
    26cc:	8f 81       	ldd	r24, Y+7	; 0x07
    26ce:	81 30       	cpi	r24, 0x01	; 1
    26d0:	91 f4       	brne	.+36     	; 0x26f6 <UART0_Init+0x64>
	{
		UCSR0B |= ((1 << RXCIE0) | (1 << TXCIE0));
    26d2:	81 ec       	ldi	r24, 0xC1	; 193
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	21 ec       	ldi	r18, 0xC1	; 193
    26d8:	30 e0       	ldi	r19, 0x00	; 0
    26da:	f9 01       	movw	r30, r18
    26dc:	20 81       	ld	r18, Z
    26de:	20 6c       	ori	r18, 0xC0	; 192
    26e0:	fc 01       	movw	r30, r24
    26e2:	20 83       	st	Z, r18
		SREG |= 0x80;
    26e4:	8f e5       	ldi	r24, 0x5F	; 95
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	2f e5       	ldi	r18, 0x5F	; 95
    26ea:	30 e0       	ldi	r19, 0x00	; 0
    26ec:	f9 01       	movw	r30, r18
    26ee:	20 81       	ld	r18, Z
    26f0:	20 68       	ori	r18, 0x80	; 128
    26f2:	fc 01       	movw	r30, r24
    26f4:	20 83       	st	Z, r18
	}

	temp = 0.5 + ((double)F_CPU/(baud * 16.0f) - 1);
    26f6:	6b 81       	ldd	r22, Y+3	; 0x03
    26f8:	7c 81       	ldd	r23, Y+4	; 0x04
    26fa:	8d 81       	ldd	r24, Y+5	; 0x05
    26fc:	9e 81       	ldd	r25, Y+6	; 0x06
    26fe:	0e 94 07 19 	call	0x320e	; 0x320e <__floatunsisf>
    2702:	dc 01       	movw	r26, r24
    2704:	cb 01       	movw	r24, r22
    2706:	20 e0       	ldi	r18, 0x00	; 0
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	40 e8       	ldi	r20, 0x80	; 128
    270c:	51 e4       	ldi	r21, 0x41	; 65
    270e:	bc 01       	movw	r22, r24
    2710:	cd 01       	movw	r24, r26
    2712:	0e 94 be 19 	call	0x337c	; 0x337c <__mulsf3>
    2716:	dc 01       	movw	r26, r24
    2718:	cb 01       	movw	r24, r22
    271a:	9c 01       	movw	r18, r24
    271c:	ad 01       	movw	r20, r26
    271e:	60 e0       	ldi	r22, 0x00	; 0
    2720:	74 e2       	ldi	r23, 0x24	; 36
    2722:	84 e7       	ldi	r24, 0x74	; 116
    2724:	99 e4       	ldi	r25, 0x49	; 73
    2726:	0e 94 66 18 	call	0x30cc	; 0x30cc <__divsf3>
    272a:	dc 01       	movw	r26, r24
    272c:	cb 01       	movw	r24, r22
    272e:	20 e0       	ldi	r18, 0x00	; 0
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	40 e8       	ldi	r20, 0x80	; 128
    2734:	5f e3       	ldi	r21, 0x3F	; 63
    2736:	bc 01       	movw	r22, r24
    2738:	cd 01       	movw	r24, r26
    273a:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <__subsf3>
    273e:	dc 01       	movw	r26, r24
    2740:	cb 01       	movw	r24, r22
    2742:	20 e0       	ldi	r18, 0x00	; 0
    2744:	30 e0       	ldi	r19, 0x00	; 0
    2746:	40 e0       	ldi	r20, 0x00	; 0
    2748:	5f e3       	ldi	r21, 0x3F	; 63
    274a:	bc 01       	movw	r22, r24
    274c:	cd 01       	movw	r24, r26
    274e:	0e 94 f5 17 	call	0x2fea	; 0x2fea <__addsf3>
    2752:	dc 01       	movw	r26, r24
    2754:	cb 01       	movw	r24, r22
    2756:	bc 01       	movw	r22, r24
    2758:	cd 01       	movw	r24, r26
    275a:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <__fixunssfsi>
    275e:	dc 01       	movw	r26, r24
    2760:	cb 01       	movw	r24, r22
    2762:	9a 83       	std	Y+2, r25	; 0x02
    2764:	89 83       	std	Y+1, r24	; 0x01

	UBRR0H = temp >> 8;
    2766:	85 ec       	ldi	r24, 0xC5	; 197
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	29 81       	ldd	r18, Y+1	; 0x01
    276c:	3a 81       	ldd	r19, Y+2	; 0x02
    276e:	23 2f       	mov	r18, r19
    2770:	33 27       	eor	r19, r19
    2772:	fc 01       	movw	r30, r24
    2774:	20 83       	st	Z, r18
	UBRR0L = temp;
    2776:	84 ec       	ldi	r24, 0xC4	; 196
    2778:	90 e0       	ldi	r25, 0x00	; 0
    277a:	29 81       	ldd	r18, Y+1	; 0x01
    277c:	fc 01       	movw	r30, r24
    277e:	20 83       	st	Z, r18
}
    2780:	27 96       	adiw	r28, 0x07	; 7
    2782:	0f b6       	in	r0, 0x3f	; 63
    2784:	f8 94       	cli
    2786:	de bf       	out	0x3e, r29	; 62
    2788:	0f be       	out	0x3f, r0	; 63
    278a:	cd bf       	out	0x3d, r28	; 61
    278c:	df 91       	pop	r29
    278e:	cf 91       	pop	r28
    2790:	08 95       	ret

00002792 <__vector_23>:
/****************************************************************************************************************************************
Transmit interrupt USART0 modula
****************************************************************************************************************************************/

ISR(USART0_TX_vect)
{
    2792:	1f 92       	push	r1
    2794:	0f 92       	push	r0
    2796:	00 90 5f 00 	lds	r0, 0x005F
    279a:	0f 92       	push	r0
    279c:	11 24       	eor	r1, r1
    279e:	00 90 5b 00 	lds	r0, 0x005B
    27a2:	0f 92       	push	r0
    27a4:	2f 93       	push	r18
    27a6:	3f 93       	push	r19
    27a8:	8f 93       	push	r24
    27aa:	9f 93       	push	r25
    27ac:	ef 93       	push	r30
    27ae:	ff 93       	push	r31
    27b0:	cf 93       	push	r28
    27b2:	df 93       	push	r29
    27b4:	cd b7       	in	r28, 0x3d	; 61
    27b6:	de b7       	in	r29, 0x3e	; 62
	if(tx0_counter)
    27b8:	80 91 bf 01 	lds	r24, 0x01BF
    27bc:	88 23       	and	r24, r24
    27be:	d1 f0       	breq	.+52     	; 0x27f4 <__vector_23+0x62>
	{
		tx0_counter--;
    27c0:	80 91 bf 01 	lds	r24, 0x01BF
    27c4:	81 50       	subi	r24, 0x01	; 1
    27c6:	80 93 bf 01 	sts	0x01BF, r24
		UDR0 = tx0_buffer[tx0_rd_index];
    27ca:	86 ec       	ldi	r24, 0xC6	; 198
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	20 91 c0 01 	lds	r18, 0x01C0
    27d2:	22 2f       	mov	r18, r18
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	22 58       	subi	r18, 0x82	; 130
    27d8:	3e 4f       	sbci	r19, 0xFE	; 254
    27da:	f9 01       	movw	r30, r18
    27dc:	20 81       	ld	r18, Z
    27de:	fc 01       	movw	r30, r24
    27e0:	20 83       	st	Z, r18
		if(++tx0_rd_index == TX0_BUFFER_SIZE)
    27e2:	80 91 c0 01 	lds	r24, 0x01C0
    27e6:	8f 5f       	subi	r24, 0xFF	; 255
    27e8:	80 93 c0 01 	sts	0x01C0, r24
    27ec:	80 34       	cpi	r24, 0x40	; 64
    27ee:	11 f4       	brne	.+4      	; 0x27f4 <__vector_23+0x62>
			tx0_rd_index = 0;
    27f0:	10 92 c0 01 	sts	0x01C0, r1
	}
}
    27f4:	df 91       	pop	r29
    27f6:	cf 91       	pop	r28
    27f8:	ff 91       	pop	r31
    27fa:	ef 91       	pop	r30
    27fc:	9f 91       	pop	r25
    27fe:	8f 91       	pop	r24
    2800:	3f 91       	pop	r19
    2802:	2f 91       	pop	r18
    2804:	0f 90       	pop	r0
    2806:	00 92 5b 00 	sts	0x005B, r0
    280a:	0f 90       	pop	r0
    280c:	00 92 5f 00 	sts	0x005F, r0
    2810:	0f 90       	pop	r0
    2812:	1f 90       	pop	r1
    2814:	18 95       	reti

00002816 <UART0_Write>:
/****************************************************************************************************************************************
Slanje podataka USART0 modulom
****************************************************************************************************************************************/

void UART0_Write(unsigned char data)
{
    2816:	cf 93       	push	r28
    2818:	df 93       	push	r29
    281a:	1f 92       	push	r1
    281c:	cd b7       	in	r28, 0x3d	; 61
    281e:	de b7       	in	r29, 0x3e	; 62
    2820:	89 83       	std	Y+1, r24	; 0x01
	if( (UCSR0B >> TXCIE0) & 0x01)
    2822:	81 ec       	ldi	r24, 0xC1	; 193
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	fc 01       	movw	r30, r24
    2828:	80 81       	ld	r24, Z
    282a:	82 95       	swap	r24
    282c:	86 95       	lsr	r24
    282e:	86 95       	lsr	r24
    2830:	83 70       	andi	r24, 0x03	; 3
    2832:	88 2f       	mov	r24, r24
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	81 70       	andi	r24, 0x01	; 1
    2838:	99 27       	eor	r25, r25
    283a:	89 2b       	or	r24, r25
    283c:	99 f1       	breq	.+102    	; 0x28a4 <UART0_Write+0x8e>
	{
		while(tx0_counter == TX0_BUFFER_SIZE);
    283e:	00 00       	nop
    2840:	80 91 bf 01 	lds	r24, 0x01BF
    2844:	80 34       	cpi	r24, 0x40	; 64
    2846:	e1 f3       	breq	.-8      	; 0x2840 <UART0_Write+0x2a>

		cli();
    2848:	f8 94       	cli

		if(tx0_counter || (UCSR0A & 0x20) == 0)
    284a:	80 91 bf 01 	lds	r24, 0x01BF
    284e:	88 23       	and	r24, r24
    2850:	51 f4       	brne	.+20     	; 0x2866 <UART0_Write+0x50>
    2852:	80 ec       	ldi	r24, 0xC0	; 192
    2854:	90 e0       	ldi	r25, 0x00	; 0
    2856:	fc 01       	movw	r30, r24
    2858:	80 81       	ld	r24, Z
    285a:	88 2f       	mov	r24, r24
    285c:	90 e0       	ldi	r25, 0x00	; 0
    285e:	80 72       	andi	r24, 0x20	; 32
    2860:	99 27       	eor	r25, r25
    2862:	89 2b       	or	r24, r25
    2864:	c1 f4       	brne	.+48     	; 0x2896 <UART0_Write+0x80>
		{
			tx0_buffer[tx0_wr_index] = data;
    2866:	80 91 be 01 	lds	r24, 0x01BE
    286a:	88 2f       	mov	r24, r24
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	82 58       	subi	r24, 0x82	; 130
    2870:	9e 4f       	sbci	r25, 0xFE	; 254
    2872:	29 81       	ldd	r18, Y+1	; 0x01
    2874:	fc 01       	movw	r30, r24
    2876:	20 83       	st	Z, r18
			if(++tx0_wr_index == TX0_BUFFER_SIZE)
    2878:	80 91 be 01 	lds	r24, 0x01BE
    287c:	8f 5f       	subi	r24, 0xFF	; 255
    287e:	80 93 be 01 	sts	0x01BE, r24
    2882:	80 34       	cpi	r24, 0x40	; 64
    2884:	11 f4       	brne	.+4      	; 0x288a <UART0_Write+0x74>
				tx0_wr_index = 0;
    2886:	10 92 be 01 	sts	0x01BE, r1

			tx0_counter++;
    288a:	80 91 bf 01 	lds	r24, 0x01BF
    288e:	8f 5f       	subi	r24, 0xFF	; 255
    2890:	80 93 bf 01 	sts	0x01BF, r24
    2894:	05 c0       	rjmp	.+10     	; 0x28a0 <UART0_Write+0x8a>
		}
		else
			UDR0 = data;
    2896:	86 ec       	ldi	r24, 0xC6	; 198
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	29 81       	ldd	r18, Y+1	; 0x01
    289c:	fc 01       	movw	r30, r24
    289e:	20 83       	st	Z, r18

		sei();
    28a0:	78 94       	sei
    28a2:	03 c0       	rjmp	.+6      	; 0x28aa <UART0_Write+0x94>
	}
	else
		altUart0Write(data);
    28a4:	89 81       	ldd	r24, Y+1	; 0x01
    28a6:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <altUart0Write>
}
    28aa:	0f 90       	pop	r0
    28ac:	df 91       	pop	r29
    28ae:	cf 91       	pop	r28
    28b0:	08 95       	ret

000028b2 <__vector_21>:
/****************************************************************************************************************************************
Receive interrupt USART0 modula
****************************************************************************************************************************************/

ISR(USART0_RX_vect)
{
    28b2:	1f 92       	push	r1
    28b4:	0f 92       	push	r0
    28b6:	00 90 5f 00 	lds	r0, 0x005F
    28ba:	0f 92       	push	r0
    28bc:	11 24       	eor	r1, r1
    28be:	00 90 5b 00 	lds	r0, 0x005B
    28c2:	0f 92       	push	r0
    28c4:	2f 93       	push	r18
    28c6:	3f 93       	push	r19
    28c8:	8f 93       	push	r24
    28ca:	9f 93       	push	r25
    28cc:	ef 93       	push	r30
    28ce:	ff 93       	push	r31
    28d0:	cf 93       	push	r28
    28d2:	df 93       	push	r29
    28d4:	1f 92       	push	r1
    28d6:	cd b7       	in	r28, 0x3d	; 61
    28d8:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSR0A;
    28da:	80 ec       	ldi	r24, 0xC0	; 192
    28dc:	90 e0       	ldi	r25, 0x00	; 0
    28de:	fc 01       	movw	r30, r24
    28e0:	80 81       	ld	r24, Z
    28e2:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
    28e4:	89 81       	ldd	r24, Y+1	; 0x01
    28e6:	88 2f       	mov	r24, r24
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	8c 71       	andi	r24, 0x1C	; 28
    28ec:	99 27       	eor	r25, r25
    28ee:	89 2b       	or	r24, r25
    28f0:	d1 f4       	brne	.+52     	; 0x2926 <__vector_21+0x74>
	{
		rx0_buffer[rx0_wr_index] = UDR0;
    28f2:	80 91 01 02 	lds	r24, 0x0201
    28f6:	88 2f       	mov	r24, r24
    28f8:	90 e0       	ldi	r25, 0x00	; 0
    28fa:	26 ec       	ldi	r18, 0xC6	; 198
    28fc:	30 e0       	ldi	r19, 0x00	; 0
    28fe:	f9 01       	movw	r30, r18
    2900:	20 81       	ld	r18, Z
    2902:	8f 53       	subi	r24, 0x3F	; 63
    2904:	9e 4f       	sbci	r25, 0xFE	; 254
    2906:	fc 01       	movw	r30, r24
    2908:	20 83       	st	Z, r18
		if(++rx0_wr_index == RX0_BUFFER_SIZE)
    290a:	80 91 01 02 	lds	r24, 0x0201
    290e:	8f 5f       	subi	r24, 0xFF	; 255
    2910:	80 93 01 02 	sts	0x0201, r24
    2914:	80 34       	cpi	r24, 0x40	; 64
    2916:	11 f4       	brne	.+4      	; 0x291c <__vector_21+0x6a>
			rx0_wr_index = 0;
    2918:	10 92 01 02 	sts	0x0201, r1

		rx0_counter++;
    291c:	80 91 02 02 	lds	r24, 0x0202
    2920:	8f 5f       	subi	r24, 0xFF	; 255
    2922:	80 93 02 02 	sts	0x0202, r24
	}
}
    2926:	0f 90       	pop	r0
    2928:	df 91       	pop	r29
    292a:	cf 91       	pop	r28
    292c:	ff 91       	pop	r31
    292e:	ef 91       	pop	r30
    2930:	9f 91       	pop	r25
    2932:	8f 91       	pop	r24
    2934:	3f 91       	pop	r19
    2936:	2f 91       	pop	r18
    2938:	0f 90       	pop	r0
    293a:	00 92 5b 00 	sts	0x005B, r0
    293e:	0f 90       	pop	r0
    2940:	00 92 5f 00 	sts	0x005F, r0
    2944:	0f 90       	pop	r0
    2946:	1f 90       	pop	r1
    2948:	18 95       	reti

0000294a <UART0_Read>:
/****************************************************************************************************************************************
Primanje podataka USART0 modulom
****************************************************************************************************************************************/

unsigned char UART0_Read(void)
{
    294a:	cf 93       	push	r28
    294c:	df 93       	push	r29
    294e:	1f 92       	push	r1
    2950:	cd b7       	in	r28, 0x3d	; 61
    2952:	de b7       	in	r29, 0x3e	; 62
	unsigned char data;

	if((UCSR0B >> RXCIE0) & 0x01)
    2954:	81 ec       	ldi	r24, 0xC1	; 193
    2956:	90 e0       	ldi	r25, 0x00	; 0
    2958:	fc 01       	movw	r30, r24
    295a:	80 81       	ld	r24, Z
    295c:	88 1f       	adc	r24, r24
    295e:	88 27       	eor	r24, r24
    2960:	88 1f       	adc	r24, r24
    2962:	88 2f       	mov	r24, r24
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	81 70       	andi	r24, 0x01	; 1
    2968:	99 27       	eor	r25, r25
    296a:	89 2b       	or	r24, r25
    296c:	e9 f0       	breq	.+58     	; 0x29a8 <UART0_Read+0x5e>
	{
		while(rx0_counter == 0);
    296e:	00 00       	nop
    2970:	80 91 02 02 	lds	r24, 0x0202
    2974:	88 23       	and	r24, r24
    2976:	e1 f3       	breq	.-8      	; 0x2970 <UART0_Read+0x26>

		data = rx0_buffer[rx0_rd_index];
    2978:	80 91 03 02 	lds	r24, 0x0203
    297c:	88 2f       	mov	r24, r24
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	8f 53       	subi	r24, 0x3F	; 63
    2982:	9e 4f       	sbci	r25, 0xFE	; 254
    2984:	fc 01       	movw	r30, r24
    2986:	80 81       	ld	r24, Z
    2988:	89 83       	std	Y+1, r24	; 0x01

		if(++rx0_rd_index == RX0_BUFFER_SIZE)
    298a:	80 91 03 02 	lds	r24, 0x0203
    298e:	8f 5f       	subi	r24, 0xFF	; 255
    2990:	80 93 03 02 	sts	0x0203, r24
    2994:	80 34       	cpi	r24, 0x40	; 64
    2996:	11 f4       	brne	.+4      	; 0x299c <UART0_Read+0x52>
			rx0_rd_index = 0;
    2998:	10 92 03 02 	sts	0x0203, r1

		rx0_counter--;
    299c:	80 91 02 02 	lds	r24, 0x0202
    29a0:	81 50       	subi	r24, 0x01	; 1
    29a2:	80 93 02 02 	sts	0x0202, r24
    29a6:	13 c0       	rjmp	.+38     	; 0x29ce <UART0_Read+0x84>
	}
	else
	{
		while( !((UCSR0A >> RXC0) & 0x01));
    29a8:	00 00       	nop
    29aa:	80 ec       	ldi	r24, 0xC0	; 192
    29ac:	90 e0       	ldi	r25, 0x00	; 0
    29ae:	fc 01       	movw	r30, r24
    29b0:	80 81       	ld	r24, Z
    29b2:	88 1f       	adc	r24, r24
    29b4:	88 27       	eor	r24, r24
    29b6:	88 1f       	adc	r24, r24
    29b8:	88 2f       	mov	r24, r24
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	81 70       	andi	r24, 0x01	; 1
    29be:	99 27       	eor	r25, r25
    29c0:	89 2b       	or	r24, r25
    29c2:	99 f3       	breq	.-26     	; 0x29aa <UART0_Read+0x60>
		data = UDR0;
    29c4:	86 ec       	ldi	r24, 0xC6	; 198
    29c6:	90 e0       	ldi	r25, 0x00	; 0
    29c8:	fc 01       	movw	r30, r24
    29ca:	80 81       	ld	r24, Z
    29cc:	89 83       	std	Y+1, r24	; 0x01
	}

	return data;
    29ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    29d0:	0f 90       	pop	r0
    29d2:	df 91       	pop	r29
    29d4:	cf 91       	pop	r28
    29d6:	08 95       	ret

000029d8 <initUart1>:
-asinhroni
-1 stop bit
-bez paritet bita
****************************************************************************************************************************************/
void initUart1(unsigned long baud, char isrOnOff)
{
    29d8:	cf 93       	push	r28
    29da:	df 93       	push	r29
    29dc:	cd b7       	in	r28, 0x3d	; 61
    29de:	de b7       	in	r29, 0x3e	; 62
    29e0:	27 97       	sbiw	r28, 0x07	; 7
    29e2:	0f b6       	in	r0, 0x3f	; 63
    29e4:	f8 94       	cli
    29e6:	de bf       	out	0x3e, r29	; 62
    29e8:	0f be       	out	0x3f, r0	; 63
    29ea:	cd bf       	out	0x3d, r28	; 61
    29ec:	6b 83       	std	Y+3, r22	; 0x03
    29ee:	7c 83       	std	Y+4, r23	; 0x04
    29f0:	8d 83       	std	Y+5, r24	; 0x05
    29f2:	9e 83       	std	Y+6, r25	; 0x06
    29f4:	4f 83       	std	Y+7, r20	; 0x07
	unsigned int temp;

	UCSR1A = 0;
    29f6:	88 ec       	ldi	r24, 0xC8	; 200
    29f8:	90 e0       	ldi	r25, 0x00	; 0
    29fa:	fc 01       	movw	r30, r24
    29fc:	10 82       	st	Z, r1
	UCSR1B = (1 << RXEN1) | (1 << TXEN1);
    29fe:	89 ec       	ldi	r24, 0xC9	; 201
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	28 e1       	ldi	r18, 0x18	; 24
    2a04:	fc 01       	movw	r30, r24
    2a06:	20 83       	st	Z, r18
	UCSR1C = (1 << UCSZ11) | (1 << UCSZ10);
    2a08:	8a ec       	ldi	r24, 0xCA	; 202
    2a0a:	90 e0       	ldi	r25, 0x00	; 0
    2a0c:	26 e0       	ldi	r18, 0x06	; 6
    2a0e:	fc 01       	movw	r30, r24
    2a10:	20 83       	st	Z, r18

	if(isrOnOff == UART_ISR_ON)
    2a12:	8f 81       	ldd	r24, Y+7	; 0x07
    2a14:	81 30       	cpi	r24, 0x01	; 1
    2a16:	91 f4       	brne	.+36     	; 0x2a3c <initUart1+0x64>
	{
		UCSR1B |= ((1 << RXCIE1) | (1 << TXCIE1));
    2a18:	89 ec       	ldi	r24, 0xC9	; 201
    2a1a:	90 e0       	ldi	r25, 0x00	; 0
    2a1c:	29 ec       	ldi	r18, 0xC9	; 201
    2a1e:	30 e0       	ldi	r19, 0x00	; 0
    2a20:	f9 01       	movw	r30, r18
    2a22:	20 81       	ld	r18, Z
    2a24:	20 6c       	ori	r18, 0xC0	; 192
    2a26:	fc 01       	movw	r30, r24
    2a28:	20 83       	st	Z, r18
		SREG |= 0x80;
    2a2a:	8f e5       	ldi	r24, 0x5F	; 95
    2a2c:	90 e0       	ldi	r25, 0x00	; 0
    2a2e:	2f e5       	ldi	r18, 0x5F	; 95
    2a30:	30 e0       	ldi	r19, 0x00	; 0
    2a32:	f9 01       	movw	r30, r18
    2a34:	20 81       	ld	r18, Z
    2a36:	20 68       	ori	r18, 0x80	; 128
    2a38:	fc 01       	movw	r30, r24
    2a3a:	20 83       	st	Z, r18
	}

	temp = 0.5 + ((double)F_CPU/(baud * 16.0f) - 1);
    2a3c:	6b 81       	ldd	r22, Y+3	; 0x03
    2a3e:	7c 81       	ldd	r23, Y+4	; 0x04
    2a40:	8d 81       	ldd	r24, Y+5	; 0x05
    2a42:	9e 81       	ldd	r25, Y+6	; 0x06
    2a44:	0e 94 07 19 	call	0x320e	; 0x320e <__floatunsisf>
    2a48:	dc 01       	movw	r26, r24
    2a4a:	cb 01       	movw	r24, r22
    2a4c:	20 e0       	ldi	r18, 0x00	; 0
    2a4e:	30 e0       	ldi	r19, 0x00	; 0
    2a50:	40 e8       	ldi	r20, 0x80	; 128
    2a52:	51 e4       	ldi	r21, 0x41	; 65
    2a54:	bc 01       	movw	r22, r24
    2a56:	cd 01       	movw	r24, r26
    2a58:	0e 94 be 19 	call	0x337c	; 0x337c <__mulsf3>
    2a5c:	dc 01       	movw	r26, r24
    2a5e:	cb 01       	movw	r24, r22
    2a60:	9c 01       	movw	r18, r24
    2a62:	ad 01       	movw	r20, r26
    2a64:	60 e0       	ldi	r22, 0x00	; 0
    2a66:	74 e2       	ldi	r23, 0x24	; 36
    2a68:	84 e7       	ldi	r24, 0x74	; 116
    2a6a:	99 e4       	ldi	r25, 0x49	; 73
    2a6c:	0e 94 66 18 	call	0x30cc	; 0x30cc <__divsf3>
    2a70:	dc 01       	movw	r26, r24
    2a72:	cb 01       	movw	r24, r22
    2a74:	20 e0       	ldi	r18, 0x00	; 0
    2a76:	30 e0       	ldi	r19, 0x00	; 0
    2a78:	40 e8       	ldi	r20, 0x80	; 128
    2a7a:	5f e3       	ldi	r21, 0x3F	; 63
    2a7c:	bc 01       	movw	r22, r24
    2a7e:	cd 01       	movw	r24, r26
    2a80:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <__subsf3>
    2a84:	dc 01       	movw	r26, r24
    2a86:	cb 01       	movw	r24, r22
    2a88:	20 e0       	ldi	r18, 0x00	; 0
    2a8a:	30 e0       	ldi	r19, 0x00	; 0
    2a8c:	40 e0       	ldi	r20, 0x00	; 0
    2a8e:	5f e3       	ldi	r21, 0x3F	; 63
    2a90:	bc 01       	movw	r22, r24
    2a92:	cd 01       	movw	r24, r26
    2a94:	0e 94 f5 17 	call	0x2fea	; 0x2fea <__addsf3>
    2a98:	dc 01       	movw	r26, r24
    2a9a:	cb 01       	movw	r24, r22
    2a9c:	bc 01       	movw	r22, r24
    2a9e:	cd 01       	movw	r24, r26
    2aa0:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <__fixunssfsi>
    2aa4:	dc 01       	movw	r26, r24
    2aa6:	cb 01       	movw	r24, r22
    2aa8:	9a 83       	std	Y+2, r25	; 0x02
    2aaa:	89 83       	std	Y+1, r24	; 0x01

	UBRR1H = temp >> 8;
    2aac:	8d ec       	ldi	r24, 0xCD	; 205
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	29 81       	ldd	r18, Y+1	; 0x01
    2ab2:	3a 81       	ldd	r19, Y+2	; 0x02
    2ab4:	23 2f       	mov	r18, r19
    2ab6:	33 27       	eor	r19, r19
    2ab8:	fc 01       	movw	r30, r24
    2aba:	20 83       	st	Z, r18
	UBRR1L = temp;
    2abc:	8c ec       	ldi	r24, 0xCC	; 204
    2abe:	90 e0       	ldi	r25, 0x00	; 0
    2ac0:	29 81       	ldd	r18, Y+1	; 0x01
    2ac2:	fc 01       	movw	r30, r24
    2ac4:	20 83       	st	Z, r18
}
    2ac6:	27 96       	adiw	r28, 0x07	; 7
    2ac8:	0f b6       	in	r0, 0x3f	; 63
    2aca:	f8 94       	cli
    2acc:	de bf       	out	0x3e, r29	; 62
    2ace:	0f be       	out	0x3f, r0	; 63
    2ad0:	cd bf       	out	0x3d, r28	; 61
    2ad2:	df 91       	pop	r29
    2ad4:	cf 91       	pop	r28
    2ad6:	08 95       	ret

00002ad8 <__vector_34>:
/****************************************************************************************************************************************
Transmit interrupt USART1 modula
****************************************************************************************************************************************/
//#error "Linker error- idiotic programming"
ISR(USART1_TX_vect)
{
    2ad8:	1f 92       	push	r1
    2ada:	0f 92       	push	r0
    2adc:	00 90 5f 00 	lds	r0, 0x005F
    2ae0:	0f 92       	push	r0
    2ae2:	11 24       	eor	r1, r1
    2ae4:	00 90 5b 00 	lds	r0, 0x005B
    2ae8:	0f 92       	push	r0
    2aea:	2f 93       	push	r18
    2aec:	3f 93       	push	r19
    2aee:	8f 93       	push	r24
    2af0:	9f 93       	push	r25
    2af2:	ef 93       	push	r30
    2af4:	ff 93       	push	r31
    2af6:	cf 93       	push	r28
    2af8:	df 93       	push	r29
    2afa:	cd b7       	in	r28, 0x3d	; 61
    2afc:	de b7       	in	r29, 0x3e	; 62
	if(tx1_counter)
    2afe:	80 91 45 02 	lds	r24, 0x0245
    2b02:	88 23       	and	r24, r24
    2b04:	d1 f0       	breq	.+52     	; 0x2b3a <__vector_34+0x62>
	{
		tx1_counter--;
    2b06:	80 91 45 02 	lds	r24, 0x0245
    2b0a:	81 50       	subi	r24, 0x01	; 1
    2b0c:	80 93 45 02 	sts	0x0245, r24
		UDR1=tx1_buffer[tx1_rd_index];
    2b10:	8e ec       	ldi	r24, 0xCE	; 206
    2b12:	90 e0       	ldi	r25, 0x00	; 0
    2b14:	20 91 46 02 	lds	r18, 0x0246
    2b18:	22 2f       	mov	r18, r18
    2b1a:	30 e0       	ldi	r19, 0x00	; 0
    2b1c:	2c 5f       	subi	r18, 0xFC	; 252
    2b1e:	3d 4f       	sbci	r19, 0xFD	; 253
    2b20:	f9 01       	movw	r30, r18
    2b22:	20 81       	ld	r18, Z
    2b24:	fc 01       	movw	r30, r24
    2b26:	20 83       	st	Z, r18
		if(++tx1_rd_index == TX1_BUFFER_SIZE)
    2b28:	80 91 46 02 	lds	r24, 0x0246
    2b2c:	8f 5f       	subi	r24, 0xFF	; 255
    2b2e:	80 93 46 02 	sts	0x0246, r24
    2b32:	80 34       	cpi	r24, 0x40	; 64
    2b34:	11 f4       	brne	.+4      	; 0x2b3a <__vector_34+0x62>
			tx1_rd_index = 0;
    2b36:	10 92 46 02 	sts	0x0246, r1
	}
}
    2b3a:	df 91       	pop	r29
    2b3c:	cf 91       	pop	r28
    2b3e:	ff 91       	pop	r31
    2b40:	ef 91       	pop	r30
    2b42:	9f 91       	pop	r25
    2b44:	8f 91       	pop	r24
    2b46:	3f 91       	pop	r19
    2b48:	2f 91       	pop	r18
    2b4a:	0f 90       	pop	r0
    2b4c:	00 92 5b 00 	sts	0x005B, r0
    2b50:	0f 90       	pop	r0
    2b52:	00 92 5f 00 	sts	0x005F, r0
    2b56:	0f 90       	pop	r0
    2b58:	1f 90       	pop	r1
    2b5a:	18 95       	reti

00002b5c <__vector_32>:

ISR(USART1_RX_vect)
{
    2b5c:	1f 92       	push	r1
    2b5e:	0f 92       	push	r0
    2b60:	00 90 5f 00 	lds	r0, 0x005F
    2b64:	0f 92       	push	r0
    2b66:	11 24       	eor	r1, r1
    2b68:	00 90 5b 00 	lds	r0, 0x005B
    2b6c:	0f 92       	push	r0
    2b6e:	2f 93       	push	r18
    2b70:	3f 93       	push	r19
    2b72:	8f 93       	push	r24
    2b74:	9f 93       	push	r25
    2b76:	ef 93       	push	r30
    2b78:	ff 93       	push	r31
    2b7a:	cf 93       	push	r28
    2b7c:	df 93       	push	r29
    2b7e:	1f 92       	push	r1
    2b80:	cd b7       	in	r28, 0x3d	; 61
    2b82:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSR1A;
    2b84:	88 ec       	ldi	r24, 0xC8	; 200
    2b86:	90 e0       	ldi	r25, 0x00	; 0
    2b88:	fc 01       	movw	r30, r24
    2b8a:	80 81       	ld	r24, Z
    2b8c:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
    2b8e:	89 81       	ldd	r24, Y+1	; 0x01
    2b90:	88 2f       	mov	r24, r24
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	8c 71       	andi	r24, 0x1C	; 28
    2b96:	99 27       	eor	r25, r25
    2b98:	89 2b       	or	r24, r25
    2b9a:	d1 f4       	brne	.+52     	; 0x2bd0 <__vector_32+0x74>
	{
		rx1_buffer[rx1_wr_index] = UDR1;
    2b9c:	80 91 87 02 	lds	r24, 0x0287
    2ba0:	88 2f       	mov	r24, r24
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	2e ec       	ldi	r18, 0xCE	; 206
    2ba6:	30 e0       	ldi	r19, 0x00	; 0
    2ba8:	f9 01       	movw	r30, r18
    2baa:	20 81       	ld	r18, Z
    2bac:	89 5b       	subi	r24, 0xB9	; 185
    2bae:	9d 4f       	sbci	r25, 0xFD	; 253
    2bb0:	fc 01       	movw	r30, r24
    2bb2:	20 83       	st	Z, r18
		if(++rx1_wr_index == RX1_BUFFER_SIZE)
    2bb4:	80 91 87 02 	lds	r24, 0x0287
    2bb8:	8f 5f       	subi	r24, 0xFF	; 255
    2bba:	80 93 87 02 	sts	0x0287, r24
    2bbe:	80 34       	cpi	r24, 0x40	; 64
    2bc0:	11 f4       	brne	.+4      	; 0x2bc6 <__vector_32+0x6a>
		rx1_wr_index = 0;
    2bc2:	10 92 87 02 	sts	0x0287, r1

		rx1_counter++;
    2bc6:	80 91 88 02 	lds	r24, 0x0288
    2bca:	8f 5f       	subi	r24, 0xFF	; 255
    2bcc:	80 93 88 02 	sts	0x0288, r24
	}
}
    2bd0:	0f 90       	pop	r0
    2bd2:	df 91       	pop	r29
    2bd4:	cf 91       	pop	r28
    2bd6:	ff 91       	pop	r31
    2bd8:	ef 91       	pop	r30
    2bda:	9f 91       	pop	r25
    2bdc:	8f 91       	pop	r24
    2bde:	3f 91       	pop	r19
    2be0:	2f 91       	pop	r18
    2be2:	0f 90       	pop	r0
    2be4:	00 92 5b 00 	sts	0x005B, r0
    2be8:	0f 90       	pop	r0
    2bea:	00 92 5f 00 	sts	0x005F, r0
    2bee:	0f 90       	pop	r0
    2bf0:	1f 90       	pop	r1
    2bf2:	18 95       	reti

00002bf4 <altUart0Write>:

void altUart0Write(unsigned char data)
{
    2bf4:	cf 93       	push	r28
    2bf6:	df 93       	push	r29
    2bf8:	1f 92       	push	r1
    2bfa:	cd b7       	in	r28, 0x3d	; 61
    2bfc:	de b7       	in	r29, 0x3e	; 62
    2bfe:	89 83       	std	Y+1, r24	; 0x01
	while( !(UCSR0A & (1 << UDRE0)));
    2c00:	00 00       	nop
    2c02:	80 ec       	ldi	r24, 0xC0	; 192
    2c04:	90 e0       	ldi	r25, 0x00	; 0
    2c06:	fc 01       	movw	r30, r24
    2c08:	80 81       	ld	r24, Z
    2c0a:	88 2f       	mov	r24, r24
    2c0c:	90 e0       	ldi	r25, 0x00	; 0
    2c0e:	80 72       	andi	r24, 0x20	; 32
    2c10:	99 27       	eor	r25, r25
    2c12:	89 2b       	or	r24, r25
    2c14:	b1 f3       	breq	.-20     	; 0x2c02 <altUart0Write+0xe>

	UDR0 = data;
    2c16:	86 ec       	ldi	r24, 0xC6	; 198
    2c18:	90 e0       	ldi	r25, 0x00	; 0
    2c1a:	29 81       	ldd	r18, Y+1	; 0x01
    2c1c:	fc 01       	movw	r30, r24
    2c1e:	20 83       	st	Z, r18
}
    2c20:	0f 90       	pop	r0
    2c22:	df 91       	pop	r29
    2c24:	cf 91       	pop	r28
    2c26:	08 95       	ret

00002c28 <altUart1Write>:

void altUart1Write(unsigned char data)
{
    2c28:	cf 93       	push	r28
    2c2a:	df 93       	push	r29
    2c2c:	1f 92       	push	r1
    2c2e:	cd b7       	in	r28, 0x3d	; 61
    2c30:	de b7       	in	r29, 0x3e	; 62
    2c32:	89 83       	std	Y+1, r24	; 0x01
	while ( !( UCSR1A & (1 << UDRE1)) );
    2c34:	00 00       	nop
    2c36:	88 ec       	ldi	r24, 0xC8	; 200
    2c38:	90 e0       	ldi	r25, 0x00	; 0
    2c3a:	fc 01       	movw	r30, r24
    2c3c:	80 81       	ld	r24, Z
    2c3e:	88 2f       	mov	r24, r24
    2c40:	90 e0       	ldi	r25, 0x00	; 0
    2c42:	80 72       	andi	r24, 0x20	; 32
    2c44:	99 27       	eor	r25, r25
    2c46:	89 2b       	or	r24, r25
    2c48:	b1 f3       	breq	.-20     	; 0x2c36 <altUart1Write+0xe>
	UDR1 = data;
    2c4a:	8e ec       	ldi	r24, 0xCE	; 206
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	29 81       	ldd	r18, Y+1	; 0x01
    2c50:	fc 01       	movw	r30, r24
    2c52:	20 83       	st	Z, r18
}
    2c54:	0f 90       	pop	r0
    2c56:	df 91       	pop	r29
    2c58:	cf 91       	pop	r28
    2c5a:	08 95       	ret

00002c5c <UART1_Write>:
**

**************************************************************************************************************************************/

void UART1_Write(unsigned char data)
{
    2c5c:	cf 93       	push	r28
    2c5e:	df 93       	push	r29
    2c60:	1f 92       	push	r1
    2c62:	cd b7       	in	r28, 0x3d	; 61
    2c64:	de b7       	in	r29, 0x3e	; 62
    2c66:	89 83       	std	Y+1, r24	; 0x01
	if( (UCSR1B >> TXCIE1) & 0x01)
    2c68:	89 ec       	ldi	r24, 0xC9	; 201
    2c6a:	90 e0       	ldi	r25, 0x00	; 0
    2c6c:	fc 01       	movw	r30, r24
    2c6e:	80 81       	ld	r24, Z
    2c70:	82 95       	swap	r24
    2c72:	86 95       	lsr	r24
    2c74:	86 95       	lsr	r24
    2c76:	83 70       	andi	r24, 0x03	; 3
    2c78:	88 2f       	mov	r24, r24
    2c7a:	90 e0       	ldi	r25, 0x00	; 0
    2c7c:	81 70       	andi	r24, 0x01	; 1
    2c7e:	99 27       	eor	r25, r25
    2c80:	89 2b       	or	r24, r25
    2c82:	99 f1       	breq	.+102    	; 0x2cea <UART1_Write+0x8e>
	{
		while(tx1_counter == TX1_BUFFER_SIZE);
    2c84:	00 00       	nop
    2c86:	80 91 45 02 	lds	r24, 0x0245
    2c8a:	80 34       	cpi	r24, 0x40	; 64
    2c8c:	e1 f3       	breq	.-8      	; 0x2c86 <UART1_Write+0x2a>

		cli();
    2c8e:	f8 94       	cli

		if(tx1_counter || (UCSR1A & 0x20) == 0)
    2c90:	80 91 45 02 	lds	r24, 0x0245
    2c94:	88 23       	and	r24, r24
    2c96:	51 f4       	brne	.+20     	; 0x2cac <UART1_Write+0x50>
    2c98:	88 ec       	ldi	r24, 0xC8	; 200
    2c9a:	90 e0       	ldi	r25, 0x00	; 0
    2c9c:	fc 01       	movw	r30, r24
    2c9e:	80 81       	ld	r24, Z
    2ca0:	88 2f       	mov	r24, r24
    2ca2:	90 e0       	ldi	r25, 0x00	; 0
    2ca4:	80 72       	andi	r24, 0x20	; 32
    2ca6:	99 27       	eor	r25, r25
    2ca8:	89 2b       	or	r24, r25
    2caa:	c1 f4       	brne	.+48     	; 0x2cdc <UART1_Write+0x80>
		{
			tx1_buffer[tx1_wr_index] = data;
    2cac:	80 91 44 02 	lds	r24, 0x0244
    2cb0:	88 2f       	mov	r24, r24
    2cb2:	90 e0       	ldi	r25, 0x00	; 0
    2cb4:	8c 5f       	subi	r24, 0xFC	; 252
    2cb6:	9d 4f       	sbci	r25, 0xFD	; 253
    2cb8:	29 81       	ldd	r18, Y+1	; 0x01
    2cba:	fc 01       	movw	r30, r24
    2cbc:	20 83       	st	Z, r18

			if(++tx1_wr_index == TX1_BUFFER_SIZE)
    2cbe:	80 91 44 02 	lds	r24, 0x0244
    2cc2:	8f 5f       	subi	r24, 0xFF	; 255
    2cc4:	80 93 44 02 	sts	0x0244, r24
    2cc8:	80 34       	cpi	r24, 0x40	; 64
    2cca:	11 f4       	brne	.+4      	; 0x2cd0 <UART1_Write+0x74>
				tx1_wr_index = 0;
    2ccc:	10 92 44 02 	sts	0x0244, r1

			tx1_counter++;
    2cd0:	80 91 45 02 	lds	r24, 0x0245
    2cd4:	8f 5f       	subi	r24, 0xFF	; 255
    2cd6:	80 93 45 02 	sts	0x0245, r24
    2cda:	05 c0       	rjmp	.+10     	; 0x2ce6 <UART1_Write+0x8a>
		}
		else
			UDR1 = data;
    2cdc:	8e ec       	ldi	r24, 0xCE	; 206
    2cde:	90 e0       	ldi	r25, 0x00	; 0
    2ce0:	29 81       	ldd	r18, Y+1	; 0x01
    2ce2:	fc 01       	movw	r30, r24
    2ce4:	20 83       	st	Z, r18

		sei();
    2ce6:	78 94       	sei
    2ce8:	03 c0       	rjmp	.+6      	; 0x2cf0 <UART1_Write+0x94>
	}
	else
		altUart1Write(data);
    2cea:	89 81       	ldd	r24, Y+1	; 0x01
    2cec:	0e 94 14 16 	call	0x2c28	; 0x2c28 <altUart1Write>
}
    2cf0:	0f 90       	pop	r0
    2cf2:	df 91       	pop	r29
    2cf4:	cf 91       	pop	r28
    2cf6:	08 95       	ret

00002cf8 <UART1_Read>:

unsigned char UART1_Read(void)
{
    2cf8:	cf 93       	push	r28
    2cfa:	df 93       	push	r29
    2cfc:	1f 92       	push	r1
    2cfe:	cd b7       	in	r28, 0x3d	; 61
    2d00:	de b7       	in	r29, 0x3e	; 62
	unsigned char data;

	if((UCSR1B >> RXCIE1) & 0x01)
    2d02:	89 ec       	ldi	r24, 0xC9	; 201
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	fc 01       	movw	r30, r24
    2d08:	80 81       	ld	r24, Z
    2d0a:	88 1f       	adc	r24, r24
    2d0c:	88 27       	eor	r24, r24
    2d0e:	88 1f       	adc	r24, r24
    2d10:	88 2f       	mov	r24, r24
    2d12:	90 e0       	ldi	r25, 0x00	; 0
    2d14:	81 70       	andi	r24, 0x01	; 1
    2d16:	99 27       	eor	r25, r25
    2d18:	89 2b       	or	r24, r25
    2d1a:	e9 f0       	breq	.+58     	; 0x2d56 <UART1_Read+0x5e>
	{
		while(rx1_counter == 0);
    2d1c:	00 00       	nop
    2d1e:	80 91 88 02 	lds	r24, 0x0288
    2d22:	88 23       	and	r24, r24
    2d24:	e1 f3       	breq	.-8      	; 0x2d1e <UART1_Read+0x26>

		data = rx1_buffer[rx1_rd_index];
    2d26:	80 91 89 02 	lds	r24, 0x0289
    2d2a:	88 2f       	mov	r24, r24
    2d2c:	90 e0       	ldi	r25, 0x00	; 0
    2d2e:	89 5b       	subi	r24, 0xB9	; 185
    2d30:	9d 4f       	sbci	r25, 0xFD	; 253
    2d32:	fc 01       	movw	r30, r24
    2d34:	80 81       	ld	r24, Z
    2d36:	89 83       	std	Y+1, r24	; 0x01

		if(++rx1_rd_index == RX1_BUFFER_SIZE)
    2d38:	80 91 89 02 	lds	r24, 0x0289
    2d3c:	8f 5f       	subi	r24, 0xFF	; 255
    2d3e:	80 93 89 02 	sts	0x0289, r24
    2d42:	80 34       	cpi	r24, 0x40	; 64
    2d44:	11 f4       	brne	.+4      	; 0x2d4a <UART1_Read+0x52>
			rx1_rd_index = 0;
    2d46:	10 92 89 02 	sts	0x0289, r1

		rx1_counter--;
    2d4a:	80 91 88 02 	lds	r24, 0x0288
    2d4e:	81 50       	subi	r24, 0x01	; 1
    2d50:	80 93 88 02 	sts	0x0288, r24
    2d54:	13 c0       	rjmp	.+38     	; 0x2d7c <UART1_Read+0x84>
	}
	else
	{
		while( !((UCSR1A >> RXC1) & 0x01));
    2d56:	00 00       	nop
    2d58:	88 ec       	ldi	r24, 0xC8	; 200
    2d5a:	90 e0       	ldi	r25, 0x00	; 0
    2d5c:	fc 01       	movw	r30, r24
    2d5e:	80 81       	ld	r24, Z
    2d60:	88 1f       	adc	r24, r24
    2d62:	88 27       	eor	r24, r24
    2d64:	88 1f       	adc	r24, r24
    2d66:	88 2f       	mov	r24, r24
    2d68:	90 e0       	ldi	r25, 0x00	; 0
    2d6a:	81 70       	andi	r24, 0x01	; 1
    2d6c:	99 27       	eor	r25, r25
    2d6e:	89 2b       	or	r24, r25
    2d70:	99 f3       	breq	.-26     	; 0x2d58 <UART1_Read+0x60>
		data = UDR1;
    2d72:	8e ec       	ldi	r24, 0xCE	; 206
    2d74:	90 e0       	ldi	r25, 0x00	; 0
    2d76:	fc 01       	movw	r30, r24
    2d78:	80 81       	ld	r24, Z
    2d7a:	89 83       	std	Y+1, r24	; 0x01
	}

	return data;
    2d7c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d7e:	0f 90       	pop	r0
    2d80:	df 91       	pop	r29
    2d82:	cf 91       	pop	r28
    2d84:	08 95       	ret

00002d86 <yellowside>:
	{{100,0},LOW_SPEED,FORWARD,NULL}
};


void yellowside(void)
{
    2d86:	cf 93       	push	r28
    2d88:	df 93       	push	r29
    2d8a:	cd b7       	in	r28, 0x3d	; 61
    2d8c:	de b7       	in	r29, 0x3e	; 62
    2d8e:	2b 97       	sbiw	r28, 0x0b	; 11
    2d90:	0f b6       	in	r0, 0x3f	; 63
    2d92:	f8 94       	cli
    2d94:	de bf       	out	0x3e, r29	; 62
    2d96:	0f be       	out	0x3f, r0	; 63
    2d98:	cd bf       	out	0x3d, r28	; 61
	struct odometry_position starting_position;
	uint8_t current_position = 0;
    2d9a:	19 82       	std	Y+1, r1	; 0x01
	uint8_t next_position = 0;
    2d9c:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t odometry_status;
	int8_t active_state = ROBOT_STATE_TACTIC_SIDE;
    2d9e:	81 e0       	ldi	r24, 0x01	; 1
    2da0:	8b 83       	std	Y+3, r24	; 0x03

	starting_position.x		= 0;
    2da2:	1e 82       	std	Y+6, r1	; 0x06
    2da4:	1d 82       	std	Y+5, r1	; 0x05
	starting_position.y		= 0;
    2da6:	18 86       	std	Y+8, r1	; 0x08
    2da8:	1f 82       	std	Y+7, r1	; 0x07
	starting_position.angle = 0;
    2daa:	1a 86       	std	Y+10, r1	; 0x0a
    2dac:	19 86       	std	Y+9, r1	; 0x09

	odometry_set_position(&starting_position);
    2dae:	ce 01       	movw	r24, r28
    2db0:	05 96       	adiw	r24, 0x05	; 5
    2db2:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <odometry_set_position>

	while(1)
	{
		switch(active_state)
    2db6:	8b 81       	ldd	r24, Y+3	; 0x03
    2db8:	08 2e       	mov	r0, r24
    2dba:	00 0c       	add	r0, r0
    2dbc:	99 0b       	sbc	r25, r25
    2dbe:	81 30       	cpi	r24, 0x01	; 1
    2dc0:	91 05       	cpc	r25, r1
    2dc2:	21 f0       	breq	.+8      	; 0x2dcc <yellowside+0x46>
    2dc4:	02 97       	sbiw	r24, 0x02	; 2
    2dc6:	09 f4       	brne	.+2      	; 0x2dca <yellowside+0x44>
    2dc8:	43 c0       	rjmp	.+134    	; 0x2e50 <yellowside+0xca>
    2dca:	84 c0       	rjmp	.+264    	; 0x2ed4 <yellowside+0x14e>
		{
			case ROBOT_STATE_TACTIC_SIDE:
				for(current_position = next_position;current_position < TACTIC_SIDE_POSITION_COUNT; current_position++)
    2dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    2dce:	89 83       	std	Y+1, r24	; 0x01
    2dd0:	3c c0       	rjmp	.+120    	; 0x2e4a <yellowside+0xc4>
				{
					odometry_status = odometry_move_to_position(&(yellow_tactic_side_positions[current_position].point), yellow_tactic_side_positions[current_position].speed,
    2dd2:	40 e0       	ldi	r20, 0x00	; 0
    2dd4:	50 e0       	ldi	r21, 0x00	; 0
					yellow_tactic_side_positions[current_position].direction,yellow_tactic_side_positions[current_position].callback);
    2dd6:	89 81       	ldd	r24, Y+1	; 0x01
    2dd8:	28 2f       	mov	r18, r24
    2dda:	30 e0       	ldi	r19, 0x00	; 0
    2ddc:	6b e0       	ldi	r22, 0x0B	; 11
    2dde:	62 9f       	mul	r22, r18
    2de0:	c0 01       	movw	r24, r0
    2de2:	63 9f       	mul	r22, r19
    2de4:	90 0d       	add	r25, r0
    2de6:	11 24       	eor	r1, r1
    2de8:	81 5d       	subi	r24, 0xD1	; 209
    2dea:	9e 4f       	sbci	r25, 0xFE	; 254
    2dec:	dc 01       	movw	r26, r24
    2dee:	8c 91       	ld	r24, X
		switch(active_state)
		{
			case ROBOT_STATE_TACTIC_SIDE:
				for(current_position = next_position;current_position < TACTIC_SIDE_POSITION_COUNT; current_position++)
				{
					odometry_status = odometry_move_to_position(&(yellow_tactic_side_positions[current_position].point), yellow_tactic_side_positions[current_position].speed,
    2df0:	e8 2f       	mov	r30, r24
    2df2:	89 81       	ldd	r24, Y+1	; 0x01
    2df4:	28 2f       	mov	r18, r24
    2df6:	30 e0       	ldi	r19, 0x00	; 0
    2df8:	6b e0       	ldi	r22, 0x0B	; 11
    2dfa:	62 9f       	mul	r22, r18
    2dfc:	c0 01       	movw	r24, r0
    2dfe:	63 9f       	mul	r22, r19
    2e00:	90 0d       	add	r25, r0
    2e02:	11 24       	eor	r1, r1
    2e04:	82 5d       	subi	r24, 0xD2	; 210
    2e06:	9e 4f       	sbci	r25, 0xFE	; 254
    2e08:	dc 01       	movw	r26, r24
    2e0a:	7c 91       	ld	r23, X
    2e0c:	89 81       	ldd	r24, Y+1	; 0x01
    2e0e:	28 2f       	mov	r18, r24
    2e10:	30 e0       	ldi	r19, 0x00	; 0
    2e12:	6b e0       	ldi	r22, 0x0B	; 11
    2e14:	62 9f       	mul	r22, r18
    2e16:	c0 01       	movw	r24, r0
    2e18:	63 9f       	mul	r22, r19
    2e1a:	90 0d       	add	r25, r0
    2e1c:	11 24       	eor	r1, r1
    2e1e:	89 5d       	subi	r24, 0xD9	; 217
    2e20:	9e 4f       	sbci	r25, 0xFE	; 254
    2e22:	9a 01       	movw	r18, r20
    2e24:	4e 2f       	mov	r20, r30
    2e26:	67 2f       	mov	r22, r23
    2e28:	0e 94 75 0d 	call	0x1aea	; 0x1aea <odometry_move_to_position>
    2e2c:	8c 83       	std	Y+4, r24	; 0x04
					yellow_tactic_side_positions[current_position].direction,yellow_tactic_side_positions[current_position].callback);

					if(odometry_status == ODOMETRY_FAIL)
    2e2e:	8c 81       	ldd	r24, Y+4	; 0x04
    2e30:	81 30       	cpi	r24, 0x01	; 1
    2e32:	09 f4       	brne	.+2      	; 0x2e36 <yellowside+0xb0>
					{
						break;
    2e34:	0d c0       	rjmp	.+26     	; 0x2e50 <yellowside+0xca>
					}
					if(current_position == 1){
    2e36:	89 81       	ldd	r24, Y+1	; 0x01
    2e38:	81 30       	cpi	r24, 0x01	; 1
    2e3a:	21 f4       	brne	.+8      	; 0x2e44 <yellowside+0xbe>
						odometry_stop(HARD_STOP);
    2e3c:	83 e5       	ldi	r24, 0x53	; 83
    2e3e:	0e 94 2d 0c 	call	0x185a	; 0x185a <odometry_stop>
						while(1);
    2e42:	ff cf       	rjmp	.-2      	; 0x2e42 <yellowside+0xbc>
	while(1)
	{
		switch(active_state)
		{
			case ROBOT_STATE_TACTIC_SIDE:
				for(current_position = next_position;current_position < TACTIC_SIDE_POSITION_COUNT; current_position++)
    2e44:	89 81       	ldd	r24, Y+1	; 0x01
    2e46:	8f 5f       	subi	r24, 0xFF	; 255
    2e48:	89 83       	std	Y+1, r24	; 0x01
    2e4a:	89 81       	ldd	r24, Y+1	; 0x01
    2e4c:	88 23       	and	r24, r24
    2e4e:	09 f2       	breq	.-126    	; 0x2dd2 <yellowside+0x4c>
						while(1);
					}
				}//end for
				/* no break */
			case ROBOT_STATE_TACTIC_CENTER:
				for(current_position = next_position;current_position < TACTIC_CENTER_POSITION_COUNT; current_position++)
    2e50:	8a 81       	ldd	r24, Y+2	; 0x02
    2e52:	89 83       	std	Y+1, r24	; 0x01
    2e54:	3c c0       	rjmp	.+120    	; 0x2ece <yellowside+0x148>
				{
					odometry_status = odometry_move_to_position(&(yellow_tactic_center_positions[current_position].point), yellow_tactic_center_positions[current_position].speed,
    2e56:	40 e0       	ldi	r20, 0x00	; 0
    2e58:	50 e0       	ldi	r21, 0x00	; 0
					yellow_tactic_center_positions[current_position].direction,yellow_tactic_center_positions[current_position].callback);
    2e5a:	89 81       	ldd	r24, Y+1	; 0x01
    2e5c:	28 2f       	mov	r18, r24
    2e5e:	30 e0       	ldi	r19, 0x00	; 0
    2e60:	6b e0       	ldi	r22, 0x0B	; 11
    2e62:	62 9f       	mul	r22, r18
    2e64:	c0 01       	movw	r24, r0
    2e66:	63 9f       	mul	r22, r19
    2e68:	90 0d       	add	r25, r0
    2e6a:	11 24       	eor	r1, r1
    2e6c:	86 5c       	subi	r24, 0xC6	; 198
    2e6e:	9e 4f       	sbci	r25, 0xFE	; 254
    2e70:	fc 01       	movw	r30, r24
    2e72:	80 81       	ld	r24, Z
				}//end for
				/* no break */
			case ROBOT_STATE_TACTIC_CENTER:
				for(current_position = next_position;current_position < TACTIC_CENTER_POSITION_COUNT; current_position++)
				{
					odometry_status = odometry_move_to_position(&(yellow_tactic_center_positions[current_position].point), yellow_tactic_center_positions[current_position].speed,
    2e74:	e8 2f       	mov	r30, r24
    2e76:	89 81       	ldd	r24, Y+1	; 0x01
    2e78:	28 2f       	mov	r18, r24
    2e7a:	30 e0       	ldi	r19, 0x00	; 0
    2e7c:	6b e0       	ldi	r22, 0x0B	; 11
    2e7e:	62 9f       	mul	r22, r18
    2e80:	c0 01       	movw	r24, r0
    2e82:	63 9f       	mul	r22, r19
    2e84:	90 0d       	add	r25, r0
    2e86:	11 24       	eor	r1, r1
    2e88:	87 5c       	subi	r24, 0xC7	; 199
    2e8a:	9e 4f       	sbci	r25, 0xFE	; 254
    2e8c:	dc 01       	movw	r26, r24
    2e8e:	7c 91       	ld	r23, X
    2e90:	89 81       	ldd	r24, Y+1	; 0x01
    2e92:	28 2f       	mov	r18, r24
    2e94:	30 e0       	ldi	r19, 0x00	; 0
    2e96:	6b e0       	ldi	r22, 0x0B	; 11
    2e98:	62 9f       	mul	r22, r18
    2e9a:	c0 01       	movw	r24, r0
    2e9c:	63 9f       	mul	r22, r19
    2e9e:	90 0d       	add	r25, r0
    2ea0:	11 24       	eor	r1, r1
    2ea2:	8e 5c       	subi	r24, 0xCE	; 206
    2ea4:	9e 4f       	sbci	r25, 0xFE	; 254
    2ea6:	9a 01       	movw	r18, r20
    2ea8:	4e 2f       	mov	r20, r30
    2eaa:	67 2f       	mov	r22, r23
    2eac:	0e 94 75 0d 	call	0x1aea	; 0x1aea <odometry_move_to_position>
    2eb0:	8c 83       	std	Y+4, r24	; 0x04
					yellow_tactic_center_positions[current_position].direction,yellow_tactic_center_positions[current_position].callback);

					if(odometry_status == ODOMETRY_FAIL)
    2eb2:	8c 81       	ldd	r24, Y+4	; 0x04
    2eb4:	81 30       	cpi	r24, 0x01	; 1
    2eb6:	09 f4       	brne	.+2      	; 0x2eba <yellowside+0x134>
					{
						break;
    2eb8:	0d c0       	rjmp	.+26     	; 0x2ed4 <yellowside+0x14e>
					}
					if(current_position == 1){
    2eba:	89 81       	ldd	r24, Y+1	; 0x01
    2ebc:	81 30       	cpi	r24, 0x01	; 1
    2ebe:	21 f4       	brne	.+8      	; 0x2ec8 <yellowside+0x142>
						odometry_stop(HARD_STOP);
    2ec0:	83 e5       	ldi	r24, 0x53	; 83
    2ec2:	0e 94 2d 0c 	call	0x185a	; 0x185a <odometry_stop>
						while(1);
    2ec6:	ff cf       	rjmp	.-2      	; 0x2ec6 <yellowside+0x140>
						while(1);
					}
				}//end for
				/* no break */
			case ROBOT_STATE_TACTIC_CENTER:
				for(current_position = next_position;current_position < TACTIC_CENTER_POSITION_COUNT; current_position++)
    2ec8:	89 81       	ldd	r24, Y+1	; 0x01
    2eca:	8f 5f       	subi	r24, 0xFF	; 255
    2ecc:	89 83       	std	Y+1, r24	; 0x01
    2ece:	89 81       	ldd	r24, Y+1	; 0x01
    2ed0:	88 23       	and	r24, r24
    2ed2:	09 f2       	breq	.-126    	; 0x2e56 <yellowside+0xd0>
						odometry_stop(HARD_STOP);
						while(1);
					}
				}//end for
		}//end switch
	}//end while
    2ed4:	70 cf       	rjmp	.-288    	; 0x2db6 <yellowside+0x30>

00002ed6 <main>:
#include "odometry.h"
#include "sides.h"
#include "actuators.h"

int main()
{
    2ed6:	cf 93       	push	r28
    2ed8:	df 93       	push	r29
    2eda:	cd b7       	in	r28, 0x3d	; 61
    2edc:	de b7       	in	r29, 0x3e	; 62
    2ede:	2e 97       	sbiw	r28, 0x0e	; 14
    2ee0:	0f b6       	in	r0, 0x3f	; 63
    2ee2:	f8 94       	cli
    2ee4:	de bf       	out	0x3e, r29	; 62
    2ee6:	0f be       	out	0x3f, r0	; 63
    2ee8:	cd bf       	out	0x3d, r28	; 61
	system_init();
    2eea:	0e 94 b3 11 	call	0x2366	; 0x2366 <system_init>
    2eee:	80 e0       	ldi	r24, 0x00	; 0
    2ef0:	90 e0       	ldi	r25, 0x00	; 0
    2ef2:	a8 ec       	ldi	r26, 0xC8	; 200
    2ef4:	b2 e4       	ldi	r27, 0x42	; 66
    2ef6:	89 83       	std	Y+1, r24	; 0x01
    2ef8:	9a 83       	std	Y+2, r25	; 0x02
    2efa:	ab 83       	std	Y+3, r26	; 0x03
    2efc:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2efe:	20 e0       	ldi	r18, 0x00	; 0
    2f00:	30 e0       	ldi	r19, 0x00	; 0
    2f02:	4a e7       	ldi	r20, 0x7A	; 122
    2f04:	53 e4       	ldi	r21, 0x43	; 67
    2f06:	69 81       	ldd	r22, Y+1	; 0x01
    2f08:	7a 81       	ldd	r23, Y+2	; 0x02
    2f0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f0c:	9c 81       	ldd	r25, Y+4	; 0x04
    2f0e:	0e 94 be 19 	call	0x337c	; 0x337c <__mulsf3>
    2f12:	dc 01       	movw	r26, r24
    2f14:	cb 01       	movw	r24, r22
    2f16:	8d 83       	std	Y+5, r24	; 0x05
    2f18:	9e 83       	std	Y+6, r25	; 0x06
    2f1a:	af 83       	std	Y+7, r26	; 0x07
    2f1c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2f1e:	20 e0       	ldi	r18, 0x00	; 0
    2f20:	30 e0       	ldi	r19, 0x00	; 0
    2f22:	40 e8       	ldi	r20, 0x80	; 128
    2f24:	5f e3       	ldi	r21, 0x3F	; 63
    2f26:	6d 81       	ldd	r22, Y+5	; 0x05
    2f28:	7e 81       	ldd	r23, Y+6	; 0x06
    2f2a:	8f 81       	ldd	r24, Y+7	; 0x07
    2f2c:	98 85       	ldd	r25, Y+8	; 0x08
    2f2e:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__cmpsf2>
    2f32:	88 23       	and	r24, r24
    2f34:	2c f4       	brge	.+10     	; 0x2f40 <main+0x6a>
		__ticks = 1;
    2f36:	81 e0       	ldi	r24, 0x01	; 1
    2f38:	90 e0       	ldi	r25, 0x00	; 0
    2f3a:	9a 87       	std	Y+10, r25	; 0x0a
    2f3c:	89 87       	std	Y+9, r24	; 0x09
    2f3e:	3f c0       	rjmp	.+126    	; 0x2fbe <main+0xe8>
	else if (__tmp > 65535)
    2f40:	20 e0       	ldi	r18, 0x00	; 0
    2f42:	3f ef       	ldi	r19, 0xFF	; 255
    2f44:	4f e7       	ldi	r20, 0x7F	; 127
    2f46:	57 e4       	ldi	r21, 0x47	; 71
    2f48:	6d 81       	ldd	r22, Y+5	; 0x05
    2f4a:	7e 81       	ldd	r23, Y+6	; 0x06
    2f4c:	8f 81       	ldd	r24, Y+7	; 0x07
    2f4e:	98 85       	ldd	r25, Y+8	; 0x08
    2f50:	0e 94 b9 19 	call	0x3372	; 0x3372 <__gesf2>
    2f54:	18 16       	cp	r1, r24
    2f56:	4c f5       	brge	.+82     	; 0x2faa <main+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f58:	20 e0       	ldi	r18, 0x00	; 0
    2f5a:	30 e0       	ldi	r19, 0x00	; 0
    2f5c:	40 e2       	ldi	r20, 0x20	; 32
    2f5e:	51 e4       	ldi	r21, 0x41	; 65
    2f60:	69 81       	ldd	r22, Y+1	; 0x01
    2f62:	7a 81       	ldd	r23, Y+2	; 0x02
    2f64:	8b 81       	ldd	r24, Y+3	; 0x03
    2f66:	9c 81       	ldd	r25, Y+4	; 0x04
    2f68:	0e 94 be 19 	call	0x337c	; 0x337c <__mulsf3>
    2f6c:	dc 01       	movw	r26, r24
    2f6e:	cb 01       	movw	r24, r22
    2f70:	bc 01       	movw	r22, r24
    2f72:	cd 01       	movw	r24, r26
    2f74:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <__fixunssfsi>
    2f78:	dc 01       	movw	r26, r24
    2f7a:	cb 01       	movw	r24, r22
    2f7c:	9a 87       	std	Y+10, r25	; 0x0a
    2f7e:	89 87       	std	Y+9, r24	; 0x09
    2f80:	0f c0       	rjmp	.+30     	; 0x2fa0 <main+0xca>
    2f82:	89 e1       	ldi	r24, 0x19	; 25
    2f84:	90 e0       	ldi	r25, 0x00	; 0
    2f86:	9c 87       	std	Y+12, r25	; 0x0c
    2f88:	8b 87       	std	Y+11, r24	; 0x0b
    2f8a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2f8c:	9c 85       	ldd	r25, Y+12	; 0x0c
    2f8e:	01 97       	sbiw	r24, 0x01	; 1
    2f90:	f1 f7       	brne	.-4      	; 0x2f8e <main+0xb8>
    2f92:	9c 87       	std	Y+12, r25	; 0x0c
    2f94:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f96:	89 85       	ldd	r24, Y+9	; 0x09
    2f98:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f9a:	01 97       	sbiw	r24, 0x01	; 1
    2f9c:	9a 87       	std	Y+10, r25	; 0x0a
    2f9e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fa0:	89 85       	ldd	r24, Y+9	; 0x09
    2fa2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fa4:	89 2b       	or	r24, r25
    2fa6:	69 f7       	brne	.-38     	; 0x2f82 <main+0xac>
    2fa8:	14 c0       	rjmp	.+40     	; 0x2fd2 <main+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2faa:	6d 81       	ldd	r22, Y+5	; 0x05
    2fac:	7e 81       	ldd	r23, Y+6	; 0x06
    2fae:	8f 81       	ldd	r24, Y+7	; 0x07
    2fb0:	98 85       	ldd	r25, Y+8	; 0x08
    2fb2:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <__fixunssfsi>
    2fb6:	dc 01       	movw	r26, r24
    2fb8:	cb 01       	movw	r24, r22
    2fba:	9a 87       	std	Y+10, r25	; 0x0a
    2fbc:	89 87       	std	Y+9, r24	; 0x09
    2fbe:	89 85       	ldd	r24, Y+9	; 0x09
    2fc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fc2:	9e 87       	std	Y+14, r25	; 0x0e
    2fc4:	8d 87       	std	Y+13, r24	; 0x0d
    2fc6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fc8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fca:	01 97       	sbiw	r24, 0x01	; 1
    2fcc:	f1 f7       	brne	.-4      	; 0x2fca <main+0xf4>
    2fce:	9e 87       	std	Y+14, r25	; 0x0e
    2fd0:	8d 87       	std	Y+13, r24	; 0x0d
    2fd2:	80 e0       	ldi	r24, 0x00	; 0
    2fd4:	90 e0       	ldi	r25, 0x00	; 0
	_delay_ms(100);
}
    2fd6:	2e 96       	adiw	r28, 0x0e	; 14
    2fd8:	0f b6       	in	r0, 0x3f	; 63
    2fda:	f8 94       	cli
    2fdc:	de bf       	out	0x3e, r29	; 62
    2fde:	0f be       	out	0x3f, r0	; 63
    2fe0:	cd bf       	out	0x3d, r28	; 61
    2fe2:	df 91       	pop	r29
    2fe4:	cf 91       	pop	r28
    2fe6:	08 95       	ret

00002fe8 <__subsf3>:
    2fe8:	50 58       	subi	r21, 0x80	; 128

00002fea <__addsf3>:
    2fea:	bb 27       	eor	r27, r27
    2fec:	aa 27       	eor	r26, r26
    2fee:	0e 94 0c 18 	call	0x3018	; 0x3018 <__addsf3x>
    2ff2:	0c 94 7f 19 	jmp	0x32fe	; 0x32fe <__fp_round>
    2ff6:	0e 94 71 19 	call	0x32e2	; 0x32e2 <__fp_pscA>
    2ffa:	38 f0       	brcs	.+14     	; 0x300a <__addsf3+0x20>
    2ffc:	0e 94 78 19 	call	0x32f0	; 0x32f0 <__fp_pscB>
    3000:	20 f0       	brcs	.+8      	; 0x300a <__addsf3+0x20>
    3002:	39 f4       	brne	.+14     	; 0x3012 <__addsf3+0x28>
    3004:	9f 3f       	cpi	r25, 0xFF	; 255
    3006:	19 f4       	brne	.+6      	; 0x300e <__addsf3+0x24>
    3008:	26 f4       	brtc	.+8      	; 0x3012 <__addsf3+0x28>
    300a:	0c 94 6e 19 	jmp	0x32dc	; 0x32dc <__fp_nan>
    300e:	0e f4       	brtc	.+2      	; 0x3012 <__addsf3+0x28>
    3010:	e0 95       	com	r30
    3012:	e7 fb       	bst	r30, 7
    3014:	0c 94 68 19 	jmp	0x32d0	; 0x32d0 <__fp_inf>

00003018 <__addsf3x>:
    3018:	e9 2f       	mov	r30, r25
    301a:	0e 94 90 19 	call	0x3320	; 0x3320 <__fp_split3>
    301e:	58 f3       	brcs	.-42     	; 0x2ff6 <__addsf3+0xc>
    3020:	ba 17       	cp	r27, r26
    3022:	62 07       	cpc	r22, r18
    3024:	73 07       	cpc	r23, r19
    3026:	84 07       	cpc	r24, r20
    3028:	95 07       	cpc	r25, r21
    302a:	20 f0       	brcs	.+8      	; 0x3034 <__addsf3x+0x1c>
    302c:	79 f4       	brne	.+30     	; 0x304c <__addsf3x+0x34>
    302e:	a6 f5       	brtc	.+104    	; 0x3098 <__addsf3x+0x80>
    3030:	0c 94 b2 19 	jmp	0x3364	; 0x3364 <__fp_zero>
    3034:	0e f4       	brtc	.+2      	; 0x3038 <__addsf3x+0x20>
    3036:	e0 95       	com	r30
    3038:	0b 2e       	mov	r0, r27
    303a:	ba 2f       	mov	r27, r26
    303c:	a0 2d       	mov	r26, r0
    303e:	0b 01       	movw	r0, r22
    3040:	b9 01       	movw	r22, r18
    3042:	90 01       	movw	r18, r0
    3044:	0c 01       	movw	r0, r24
    3046:	ca 01       	movw	r24, r20
    3048:	a0 01       	movw	r20, r0
    304a:	11 24       	eor	r1, r1
    304c:	ff 27       	eor	r31, r31
    304e:	59 1b       	sub	r21, r25
    3050:	99 f0       	breq	.+38     	; 0x3078 <__addsf3x+0x60>
    3052:	59 3f       	cpi	r21, 0xF9	; 249
    3054:	50 f4       	brcc	.+20     	; 0x306a <__addsf3x+0x52>
    3056:	50 3e       	cpi	r21, 0xE0	; 224
    3058:	68 f1       	brcs	.+90     	; 0x30b4 <__addsf3x+0x9c>
    305a:	1a 16       	cp	r1, r26
    305c:	f0 40       	sbci	r31, 0x00	; 0
    305e:	a2 2f       	mov	r26, r18
    3060:	23 2f       	mov	r18, r19
    3062:	34 2f       	mov	r19, r20
    3064:	44 27       	eor	r20, r20
    3066:	58 5f       	subi	r21, 0xF8	; 248
    3068:	f3 cf       	rjmp	.-26     	; 0x3050 <__addsf3x+0x38>
    306a:	46 95       	lsr	r20
    306c:	37 95       	ror	r19
    306e:	27 95       	ror	r18
    3070:	a7 95       	ror	r26
    3072:	f0 40       	sbci	r31, 0x00	; 0
    3074:	53 95       	inc	r21
    3076:	c9 f7       	brne	.-14     	; 0x306a <__addsf3x+0x52>
    3078:	7e f4       	brtc	.+30     	; 0x3098 <__addsf3x+0x80>
    307a:	1f 16       	cp	r1, r31
    307c:	ba 0b       	sbc	r27, r26
    307e:	62 0b       	sbc	r22, r18
    3080:	73 0b       	sbc	r23, r19
    3082:	84 0b       	sbc	r24, r20
    3084:	ba f0       	brmi	.+46     	; 0x30b4 <__addsf3x+0x9c>
    3086:	91 50       	subi	r25, 0x01	; 1
    3088:	a1 f0       	breq	.+40     	; 0x30b2 <__addsf3x+0x9a>
    308a:	ff 0f       	add	r31, r31
    308c:	bb 1f       	adc	r27, r27
    308e:	66 1f       	adc	r22, r22
    3090:	77 1f       	adc	r23, r23
    3092:	88 1f       	adc	r24, r24
    3094:	c2 f7       	brpl	.-16     	; 0x3086 <__addsf3x+0x6e>
    3096:	0e c0       	rjmp	.+28     	; 0x30b4 <__addsf3x+0x9c>
    3098:	ba 0f       	add	r27, r26
    309a:	62 1f       	adc	r22, r18
    309c:	73 1f       	adc	r23, r19
    309e:	84 1f       	adc	r24, r20
    30a0:	48 f4       	brcc	.+18     	; 0x30b4 <__addsf3x+0x9c>
    30a2:	87 95       	ror	r24
    30a4:	77 95       	ror	r23
    30a6:	67 95       	ror	r22
    30a8:	b7 95       	ror	r27
    30aa:	f7 95       	ror	r31
    30ac:	9e 3f       	cpi	r25, 0xFE	; 254
    30ae:	08 f0       	brcs	.+2      	; 0x30b2 <__addsf3x+0x9a>
    30b0:	b0 cf       	rjmp	.-160    	; 0x3012 <__addsf3+0x28>
    30b2:	93 95       	inc	r25
    30b4:	88 0f       	add	r24, r24
    30b6:	08 f0       	brcs	.+2      	; 0x30ba <__addsf3x+0xa2>
    30b8:	99 27       	eor	r25, r25
    30ba:	ee 0f       	add	r30, r30
    30bc:	97 95       	ror	r25
    30be:	87 95       	ror	r24
    30c0:	08 95       	ret

000030c2 <__cmpsf2>:
    30c2:	0e 94 44 19 	call	0x3288	; 0x3288 <__fp_cmp>
    30c6:	08 f4       	brcc	.+2      	; 0x30ca <__cmpsf2+0x8>
    30c8:	81 e0       	ldi	r24, 0x01	; 1
    30ca:	08 95       	ret

000030cc <__divsf3>:
    30cc:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <__divsf3x>
    30d0:	0c 94 7f 19 	jmp	0x32fe	; 0x32fe <__fp_round>
    30d4:	0e 94 78 19 	call	0x32f0	; 0x32f0 <__fp_pscB>
    30d8:	58 f0       	brcs	.+22     	; 0x30f0 <__divsf3+0x24>
    30da:	0e 94 71 19 	call	0x32e2	; 0x32e2 <__fp_pscA>
    30de:	40 f0       	brcs	.+16     	; 0x30f0 <__divsf3+0x24>
    30e0:	29 f4       	brne	.+10     	; 0x30ec <__divsf3+0x20>
    30e2:	5f 3f       	cpi	r21, 0xFF	; 255
    30e4:	29 f0       	breq	.+10     	; 0x30f0 <__divsf3+0x24>
    30e6:	0c 94 68 19 	jmp	0x32d0	; 0x32d0 <__fp_inf>
    30ea:	51 11       	cpse	r21, r1
    30ec:	0c 94 b3 19 	jmp	0x3366	; 0x3366 <__fp_szero>
    30f0:	0c 94 6e 19 	jmp	0x32dc	; 0x32dc <__fp_nan>

000030f4 <__divsf3x>:
    30f4:	0e 94 90 19 	call	0x3320	; 0x3320 <__fp_split3>
    30f8:	68 f3       	brcs	.-38     	; 0x30d4 <__divsf3+0x8>

000030fa <__divsf3_pse>:
    30fa:	99 23       	and	r25, r25
    30fc:	b1 f3       	breq	.-20     	; 0x30ea <__divsf3+0x1e>
    30fe:	55 23       	and	r21, r21
    3100:	91 f3       	breq	.-28     	; 0x30e6 <__divsf3+0x1a>
    3102:	95 1b       	sub	r25, r21
    3104:	55 0b       	sbc	r21, r21
    3106:	bb 27       	eor	r27, r27
    3108:	aa 27       	eor	r26, r26
    310a:	62 17       	cp	r22, r18
    310c:	73 07       	cpc	r23, r19
    310e:	84 07       	cpc	r24, r20
    3110:	38 f0       	brcs	.+14     	; 0x3120 <__divsf3_pse+0x26>
    3112:	9f 5f       	subi	r25, 0xFF	; 255
    3114:	5f 4f       	sbci	r21, 0xFF	; 255
    3116:	22 0f       	add	r18, r18
    3118:	33 1f       	adc	r19, r19
    311a:	44 1f       	adc	r20, r20
    311c:	aa 1f       	adc	r26, r26
    311e:	a9 f3       	breq	.-22     	; 0x310a <__divsf3_pse+0x10>
    3120:	35 d0       	rcall	.+106    	; 0x318c <__divsf3_pse+0x92>
    3122:	0e 2e       	mov	r0, r30
    3124:	3a f0       	brmi	.+14     	; 0x3134 <__divsf3_pse+0x3a>
    3126:	e0 e8       	ldi	r30, 0x80	; 128
    3128:	32 d0       	rcall	.+100    	; 0x318e <__divsf3_pse+0x94>
    312a:	91 50       	subi	r25, 0x01	; 1
    312c:	50 40       	sbci	r21, 0x00	; 0
    312e:	e6 95       	lsr	r30
    3130:	00 1c       	adc	r0, r0
    3132:	ca f7       	brpl	.-14     	; 0x3126 <__divsf3_pse+0x2c>
    3134:	2b d0       	rcall	.+86     	; 0x318c <__divsf3_pse+0x92>
    3136:	fe 2f       	mov	r31, r30
    3138:	29 d0       	rcall	.+82     	; 0x318c <__divsf3_pse+0x92>
    313a:	66 0f       	add	r22, r22
    313c:	77 1f       	adc	r23, r23
    313e:	88 1f       	adc	r24, r24
    3140:	bb 1f       	adc	r27, r27
    3142:	26 17       	cp	r18, r22
    3144:	37 07       	cpc	r19, r23
    3146:	48 07       	cpc	r20, r24
    3148:	ab 07       	cpc	r26, r27
    314a:	b0 e8       	ldi	r27, 0x80	; 128
    314c:	09 f0       	breq	.+2      	; 0x3150 <__divsf3_pse+0x56>
    314e:	bb 0b       	sbc	r27, r27
    3150:	80 2d       	mov	r24, r0
    3152:	bf 01       	movw	r22, r30
    3154:	ff 27       	eor	r31, r31
    3156:	93 58       	subi	r25, 0x83	; 131
    3158:	5f 4f       	sbci	r21, 0xFF	; 255
    315a:	3a f0       	brmi	.+14     	; 0x316a <__divsf3_pse+0x70>
    315c:	9e 3f       	cpi	r25, 0xFE	; 254
    315e:	51 05       	cpc	r21, r1
    3160:	78 f0       	brcs	.+30     	; 0x3180 <__divsf3_pse+0x86>
    3162:	0c 94 68 19 	jmp	0x32d0	; 0x32d0 <__fp_inf>
    3166:	0c 94 b3 19 	jmp	0x3366	; 0x3366 <__fp_szero>
    316a:	5f 3f       	cpi	r21, 0xFF	; 255
    316c:	e4 f3       	brlt	.-8      	; 0x3166 <__divsf3_pse+0x6c>
    316e:	98 3e       	cpi	r25, 0xE8	; 232
    3170:	d4 f3       	brlt	.-12     	; 0x3166 <__divsf3_pse+0x6c>
    3172:	86 95       	lsr	r24
    3174:	77 95       	ror	r23
    3176:	67 95       	ror	r22
    3178:	b7 95       	ror	r27
    317a:	f7 95       	ror	r31
    317c:	9f 5f       	subi	r25, 0xFF	; 255
    317e:	c9 f7       	brne	.-14     	; 0x3172 <__divsf3_pse+0x78>
    3180:	88 0f       	add	r24, r24
    3182:	91 1d       	adc	r25, r1
    3184:	96 95       	lsr	r25
    3186:	87 95       	ror	r24
    3188:	97 f9       	bld	r25, 7
    318a:	08 95       	ret
    318c:	e1 e0       	ldi	r30, 0x01	; 1
    318e:	66 0f       	add	r22, r22
    3190:	77 1f       	adc	r23, r23
    3192:	88 1f       	adc	r24, r24
    3194:	bb 1f       	adc	r27, r27
    3196:	62 17       	cp	r22, r18
    3198:	73 07       	cpc	r23, r19
    319a:	84 07       	cpc	r24, r20
    319c:	ba 07       	cpc	r27, r26
    319e:	20 f0       	brcs	.+8      	; 0x31a8 <__divsf3_pse+0xae>
    31a0:	62 1b       	sub	r22, r18
    31a2:	73 0b       	sbc	r23, r19
    31a4:	84 0b       	sbc	r24, r20
    31a6:	ba 0b       	sbc	r27, r26
    31a8:	ee 1f       	adc	r30, r30
    31aa:	88 f7       	brcc	.-30     	; 0x318e <__divsf3_pse+0x94>
    31ac:	e0 95       	com	r30
    31ae:	08 95       	ret

000031b0 <__fixunssfsi>:
    31b0:	0e 94 98 19 	call	0x3330	; 0x3330 <__fp_splitA>
    31b4:	88 f0       	brcs	.+34     	; 0x31d8 <__fixunssfsi+0x28>
    31b6:	9f 57       	subi	r25, 0x7F	; 127
    31b8:	98 f0       	brcs	.+38     	; 0x31e0 <__fixunssfsi+0x30>
    31ba:	b9 2f       	mov	r27, r25
    31bc:	99 27       	eor	r25, r25
    31be:	b7 51       	subi	r27, 0x17	; 23
    31c0:	b0 f0       	brcs	.+44     	; 0x31ee <__fixunssfsi+0x3e>
    31c2:	e1 f0       	breq	.+56     	; 0x31fc <__fixunssfsi+0x4c>
    31c4:	66 0f       	add	r22, r22
    31c6:	77 1f       	adc	r23, r23
    31c8:	88 1f       	adc	r24, r24
    31ca:	99 1f       	adc	r25, r25
    31cc:	1a f0       	brmi	.+6      	; 0x31d4 <__fixunssfsi+0x24>
    31ce:	ba 95       	dec	r27
    31d0:	c9 f7       	brne	.-14     	; 0x31c4 <__fixunssfsi+0x14>
    31d2:	14 c0       	rjmp	.+40     	; 0x31fc <__fixunssfsi+0x4c>
    31d4:	b1 30       	cpi	r27, 0x01	; 1
    31d6:	91 f0       	breq	.+36     	; 0x31fc <__fixunssfsi+0x4c>
    31d8:	0e 94 b2 19 	call	0x3364	; 0x3364 <__fp_zero>
    31dc:	b1 e0       	ldi	r27, 0x01	; 1
    31de:	08 95       	ret
    31e0:	0c 94 b2 19 	jmp	0x3364	; 0x3364 <__fp_zero>
    31e4:	67 2f       	mov	r22, r23
    31e6:	78 2f       	mov	r23, r24
    31e8:	88 27       	eor	r24, r24
    31ea:	b8 5f       	subi	r27, 0xF8	; 248
    31ec:	39 f0       	breq	.+14     	; 0x31fc <__fixunssfsi+0x4c>
    31ee:	b9 3f       	cpi	r27, 0xF9	; 249
    31f0:	cc f3       	brlt	.-14     	; 0x31e4 <__fixunssfsi+0x34>
    31f2:	86 95       	lsr	r24
    31f4:	77 95       	ror	r23
    31f6:	67 95       	ror	r22
    31f8:	b3 95       	inc	r27
    31fa:	d9 f7       	brne	.-10     	; 0x31f2 <__fixunssfsi+0x42>
    31fc:	3e f4       	brtc	.+14     	; 0x320c <__fixunssfsi+0x5c>
    31fe:	90 95       	com	r25
    3200:	80 95       	com	r24
    3202:	70 95       	com	r23
    3204:	61 95       	neg	r22
    3206:	7f 4f       	sbci	r23, 0xFF	; 255
    3208:	8f 4f       	sbci	r24, 0xFF	; 255
    320a:	9f 4f       	sbci	r25, 0xFF	; 255
    320c:	08 95       	ret

0000320e <__floatunsisf>:
    320e:	e8 94       	clt
    3210:	09 c0       	rjmp	.+18     	; 0x3224 <__floatsisf+0x12>

00003212 <__floatsisf>:
    3212:	97 fb       	bst	r25, 7
    3214:	3e f4       	brtc	.+14     	; 0x3224 <__floatsisf+0x12>
    3216:	90 95       	com	r25
    3218:	80 95       	com	r24
    321a:	70 95       	com	r23
    321c:	61 95       	neg	r22
    321e:	7f 4f       	sbci	r23, 0xFF	; 255
    3220:	8f 4f       	sbci	r24, 0xFF	; 255
    3222:	9f 4f       	sbci	r25, 0xFF	; 255
    3224:	99 23       	and	r25, r25
    3226:	a9 f0       	breq	.+42     	; 0x3252 <__floatsisf+0x40>
    3228:	f9 2f       	mov	r31, r25
    322a:	96 e9       	ldi	r25, 0x96	; 150
    322c:	bb 27       	eor	r27, r27
    322e:	93 95       	inc	r25
    3230:	f6 95       	lsr	r31
    3232:	87 95       	ror	r24
    3234:	77 95       	ror	r23
    3236:	67 95       	ror	r22
    3238:	b7 95       	ror	r27
    323a:	f1 11       	cpse	r31, r1
    323c:	f8 cf       	rjmp	.-16     	; 0x322e <__floatsisf+0x1c>
    323e:	fa f4       	brpl	.+62     	; 0x327e <__floatsisf+0x6c>
    3240:	bb 0f       	add	r27, r27
    3242:	11 f4       	brne	.+4      	; 0x3248 <__floatsisf+0x36>
    3244:	60 ff       	sbrs	r22, 0
    3246:	1b c0       	rjmp	.+54     	; 0x327e <__floatsisf+0x6c>
    3248:	6f 5f       	subi	r22, 0xFF	; 255
    324a:	7f 4f       	sbci	r23, 0xFF	; 255
    324c:	8f 4f       	sbci	r24, 0xFF	; 255
    324e:	9f 4f       	sbci	r25, 0xFF	; 255
    3250:	16 c0       	rjmp	.+44     	; 0x327e <__floatsisf+0x6c>
    3252:	88 23       	and	r24, r24
    3254:	11 f0       	breq	.+4      	; 0x325a <__floatsisf+0x48>
    3256:	96 e9       	ldi	r25, 0x96	; 150
    3258:	11 c0       	rjmp	.+34     	; 0x327c <__floatsisf+0x6a>
    325a:	77 23       	and	r23, r23
    325c:	21 f0       	breq	.+8      	; 0x3266 <__floatsisf+0x54>
    325e:	9e e8       	ldi	r25, 0x8E	; 142
    3260:	87 2f       	mov	r24, r23
    3262:	76 2f       	mov	r23, r22
    3264:	05 c0       	rjmp	.+10     	; 0x3270 <__floatsisf+0x5e>
    3266:	66 23       	and	r22, r22
    3268:	71 f0       	breq	.+28     	; 0x3286 <__floatsisf+0x74>
    326a:	96 e8       	ldi	r25, 0x86	; 134
    326c:	86 2f       	mov	r24, r22
    326e:	70 e0       	ldi	r23, 0x00	; 0
    3270:	60 e0       	ldi	r22, 0x00	; 0
    3272:	2a f0       	brmi	.+10     	; 0x327e <__floatsisf+0x6c>
    3274:	9a 95       	dec	r25
    3276:	66 0f       	add	r22, r22
    3278:	77 1f       	adc	r23, r23
    327a:	88 1f       	adc	r24, r24
    327c:	da f7       	brpl	.-10     	; 0x3274 <__floatsisf+0x62>
    327e:	88 0f       	add	r24, r24
    3280:	96 95       	lsr	r25
    3282:	87 95       	ror	r24
    3284:	97 f9       	bld	r25, 7
    3286:	08 95       	ret

00003288 <__fp_cmp>:
    3288:	99 0f       	add	r25, r25
    328a:	00 08       	sbc	r0, r0
    328c:	55 0f       	add	r21, r21
    328e:	aa 0b       	sbc	r26, r26
    3290:	e0 e8       	ldi	r30, 0x80	; 128
    3292:	fe ef       	ldi	r31, 0xFE	; 254
    3294:	16 16       	cp	r1, r22
    3296:	17 06       	cpc	r1, r23
    3298:	e8 07       	cpc	r30, r24
    329a:	f9 07       	cpc	r31, r25
    329c:	c0 f0       	brcs	.+48     	; 0x32ce <__fp_cmp+0x46>
    329e:	12 16       	cp	r1, r18
    32a0:	13 06       	cpc	r1, r19
    32a2:	e4 07       	cpc	r30, r20
    32a4:	f5 07       	cpc	r31, r21
    32a6:	98 f0       	brcs	.+38     	; 0x32ce <__fp_cmp+0x46>
    32a8:	62 1b       	sub	r22, r18
    32aa:	73 0b       	sbc	r23, r19
    32ac:	84 0b       	sbc	r24, r20
    32ae:	95 0b       	sbc	r25, r21
    32b0:	39 f4       	brne	.+14     	; 0x32c0 <__fp_cmp+0x38>
    32b2:	0a 26       	eor	r0, r26
    32b4:	61 f0       	breq	.+24     	; 0x32ce <__fp_cmp+0x46>
    32b6:	23 2b       	or	r18, r19
    32b8:	24 2b       	or	r18, r20
    32ba:	25 2b       	or	r18, r21
    32bc:	21 f4       	brne	.+8      	; 0x32c6 <__fp_cmp+0x3e>
    32be:	08 95       	ret
    32c0:	0a 26       	eor	r0, r26
    32c2:	09 f4       	brne	.+2      	; 0x32c6 <__fp_cmp+0x3e>
    32c4:	a1 40       	sbci	r26, 0x01	; 1
    32c6:	a6 95       	lsr	r26
    32c8:	8f ef       	ldi	r24, 0xFF	; 255
    32ca:	81 1d       	adc	r24, r1
    32cc:	81 1d       	adc	r24, r1
    32ce:	08 95       	ret

000032d0 <__fp_inf>:
    32d0:	97 f9       	bld	r25, 7
    32d2:	9f 67       	ori	r25, 0x7F	; 127
    32d4:	80 e8       	ldi	r24, 0x80	; 128
    32d6:	70 e0       	ldi	r23, 0x00	; 0
    32d8:	60 e0       	ldi	r22, 0x00	; 0
    32da:	08 95       	ret

000032dc <__fp_nan>:
    32dc:	9f ef       	ldi	r25, 0xFF	; 255
    32de:	80 ec       	ldi	r24, 0xC0	; 192
    32e0:	08 95       	ret

000032e2 <__fp_pscA>:
    32e2:	00 24       	eor	r0, r0
    32e4:	0a 94       	dec	r0
    32e6:	16 16       	cp	r1, r22
    32e8:	17 06       	cpc	r1, r23
    32ea:	18 06       	cpc	r1, r24
    32ec:	09 06       	cpc	r0, r25
    32ee:	08 95       	ret

000032f0 <__fp_pscB>:
    32f0:	00 24       	eor	r0, r0
    32f2:	0a 94       	dec	r0
    32f4:	12 16       	cp	r1, r18
    32f6:	13 06       	cpc	r1, r19
    32f8:	14 06       	cpc	r1, r20
    32fa:	05 06       	cpc	r0, r21
    32fc:	08 95       	ret

000032fe <__fp_round>:
    32fe:	09 2e       	mov	r0, r25
    3300:	03 94       	inc	r0
    3302:	00 0c       	add	r0, r0
    3304:	11 f4       	brne	.+4      	; 0x330a <__fp_round+0xc>
    3306:	88 23       	and	r24, r24
    3308:	52 f0       	brmi	.+20     	; 0x331e <__fp_round+0x20>
    330a:	bb 0f       	add	r27, r27
    330c:	40 f4       	brcc	.+16     	; 0x331e <__fp_round+0x20>
    330e:	bf 2b       	or	r27, r31
    3310:	11 f4       	brne	.+4      	; 0x3316 <__fp_round+0x18>
    3312:	60 ff       	sbrs	r22, 0
    3314:	04 c0       	rjmp	.+8      	; 0x331e <__fp_round+0x20>
    3316:	6f 5f       	subi	r22, 0xFF	; 255
    3318:	7f 4f       	sbci	r23, 0xFF	; 255
    331a:	8f 4f       	sbci	r24, 0xFF	; 255
    331c:	9f 4f       	sbci	r25, 0xFF	; 255
    331e:	08 95       	ret

00003320 <__fp_split3>:
    3320:	57 fd       	sbrc	r21, 7
    3322:	90 58       	subi	r25, 0x80	; 128
    3324:	44 0f       	add	r20, r20
    3326:	55 1f       	adc	r21, r21
    3328:	59 f0       	breq	.+22     	; 0x3340 <__fp_splitA+0x10>
    332a:	5f 3f       	cpi	r21, 0xFF	; 255
    332c:	71 f0       	breq	.+28     	; 0x334a <__fp_splitA+0x1a>
    332e:	47 95       	ror	r20

00003330 <__fp_splitA>:
    3330:	88 0f       	add	r24, r24
    3332:	97 fb       	bst	r25, 7
    3334:	99 1f       	adc	r25, r25
    3336:	61 f0       	breq	.+24     	; 0x3350 <__fp_splitA+0x20>
    3338:	9f 3f       	cpi	r25, 0xFF	; 255
    333a:	79 f0       	breq	.+30     	; 0x335a <__fp_splitA+0x2a>
    333c:	87 95       	ror	r24
    333e:	08 95       	ret
    3340:	12 16       	cp	r1, r18
    3342:	13 06       	cpc	r1, r19
    3344:	14 06       	cpc	r1, r20
    3346:	55 1f       	adc	r21, r21
    3348:	f2 cf       	rjmp	.-28     	; 0x332e <__fp_split3+0xe>
    334a:	46 95       	lsr	r20
    334c:	f1 df       	rcall	.-30     	; 0x3330 <__fp_splitA>
    334e:	08 c0       	rjmp	.+16     	; 0x3360 <__fp_splitA+0x30>
    3350:	16 16       	cp	r1, r22
    3352:	17 06       	cpc	r1, r23
    3354:	18 06       	cpc	r1, r24
    3356:	99 1f       	adc	r25, r25
    3358:	f1 cf       	rjmp	.-30     	; 0x333c <__fp_splitA+0xc>
    335a:	86 95       	lsr	r24
    335c:	71 05       	cpc	r23, r1
    335e:	61 05       	cpc	r22, r1
    3360:	08 94       	sec
    3362:	08 95       	ret

00003364 <__fp_zero>:
    3364:	e8 94       	clt

00003366 <__fp_szero>:
    3366:	bb 27       	eor	r27, r27
    3368:	66 27       	eor	r22, r22
    336a:	77 27       	eor	r23, r23
    336c:	cb 01       	movw	r24, r22
    336e:	97 f9       	bld	r25, 7
    3370:	08 95       	ret

00003372 <__gesf2>:
    3372:	0e 94 44 19 	call	0x3288	; 0x3288 <__fp_cmp>
    3376:	08 f4       	brcc	.+2      	; 0x337a <__gesf2+0x8>
    3378:	8f ef       	ldi	r24, 0xFF	; 255
    337a:	08 95       	ret

0000337c <__mulsf3>:
    337c:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <__mulsf3x>
    3380:	0c 94 7f 19 	jmp	0x32fe	; 0x32fe <__fp_round>
    3384:	0e 94 71 19 	call	0x32e2	; 0x32e2 <__fp_pscA>
    3388:	38 f0       	brcs	.+14     	; 0x3398 <__mulsf3+0x1c>
    338a:	0e 94 78 19 	call	0x32f0	; 0x32f0 <__fp_pscB>
    338e:	20 f0       	brcs	.+8      	; 0x3398 <__mulsf3+0x1c>
    3390:	95 23       	and	r25, r21
    3392:	11 f0       	breq	.+4      	; 0x3398 <__mulsf3+0x1c>
    3394:	0c 94 68 19 	jmp	0x32d0	; 0x32d0 <__fp_inf>
    3398:	0c 94 6e 19 	jmp	0x32dc	; 0x32dc <__fp_nan>
    339c:	11 24       	eor	r1, r1
    339e:	0c 94 b3 19 	jmp	0x3366	; 0x3366 <__fp_szero>

000033a2 <__mulsf3x>:
    33a2:	0e 94 90 19 	call	0x3320	; 0x3320 <__fp_split3>
    33a6:	70 f3       	brcs	.-36     	; 0x3384 <__mulsf3+0x8>

000033a8 <__mulsf3_pse>:
    33a8:	95 9f       	mul	r25, r21
    33aa:	c1 f3       	breq	.-16     	; 0x339c <__mulsf3+0x20>
    33ac:	95 0f       	add	r25, r21
    33ae:	50 e0       	ldi	r21, 0x00	; 0
    33b0:	55 1f       	adc	r21, r21
    33b2:	62 9f       	mul	r22, r18
    33b4:	f0 01       	movw	r30, r0
    33b6:	72 9f       	mul	r23, r18
    33b8:	bb 27       	eor	r27, r27
    33ba:	f0 0d       	add	r31, r0
    33bc:	b1 1d       	adc	r27, r1
    33be:	63 9f       	mul	r22, r19
    33c0:	aa 27       	eor	r26, r26
    33c2:	f0 0d       	add	r31, r0
    33c4:	b1 1d       	adc	r27, r1
    33c6:	aa 1f       	adc	r26, r26
    33c8:	64 9f       	mul	r22, r20
    33ca:	66 27       	eor	r22, r22
    33cc:	b0 0d       	add	r27, r0
    33ce:	a1 1d       	adc	r26, r1
    33d0:	66 1f       	adc	r22, r22
    33d2:	82 9f       	mul	r24, r18
    33d4:	22 27       	eor	r18, r18
    33d6:	b0 0d       	add	r27, r0
    33d8:	a1 1d       	adc	r26, r1
    33da:	62 1f       	adc	r22, r18
    33dc:	73 9f       	mul	r23, r19
    33de:	b0 0d       	add	r27, r0
    33e0:	a1 1d       	adc	r26, r1
    33e2:	62 1f       	adc	r22, r18
    33e4:	83 9f       	mul	r24, r19
    33e6:	a0 0d       	add	r26, r0
    33e8:	61 1d       	adc	r22, r1
    33ea:	22 1f       	adc	r18, r18
    33ec:	74 9f       	mul	r23, r20
    33ee:	33 27       	eor	r19, r19
    33f0:	a0 0d       	add	r26, r0
    33f2:	61 1d       	adc	r22, r1
    33f4:	23 1f       	adc	r18, r19
    33f6:	84 9f       	mul	r24, r20
    33f8:	60 0d       	add	r22, r0
    33fa:	21 1d       	adc	r18, r1
    33fc:	82 2f       	mov	r24, r18
    33fe:	76 2f       	mov	r23, r22
    3400:	6a 2f       	mov	r22, r26
    3402:	11 24       	eor	r1, r1
    3404:	9f 57       	subi	r25, 0x7F	; 127
    3406:	50 40       	sbci	r21, 0x00	; 0
    3408:	9a f0       	brmi	.+38     	; 0x3430 <__mulsf3_pse+0x88>
    340a:	f1 f0       	breq	.+60     	; 0x3448 <__mulsf3_pse+0xa0>
    340c:	88 23       	and	r24, r24
    340e:	4a f0       	brmi	.+18     	; 0x3422 <__mulsf3_pse+0x7a>
    3410:	ee 0f       	add	r30, r30
    3412:	ff 1f       	adc	r31, r31
    3414:	bb 1f       	adc	r27, r27
    3416:	66 1f       	adc	r22, r22
    3418:	77 1f       	adc	r23, r23
    341a:	88 1f       	adc	r24, r24
    341c:	91 50       	subi	r25, 0x01	; 1
    341e:	50 40       	sbci	r21, 0x00	; 0
    3420:	a9 f7       	brne	.-22     	; 0x340c <__mulsf3_pse+0x64>
    3422:	9e 3f       	cpi	r25, 0xFE	; 254
    3424:	51 05       	cpc	r21, r1
    3426:	80 f0       	brcs	.+32     	; 0x3448 <__mulsf3_pse+0xa0>
    3428:	0c 94 68 19 	jmp	0x32d0	; 0x32d0 <__fp_inf>
    342c:	0c 94 b3 19 	jmp	0x3366	; 0x3366 <__fp_szero>
    3430:	5f 3f       	cpi	r21, 0xFF	; 255
    3432:	e4 f3       	brlt	.-8      	; 0x342c <__mulsf3_pse+0x84>
    3434:	98 3e       	cpi	r25, 0xE8	; 232
    3436:	d4 f3       	brlt	.-12     	; 0x342c <__mulsf3_pse+0x84>
    3438:	86 95       	lsr	r24
    343a:	77 95       	ror	r23
    343c:	67 95       	ror	r22
    343e:	b7 95       	ror	r27
    3440:	f7 95       	ror	r31
    3442:	e7 95       	ror	r30
    3444:	9f 5f       	subi	r25, 0xFF	; 255
    3446:	c1 f7       	brne	.-16     	; 0x3438 <__mulsf3_pse+0x90>
    3448:	fe 2b       	or	r31, r30
    344a:	88 0f       	add	r24, r24
    344c:	91 1d       	adc	r25, r1
    344e:	96 95       	lsr	r25
    3450:	87 95       	ror	r24
    3452:	97 f9       	bld	r25, 7
    3454:	08 95       	ret

00003456 <calloc>:
    3456:	0f 93       	push	r16
    3458:	1f 93       	push	r17
    345a:	cf 93       	push	r28
    345c:	df 93       	push	r29
    345e:	86 9f       	mul	r24, r22
    3460:	80 01       	movw	r16, r0
    3462:	87 9f       	mul	r24, r23
    3464:	10 0d       	add	r17, r0
    3466:	96 9f       	mul	r25, r22
    3468:	10 0d       	add	r17, r0
    346a:	11 24       	eor	r1, r1
    346c:	c8 01       	movw	r24, r16
    346e:	0e 94 47 1a 	call	0x348e	; 0x348e <malloc>
    3472:	ec 01       	movw	r28, r24
    3474:	00 97       	sbiw	r24, 0x00	; 0
    3476:	29 f0       	breq	.+10     	; 0x3482 <calloc+0x2c>
    3478:	a8 01       	movw	r20, r16
    347a:	60 e0       	ldi	r22, 0x00	; 0
    347c:	70 e0       	ldi	r23, 0x00	; 0
    347e:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <memset>
    3482:	ce 01       	movw	r24, r28
    3484:	df 91       	pop	r29
    3486:	cf 91       	pop	r28
    3488:	1f 91       	pop	r17
    348a:	0f 91       	pop	r16
    348c:	08 95       	ret

0000348e <malloc>:
    348e:	cf 93       	push	r28
    3490:	df 93       	push	r29
    3492:	82 30       	cpi	r24, 0x02	; 2
    3494:	91 05       	cpc	r25, r1
    3496:	10 f4       	brcc	.+4      	; 0x349c <malloc+0xe>
    3498:	82 e0       	ldi	r24, 0x02	; 2
    349a:	90 e0       	ldi	r25, 0x00	; 0
    349c:	e0 91 90 02 	lds	r30, 0x0290
    34a0:	f0 91 91 02 	lds	r31, 0x0291
    34a4:	20 e0       	ldi	r18, 0x00	; 0
    34a6:	30 e0       	ldi	r19, 0x00	; 0
    34a8:	c0 e0       	ldi	r28, 0x00	; 0
    34aa:	d0 e0       	ldi	r29, 0x00	; 0
    34ac:	30 97       	sbiw	r30, 0x00	; 0
    34ae:	11 f1       	breq	.+68     	; 0x34f4 <malloc+0x66>
    34b0:	40 81       	ld	r20, Z
    34b2:	51 81       	ldd	r21, Z+1	; 0x01
    34b4:	48 17       	cp	r20, r24
    34b6:	59 07       	cpc	r21, r25
    34b8:	c0 f0       	brcs	.+48     	; 0x34ea <malloc+0x5c>
    34ba:	48 17       	cp	r20, r24
    34bc:	59 07       	cpc	r21, r25
    34be:	61 f4       	brne	.+24     	; 0x34d8 <malloc+0x4a>
    34c0:	82 81       	ldd	r24, Z+2	; 0x02
    34c2:	93 81       	ldd	r25, Z+3	; 0x03
    34c4:	20 97       	sbiw	r28, 0x00	; 0
    34c6:	19 f0       	breq	.+6      	; 0x34ce <malloc+0x40>
    34c8:	9b 83       	std	Y+3, r25	; 0x03
    34ca:	8a 83       	std	Y+2, r24	; 0x02
    34cc:	2b c0       	rjmp	.+86     	; 0x3524 <malloc+0x96>
    34ce:	90 93 91 02 	sts	0x0291, r25
    34d2:	80 93 90 02 	sts	0x0290, r24
    34d6:	26 c0       	rjmp	.+76     	; 0x3524 <malloc+0x96>
    34d8:	21 15       	cp	r18, r1
    34da:	31 05       	cpc	r19, r1
    34dc:	19 f0       	breq	.+6      	; 0x34e4 <malloc+0x56>
    34de:	42 17       	cp	r20, r18
    34e0:	53 07       	cpc	r21, r19
    34e2:	18 f4       	brcc	.+6      	; 0x34ea <malloc+0x5c>
    34e4:	9a 01       	movw	r18, r20
    34e6:	be 01       	movw	r22, r28
    34e8:	df 01       	movw	r26, r30
    34ea:	ef 01       	movw	r28, r30
    34ec:	02 80       	ldd	r0, Z+2	; 0x02
    34ee:	f3 81       	ldd	r31, Z+3	; 0x03
    34f0:	e0 2d       	mov	r30, r0
    34f2:	dc cf       	rjmp	.-72     	; 0x34ac <malloc+0x1e>
    34f4:	21 15       	cp	r18, r1
    34f6:	31 05       	cpc	r19, r1
    34f8:	09 f1       	breq	.+66     	; 0x353c <malloc+0xae>
    34fa:	28 1b       	sub	r18, r24
    34fc:	39 0b       	sbc	r19, r25
    34fe:	24 30       	cpi	r18, 0x04	; 4
    3500:	31 05       	cpc	r19, r1
    3502:	90 f4       	brcc	.+36     	; 0x3528 <malloc+0x9a>
    3504:	12 96       	adiw	r26, 0x02	; 2
    3506:	8d 91       	ld	r24, X+
    3508:	9c 91       	ld	r25, X
    350a:	13 97       	sbiw	r26, 0x03	; 3
    350c:	61 15       	cp	r22, r1
    350e:	71 05       	cpc	r23, r1
    3510:	21 f0       	breq	.+8      	; 0x351a <malloc+0x8c>
    3512:	fb 01       	movw	r30, r22
    3514:	93 83       	std	Z+3, r25	; 0x03
    3516:	82 83       	std	Z+2, r24	; 0x02
    3518:	04 c0       	rjmp	.+8      	; 0x3522 <malloc+0x94>
    351a:	90 93 91 02 	sts	0x0291, r25
    351e:	80 93 90 02 	sts	0x0290, r24
    3522:	fd 01       	movw	r30, r26
    3524:	32 96       	adiw	r30, 0x02	; 2
    3526:	44 c0       	rjmp	.+136    	; 0x35b0 <malloc+0x122>
    3528:	fd 01       	movw	r30, r26
    352a:	e2 0f       	add	r30, r18
    352c:	f3 1f       	adc	r31, r19
    352e:	81 93       	st	Z+, r24
    3530:	91 93       	st	Z+, r25
    3532:	22 50       	subi	r18, 0x02	; 2
    3534:	31 09       	sbc	r19, r1
    3536:	2d 93       	st	X+, r18
    3538:	3c 93       	st	X, r19
    353a:	3a c0       	rjmp	.+116    	; 0x35b0 <malloc+0x122>
    353c:	20 91 8e 02 	lds	r18, 0x028E
    3540:	30 91 8f 02 	lds	r19, 0x028F
    3544:	23 2b       	or	r18, r19
    3546:	41 f4       	brne	.+16     	; 0x3558 <malloc+0xca>
    3548:	20 91 02 01 	lds	r18, 0x0102
    354c:	30 91 03 01 	lds	r19, 0x0103
    3550:	30 93 8f 02 	sts	0x028F, r19
    3554:	20 93 8e 02 	sts	0x028E, r18
    3558:	20 91 00 01 	lds	r18, 0x0100
    355c:	30 91 01 01 	lds	r19, 0x0101
    3560:	21 15       	cp	r18, r1
    3562:	31 05       	cpc	r19, r1
    3564:	41 f4       	brne	.+16     	; 0x3576 <malloc+0xe8>
    3566:	2d b7       	in	r18, 0x3d	; 61
    3568:	3e b7       	in	r19, 0x3e	; 62
    356a:	40 91 04 01 	lds	r20, 0x0104
    356e:	50 91 05 01 	lds	r21, 0x0105
    3572:	24 1b       	sub	r18, r20
    3574:	35 0b       	sbc	r19, r21
    3576:	e0 91 8e 02 	lds	r30, 0x028E
    357a:	f0 91 8f 02 	lds	r31, 0x028F
    357e:	e2 17       	cp	r30, r18
    3580:	f3 07       	cpc	r31, r19
    3582:	a0 f4       	brcc	.+40     	; 0x35ac <malloc+0x11e>
    3584:	2e 1b       	sub	r18, r30
    3586:	3f 0b       	sbc	r19, r31
    3588:	28 17       	cp	r18, r24
    358a:	39 07       	cpc	r19, r25
    358c:	78 f0       	brcs	.+30     	; 0x35ac <malloc+0x11e>
    358e:	ac 01       	movw	r20, r24
    3590:	4e 5f       	subi	r20, 0xFE	; 254
    3592:	5f 4f       	sbci	r21, 0xFF	; 255
    3594:	24 17       	cp	r18, r20
    3596:	35 07       	cpc	r19, r21
    3598:	48 f0       	brcs	.+18     	; 0x35ac <malloc+0x11e>
    359a:	4e 0f       	add	r20, r30
    359c:	5f 1f       	adc	r21, r31
    359e:	50 93 8f 02 	sts	0x028F, r21
    35a2:	40 93 8e 02 	sts	0x028E, r20
    35a6:	81 93       	st	Z+, r24
    35a8:	91 93       	st	Z+, r25
    35aa:	02 c0       	rjmp	.+4      	; 0x35b0 <malloc+0x122>
    35ac:	e0 e0       	ldi	r30, 0x00	; 0
    35ae:	f0 e0       	ldi	r31, 0x00	; 0
    35b0:	cf 01       	movw	r24, r30
    35b2:	df 91       	pop	r29
    35b4:	cf 91       	pop	r28
    35b6:	08 95       	ret

000035b8 <free>:
    35b8:	0f 93       	push	r16
    35ba:	1f 93       	push	r17
    35bc:	cf 93       	push	r28
    35be:	df 93       	push	r29
    35c0:	00 97       	sbiw	r24, 0x00	; 0
    35c2:	09 f4       	brne	.+2      	; 0x35c6 <free+0xe>
    35c4:	8c c0       	rjmp	.+280    	; 0x36de <free+0x126>
    35c6:	fc 01       	movw	r30, r24
    35c8:	32 97       	sbiw	r30, 0x02	; 2
    35ca:	13 82       	std	Z+3, r1	; 0x03
    35cc:	12 82       	std	Z+2, r1	; 0x02
    35ce:	00 91 90 02 	lds	r16, 0x0290
    35d2:	10 91 91 02 	lds	r17, 0x0291
    35d6:	01 15       	cp	r16, r1
    35d8:	11 05       	cpc	r17, r1
    35da:	81 f4       	brne	.+32     	; 0x35fc <free+0x44>
    35dc:	20 81       	ld	r18, Z
    35de:	31 81       	ldd	r19, Z+1	; 0x01
    35e0:	82 0f       	add	r24, r18
    35e2:	93 1f       	adc	r25, r19
    35e4:	20 91 8e 02 	lds	r18, 0x028E
    35e8:	30 91 8f 02 	lds	r19, 0x028F
    35ec:	28 17       	cp	r18, r24
    35ee:	39 07       	cpc	r19, r25
    35f0:	79 f5       	brne	.+94     	; 0x3650 <free+0x98>
    35f2:	f0 93 8f 02 	sts	0x028F, r31
    35f6:	e0 93 8e 02 	sts	0x028E, r30
    35fa:	71 c0       	rjmp	.+226    	; 0x36de <free+0x126>
    35fc:	d8 01       	movw	r26, r16
    35fe:	40 e0       	ldi	r20, 0x00	; 0
    3600:	50 e0       	ldi	r21, 0x00	; 0
    3602:	ae 17       	cp	r26, r30
    3604:	bf 07       	cpc	r27, r31
    3606:	50 f4       	brcc	.+20     	; 0x361c <free+0x64>
    3608:	12 96       	adiw	r26, 0x02	; 2
    360a:	2d 91       	ld	r18, X+
    360c:	3c 91       	ld	r19, X
    360e:	13 97       	sbiw	r26, 0x03	; 3
    3610:	ad 01       	movw	r20, r26
    3612:	21 15       	cp	r18, r1
    3614:	31 05       	cpc	r19, r1
    3616:	09 f1       	breq	.+66     	; 0x365a <free+0xa2>
    3618:	d9 01       	movw	r26, r18
    361a:	f3 cf       	rjmp	.-26     	; 0x3602 <free+0x4a>
    361c:	9d 01       	movw	r18, r26
    361e:	da 01       	movw	r26, r20
    3620:	33 83       	std	Z+3, r19	; 0x03
    3622:	22 83       	std	Z+2, r18	; 0x02
    3624:	60 81       	ld	r22, Z
    3626:	71 81       	ldd	r23, Z+1	; 0x01
    3628:	86 0f       	add	r24, r22
    362a:	97 1f       	adc	r25, r23
    362c:	82 17       	cp	r24, r18
    362e:	93 07       	cpc	r25, r19
    3630:	69 f4       	brne	.+26     	; 0x364c <free+0x94>
    3632:	ec 01       	movw	r28, r24
    3634:	28 81       	ld	r18, Y
    3636:	39 81       	ldd	r19, Y+1	; 0x01
    3638:	26 0f       	add	r18, r22
    363a:	37 1f       	adc	r19, r23
    363c:	2e 5f       	subi	r18, 0xFE	; 254
    363e:	3f 4f       	sbci	r19, 0xFF	; 255
    3640:	31 83       	std	Z+1, r19	; 0x01
    3642:	20 83       	st	Z, r18
    3644:	8a 81       	ldd	r24, Y+2	; 0x02
    3646:	9b 81       	ldd	r25, Y+3	; 0x03
    3648:	93 83       	std	Z+3, r25	; 0x03
    364a:	82 83       	std	Z+2, r24	; 0x02
    364c:	45 2b       	or	r20, r21
    364e:	29 f4       	brne	.+10     	; 0x365a <free+0xa2>
    3650:	f0 93 91 02 	sts	0x0291, r31
    3654:	e0 93 90 02 	sts	0x0290, r30
    3658:	42 c0       	rjmp	.+132    	; 0x36de <free+0x126>
    365a:	13 96       	adiw	r26, 0x03	; 3
    365c:	fc 93       	st	X, r31
    365e:	ee 93       	st	-X, r30
    3660:	12 97       	sbiw	r26, 0x02	; 2
    3662:	ed 01       	movw	r28, r26
    3664:	49 91       	ld	r20, Y+
    3666:	59 91       	ld	r21, Y+
    3668:	9e 01       	movw	r18, r28
    366a:	24 0f       	add	r18, r20
    366c:	35 1f       	adc	r19, r21
    366e:	e2 17       	cp	r30, r18
    3670:	f3 07       	cpc	r31, r19
    3672:	71 f4       	brne	.+28     	; 0x3690 <free+0xd8>
    3674:	80 81       	ld	r24, Z
    3676:	91 81       	ldd	r25, Z+1	; 0x01
    3678:	84 0f       	add	r24, r20
    367a:	95 1f       	adc	r25, r21
    367c:	02 96       	adiw	r24, 0x02	; 2
    367e:	11 96       	adiw	r26, 0x01	; 1
    3680:	9c 93       	st	X, r25
    3682:	8e 93       	st	-X, r24
    3684:	82 81       	ldd	r24, Z+2	; 0x02
    3686:	93 81       	ldd	r25, Z+3	; 0x03
    3688:	13 96       	adiw	r26, 0x03	; 3
    368a:	9c 93       	st	X, r25
    368c:	8e 93       	st	-X, r24
    368e:	12 97       	sbiw	r26, 0x02	; 2
    3690:	e0 e0       	ldi	r30, 0x00	; 0
    3692:	f0 e0       	ldi	r31, 0x00	; 0
    3694:	d8 01       	movw	r26, r16
    3696:	12 96       	adiw	r26, 0x02	; 2
    3698:	8d 91       	ld	r24, X+
    369a:	9c 91       	ld	r25, X
    369c:	13 97       	sbiw	r26, 0x03	; 3
    369e:	00 97       	sbiw	r24, 0x00	; 0
    36a0:	19 f0       	breq	.+6      	; 0x36a8 <free+0xf0>
    36a2:	f8 01       	movw	r30, r16
    36a4:	8c 01       	movw	r16, r24
    36a6:	f6 cf       	rjmp	.-20     	; 0x3694 <free+0xdc>
    36a8:	8d 91       	ld	r24, X+
    36aa:	9c 91       	ld	r25, X
    36ac:	98 01       	movw	r18, r16
    36ae:	2e 5f       	subi	r18, 0xFE	; 254
    36b0:	3f 4f       	sbci	r19, 0xFF	; 255
    36b2:	82 0f       	add	r24, r18
    36b4:	93 1f       	adc	r25, r19
    36b6:	20 91 8e 02 	lds	r18, 0x028E
    36ba:	30 91 8f 02 	lds	r19, 0x028F
    36be:	28 17       	cp	r18, r24
    36c0:	39 07       	cpc	r19, r25
    36c2:	69 f4       	brne	.+26     	; 0x36de <free+0x126>
    36c4:	30 97       	sbiw	r30, 0x00	; 0
    36c6:	29 f4       	brne	.+10     	; 0x36d2 <free+0x11a>
    36c8:	10 92 91 02 	sts	0x0291, r1
    36cc:	10 92 90 02 	sts	0x0290, r1
    36d0:	02 c0       	rjmp	.+4      	; 0x36d6 <free+0x11e>
    36d2:	13 82       	std	Z+3, r1	; 0x03
    36d4:	12 82       	std	Z+2, r1	; 0x02
    36d6:	10 93 8f 02 	sts	0x028F, r17
    36da:	00 93 8e 02 	sts	0x028E, r16
    36de:	df 91       	pop	r29
    36e0:	cf 91       	pop	r28
    36e2:	1f 91       	pop	r17
    36e4:	0f 91       	pop	r16
    36e6:	08 95       	ret

000036e8 <memset>:
    36e8:	dc 01       	movw	r26, r24
    36ea:	01 c0       	rjmp	.+2      	; 0x36ee <memset+0x6>
    36ec:	6d 93       	st	X+, r22
    36ee:	41 50       	subi	r20, 0x01	; 1
    36f0:	50 40       	sbci	r21, 0x00	; 0
    36f2:	e0 f7       	brcc	.-8      	; 0x36ec <memset+0x4>
    36f4:	08 95       	ret

000036f6 <_exit>:
    36f6:	f8 94       	cli

000036f8 <__stop_program>:
    36f8:	ff cf       	rjmp	.-2      	; 0x36f8 <__stop_program>
