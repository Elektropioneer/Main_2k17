
Back2Reality.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  000040f6  0000418a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000040f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000160  0080013e  0080013e  000041c8  2**0
                  ALLOC
  3 .stab         0000582c  00000000  00000000  000041c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001fa0  00000000  00000000  000099f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000b994  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000b9a8  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
       4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      28:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__vector_10>
      2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      30:	0c 94 f7 15 	jmp	0x2bee	; 0x2bee <__vector_12>
      34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      48:	0c 94 ab 09 	jmp	0x1356	; 0x1356 <__vector_18>
      4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      54:	0c 94 1e 19 	jmp	0x323c	; 0x323c <__vector_21>
      58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      5c:	0c 94 8e 18 	jmp	0x311c	; 0x311c <__vector_23>
      60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      68:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      6c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      70:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      74:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      78:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      7c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      80:	0c 94 73 1a 	jmp	0x34e6	; 0x34e6 <__vector_32>
      84:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      88:	0c 94 31 1a 	jmp	0x3462	; 0x3462 <__vector_34>
      8c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      90:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	e6 ef       	ldi	r30, 0xF6	; 246
      a8:	f0 e4       	ldi	r31, 0x40	; 64
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	ae 33       	cpi	r26, 0x3E	; 62
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	22 e0       	ldi	r18, 0x02	; 2
      bc:	ae e3       	ldi	r26, 0x3E	; 62
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	ae 39       	cpi	r26, 0x9E	; 158
      c6:	b2 07       	cpc	r27, r18
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	0e 94 24 1c 	call	0x3848	; 0x3848 <main>
      ce:	0c 94 79 20 	jmp	0x40f2	; 0x40f2 <_exit>

000000d2 <__bad_interrupt>:
      d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <__vector_10>:
volatile uint32_t dist_overflow_counter = 0;
volatile uint32_t dist_trig_counter		= 0;
volatile uint32_t dist_num_of_ticks		= 0;

ISR(TIMER2_OVF_vect)
{
      d6:	1f 92       	push	r1
      d8:	0f 92       	push	r0
      da:	00 90 5f 00 	lds	r0, 0x005F
      de:	0f 92       	push	r0
      e0:	11 24       	eor	r1, r1
      e2:	00 90 5b 00 	lds	r0, 0x005B
      e6:	0f 92       	push	r0
      e8:	8f 93       	push	r24
      ea:	9f 93       	push	r25
      ec:	af 93       	push	r26
      ee:	bf 93       	push	r27
      f0:	ef 93       	push	r30
      f2:	ff 93       	push	r31
      f4:	cf 93       	push	r28
      f6:	df 93       	push	r29
      f8:	cd b7       	in	r28, 0x3d	; 61
      fa:	de b7       	in	r29, 0x3e	; 62
	dist_overflow_counter++;
      fc:	80 91 3e 01 	lds	r24, 0x013E
     100:	90 91 3f 01 	lds	r25, 0x013F
     104:	a0 91 40 01 	lds	r26, 0x0140
     108:	b0 91 41 01 	lds	r27, 0x0141
     10c:	01 96       	adiw	r24, 0x01	; 1
     10e:	a1 1d       	adc	r26, r1
     110:	b1 1d       	adc	r27, r1
     112:	80 93 3e 01 	sts	0x013E, r24
     116:	90 93 3f 01 	sts	0x013F, r25
     11a:	a0 93 40 01 	sts	0x0140, r26
     11e:	b0 93 41 01 	sts	0x0141, r27
	TCNT2 = 0;
     122:	82 eb       	ldi	r24, 0xB2	; 178
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	fc 01       	movw	r30, r24
     128:	10 82       	st	Z, r1
}
     12a:	df 91       	pop	r29
     12c:	cf 91       	pop	r28
     12e:	ff 91       	pop	r31
     130:	ef 91       	pop	r30
     132:	bf 91       	pop	r27
     134:	af 91       	pop	r26
     136:	9f 91       	pop	r25
     138:	8f 91       	pop	r24
     13a:	0f 90       	pop	r0
     13c:	00 92 5b 00 	sts	0x005B, r0
     140:	0f 90       	pop	r0
     142:	00 92 5f 00 	sts	0x005F, r0
     146:	0f 90       	pop	r0
     148:	1f 90       	pop	r1
     14a:	18 95       	reti

0000014c <servo_init>:
 *	Function: 		void servo_init(unsigned int f_pwm)
 *	Parameters: 	unsigned int f_pwm
 *	Description: 	servo init
 */
void servo_init(unsigned int f_pwm)
{
     14c:	0f 93       	push	r16
     14e:	1f 93       	push	r17
     150:	cf 93       	push	r28
     152:	df 93       	push	r29
     154:	00 d0       	rcall	.+0      	; 0x156 <servo_init+0xa>
     156:	cd b7       	in	r28, 0x3d	; 61
     158:	de b7       	in	r29, 0x3e	; 62
     15a:	9a 83       	std	Y+2, r25	; 0x02
     15c:	89 83       	std	Y+1, r24	; 0x01
	DDRE |= ((1 << PINE3) | (1 << PINE4) | (1 << PINE5));
     15e:	8d e2       	ldi	r24, 0x2D	; 45
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	2d e2       	ldi	r18, 0x2D	; 45
     164:	30 e0       	ldi	r19, 0x00	; 0
     166:	f9 01       	movw	r30, r18
     168:	20 81       	ld	r18, Z
     16a:	28 63       	ori	r18, 0x38	; 56
     16c:	fc 01       	movw	r30, r24
     16e:	20 83       	st	Z, r18
	DDRB |= (1 << PINB7);										//OCR0A 8bit
     170:	84 e2       	ldi	r24, 0x24	; 36
     172:	90 e0       	ldi	r25, 0x00	; 0
     174:	24 e2       	ldi	r18, 0x24	; 36
     176:	30 e0       	ldi	r19, 0x00	; 0
     178:	f9 01       	movw	r30, r18
     17a:	20 81       	ld	r18, Z
     17c:	20 68       	ori	r18, 0x80	; 128
     17e:	fc 01       	movw	r30, r24
     180:	20 83       	st	Z, r18
	
	TCNT3 = 0;
     182:	84 e9       	ldi	r24, 0x94	; 148
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	fc 01       	movw	r30, r24
     188:	11 82       	std	Z+1, r1	; 0x01
     18a:	10 82       	st	Z, r1
	TCNT0 = 0;
     18c:	86 e4       	ldi	r24, 0x46	; 70
     18e:	90 e0       	ldi	r25, 0x00	; 0
     190:	fc 01       	movw	r30, r24
     192:	10 82       	st	Z, r1

	OCR3A = 0;
     194:	88 e9       	ldi	r24, 0x98	; 152
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	fc 01       	movw	r30, r24
     19a:	11 82       	std	Z+1, r1	; 0x01
     19c:	10 82       	st	Z, r1
	OCR3B = 0;
     19e:	8a e9       	ldi	r24, 0x9A	; 154
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	fc 01       	movw	r30, r24
     1a4:	11 82       	std	Z+1, r1	; 0x01
     1a6:	10 82       	st	Z, r1
	OCR3C = 0;
     1a8:	8c e9       	ldi	r24, 0x9C	; 156
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	fc 01       	movw	r30, r24
     1ae:	11 82       	std	Z+1, r1	; 0x01
     1b0:	10 82       	st	Z, r1

	TCCR3A = (1 << COM3A1)  | (1 << COM3B1) | (1 << COM3B0) | (1 << COM3C1) | (1 << COM3C0) | (1 << WGM31);
     1b2:	80 e9       	ldi	r24, 0x90	; 144
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	2e eb       	ldi	r18, 0xBE	; 190
     1b8:	fc 01       	movw	r30, r24
     1ba:	20 83       	st	Z, r18
	TCCR3B = (1<< CS31) | (1 << WGM32) | (1 << WGM33) ; 		// PRESKALER = 8
     1bc:	81 e9       	ldi	r24, 0x91	; 145
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	2a e1       	ldi	r18, 0x1A	; 26
     1c2:	fc 01       	movw	r30, r24
     1c4:	20 83       	st	Z, r18
	
	//8bit timer
	TCCR0A = (1 << WGM01) | (1 << WGM00) | (1 << COM0A1) | (1 << CS01) | (1 << CS00);
     1c6:	84 e4       	ldi	r24, 0x44	; 68
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	2b e6       	ldi	r18, 0x6B	; 107
     1cc:	fc 01       	movw	r30, r24
     1ce:	20 83       	st	Z, r18

	ICR3   = ((double)F_CPU) / (8.0 * f_pwm) + 0.5;
     1d0:	06 e9       	ldi	r16, 0x96	; 150
     1d2:	10 e0       	ldi	r17, 0x00	; 0
     1d4:	89 81       	ldd	r24, Y+1	; 0x01
     1d6:	9a 81       	ldd	r25, Y+2	; 0x02
     1d8:	cc 01       	movw	r24, r24
     1da:	a0 e0       	ldi	r26, 0x00	; 0
     1dc:	b0 e0       	ldi	r27, 0x00	; 0
     1de:	bc 01       	movw	r22, r24
     1e0:	cd 01       	movw	r24, r26
     1e2:	0e 94 05 1e 	call	0x3c0a	; 0x3c0a <__floatunsisf>
     1e6:	dc 01       	movw	r26, r24
     1e8:	cb 01       	movw	r24, r22
     1ea:	20 e0       	ldi	r18, 0x00	; 0
     1ec:	30 e0       	ldi	r19, 0x00	; 0
     1ee:	40 e0       	ldi	r20, 0x00	; 0
     1f0:	51 e4       	ldi	r21, 0x41	; 65
     1f2:	bc 01       	movw	r22, r24
     1f4:	cd 01       	movw	r24, r26
     1f6:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <__mulsf3>
     1fa:	dc 01       	movw	r26, r24
     1fc:	cb 01       	movw	r24, r22
     1fe:	9c 01       	movw	r18, r24
     200:	ad 01       	movw	r20, r26
     202:	60 e8       	ldi	r22, 0x80	; 128
     204:	76 e9       	ldi	r23, 0x96	; 150
     206:	88 e1       	ldi	r24, 0x18	; 24
     208:	9b e4       	ldi	r25, 0x4B	; 75
     20a:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <__divsf3>
     20e:	dc 01       	movw	r26, r24
     210:	cb 01       	movw	r24, r22
     212:	20 e0       	ldi	r18, 0x00	; 0
     214:	30 e0       	ldi	r19, 0x00	; 0
     216:	40 e0       	ldi	r20, 0x00	; 0
     218:	5f e3       	ldi	r21, 0x3F	; 63
     21a:	bc 01       	movw	r22, r24
     21c:	cd 01       	movw	r24, r26
     21e:	0e 94 ec 1c 	call	0x39d8	; 0x39d8 <__addsf3>
     222:	dc 01       	movw	r26, r24
     224:	cb 01       	movw	r24, r22
     226:	bc 01       	movw	r22, r24
     228:	cd 01       	movw	r24, r26
     22a:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <__fixunssfsi>
     22e:	dc 01       	movw	r26, r24
     230:	cb 01       	movw	r24, r22
     232:	f8 01       	movw	r30, r16
     234:	91 83       	std	Z+1, r25	; 0x01
     236:	80 83       	st	Z, r24
}
     238:	0f 90       	pop	r0
     23a:	0f 90       	pop	r0
     23c:	df 91       	pop	r29
     23e:	cf 91       	pop	r28
     240:	1f 91       	pop	r17
     242:	0f 91       	pop	r16
     244:	08 95       	ret

00000246 <servo_set_duty_cycle_one>:
 *	Parameters: 	int16_t value - the pwm value
 *	Description: 	duty cycle for servos
 *	Pin:			PE3, PE4, PE5
 */
static void servo_set_duty_cycle_one(int16_t value)
{
     246:	cf 92       	push	r12
     248:	df 92       	push	r13
     24a:	ef 92       	push	r14
     24c:	ff 92       	push	r15
     24e:	cf 93       	push	r28
     250:	df 93       	push	r29
     252:	00 d0       	rcall	.+0      	; 0x254 <servo_set_duty_cycle_one+0xe>
     254:	00 d0       	rcall	.+0      	; 0x256 <servo_set_duty_cycle_one+0x10>
     256:	cd b7       	in	r28, 0x3d	; 61
     258:	de b7       	in	r29, 0x3e	; 62
     25a:	9c 83       	std	Y+4, r25	; 0x04
     25c:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     25e:	86 e9       	ldi	r24, 0x96	; 150
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	fc 01       	movw	r30, r24
     264:	80 81       	ld	r24, Z
     266:	91 81       	ldd	r25, Z+1	; 0x01
     268:	cc 01       	movw	r24, r24
     26a:	a0 e0       	ldi	r26, 0x00	; 0
     26c:	b0 e0       	ldi	r27, 0x00	; 0
     26e:	bc 01       	movw	r22, r24
     270:	cd 01       	movw	r24, r26
     272:	0e 94 05 1e 	call	0x3c0a	; 0x3c0a <__floatunsisf>
     276:	dc 01       	movw	r26, r24
     278:	cb 01       	movw	r24, r22
     27a:	20 e0       	ldi	r18, 0x00	; 0
     27c:	30 e0       	ldi	r19, 0x00	; 0
     27e:	4f e7       	ldi	r20, 0x7F	; 127
     280:	53 e4       	ldi	r21, 0x43	; 67
     282:	bc 01       	movw	r22, r24
     284:	cd 01       	movw	r24, r26
     286:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <__divsf3>
     28a:	dc 01       	movw	r26, r24
     28c:	cb 01       	movw	r24, r22
     28e:	6c 01       	movw	r12, r24
     290:	7d 01       	movw	r14, r26
     292:	8b 81       	ldd	r24, Y+3	; 0x03
     294:	9c 81       	ldd	r25, Y+4	; 0x04
     296:	09 2e       	mov	r0, r25
     298:	00 0c       	add	r0, r0
     29a:	aa 0b       	sbc	r26, r26
     29c:	bb 0b       	sbc	r27, r27
     29e:	bc 01       	movw	r22, r24
     2a0:	cd 01       	movw	r24, r26
     2a2:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <__floatsisf>
     2a6:	dc 01       	movw	r26, r24
     2a8:	cb 01       	movw	r24, r22
     2aa:	9c 01       	movw	r18, r24
     2ac:	ad 01       	movw	r20, r26
     2ae:	c7 01       	movw	r24, r14
     2b0:	b6 01       	movw	r22, r12
     2b2:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <__mulsf3>
     2b6:	dc 01       	movw	r26, r24
     2b8:	cb 01       	movw	r24, r22
     2ba:	20 e0       	ldi	r18, 0x00	; 0
     2bc:	30 e0       	ldi	r19, 0x00	; 0
     2be:	40 e0       	ldi	r20, 0x00	; 0
     2c0:	5f e3       	ldi	r21, 0x3F	; 63
     2c2:	bc 01       	movw	r22, r24
     2c4:	cd 01       	movw	r24, r26
     2c6:	0e 94 ec 1c 	call	0x39d8	; 0x39d8 <__addsf3>
     2ca:	dc 01       	movw	r26, r24
     2cc:	cb 01       	movw	r24, r22
     2ce:	bc 01       	movw	r22, r24
     2d0:	cd 01       	movw	r24, r26
     2d2:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <__fixunssfsi>
     2d6:	dc 01       	movw	r26, r24
     2d8:	cb 01       	movw	r24, r22
     2da:	9a 83       	std	Y+2, r25	; 0x02
     2dc:	89 83       	std	Y+1, r24	; 0x01
	OCR3AH = temp >> 8;
     2de:	89 e9       	ldi	r24, 0x99	; 153
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	29 81       	ldd	r18, Y+1	; 0x01
     2e4:	3a 81       	ldd	r19, Y+2	; 0x02
     2e6:	23 2f       	mov	r18, r19
     2e8:	33 27       	eor	r19, r19
     2ea:	fc 01       	movw	r30, r24
     2ec:	20 83       	st	Z, r18
	OCR3AL = temp & 0xFF;
     2ee:	88 e9       	ldi	r24, 0x98	; 152
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	29 81       	ldd	r18, Y+1	; 0x01
     2f4:	fc 01       	movw	r30, r24
     2f6:	20 83       	st	Z, r18
}
     2f8:	0f 90       	pop	r0
     2fa:	0f 90       	pop	r0
     2fc:	0f 90       	pop	r0
     2fe:	0f 90       	pop	r0
     300:	df 91       	pop	r29
     302:	cf 91       	pop	r28
     304:	ff 90       	pop	r15
     306:	ef 90       	pop	r14
     308:	df 90       	pop	r13
     30a:	cf 90       	pop	r12
     30c:	08 95       	ret

0000030e <servo_set_duty_cycle_two>:
static void servo_set_duty_cycle_two(int16_t value)
{
     30e:	cf 92       	push	r12
     310:	df 92       	push	r13
     312:	ef 92       	push	r14
     314:	ff 92       	push	r15
     316:	cf 93       	push	r28
     318:	df 93       	push	r29
     31a:	00 d0       	rcall	.+0      	; 0x31c <servo_set_duty_cycle_two+0xe>
     31c:	00 d0       	rcall	.+0      	; 0x31e <servo_set_duty_cycle_two+0x10>
     31e:	cd b7       	in	r28, 0x3d	; 61
     320:	de b7       	in	r29, 0x3e	; 62
     322:	9c 83       	std	Y+4, r25	; 0x04
     324:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     326:	86 e9       	ldi	r24, 0x96	; 150
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	fc 01       	movw	r30, r24
     32c:	80 81       	ld	r24, Z
     32e:	91 81       	ldd	r25, Z+1	; 0x01
     330:	cc 01       	movw	r24, r24
     332:	a0 e0       	ldi	r26, 0x00	; 0
     334:	b0 e0       	ldi	r27, 0x00	; 0
     336:	bc 01       	movw	r22, r24
     338:	cd 01       	movw	r24, r26
     33a:	0e 94 05 1e 	call	0x3c0a	; 0x3c0a <__floatunsisf>
     33e:	dc 01       	movw	r26, r24
     340:	cb 01       	movw	r24, r22
     342:	20 e0       	ldi	r18, 0x00	; 0
     344:	30 e0       	ldi	r19, 0x00	; 0
     346:	4f e7       	ldi	r20, 0x7F	; 127
     348:	53 e4       	ldi	r21, 0x43	; 67
     34a:	bc 01       	movw	r22, r24
     34c:	cd 01       	movw	r24, r26
     34e:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <__divsf3>
     352:	dc 01       	movw	r26, r24
     354:	cb 01       	movw	r24, r22
     356:	6c 01       	movw	r12, r24
     358:	7d 01       	movw	r14, r26
     35a:	8b 81       	ldd	r24, Y+3	; 0x03
     35c:	9c 81       	ldd	r25, Y+4	; 0x04
     35e:	09 2e       	mov	r0, r25
     360:	00 0c       	add	r0, r0
     362:	aa 0b       	sbc	r26, r26
     364:	bb 0b       	sbc	r27, r27
     366:	bc 01       	movw	r22, r24
     368:	cd 01       	movw	r24, r26
     36a:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <__floatsisf>
     36e:	dc 01       	movw	r26, r24
     370:	cb 01       	movw	r24, r22
     372:	9c 01       	movw	r18, r24
     374:	ad 01       	movw	r20, r26
     376:	c7 01       	movw	r24, r14
     378:	b6 01       	movw	r22, r12
     37a:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <__mulsf3>
     37e:	dc 01       	movw	r26, r24
     380:	cb 01       	movw	r24, r22
     382:	20 e0       	ldi	r18, 0x00	; 0
     384:	30 e0       	ldi	r19, 0x00	; 0
     386:	40 e0       	ldi	r20, 0x00	; 0
     388:	5f e3       	ldi	r21, 0x3F	; 63
     38a:	bc 01       	movw	r22, r24
     38c:	cd 01       	movw	r24, r26
     38e:	0e 94 ec 1c 	call	0x39d8	; 0x39d8 <__addsf3>
     392:	dc 01       	movw	r26, r24
     394:	cb 01       	movw	r24, r22
     396:	bc 01       	movw	r22, r24
     398:	cd 01       	movw	r24, r26
     39a:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <__fixunssfsi>
     39e:	dc 01       	movw	r26, r24
     3a0:	cb 01       	movw	r24, r22
     3a2:	9a 83       	std	Y+2, r25	; 0x02
     3a4:	89 83       	std	Y+1, r24	; 0x01
	OCR3BH = temp >> 8;
     3a6:	8b e9       	ldi	r24, 0x9B	; 155
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	29 81       	ldd	r18, Y+1	; 0x01
     3ac:	3a 81       	ldd	r19, Y+2	; 0x02
     3ae:	23 2f       	mov	r18, r19
     3b0:	33 27       	eor	r19, r19
     3b2:	fc 01       	movw	r30, r24
     3b4:	20 83       	st	Z, r18
	OCR3BL = temp & 0xFF;
     3b6:	8a e9       	ldi	r24, 0x9A	; 154
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	29 81       	ldd	r18, Y+1	; 0x01
     3bc:	fc 01       	movw	r30, r24
     3be:	20 83       	st	Z, r18
}
     3c0:	0f 90       	pop	r0
     3c2:	0f 90       	pop	r0
     3c4:	0f 90       	pop	r0
     3c6:	0f 90       	pop	r0
     3c8:	df 91       	pop	r29
     3ca:	cf 91       	pop	r28
     3cc:	ff 90       	pop	r15
     3ce:	ef 90       	pop	r14
     3d0:	df 90       	pop	r13
     3d2:	cf 90       	pop	r12
     3d4:	08 95       	ret

000003d6 <servo_set_duty_cycle_three>:
static void servo_set_duty_cycle_three(int16_t value)
{
     3d6:	cf 92       	push	r12
     3d8:	df 92       	push	r13
     3da:	ef 92       	push	r14
     3dc:	ff 92       	push	r15
     3de:	cf 93       	push	r28
     3e0:	df 93       	push	r29
     3e2:	00 d0       	rcall	.+0      	; 0x3e4 <servo_set_duty_cycle_three+0xe>
     3e4:	00 d0       	rcall	.+0      	; 0x3e6 <servo_set_duty_cycle_three+0x10>
     3e6:	cd b7       	in	r28, 0x3d	; 61
     3e8:	de b7       	in	r29, 0x3e	; 62
     3ea:	9c 83       	std	Y+4, r25	; 0x04
     3ec:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     3ee:	86 e9       	ldi	r24, 0x96	; 150
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	fc 01       	movw	r30, r24
     3f4:	80 81       	ld	r24, Z
     3f6:	91 81       	ldd	r25, Z+1	; 0x01
     3f8:	cc 01       	movw	r24, r24
     3fa:	a0 e0       	ldi	r26, 0x00	; 0
     3fc:	b0 e0       	ldi	r27, 0x00	; 0
     3fe:	bc 01       	movw	r22, r24
     400:	cd 01       	movw	r24, r26
     402:	0e 94 05 1e 	call	0x3c0a	; 0x3c0a <__floatunsisf>
     406:	dc 01       	movw	r26, r24
     408:	cb 01       	movw	r24, r22
     40a:	20 e0       	ldi	r18, 0x00	; 0
     40c:	30 e0       	ldi	r19, 0x00	; 0
     40e:	4f e7       	ldi	r20, 0x7F	; 127
     410:	53 e4       	ldi	r21, 0x43	; 67
     412:	bc 01       	movw	r22, r24
     414:	cd 01       	movw	r24, r26
     416:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <__divsf3>
     41a:	dc 01       	movw	r26, r24
     41c:	cb 01       	movw	r24, r22
     41e:	6c 01       	movw	r12, r24
     420:	7d 01       	movw	r14, r26
     422:	8b 81       	ldd	r24, Y+3	; 0x03
     424:	9c 81       	ldd	r25, Y+4	; 0x04
     426:	09 2e       	mov	r0, r25
     428:	00 0c       	add	r0, r0
     42a:	aa 0b       	sbc	r26, r26
     42c:	bb 0b       	sbc	r27, r27
     42e:	bc 01       	movw	r22, r24
     430:	cd 01       	movw	r24, r26
     432:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <__floatsisf>
     436:	dc 01       	movw	r26, r24
     438:	cb 01       	movw	r24, r22
     43a:	9c 01       	movw	r18, r24
     43c:	ad 01       	movw	r20, r26
     43e:	c7 01       	movw	r24, r14
     440:	b6 01       	movw	r22, r12
     442:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <__mulsf3>
     446:	dc 01       	movw	r26, r24
     448:	cb 01       	movw	r24, r22
     44a:	20 e0       	ldi	r18, 0x00	; 0
     44c:	30 e0       	ldi	r19, 0x00	; 0
     44e:	40 e0       	ldi	r20, 0x00	; 0
     450:	5f e3       	ldi	r21, 0x3F	; 63
     452:	bc 01       	movw	r22, r24
     454:	cd 01       	movw	r24, r26
     456:	0e 94 ec 1c 	call	0x39d8	; 0x39d8 <__addsf3>
     45a:	dc 01       	movw	r26, r24
     45c:	cb 01       	movw	r24, r22
     45e:	bc 01       	movw	r22, r24
     460:	cd 01       	movw	r24, r26
     462:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <__fixunssfsi>
     466:	dc 01       	movw	r26, r24
     468:	cb 01       	movw	r24, r22
     46a:	9a 83       	std	Y+2, r25	; 0x02
     46c:	89 83       	std	Y+1, r24	; 0x01
	OCR3CH = temp >> 8;
     46e:	8d e9       	ldi	r24, 0x9D	; 157
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	29 81       	ldd	r18, Y+1	; 0x01
     474:	3a 81       	ldd	r19, Y+2	; 0x02
     476:	23 2f       	mov	r18, r19
     478:	33 27       	eor	r19, r19
     47a:	fc 01       	movw	r30, r24
     47c:	20 83       	st	Z, r18
	OCR3CL = temp & 0xFF;
     47e:	8c e9       	ldi	r24, 0x9C	; 156
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	29 81       	ldd	r18, Y+1	; 0x01
     484:	fc 01       	movw	r30, r24
     486:	20 83       	st	Z, r18
}
     488:	0f 90       	pop	r0
     48a:	0f 90       	pop	r0
     48c:	0f 90       	pop	r0
     48e:	0f 90       	pop	r0
     490:	df 91       	pop	r29
     492:	cf 91       	pop	r28
     494:	ff 90       	pop	r15
     496:	ef 90       	pop	r14
     498:	df 90       	pop	r13
     49a:	cf 90       	pop	r12
     49c:	08 95       	ret

0000049e <klip_servo>:
 *	Function: 		void klip_servo(int8_t angle)
 *	Parameters: 	int8_t angle - the angle
 *	Description: 	angle of klip servo, using PIN E3
 */
void klip_servo(int8_t angle)
{
     49e:	cf 93       	push	r28
     4a0:	df 93       	push	r29
     4a2:	1f 92       	push	r1
     4a4:	cd b7       	in	r28, 0x3d	; 61
     4a6:	de b7       	in	r29, 0x3e	; 62
     4a8:	89 83       	std	Y+1, r24	; 0x01
	servo_set_duty_cycle_one( 255-(236.0 - ((double)angle / 90.0) * 11.4));
     4aa:	89 81       	ldd	r24, Y+1	; 0x01
     4ac:	08 2e       	mov	r0, r24
     4ae:	00 0c       	add	r0, r0
     4b0:	99 0b       	sbc	r25, r25
     4b2:	aa 0b       	sbc	r26, r26
     4b4:	bb 0b       	sbc	r27, r27
     4b6:	bc 01       	movw	r22, r24
     4b8:	cd 01       	movw	r24, r26
     4ba:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <__floatsisf>
     4be:	dc 01       	movw	r26, r24
     4c0:	cb 01       	movw	r24, r22
     4c2:	20 e0       	ldi	r18, 0x00	; 0
     4c4:	30 e0       	ldi	r19, 0x00	; 0
     4c6:	44 eb       	ldi	r20, 0xB4	; 180
     4c8:	52 e4       	ldi	r21, 0x42	; 66
     4ca:	bc 01       	movw	r22, r24
     4cc:	cd 01       	movw	r24, r26
     4ce:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <__divsf3>
     4d2:	dc 01       	movw	r26, r24
     4d4:	cb 01       	movw	r24, r22
     4d6:	26 e6       	ldi	r18, 0x66	; 102
     4d8:	36 e6       	ldi	r19, 0x66	; 102
     4da:	46 e3       	ldi	r20, 0x36	; 54
     4dc:	51 e4       	ldi	r21, 0x41	; 65
     4de:	bc 01       	movw	r22, r24
     4e0:	cd 01       	movw	r24, r26
     4e2:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <__mulsf3>
     4e6:	dc 01       	movw	r26, r24
     4e8:	cb 01       	movw	r24, r22
     4ea:	9c 01       	movw	r18, r24
     4ec:	ad 01       	movw	r20, r26
     4ee:	60 e0       	ldi	r22, 0x00	; 0
     4f0:	70 e0       	ldi	r23, 0x00	; 0
     4f2:	8c e6       	ldi	r24, 0x6C	; 108
     4f4:	93 e4       	ldi	r25, 0x43	; 67
     4f6:	0e 94 eb 1c 	call	0x39d6	; 0x39d6 <__subsf3>
     4fa:	dc 01       	movw	r26, r24
     4fc:	cb 01       	movw	r24, r22
     4fe:	9c 01       	movw	r18, r24
     500:	ad 01       	movw	r20, r26
     502:	60 e0       	ldi	r22, 0x00	; 0
     504:	70 e0       	ldi	r23, 0x00	; 0
     506:	8f e7       	ldi	r24, 0x7F	; 127
     508:	93 e4       	ldi	r25, 0x43	; 67
     50a:	0e 94 eb 1c 	call	0x39d6	; 0x39d6 <__subsf3>
     50e:	dc 01       	movw	r26, r24
     510:	cb 01       	movw	r24, r22
     512:	bc 01       	movw	r22, r24
     514:	cd 01       	movw	r24, r26
     516:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <__fixsfsi>
     51a:	dc 01       	movw	r26, r24
     51c:	cb 01       	movw	r24, r22
     51e:	0e 94 23 01 	call	0x246	; 0x246 <servo_set_duty_cycle_one>
}
     522:	0f 90       	pop	r0
     524:	df 91       	pop	r29
     526:	cf 91       	pop	r28
     528:	08 95       	ret

0000052a <actuator_setup>:
/*
 *	Function: 		void actuator_setup(void)
 *	Description: 	setup the actuators
 */
void actuator_setup(void)
{
     52a:	cf 93       	push	r28
     52c:	df 93       	push	r29
     52e:	cd b7       	in	r28, 0x3d	; 61
     530:	de b7       	in	r29, 0x3e	; 62

}
     532:	df 91       	pop	r29
     534:	cf 91       	pop	r28
     536:	08 95       	ret

00000538 <ball_grabbers>:
 *	Parameters: 	unsigned char side 	- which side to control
 *					unsigned char state	- UP or DOWN or MID state
 *	Description: 	controls the ball grabber servos through CAN communication with actuator board
 */
void ball_grabbers(unsigned char side, unsigned char state)
{
     538:	cf 93       	push	r28
     53a:	df 93       	push	r29
     53c:	cd b7       	in	r28, 0x3d	; 61
     53e:	de b7       	in	r29, 0x3e	; 62
     540:	68 97       	sbiw	r28, 0x18	; 24
     542:	0f b6       	in	r0, 0x3f	; 63
     544:	f8 94       	cli
     546:	de bf       	out	0x3e, r29	; 62
     548:	0f be       	out	0x3f, r0	; 63
     54a:	cd bf       	out	0x3d, r28	; 61
     54c:	8f 8b       	std	Y+23, r24	; 0x17
     54e:	68 8f       	std	Y+24, r22	; 0x18
	// Side 	- LEFT or RIGHT
	// State 	- UP or DOWN or MID

	uint8_t buffer[8];
	buffer[0] = 'A';		// indicating what I'm using
     550:	81 e4       	ldi	r24, 0x41	; 65
     552:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = side;		// indicating which side
     554:	8f 89       	ldd	r24, Y+23	; 0x17
     556:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = state;		// indicating what state
     558:	88 8d       	ldd	r24, Y+24	; 0x18
     55a:	89 8b       	std	Y+17, r24	; 0x11

	// send it off
	while(CAN_Write(buffer, DRIVER_LIFT_TX_IDENTIFICATOR))
     55c:	72 c0       	rjmp	.+228    	; 0x642 <ball_grabbers+0x10a>
     55e:	80 e0       	ldi	r24, 0x00	; 0
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	a8 e4       	ldi	r26, 0x48	; 72
     564:	b2 e4       	ldi	r27, 0x42	; 66
     566:	89 83       	std	Y+1, r24	; 0x01
     568:	9a 83       	std	Y+2, r25	; 0x02
     56a:	ab 83       	std	Y+3, r26	; 0x03
     56c:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     56e:	20 e0       	ldi	r18, 0x00	; 0
     570:	30 e4       	ldi	r19, 0x40	; 64
     572:	4c e1       	ldi	r20, 0x1C	; 28
     574:	55 e4       	ldi	r21, 0x45	; 69
     576:	69 81       	ldd	r22, Y+1	; 0x01
     578:	7a 81       	ldd	r23, Y+2	; 0x02
     57a:	8b 81       	ldd	r24, Y+3	; 0x03
     57c:	9c 81       	ldd	r25, Y+4	; 0x04
     57e:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <__mulsf3>
     582:	dc 01       	movw	r26, r24
     584:	cb 01       	movw	r24, r22
     586:	8d 83       	std	Y+5, r24	; 0x05
     588:	9e 83       	std	Y+6, r25	; 0x06
     58a:	af 83       	std	Y+7, r26	; 0x07
     58c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     58e:	20 e0       	ldi	r18, 0x00	; 0
     590:	30 e0       	ldi	r19, 0x00	; 0
     592:	40 e8       	ldi	r20, 0x80	; 128
     594:	5f e3       	ldi	r21, 0x3F	; 63
     596:	6d 81       	ldd	r22, Y+5	; 0x05
     598:	7e 81       	ldd	r23, Y+6	; 0x06
     59a:	8f 81       	ldd	r24, Y+7	; 0x07
     59c:	98 85       	ldd	r25, Y+8	; 0x08
     59e:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <__cmpsf2>
     5a2:	88 23       	and	r24, r24
     5a4:	2c f4       	brge	.+10     	; 0x5b0 <ball_grabbers+0x78>
		__ticks = 1;
     5a6:	81 e0       	ldi	r24, 0x01	; 1
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	9a 87       	std	Y+10, r25	; 0x0a
     5ac:	89 87       	std	Y+9, r24	; 0x09
     5ae:	3f c0       	rjmp	.+126    	; 0x62e <ball_grabbers+0xf6>
	else if (__tmp > 65535)
     5b0:	20 e0       	ldi	r18, 0x00	; 0
     5b2:	3f ef       	ldi	r19, 0xFF	; 255
     5b4:	4f e7       	ldi	r20, 0x7F	; 127
     5b6:	57 e4       	ldi	r21, 0x47	; 71
     5b8:	6d 81       	ldd	r22, Y+5	; 0x05
     5ba:	7e 81       	ldd	r23, Y+6	; 0x06
     5bc:	8f 81       	ldd	r24, Y+7	; 0x07
     5be:	98 85       	ldd	r25, Y+8	; 0x08
     5c0:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <__gesf2>
     5c4:	18 16       	cp	r1, r24
     5c6:	4c f5       	brge	.+82     	; 0x61a <ball_grabbers+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5c8:	20 e0       	ldi	r18, 0x00	; 0
     5ca:	30 e0       	ldi	r19, 0x00	; 0
     5cc:	40 e2       	ldi	r20, 0x20	; 32
     5ce:	51 e4       	ldi	r21, 0x41	; 65
     5d0:	69 81       	ldd	r22, Y+1	; 0x01
     5d2:	7a 81       	ldd	r23, Y+2	; 0x02
     5d4:	8b 81       	ldd	r24, Y+3	; 0x03
     5d6:	9c 81       	ldd	r25, Y+4	; 0x04
     5d8:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <__mulsf3>
     5dc:	dc 01       	movw	r26, r24
     5de:	cb 01       	movw	r24, r22
     5e0:	bc 01       	movw	r22, r24
     5e2:	cd 01       	movw	r24, r26
     5e4:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <__fixunssfsi>
     5e8:	dc 01       	movw	r26, r24
     5ea:	cb 01       	movw	r24, r22
     5ec:	9a 87       	std	Y+10, r25	; 0x0a
     5ee:	89 87       	std	Y+9, r24	; 0x09
     5f0:	0f c0       	rjmp	.+30     	; 0x610 <ball_grabbers+0xd8>
     5f2:	8a ef       	ldi	r24, 0xFA	; 250
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	9c 87       	std	Y+12, r25	; 0x0c
     5f8:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     5fa:	8b 85       	ldd	r24, Y+11	; 0x0b
     5fc:	9c 85       	ldd	r25, Y+12	; 0x0c
     5fe:	01 97       	sbiw	r24, 0x01	; 1
     600:	f1 f7       	brne	.-4      	; 0x5fe <ball_grabbers+0xc6>
     602:	9c 87       	std	Y+12, r25	; 0x0c
     604:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     606:	89 85       	ldd	r24, Y+9	; 0x09
     608:	9a 85       	ldd	r25, Y+10	; 0x0a
     60a:	01 97       	sbiw	r24, 0x01	; 1
     60c:	9a 87       	std	Y+10, r25	; 0x0a
     60e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     610:	89 85       	ldd	r24, Y+9	; 0x09
     612:	9a 85       	ldd	r25, Y+10	; 0x0a
     614:	89 2b       	or	r24, r25
     616:	69 f7       	brne	.-38     	; 0x5f2 <ball_grabbers+0xba>
     618:	14 c0       	rjmp	.+40     	; 0x642 <ball_grabbers+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     61a:	6d 81       	ldd	r22, Y+5	; 0x05
     61c:	7e 81       	ldd	r23, Y+6	; 0x06
     61e:	8f 81       	ldd	r24, Y+7	; 0x07
     620:	98 85       	ldd	r25, Y+8	; 0x08
     622:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <__fixunssfsi>
     626:	dc 01       	movw	r26, r24
     628:	cb 01       	movw	r24, r22
     62a:	9a 87       	std	Y+10, r25	; 0x0a
     62c:	89 87       	std	Y+9, r24	; 0x09
     62e:	89 85       	ldd	r24, Y+9	; 0x09
     630:	9a 85       	ldd	r25, Y+10	; 0x0a
     632:	9e 87       	std	Y+14, r25	; 0x0e
     634:	8d 87       	std	Y+13, r24	; 0x0d
     636:	8d 85       	ldd	r24, Y+13	; 0x0d
     638:	9e 85       	ldd	r25, Y+14	; 0x0e
     63a:	01 97       	sbiw	r24, 0x01	; 1
     63c:	f1 f7       	brne	.-4      	; 0x63a <ball_grabbers+0x102>
     63e:	9e 87       	std	Y+14, r25	; 0x0e
     640:	8d 87       	std	Y+13, r24	; 0x0d
     642:	ce 01       	movw	r24, r28
     644:	0f 96       	adiw	r24, 0x0f	; 15
     646:	64 ed       	ldi	r22, 0xD4	; 212
     648:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <CAN_Write>
     64c:	88 23       	and	r24, r24
     64e:	09 f0       	breq	.+2      	; 0x652 <ball_grabbers+0x11a>
     650:	86 cf       	rjmp	.-244    	; 0x55e <ball_grabbers+0x26>
		_delay_ms(50);
}
     652:	68 96       	adiw	r28, 0x18	; 24
     654:	0f b6       	in	r0, 0x3f	; 63
     656:	f8 94       	cli
     658:	de bf       	out	0x3e, r29	; 62
     65a:	0f be       	out	0x3f, r0	; 63
     65c:	cd bf       	out	0x3d, r28	; 61
     65e:	df 91       	pop	r29
     660:	cf 91       	pop	r28
     662:	08 95       	ret

00000664 <dispenser>:
 *	Parameters: 	unsigned char side 	- which side to control
 *					unsigned char state	- UP or DOWN state
 *	Description: 	controls the dispenser servos through CAN communication with actuator board
 */
void dispenser(unsigned char side, unsigned char state)
{
     664:	cf 93       	push	r28
     666:	df 93       	push	r29
     668:	cd b7       	in	r28, 0x3d	; 61
     66a:	de b7       	in	r29, 0x3e	; 62
     66c:	68 97       	sbiw	r28, 0x18	; 24
     66e:	0f b6       	in	r0, 0x3f	; 63
     670:	f8 94       	cli
     672:	de bf       	out	0x3e, r29	; 62
     674:	0f be       	out	0x3f, r0	; 63
     676:	cd bf       	out	0x3d, r28	; 61
     678:	8f 8b       	std	Y+23, r24	; 0x17
     67a:	68 8f       	std	Y+24, r22	; 0x18
	// Side 	- LEFT or RIGHT
	// State 	- UP or DOWN

	uint8_t buffer[8];
	buffer[0] = 'B';		// indicating what I'm using
     67c:	82 e4       	ldi	r24, 0x42	; 66
     67e:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = side;		// indicating which side
     680:	8f 89       	ldd	r24, Y+23	; 0x17
     682:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = state;		// indicating what state
     684:	88 8d       	ldd	r24, Y+24	; 0x18
     686:	89 8b       	std	Y+17, r24	; 0x11

	// send it off
	while(CAN_Write(buffer, DRIVER_LIFT_TX_IDENTIFICATOR))
     688:	72 c0       	rjmp	.+228    	; 0x76e <dispenser+0x10a>
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	a8 e4       	ldi	r26, 0x48	; 72
     690:	b2 e4       	ldi	r27, 0x42	; 66
     692:	89 83       	std	Y+1, r24	; 0x01
     694:	9a 83       	std	Y+2, r25	; 0x02
     696:	ab 83       	std	Y+3, r26	; 0x03
     698:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     69a:	20 e0       	ldi	r18, 0x00	; 0
     69c:	30 e4       	ldi	r19, 0x40	; 64
     69e:	4c e1       	ldi	r20, 0x1C	; 28
     6a0:	55 e4       	ldi	r21, 0x45	; 69
     6a2:	69 81       	ldd	r22, Y+1	; 0x01
     6a4:	7a 81       	ldd	r23, Y+2	; 0x02
     6a6:	8b 81       	ldd	r24, Y+3	; 0x03
     6a8:	9c 81       	ldd	r25, Y+4	; 0x04
     6aa:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <__mulsf3>
     6ae:	dc 01       	movw	r26, r24
     6b0:	cb 01       	movw	r24, r22
     6b2:	8d 83       	std	Y+5, r24	; 0x05
     6b4:	9e 83       	std	Y+6, r25	; 0x06
     6b6:	af 83       	std	Y+7, r26	; 0x07
     6b8:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     6ba:	20 e0       	ldi	r18, 0x00	; 0
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	40 e8       	ldi	r20, 0x80	; 128
     6c0:	5f e3       	ldi	r21, 0x3F	; 63
     6c2:	6d 81       	ldd	r22, Y+5	; 0x05
     6c4:	7e 81       	ldd	r23, Y+6	; 0x06
     6c6:	8f 81       	ldd	r24, Y+7	; 0x07
     6c8:	98 85       	ldd	r25, Y+8	; 0x08
     6ca:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <__cmpsf2>
     6ce:	88 23       	and	r24, r24
     6d0:	2c f4       	brge	.+10     	; 0x6dc <dispenser+0x78>
		__ticks = 1;
     6d2:	81 e0       	ldi	r24, 0x01	; 1
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	9a 87       	std	Y+10, r25	; 0x0a
     6d8:	89 87       	std	Y+9, r24	; 0x09
     6da:	3f c0       	rjmp	.+126    	; 0x75a <dispenser+0xf6>
	else if (__tmp > 65535)
     6dc:	20 e0       	ldi	r18, 0x00	; 0
     6de:	3f ef       	ldi	r19, 0xFF	; 255
     6e0:	4f e7       	ldi	r20, 0x7F	; 127
     6e2:	57 e4       	ldi	r21, 0x47	; 71
     6e4:	6d 81       	ldd	r22, Y+5	; 0x05
     6e6:	7e 81       	ldd	r23, Y+6	; 0x06
     6e8:	8f 81       	ldd	r24, Y+7	; 0x07
     6ea:	98 85       	ldd	r25, Y+8	; 0x08
     6ec:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <__gesf2>
     6f0:	18 16       	cp	r1, r24
     6f2:	4c f5       	brge	.+82     	; 0x746 <dispenser+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6f4:	20 e0       	ldi	r18, 0x00	; 0
     6f6:	30 e0       	ldi	r19, 0x00	; 0
     6f8:	40 e2       	ldi	r20, 0x20	; 32
     6fa:	51 e4       	ldi	r21, 0x41	; 65
     6fc:	69 81       	ldd	r22, Y+1	; 0x01
     6fe:	7a 81       	ldd	r23, Y+2	; 0x02
     700:	8b 81       	ldd	r24, Y+3	; 0x03
     702:	9c 81       	ldd	r25, Y+4	; 0x04
     704:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <__mulsf3>
     708:	dc 01       	movw	r26, r24
     70a:	cb 01       	movw	r24, r22
     70c:	bc 01       	movw	r22, r24
     70e:	cd 01       	movw	r24, r26
     710:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <__fixunssfsi>
     714:	dc 01       	movw	r26, r24
     716:	cb 01       	movw	r24, r22
     718:	9a 87       	std	Y+10, r25	; 0x0a
     71a:	89 87       	std	Y+9, r24	; 0x09
     71c:	0f c0       	rjmp	.+30     	; 0x73c <dispenser+0xd8>
     71e:	8a ef       	ldi	r24, 0xFA	; 250
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	9c 87       	std	Y+12, r25	; 0x0c
     724:	8b 87       	std	Y+11, r24	; 0x0b
     726:	8b 85       	ldd	r24, Y+11	; 0x0b
     728:	9c 85       	ldd	r25, Y+12	; 0x0c
     72a:	01 97       	sbiw	r24, 0x01	; 1
     72c:	f1 f7       	brne	.-4      	; 0x72a <dispenser+0xc6>
     72e:	9c 87       	std	Y+12, r25	; 0x0c
     730:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	9a 85       	ldd	r25, Y+10	; 0x0a
     736:	01 97       	sbiw	r24, 0x01	; 1
     738:	9a 87       	std	Y+10, r25	; 0x0a
     73a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     73c:	89 85       	ldd	r24, Y+9	; 0x09
     73e:	9a 85       	ldd	r25, Y+10	; 0x0a
     740:	89 2b       	or	r24, r25
     742:	69 f7       	brne	.-38     	; 0x71e <dispenser+0xba>
     744:	14 c0       	rjmp	.+40     	; 0x76e <dispenser+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     746:	6d 81       	ldd	r22, Y+5	; 0x05
     748:	7e 81       	ldd	r23, Y+6	; 0x06
     74a:	8f 81       	ldd	r24, Y+7	; 0x07
     74c:	98 85       	ldd	r25, Y+8	; 0x08
     74e:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <__fixunssfsi>
     752:	dc 01       	movw	r26, r24
     754:	cb 01       	movw	r24, r22
     756:	9a 87       	std	Y+10, r25	; 0x0a
     758:	89 87       	std	Y+9, r24	; 0x09
     75a:	89 85       	ldd	r24, Y+9	; 0x09
     75c:	9a 85       	ldd	r25, Y+10	; 0x0a
     75e:	9e 87       	std	Y+14, r25	; 0x0e
     760:	8d 87       	std	Y+13, r24	; 0x0d
     762:	8d 85       	ldd	r24, Y+13	; 0x0d
     764:	9e 85       	ldd	r25, Y+14	; 0x0e
     766:	01 97       	sbiw	r24, 0x01	; 1
     768:	f1 f7       	brne	.-4      	; 0x766 <dispenser+0x102>
     76a:	9e 87       	std	Y+14, r25	; 0x0e
     76c:	8d 87       	std	Y+13, r24	; 0x0d
     76e:	ce 01       	movw	r24, r28
     770:	0f 96       	adiw	r24, 0x0f	; 15
     772:	64 ed       	ldi	r22, 0xD4	; 212
     774:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <CAN_Write>
     778:	88 23       	and	r24, r24
     77a:	09 f0       	breq	.+2      	; 0x77e <dispenser+0x11a>
     77c:	86 cf       	rjmp	.-244    	; 0x68a <dispenser+0x26>
		_delay_ms(50);
}
     77e:	68 96       	adiw	r28, 0x18	; 24
     780:	0f b6       	in	r0, 0x3f	; 63
     782:	f8 94       	cli
     784:	de bf       	out	0x3e, r29	; 62
     786:	0f be       	out	0x3f, r0	; 63
     788:	cd bf       	out	0x3d, r28	; 61
     78a:	df 91       	pop	r29
     78c:	cf 91       	pop	r28
     78e:	08 95       	ret

00000790 <mosfet>:
 *	Parameters: 	unsigned char side 	- which side to control
 *					unsigned char state	- ON or OFF state
 *	Description: 	controls the diaframs through CAN communication with actuator board
 */
void mosfet(unsigned char side, unsigned char state)
{
     790:	cf 93       	push	r28
     792:	df 93       	push	r29
     794:	cd b7       	in	r28, 0x3d	; 61
     796:	de b7       	in	r29, 0x3e	; 62
     798:	68 97       	sbiw	r28, 0x18	; 24
     79a:	0f b6       	in	r0, 0x3f	; 63
     79c:	f8 94       	cli
     79e:	de bf       	out	0x3e, r29	; 62
     7a0:	0f be       	out	0x3f, r0	; 63
     7a2:	cd bf       	out	0x3d, r28	; 61
     7a4:	8f 8b       	std	Y+23, r24	; 0x17
     7a6:	68 8f       	std	Y+24, r22	; 0x18
	// Side 	- LEFT or RIGHT
	// State 	- ON or OFF

	uint8_t buffer[8];
	buffer[0] = 'C';		// indicating that I'm using diafram
     7a8:	83 e4       	ldi	r24, 0x43	; 67
     7aa:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = side;		// indicating which side
     7ac:	8f 89       	ldd	r24, Y+23	; 0x17
     7ae:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = state;		// indicating what state
     7b0:	88 8d       	ldd	r24, Y+24	; 0x18
     7b2:	89 8b       	std	Y+17, r24	; 0x11

	// send it off
	while(CAN_Write(buffer, DRIVER_LIFT_TX_IDENTIFICATOR))
     7b4:	72 c0       	rjmp	.+228    	; 0x89a <mosfet+0x10a>
     7b6:	80 e0       	ldi	r24, 0x00	; 0
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	a8 e4       	ldi	r26, 0x48	; 72
     7bc:	b2 e4       	ldi	r27, 0x42	; 66
     7be:	89 83       	std	Y+1, r24	; 0x01
     7c0:	9a 83       	std	Y+2, r25	; 0x02
     7c2:	ab 83       	std	Y+3, r26	; 0x03
     7c4:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     7c6:	20 e0       	ldi	r18, 0x00	; 0
     7c8:	30 e4       	ldi	r19, 0x40	; 64
     7ca:	4c e1       	ldi	r20, 0x1C	; 28
     7cc:	55 e4       	ldi	r21, 0x45	; 69
     7ce:	69 81       	ldd	r22, Y+1	; 0x01
     7d0:	7a 81       	ldd	r23, Y+2	; 0x02
     7d2:	8b 81       	ldd	r24, Y+3	; 0x03
     7d4:	9c 81       	ldd	r25, Y+4	; 0x04
     7d6:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <__mulsf3>
     7da:	dc 01       	movw	r26, r24
     7dc:	cb 01       	movw	r24, r22
     7de:	8d 83       	std	Y+5, r24	; 0x05
     7e0:	9e 83       	std	Y+6, r25	; 0x06
     7e2:	af 83       	std	Y+7, r26	; 0x07
     7e4:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e8       	ldi	r20, 0x80	; 128
     7ec:	5f e3       	ldi	r21, 0x3F	; 63
     7ee:	6d 81       	ldd	r22, Y+5	; 0x05
     7f0:	7e 81       	ldd	r23, Y+6	; 0x06
     7f2:	8f 81       	ldd	r24, Y+7	; 0x07
     7f4:	98 85       	ldd	r25, Y+8	; 0x08
     7f6:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <__cmpsf2>
     7fa:	88 23       	and	r24, r24
     7fc:	2c f4       	brge	.+10     	; 0x808 <mosfet+0x78>
		__ticks = 1;
     7fe:	81 e0       	ldi	r24, 0x01	; 1
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	9a 87       	std	Y+10, r25	; 0x0a
     804:	89 87       	std	Y+9, r24	; 0x09
     806:	3f c0       	rjmp	.+126    	; 0x886 <mosfet+0xf6>
	else if (__tmp > 65535)
     808:	20 e0       	ldi	r18, 0x00	; 0
     80a:	3f ef       	ldi	r19, 0xFF	; 255
     80c:	4f e7       	ldi	r20, 0x7F	; 127
     80e:	57 e4       	ldi	r21, 0x47	; 71
     810:	6d 81       	ldd	r22, Y+5	; 0x05
     812:	7e 81       	ldd	r23, Y+6	; 0x06
     814:	8f 81       	ldd	r24, Y+7	; 0x07
     816:	98 85       	ldd	r25, Y+8	; 0x08
     818:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <__gesf2>
     81c:	18 16       	cp	r1, r24
     81e:	4c f5       	brge	.+82     	; 0x872 <mosfet+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     820:	20 e0       	ldi	r18, 0x00	; 0
     822:	30 e0       	ldi	r19, 0x00	; 0
     824:	40 e2       	ldi	r20, 0x20	; 32
     826:	51 e4       	ldi	r21, 0x41	; 65
     828:	69 81       	ldd	r22, Y+1	; 0x01
     82a:	7a 81       	ldd	r23, Y+2	; 0x02
     82c:	8b 81       	ldd	r24, Y+3	; 0x03
     82e:	9c 81       	ldd	r25, Y+4	; 0x04
     830:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <__mulsf3>
     834:	dc 01       	movw	r26, r24
     836:	cb 01       	movw	r24, r22
     838:	bc 01       	movw	r22, r24
     83a:	cd 01       	movw	r24, r26
     83c:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <__fixunssfsi>
     840:	dc 01       	movw	r26, r24
     842:	cb 01       	movw	r24, r22
     844:	9a 87       	std	Y+10, r25	; 0x0a
     846:	89 87       	std	Y+9, r24	; 0x09
     848:	0f c0       	rjmp	.+30     	; 0x868 <mosfet+0xd8>
     84a:	8a ef       	ldi	r24, 0xFA	; 250
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	9c 87       	std	Y+12, r25	; 0x0c
     850:	8b 87       	std	Y+11, r24	; 0x0b
     852:	8b 85       	ldd	r24, Y+11	; 0x0b
     854:	9c 85       	ldd	r25, Y+12	; 0x0c
     856:	01 97       	sbiw	r24, 0x01	; 1
     858:	f1 f7       	brne	.-4      	; 0x856 <mosfet+0xc6>
     85a:	9c 87       	std	Y+12, r25	; 0x0c
     85c:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     85e:	89 85       	ldd	r24, Y+9	; 0x09
     860:	9a 85       	ldd	r25, Y+10	; 0x0a
     862:	01 97       	sbiw	r24, 0x01	; 1
     864:	9a 87       	std	Y+10, r25	; 0x0a
     866:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     868:	89 85       	ldd	r24, Y+9	; 0x09
     86a:	9a 85       	ldd	r25, Y+10	; 0x0a
     86c:	89 2b       	or	r24, r25
     86e:	69 f7       	brne	.-38     	; 0x84a <mosfet+0xba>
     870:	14 c0       	rjmp	.+40     	; 0x89a <mosfet+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     872:	6d 81       	ldd	r22, Y+5	; 0x05
     874:	7e 81       	ldd	r23, Y+6	; 0x06
     876:	8f 81       	ldd	r24, Y+7	; 0x07
     878:	98 85       	ldd	r25, Y+8	; 0x08
     87a:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <__fixunssfsi>
     87e:	dc 01       	movw	r26, r24
     880:	cb 01       	movw	r24, r22
     882:	9a 87       	std	Y+10, r25	; 0x0a
     884:	89 87       	std	Y+9, r24	; 0x09
     886:	89 85       	ldd	r24, Y+9	; 0x09
     888:	9a 85       	ldd	r25, Y+10	; 0x0a
     88a:	9e 87       	std	Y+14, r25	; 0x0e
     88c:	8d 87       	std	Y+13, r24	; 0x0d
     88e:	8d 85       	ldd	r24, Y+13	; 0x0d
     890:	9e 85       	ldd	r25, Y+14	; 0x0e
     892:	01 97       	sbiw	r24, 0x01	; 1
     894:	f1 f7       	brne	.-4      	; 0x892 <mosfet+0x102>
     896:	9e 87       	std	Y+14, r25	; 0x0e
     898:	8d 87       	std	Y+13, r24	; 0x0d
     89a:	ce 01       	movw	r24, r28
     89c:	0f 96       	adiw	r24, 0x0f	; 15
     89e:	64 ed       	ldi	r22, 0xD4	; 212
     8a0:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <CAN_Write>
     8a4:	88 23       	and	r24, r24
     8a6:	09 f0       	breq	.+2      	; 0x8aa <mosfet+0x11a>
     8a8:	86 cf       	rjmp	.-244    	; 0x7b6 <mosfet+0x26>
		_delay_ms(50);
}
     8aa:	68 96       	adiw	r28, 0x18	; 24
     8ac:	0f b6       	in	r0, 0x3f	; 63
     8ae:	f8 94       	cli
     8b0:	de bf       	out	0x3e, r29	; 62
     8b2:	0f be       	out	0x3f, r0	; 63
     8b4:	cd bf       	out	0x3d, r28	; 61
     8b6:	df 91       	pop	r29
     8b8:	cf 91       	pop	r28
     8ba:	08 95       	ret

000008bc <pumps>:
 *	Function: 		void pumps(unsigned char state)
 *	Parameters: 	unsigned char state	- ON or OFF state
 *	Description: 	controls the pumps from the relay board
 */
void pumps(unsigned char state)
{
     8bc:	cf 93       	push	r28
     8be:	df 93       	push	r29
     8c0:	1f 92       	push	r1
     8c2:	cd b7       	in	r28, 0x3d	; 61
     8c4:	de b7       	in	r29, 0x3e	; 62
     8c6:	89 83       	std	Y+1, r24	; 0x01
	if(!state) 	// !state because the relay turns ON when pulled to GND
     8c8:	89 81       	ldd	r24, Y+1	; 0x01
     8ca:	88 23       	and	r24, r24
     8cc:	49 f4       	brne	.+18     	; 0x8e0 <pumps+0x24>
	{
		gpio_write_pin(RELAY_1_PIN, TRUE);
     8ce:	60 e0       	ldi	r22, 0x00	; 0
     8d0:	83 e0       	ldi	r24, 0x03	; 3
     8d2:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <gpio_write_pin>
		gpio_write_pin(RELAY_2_PIN, TRUE);
     8d6:	60 e0       	ldi	r22, 0x00	; 0
     8d8:	82 e0       	ldi	r24, 0x02	; 2
     8da:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <gpio_write_pin>
     8de:	08 c0       	rjmp	.+16     	; 0x8f0 <pumps+0x34>
	} else {
		gpio_write_pin(RELAY_1_PIN, FALSE);
     8e0:	61 e0       	ldi	r22, 0x01	; 1
     8e2:	83 e0       	ldi	r24, 0x03	; 3
     8e4:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <gpio_write_pin>
		gpio_write_pin(RELAY_2_PIN, FALSE);
     8e8:	61 e0       	ldi	r22, 0x01	; 1
     8ea:	82 e0       	ldi	r24, 0x02	; 2
     8ec:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <gpio_write_pin>
	}
}
     8f0:	0f 90       	pop	r0
     8f2:	df 91       	pop	r29
     8f4:	cf 91       	pop	r28
     8f6:	08 95       	ret

000008f8 <klip>:
 *	Function: 		void klip(unsigned char state)
 *	Parameters: 	unsigned char state	- ON or OFF state
 *	Description: 	controls the klip from the relay board
 */
void klip(unsigned char state)
{
     8f8:	cf 93       	push	r28
     8fa:	df 93       	push	r29
     8fc:	1f 92       	push	r1
     8fe:	cd b7       	in	r28, 0x3d	; 61
     900:	de b7       	in	r29, 0x3e	; 62
     902:	89 83       	std	Y+1, r24	; 0x01
	if(!state)	// !state because the relay turns ON when pulled to GND
     904:	89 81       	ldd	r24, Y+1	; 0x01
     906:	88 23       	and	r24, r24
     908:	29 f4       	brne	.+10     	; 0x914 <klip+0x1c>
	{
		gpio_write_pin(RELAY_3_PIN, TRUE);
     90a:	60 e0       	ldi	r22, 0x00	; 0
     90c:	81 e0       	ldi	r24, 0x01	; 1
     90e:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <gpio_write_pin>
     912:	04 c0       	rjmp	.+8      	; 0x91c <klip+0x24>
	} else {
		gpio_write_pin(RELAY_3_PIN, FALSE);
     914:	61 e0       	ldi	r22, 0x01	; 1
     916:	81 e0       	ldi	r24, 0x01	; 1
     918:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <gpio_write_pin>
	}
}
     91c:	0f 90       	pop	r0
     91e:	df 91       	pop	r29
     920:	cf 91       	pop	r28
     922:	08 95       	ret

00000924 <trig_pulse>:
/*
 *	Function: 		static void trig_pulse()
 *	Description: 	specific trigure pulses for the distance sensor
 */
static void trig_pulse()
{
     924:	0f 93       	push	r16
     926:	1f 93       	push	r17
     928:	cf 93       	push	r28
     92a:	df 93       	push	r29
     92c:	cd b7       	in	r28, 0x3d	; 61
     92e:	de b7       	in	r29, 0x3e	; 62
     930:	c0 56       	subi	r28, 0x60	; 96
     932:	d1 09       	sbc	r29, r1
     934:	0f b6       	in	r0, 0x3f	; 63
     936:	f8 94       	cli
     938:	de bf       	out	0x3e, r29	; 62
     93a:	0f be       	out	0x3f, r0	; 63
     93c:	cd bf       	out	0x3d, r28	; 61
	dist_trig_off()				// Clear pin before setting it high
     93e:	61 e0       	ldi	r22, 0x01	; 1
     940:	80 e0       	ldi	r24, 0x00	; 0
     942:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <gpio_write_pin>
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	a0 e8       	ldi	r26, 0x80	; 128
     94c:	bf e3       	ldi	r27, 0x3F	; 63
     94e:	89 83       	std	Y+1, r24	; 0x01
     950:	9a 83       	std	Y+2, r25	; 0x02
     952:	ab 83       	std	Y+3, r26	; 0x03
     954:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
     956:	25 e5       	ldi	r18, 0x55	; 85
     958:	35 e5       	ldi	r19, 0x55	; 85
     95a:	45 e5       	ldi	r20, 0x55	; 85
     95c:	50 e4       	ldi	r21, 0x40	; 64
     95e:	69 81       	ldd	r22, Y+1	; 0x01
     960:	7a 81       	ldd	r23, Y+2	; 0x02
     962:	8b 81       	ldd	r24, Y+3	; 0x03
     964:	9c 81       	ldd	r25, Y+4	; 0x04
     966:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <__mulsf3>
     96a:	dc 01       	movw	r26, r24
     96c:	cb 01       	movw	r24, r22
     96e:	8d 83       	std	Y+5, r24	; 0x05
     970:	9e 83       	std	Y+6, r25	; 0x06
     972:	af 83       	std	Y+7, r26	; 0x07
     974:	b8 87       	std	Y+8, r27	; 0x08
	__tmp2 = ((F_CPU) / 4e6) * __us;
     976:	20 e0       	ldi	r18, 0x00	; 0
     978:	30 e0       	ldi	r19, 0x00	; 0
     97a:	40 e2       	ldi	r20, 0x20	; 32
     97c:	50 e4       	ldi	r21, 0x40	; 64
     97e:	69 81       	ldd	r22, Y+1	; 0x01
     980:	7a 81       	ldd	r23, Y+2	; 0x02
     982:	8b 81       	ldd	r24, Y+3	; 0x03
     984:	9c 81       	ldd	r25, Y+4	; 0x04
     986:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <__mulsf3>
     98a:	dc 01       	movw	r26, r24
     98c:	cb 01       	movw	r24, r22
     98e:	89 87       	std	Y+9, r24	; 0x09
     990:	9a 87       	std	Y+10, r25	; 0x0a
     992:	ab 87       	std	Y+11, r26	; 0x0b
     994:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     996:	20 e0       	ldi	r18, 0x00	; 0
     998:	30 e0       	ldi	r19, 0x00	; 0
     99a:	40 e8       	ldi	r20, 0x80	; 128
     99c:	5f e3       	ldi	r21, 0x3F	; 63
     99e:	6d 81       	ldd	r22, Y+5	; 0x05
     9a0:	7e 81       	ldd	r23, Y+6	; 0x06
     9a2:	8f 81       	ldd	r24, Y+7	; 0x07
     9a4:	98 85       	ldd	r25, Y+8	; 0x08
     9a6:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <__cmpsf2>
     9aa:	88 23       	and	r24, r24
     9ac:	1c f4       	brge	.+6      	; 0x9b4 <trig_pulse+0x90>
		__ticks = 1;
     9ae:	81 e0       	ldi	r24, 0x01	; 1
     9b0:	8d 87       	std	Y+13, r24	; 0x0d
     9b2:	b2 c0       	rjmp	.+356    	; 0xb18 <trig_pulse+0x1f4>
	else if (__tmp2 > 65535)
     9b4:	20 e0       	ldi	r18, 0x00	; 0
     9b6:	3f ef       	ldi	r19, 0xFF	; 255
     9b8:	4f e7       	ldi	r20, 0x7F	; 127
     9ba:	57 e4       	ldi	r21, 0x47	; 71
     9bc:	69 85       	ldd	r22, Y+9	; 0x09
     9be:	7a 85       	ldd	r23, Y+10	; 0x0a
     9c0:	8b 85       	ldd	r24, Y+11	; 0x0b
     9c2:	9c 85       	ldd	r25, Y+12	; 0x0c
     9c4:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <__gesf2>
     9c8:	18 16       	cp	r1, r24
     9ca:	0c f0       	brlt	.+2      	; 0x9ce <trig_pulse+0xaa>
     9cc:	7b c0       	rjmp	.+246    	; 0xac4 <trig_pulse+0x1a0>
	{
		_delay_ms(__us / 1000.0);
     9ce:	20 e0       	ldi	r18, 0x00	; 0
     9d0:	30 e0       	ldi	r19, 0x00	; 0
     9d2:	4a e7       	ldi	r20, 0x7A	; 122
     9d4:	54 e4       	ldi	r21, 0x44	; 68
     9d6:	69 81       	ldd	r22, Y+1	; 0x01
     9d8:	7a 81       	ldd	r23, Y+2	; 0x02
     9da:	8b 81       	ldd	r24, Y+3	; 0x03
     9dc:	9c 81       	ldd	r25, Y+4	; 0x04
     9de:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <__divsf3>
     9e2:	dc 01       	movw	r26, r24
     9e4:	cb 01       	movw	r24, r22
     9e6:	8e 87       	std	Y+14, r24	; 0x0e
     9e8:	9f 87       	std	Y+15, r25	; 0x0f
     9ea:	a8 8b       	std	Y+16, r26	; 0x10
     9ec:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     9ee:	20 e0       	ldi	r18, 0x00	; 0
     9f0:	30 e4       	ldi	r19, 0x40	; 64
     9f2:	4c e1       	ldi	r20, 0x1C	; 28
     9f4:	55 e4       	ldi	r21, 0x45	; 69
     9f6:	6e 85       	ldd	r22, Y+14	; 0x0e
     9f8:	7f 85       	ldd	r23, Y+15	; 0x0f
     9fa:	88 89       	ldd	r24, Y+16	; 0x10
     9fc:	99 89       	ldd	r25, Y+17	; 0x11
     9fe:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <__mulsf3>
     a02:	dc 01       	movw	r26, r24
     a04:	cb 01       	movw	r24, r22
     a06:	8a 8b       	std	Y+18, r24	; 0x12
     a08:	9b 8b       	std	Y+19, r25	; 0x13
     a0a:	ac 8b       	std	Y+20, r26	; 0x14
     a0c:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
     a0e:	20 e0       	ldi	r18, 0x00	; 0
     a10:	30 e0       	ldi	r19, 0x00	; 0
     a12:	40 e8       	ldi	r20, 0x80	; 128
     a14:	5f e3       	ldi	r21, 0x3F	; 63
     a16:	6a 89       	ldd	r22, Y+18	; 0x12
     a18:	7b 89       	ldd	r23, Y+19	; 0x13
     a1a:	8c 89       	ldd	r24, Y+20	; 0x14
     a1c:	9d 89       	ldd	r25, Y+21	; 0x15
     a1e:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <__cmpsf2>
     a22:	88 23       	and	r24, r24
     a24:	2c f4       	brge	.+10     	; 0xa30 <trig_pulse+0x10c>
		__ticks = 1;
     a26:	81 e0       	ldi	r24, 0x01	; 1
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	9f 8b       	std	Y+23, r25	; 0x17
     a2c:	8e 8b       	std	Y+22, r24	; 0x16
     a2e:	3f c0       	rjmp	.+126    	; 0xaae <trig_pulse+0x18a>
	else if (__tmp > 65535)
     a30:	20 e0       	ldi	r18, 0x00	; 0
     a32:	3f ef       	ldi	r19, 0xFF	; 255
     a34:	4f e7       	ldi	r20, 0x7F	; 127
     a36:	57 e4       	ldi	r21, 0x47	; 71
     a38:	6a 89       	ldd	r22, Y+18	; 0x12
     a3a:	7b 89       	ldd	r23, Y+19	; 0x13
     a3c:	8c 89       	ldd	r24, Y+20	; 0x14
     a3e:	9d 89       	ldd	r25, Y+21	; 0x15
     a40:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <__gesf2>
     a44:	18 16       	cp	r1, r24
     a46:	4c f5       	brge	.+82     	; 0xa9a <trig_pulse+0x176>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a48:	20 e0       	ldi	r18, 0x00	; 0
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	40 e2       	ldi	r20, 0x20	; 32
     a4e:	51 e4       	ldi	r21, 0x41	; 65
     a50:	6e 85       	ldd	r22, Y+14	; 0x0e
     a52:	7f 85       	ldd	r23, Y+15	; 0x0f
     a54:	88 89       	ldd	r24, Y+16	; 0x10
     a56:	99 89       	ldd	r25, Y+17	; 0x11
     a58:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <__mulsf3>
     a5c:	dc 01       	movw	r26, r24
     a5e:	cb 01       	movw	r24, r22
     a60:	bc 01       	movw	r22, r24
     a62:	cd 01       	movw	r24, r26
     a64:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <__fixunssfsi>
     a68:	dc 01       	movw	r26, r24
     a6a:	cb 01       	movw	r24, r22
     a6c:	9f 8b       	std	Y+23, r25	; 0x17
     a6e:	8e 8b       	std	Y+22, r24	; 0x16
     a70:	0f c0       	rjmp	.+30     	; 0xa90 <trig_pulse+0x16c>
     a72:	8a ef       	ldi	r24, 0xFA	; 250
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	99 8f       	std	Y+25, r25	; 0x19
     a78:	88 8f       	std	Y+24, r24	; 0x18
     a7a:	88 8d       	ldd	r24, Y+24	; 0x18
     a7c:	99 8d       	ldd	r25, Y+25	; 0x19
     a7e:	01 97       	sbiw	r24, 0x01	; 1
     a80:	f1 f7       	brne	.-4      	; 0xa7e <trig_pulse+0x15a>
     a82:	99 8f       	std	Y+25, r25	; 0x19
     a84:	88 8f       	std	Y+24, r24	; 0x18
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a86:	8e 89       	ldd	r24, Y+22	; 0x16
     a88:	9f 89       	ldd	r25, Y+23	; 0x17
     a8a:	01 97       	sbiw	r24, 0x01	; 1
     a8c:	9f 8b       	std	Y+23, r25	; 0x17
     a8e:	8e 8b       	std	Y+22, r24	; 0x16
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a90:	8e 89       	ldd	r24, Y+22	; 0x16
     a92:	9f 89       	ldd	r25, Y+23	; 0x17
     a94:	89 2b       	or	r24, r25
     a96:	69 f7       	brne	.-38     	; 0xa72 <trig_pulse+0x14e>
     a98:	3f c0       	rjmp	.+126    	; 0xb18 <trig_pulse+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a9a:	6a 89       	ldd	r22, Y+18	; 0x12
     a9c:	7b 89       	ldd	r23, Y+19	; 0x13
     a9e:	8c 89       	ldd	r24, Y+20	; 0x14
     aa0:	9d 89       	ldd	r25, Y+21	; 0x15
     aa2:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <__fixunssfsi>
     aa6:	dc 01       	movw	r26, r24
     aa8:	cb 01       	movw	r24, r22
     aaa:	9f 8b       	std	Y+23, r25	; 0x17
     aac:	8e 8b       	std	Y+22, r24	; 0x16
     aae:	8e 89       	ldd	r24, Y+22	; 0x16
     ab0:	9f 89       	ldd	r25, Y+23	; 0x17
     ab2:	9b 8f       	std	Y+27, r25	; 0x1b
     ab4:	8a 8f       	std	Y+26, r24	; 0x1a
     ab6:	8a 8d       	ldd	r24, Y+26	; 0x1a
     ab8:	9b 8d       	ldd	r25, Y+27	; 0x1b
     aba:	01 97       	sbiw	r24, 0x01	; 1
     abc:	f1 f7       	brne	.-4      	; 0xaba <trig_pulse+0x196>
     abe:	9b 8f       	std	Y+27, r25	; 0x1b
     ac0:	8a 8f       	std	Y+26, r24	; 0x1a
     ac2:	2a c0       	rjmp	.+84     	; 0xb18 <trig_pulse+0x1f4>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     ac4:	20 e0       	ldi	r18, 0x00	; 0
     ac6:	30 e0       	ldi	r19, 0x00	; 0
     ac8:	4f e7       	ldi	r20, 0x7F	; 127
     aca:	53 e4       	ldi	r21, 0x43	; 67
     acc:	6d 81       	ldd	r22, Y+5	; 0x05
     ace:	7e 81       	ldd	r23, Y+6	; 0x06
     ad0:	8f 81       	ldd	r24, Y+7	; 0x07
     ad2:	98 85       	ldd	r25, Y+8	; 0x08
     ad4:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <__gesf2>
     ad8:	18 16       	cp	r1, r24
     ada:	ac f4       	brge	.+42     	; 0xb06 <trig_pulse+0x1e2>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     adc:	69 85       	ldd	r22, Y+9	; 0x09
     ade:	7a 85       	ldd	r23, Y+10	; 0x0a
     ae0:	8b 85       	ldd	r24, Y+11	; 0x0b
     ae2:	9c 85       	ldd	r25, Y+12	; 0x0c
     ae4:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <__fixunssfsi>
     ae8:	dc 01       	movw	r26, r24
     aea:	cb 01       	movw	r24, r22
     aec:	9d 8f       	std	Y+29, r25	; 0x1d
     aee:	8c 8f       	std	Y+28, r24	; 0x1c
     af0:	8c 8d       	ldd	r24, Y+28	; 0x1c
     af2:	9d 8d       	ldd	r25, Y+29	; 0x1d
     af4:	9f 8f       	std	Y+31, r25	; 0x1f
     af6:	8e 8f       	std	Y+30, r24	; 0x1e
     af8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     afa:	9f 8d       	ldd	r25, Y+31	; 0x1f
     afc:	01 97       	sbiw	r24, 0x01	; 1
     afe:	f1 f7       	brne	.-4      	; 0xafc <trig_pulse+0x1d8>
     b00:	9f 8f       	std	Y+31, r25	; 0x1f
     b02:	8e 8f       	std	Y+30, r24	; 0x1e
     b04:	0f c0       	rjmp	.+30     	; 0xb24 <trig_pulse+0x200>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     b06:	6d 81       	ldd	r22, Y+5	; 0x05
     b08:	7e 81       	ldd	r23, Y+6	; 0x06
     b0a:	8f 81       	ldd	r24, Y+7	; 0x07
     b0c:	98 85       	ldd	r25, Y+8	; 0x08
     b0e:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <__fixunssfsi>
     b12:	dc 01       	movw	r26, r24
     b14:	cb 01       	movw	r24, r22
     b16:	8d 87       	std	Y+13, r24	; 0x0d
     b18:	8d 85       	ldd	r24, Y+13	; 0x0d
     b1a:	88 a3       	std	Y+32, r24	; 0x20
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     b1c:	88 a1       	ldd	r24, Y+32	; 0x20
     b1e:	8a 95       	dec	r24
     b20:	f1 f7       	brne	.-4      	; 0xb1e <trig_pulse+0x1fa>
     b22:	88 a3       	std	Y+32, r24	; 0x20
	_delay_us(1);					// Clear to zero and give time for electronics to set
	dist_trig_on()				// Set pin high
     b24:	60 e0       	ldi	r22, 0x00	; 0
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <gpio_write_pin>
     b2c:	80 e0       	ldi	r24, 0x00	; 0
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e4       	ldi	r26, 0x40	; 64
     b32:	b1 e4       	ldi	r27, 0x41	; 65
     b34:	89 a3       	std	Y+33, r24	; 0x21
     b36:	9a a3       	std	Y+34, r25	; 0x22
     b38:	ab a3       	std	Y+35, r26	; 0x23
     b3a:	bc a3       	std	Y+36, r27	; 0x24
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
     b3c:	25 e5       	ldi	r18, 0x55	; 85
     b3e:	35 e5       	ldi	r19, 0x55	; 85
     b40:	45 e5       	ldi	r20, 0x55	; 85
     b42:	50 e4       	ldi	r21, 0x40	; 64
     b44:	69 a1       	ldd	r22, Y+33	; 0x21
     b46:	7a a1       	ldd	r23, Y+34	; 0x22
     b48:	8b a1       	ldd	r24, Y+35	; 0x23
     b4a:	9c a1       	ldd	r25, Y+36	; 0x24
     b4c:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <__mulsf3>
     b50:	dc 01       	movw	r26, r24
     b52:	cb 01       	movw	r24, r22
     b54:	8d a3       	std	Y+37, r24	; 0x25
     b56:	9e a3       	std	Y+38, r25	; 0x26
     b58:	af a3       	std	Y+39, r26	; 0x27
     b5a:	b8 a7       	std	Y+40, r27	; 0x28
	__tmp2 = ((F_CPU) / 4e6) * __us;
     b5c:	20 e0       	ldi	r18, 0x00	; 0
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	40 e2       	ldi	r20, 0x20	; 32
     b62:	50 e4       	ldi	r21, 0x40	; 64
     b64:	69 a1       	ldd	r22, Y+33	; 0x21
     b66:	7a a1       	ldd	r23, Y+34	; 0x22
     b68:	8b a1       	ldd	r24, Y+35	; 0x23
     b6a:	9c a1       	ldd	r25, Y+36	; 0x24
     b6c:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <__mulsf3>
     b70:	dc 01       	movw	r26, r24
     b72:	cb 01       	movw	r24, r22
     b74:	89 a7       	std	Y+41, r24	; 0x29
     b76:	9a a7       	std	Y+42, r25	; 0x2a
     b78:	ab a7       	std	Y+43, r26	; 0x2b
     b7a:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     b7c:	20 e0       	ldi	r18, 0x00	; 0
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	40 e8       	ldi	r20, 0x80	; 128
     b82:	5f e3       	ldi	r21, 0x3F	; 63
     b84:	6d a1       	ldd	r22, Y+37	; 0x25
     b86:	7e a1       	ldd	r23, Y+38	; 0x26
     b88:	8f a1       	ldd	r24, Y+39	; 0x27
     b8a:	98 a5       	ldd	r25, Y+40	; 0x28
     b8c:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <__cmpsf2>
     b90:	88 23       	and	r24, r24
     b92:	1c f4       	brge	.+6      	; 0xb9a <trig_pulse+0x276>
		__ticks = 1;
     b94:	81 e0       	ldi	r24, 0x01	; 1
     b96:	8d a7       	std	Y+45, r24	; 0x2d
     b98:	b2 c0       	rjmp	.+356    	; 0xcfe <trig_pulse+0x3da>
	else if (__tmp2 > 65535)
     b9a:	20 e0       	ldi	r18, 0x00	; 0
     b9c:	3f ef       	ldi	r19, 0xFF	; 255
     b9e:	4f e7       	ldi	r20, 0x7F	; 127
     ba0:	57 e4       	ldi	r21, 0x47	; 71
     ba2:	69 a5       	ldd	r22, Y+41	; 0x29
     ba4:	7a a5       	ldd	r23, Y+42	; 0x2a
     ba6:	8b a5       	ldd	r24, Y+43	; 0x2b
     ba8:	9c a5       	ldd	r25, Y+44	; 0x2c
     baa:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <__gesf2>
     bae:	18 16       	cp	r1, r24
     bb0:	0c f0       	brlt	.+2      	; 0xbb4 <trig_pulse+0x290>
     bb2:	7b c0       	rjmp	.+246    	; 0xcaa <trig_pulse+0x386>
	{
		_delay_ms(__us / 1000.0);
     bb4:	20 e0       	ldi	r18, 0x00	; 0
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	4a e7       	ldi	r20, 0x7A	; 122
     bba:	54 e4       	ldi	r21, 0x44	; 68
     bbc:	69 a1       	ldd	r22, Y+33	; 0x21
     bbe:	7a a1       	ldd	r23, Y+34	; 0x22
     bc0:	8b a1       	ldd	r24, Y+35	; 0x23
     bc2:	9c a1       	ldd	r25, Y+36	; 0x24
     bc4:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <__divsf3>
     bc8:	dc 01       	movw	r26, r24
     bca:	cb 01       	movw	r24, r22
     bcc:	8e a7       	std	Y+46, r24	; 0x2e
     bce:	9f a7       	std	Y+47, r25	; 0x2f
     bd0:	a8 ab       	std	Y+48, r26	; 0x30
     bd2:	b9 ab       	std	Y+49, r27	; 0x31

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     bd4:	20 e0       	ldi	r18, 0x00	; 0
     bd6:	30 e4       	ldi	r19, 0x40	; 64
     bd8:	4c e1       	ldi	r20, 0x1C	; 28
     bda:	55 e4       	ldi	r21, 0x45	; 69
     bdc:	6e a5       	ldd	r22, Y+46	; 0x2e
     bde:	7f a5       	ldd	r23, Y+47	; 0x2f
     be0:	88 a9       	ldd	r24, Y+48	; 0x30
     be2:	99 a9       	ldd	r25, Y+49	; 0x31
     be4:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <__mulsf3>
     be8:	dc 01       	movw	r26, r24
     bea:	cb 01       	movw	r24, r22
     bec:	8a ab       	std	Y+50, r24	; 0x32
     bee:	9b ab       	std	Y+51, r25	; 0x33
     bf0:	ac ab       	std	Y+52, r26	; 0x34
     bf2:	bd ab       	std	Y+53, r27	; 0x35
	if (__tmp < 1.0)
     bf4:	20 e0       	ldi	r18, 0x00	; 0
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	40 e8       	ldi	r20, 0x80	; 128
     bfa:	5f e3       	ldi	r21, 0x3F	; 63
     bfc:	6a a9       	ldd	r22, Y+50	; 0x32
     bfe:	7b a9       	ldd	r23, Y+51	; 0x33
     c00:	8c a9       	ldd	r24, Y+52	; 0x34
     c02:	9d a9       	ldd	r25, Y+53	; 0x35
     c04:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <__cmpsf2>
     c08:	88 23       	and	r24, r24
     c0a:	2c f4       	brge	.+10     	; 0xc16 <trig_pulse+0x2f2>
		__ticks = 1;
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	9f ab       	std	Y+55, r25	; 0x37
     c12:	8e ab       	std	Y+54, r24	; 0x36
     c14:	3f c0       	rjmp	.+126    	; 0xc94 <trig_pulse+0x370>
	else if (__tmp > 65535)
     c16:	20 e0       	ldi	r18, 0x00	; 0
     c18:	3f ef       	ldi	r19, 0xFF	; 255
     c1a:	4f e7       	ldi	r20, 0x7F	; 127
     c1c:	57 e4       	ldi	r21, 0x47	; 71
     c1e:	6a a9       	ldd	r22, Y+50	; 0x32
     c20:	7b a9       	ldd	r23, Y+51	; 0x33
     c22:	8c a9       	ldd	r24, Y+52	; 0x34
     c24:	9d a9       	ldd	r25, Y+53	; 0x35
     c26:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <__gesf2>
     c2a:	18 16       	cp	r1, r24
     c2c:	4c f5       	brge	.+82     	; 0xc80 <trig_pulse+0x35c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c2e:	20 e0       	ldi	r18, 0x00	; 0
     c30:	30 e0       	ldi	r19, 0x00	; 0
     c32:	40 e2       	ldi	r20, 0x20	; 32
     c34:	51 e4       	ldi	r21, 0x41	; 65
     c36:	6e a5       	ldd	r22, Y+46	; 0x2e
     c38:	7f a5       	ldd	r23, Y+47	; 0x2f
     c3a:	88 a9       	ldd	r24, Y+48	; 0x30
     c3c:	99 a9       	ldd	r25, Y+49	; 0x31
     c3e:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <__mulsf3>
     c42:	dc 01       	movw	r26, r24
     c44:	cb 01       	movw	r24, r22
     c46:	bc 01       	movw	r22, r24
     c48:	cd 01       	movw	r24, r26
     c4a:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <__fixunssfsi>
     c4e:	dc 01       	movw	r26, r24
     c50:	cb 01       	movw	r24, r22
     c52:	9f ab       	std	Y+55, r25	; 0x37
     c54:	8e ab       	std	Y+54, r24	; 0x36
     c56:	0f c0       	rjmp	.+30     	; 0xc76 <trig_pulse+0x352>
     c58:	8a ef       	ldi	r24, 0xFA	; 250
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	99 af       	std	Y+57, r25	; 0x39
     c5e:	88 af       	std	Y+56, r24	; 0x38
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c60:	88 ad       	ldd	r24, Y+56	; 0x38
     c62:	99 ad       	ldd	r25, Y+57	; 0x39
     c64:	01 97       	sbiw	r24, 0x01	; 1
     c66:	f1 f7       	brne	.-4      	; 0xc64 <trig_pulse+0x340>
     c68:	99 af       	std	Y+57, r25	; 0x39
     c6a:	88 af       	std	Y+56, r24	; 0x38
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c6c:	8e a9       	ldd	r24, Y+54	; 0x36
     c6e:	9f a9       	ldd	r25, Y+55	; 0x37
     c70:	01 97       	sbiw	r24, 0x01	; 1
     c72:	9f ab       	std	Y+55, r25	; 0x37
     c74:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c76:	8e a9       	ldd	r24, Y+54	; 0x36
     c78:	9f a9       	ldd	r25, Y+55	; 0x37
     c7a:	89 2b       	or	r24, r25
     c7c:	69 f7       	brne	.-38     	; 0xc58 <trig_pulse+0x334>
     c7e:	3f c0       	rjmp	.+126    	; 0xcfe <trig_pulse+0x3da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c80:	6a a9       	ldd	r22, Y+50	; 0x32
     c82:	7b a9       	ldd	r23, Y+51	; 0x33
     c84:	8c a9       	ldd	r24, Y+52	; 0x34
     c86:	9d a9       	ldd	r25, Y+53	; 0x35
     c88:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <__fixunssfsi>
     c8c:	dc 01       	movw	r26, r24
     c8e:	cb 01       	movw	r24, r22
     c90:	9f ab       	std	Y+55, r25	; 0x37
     c92:	8e ab       	std	Y+54, r24	; 0x36
     c94:	8e a9       	ldd	r24, Y+54	; 0x36
     c96:	9f a9       	ldd	r25, Y+55	; 0x37
     c98:	9b af       	std	Y+59, r25	; 0x3b
     c9a:	8a af       	std	Y+58, r24	; 0x3a
     c9c:	8a ad       	ldd	r24, Y+58	; 0x3a
     c9e:	9b ad       	ldd	r25, Y+59	; 0x3b
     ca0:	01 97       	sbiw	r24, 0x01	; 1
     ca2:	f1 f7       	brne	.-4      	; 0xca0 <trig_pulse+0x37c>
     ca4:	9b af       	std	Y+59, r25	; 0x3b
     ca6:	8a af       	std	Y+58, r24	; 0x3a
     ca8:	2a c0       	rjmp	.+84     	; 0xcfe <trig_pulse+0x3da>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     caa:	20 e0       	ldi	r18, 0x00	; 0
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	4f e7       	ldi	r20, 0x7F	; 127
     cb0:	53 e4       	ldi	r21, 0x43	; 67
     cb2:	6d a1       	ldd	r22, Y+37	; 0x25
     cb4:	7e a1       	ldd	r23, Y+38	; 0x26
     cb6:	8f a1       	ldd	r24, Y+39	; 0x27
     cb8:	98 a5       	ldd	r25, Y+40	; 0x28
     cba:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <__gesf2>
     cbe:	18 16       	cp	r1, r24
     cc0:	ac f4       	brge	.+42     	; 0xcec <trig_pulse+0x3c8>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     cc2:	69 a5       	ldd	r22, Y+41	; 0x29
     cc4:	7a a5       	ldd	r23, Y+42	; 0x2a
     cc6:	8b a5       	ldd	r24, Y+43	; 0x2b
     cc8:	9c a5       	ldd	r25, Y+44	; 0x2c
     cca:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <__fixunssfsi>
     cce:	dc 01       	movw	r26, r24
     cd0:	cb 01       	movw	r24, r22
     cd2:	9d af       	std	Y+61, r25	; 0x3d
     cd4:	8c af       	std	Y+60, r24	; 0x3c
     cd6:	8c ad       	ldd	r24, Y+60	; 0x3c
     cd8:	9d ad       	ldd	r25, Y+61	; 0x3d
     cda:	9f af       	std	Y+63, r25	; 0x3f
     cdc:	8e af       	std	Y+62, r24	; 0x3e
     cde:	8e ad       	ldd	r24, Y+62	; 0x3e
     ce0:	9f ad       	ldd	r25, Y+63	; 0x3f
     ce2:	01 97       	sbiw	r24, 0x01	; 1
     ce4:	f1 f7       	brne	.-4      	; 0xce2 <trig_pulse+0x3be>
     ce6:	9f af       	std	Y+63, r25	; 0x3f
     ce8:	8e af       	std	Y+62, r24	; 0x3e
     cea:	1c c0       	rjmp	.+56     	; 0xd24 <trig_pulse+0x400>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     cec:	6d a1       	ldd	r22, Y+37	; 0x25
     cee:	7e a1       	ldd	r23, Y+38	; 0x26
     cf0:	8f a1       	ldd	r24, Y+39	; 0x27
     cf2:	98 a5       	ldd	r25, Y+40	; 0x28
     cf4:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <__fixunssfsi>
     cf8:	dc 01       	movw	r26, r24
     cfa:	cb 01       	movw	r24, r22
     cfc:	8d a7       	std	Y+45, r24	; 0x2d
     cfe:	2d a5       	ldd	r18, Y+45	; 0x2d
     d00:	ce 01       	movw	r24, r28
     d02:	80 5c       	subi	r24, 0xC0	; 192
     d04:	9f 4f       	sbci	r25, 0xFF	; 255
     d06:	fc 01       	movw	r30, r24
     d08:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     d0a:	ce 01       	movw	r24, r28
     d0c:	80 5c       	subi	r24, 0xC0	; 192
     d0e:	9f 4f       	sbci	r25, 0xFF	; 255
     d10:	fc 01       	movw	r30, r24
     d12:	80 81       	ld	r24, Z
     d14:	28 2f       	mov	r18, r24
     d16:	2a 95       	dec	r18
     d18:	f1 f7       	brne	.-4      	; 0xd16 <trig_pulse+0x3f2>
     d1a:	ce 01       	movw	r24, r28
     d1c:	80 5c       	subi	r24, 0xC0	; 192
     d1e:	9f 4f       	sbci	r25, 0xFF	; 255
     d20:	fc 01       	movw	r30, r24
     d22:	20 83       	st	Z, r18
	_delay_us(12);					// Send high pulse for minimum 10us
	dist_trig_off()				// Clear pin
     d24:	61 e0       	ldi	r22, 0x01	; 1
     d26:	80 e0       	ldi	r24, 0x00	; 0
     d28:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <gpio_write_pin>
     d2c:	9e 01       	movw	r18, r28
     d2e:	2f 5b       	subi	r18, 0xBF	; 191
     d30:	3f 4f       	sbci	r19, 0xFF	; 255
     d32:	80 e0       	ldi	r24, 0x00	; 0
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	a0 e8       	ldi	r26, 0x80	; 128
     d38:	bf e3       	ldi	r27, 0x3F	; 63
     d3a:	f9 01       	movw	r30, r18
     d3c:	80 83       	st	Z, r24
     d3e:	91 83       	std	Z+1, r25	; 0x01
     d40:	a2 83       	std	Z+2, r26	; 0x02
     d42:	b3 83       	std	Z+3, r27	; 0x03
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
     d44:	8e 01       	movw	r16, r28
     d46:	0b 5b       	subi	r16, 0xBB	; 187
     d48:	1f 4f       	sbci	r17, 0xFF	; 255
     d4a:	ce 01       	movw	r24, r28
     d4c:	8f 5b       	subi	r24, 0xBF	; 191
     d4e:	9f 4f       	sbci	r25, 0xFF	; 255
     d50:	25 e5       	ldi	r18, 0x55	; 85
     d52:	35 e5       	ldi	r19, 0x55	; 85
     d54:	45 e5       	ldi	r20, 0x55	; 85
     d56:	50 e4       	ldi	r21, 0x40	; 64
     d58:	fc 01       	movw	r30, r24
     d5a:	60 81       	ld	r22, Z
     d5c:	71 81       	ldd	r23, Z+1	; 0x01
     d5e:	82 81       	ldd	r24, Z+2	; 0x02
     d60:	93 81       	ldd	r25, Z+3	; 0x03
     d62:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <__mulsf3>
     d66:	dc 01       	movw	r26, r24
     d68:	cb 01       	movw	r24, r22
     d6a:	f8 01       	movw	r30, r16
     d6c:	80 83       	st	Z, r24
     d6e:	91 83       	std	Z+1, r25	; 0x01
     d70:	a2 83       	std	Z+2, r26	; 0x02
     d72:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
     d74:	8e 01       	movw	r16, r28
     d76:	07 5b       	subi	r16, 0xB7	; 183
     d78:	1f 4f       	sbci	r17, 0xFF	; 255
     d7a:	ce 01       	movw	r24, r28
     d7c:	8f 5b       	subi	r24, 0xBF	; 191
     d7e:	9f 4f       	sbci	r25, 0xFF	; 255
     d80:	20 e0       	ldi	r18, 0x00	; 0
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	40 e2       	ldi	r20, 0x20	; 32
     d86:	50 e4       	ldi	r21, 0x40	; 64
     d88:	fc 01       	movw	r30, r24
     d8a:	60 81       	ld	r22, Z
     d8c:	71 81       	ldd	r23, Z+1	; 0x01
     d8e:	82 81       	ldd	r24, Z+2	; 0x02
     d90:	93 81       	ldd	r25, Z+3	; 0x03
     d92:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <__mulsf3>
     d96:	dc 01       	movw	r26, r24
     d98:	cb 01       	movw	r24, r22
     d9a:	f8 01       	movw	r30, r16
     d9c:	80 83       	st	Z, r24
     d9e:	91 83       	std	Z+1, r25	; 0x01
     da0:	a2 83       	std	Z+2, r26	; 0x02
     da2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     da4:	ce 01       	movw	r24, r28
     da6:	8b 5b       	subi	r24, 0xBB	; 187
     da8:	9f 4f       	sbci	r25, 0xFF	; 255
     daa:	20 e0       	ldi	r18, 0x00	; 0
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	40 e8       	ldi	r20, 0x80	; 128
     db0:	5f e3       	ldi	r21, 0x3F	; 63
     db2:	fc 01       	movw	r30, r24
     db4:	60 81       	ld	r22, Z
     db6:	71 81       	ldd	r23, Z+1	; 0x01
     db8:	82 81       	ldd	r24, Z+2	; 0x02
     dba:	93 81       	ldd	r25, Z+3	; 0x03
     dbc:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <__cmpsf2>
     dc0:	88 23       	and	r24, r24
     dc2:	3c f4       	brge	.+14     	; 0xdd2 <trig_pulse+0x4ae>
		__ticks = 1;
     dc4:	ce 01       	movw	r24, r28
     dc6:	83 5b       	subi	r24, 0xB3	; 179
     dc8:	9f 4f       	sbci	r25, 0xFF	; 255
     dca:	21 e0       	ldi	r18, 0x01	; 1
     dcc:	fc 01       	movw	r30, r24
     dce:	20 83       	st	Z, r18
     dd0:	30 c1       	rjmp	.+608    	; 0x1032 <trig_pulse+0x70e>
	else if (__tmp2 > 65535)
     dd2:	ce 01       	movw	r24, r28
     dd4:	87 5b       	subi	r24, 0xB7	; 183
     dd6:	9f 4f       	sbci	r25, 0xFF	; 255
     dd8:	20 e0       	ldi	r18, 0x00	; 0
     dda:	3f ef       	ldi	r19, 0xFF	; 255
     ddc:	4f e7       	ldi	r20, 0x7F	; 127
     dde:	57 e4       	ldi	r21, 0x47	; 71
     de0:	fc 01       	movw	r30, r24
     de2:	60 81       	ld	r22, Z
     de4:	71 81       	ldd	r23, Z+1	; 0x01
     de6:	82 81       	ldd	r24, Z+2	; 0x02
     de8:	93 81       	ldd	r25, Z+3	; 0x03
     dea:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <__gesf2>
     dee:	18 16       	cp	r1, r24
     df0:	0c f0       	brlt	.+2      	; 0xdf4 <trig_pulse+0x4d0>
     df2:	d1 c0       	rjmp	.+418    	; 0xf96 <trig_pulse+0x672>
	{
		_delay_ms(__us / 1000.0);
     df4:	ce 01       	movw	r24, r28
     df6:	8f 5b       	subi	r24, 0xBF	; 191
     df8:	9f 4f       	sbci	r25, 0xFF	; 255
     dfa:	20 e0       	ldi	r18, 0x00	; 0
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	4a e7       	ldi	r20, 0x7A	; 122
     e00:	54 e4       	ldi	r21, 0x44	; 68
     e02:	fc 01       	movw	r30, r24
     e04:	60 81       	ld	r22, Z
     e06:	71 81       	ldd	r23, Z+1	; 0x01
     e08:	82 81       	ldd	r24, Z+2	; 0x02
     e0a:	93 81       	ldd	r25, Z+3	; 0x03
     e0c:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <__divsf3>
     e10:	dc 01       	movw	r26, r24
     e12:	cb 01       	movw	r24, r22
     e14:	9e 01       	movw	r18, r28
     e16:	22 5b       	subi	r18, 0xB2	; 178
     e18:	3f 4f       	sbci	r19, 0xFF	; 255
     e1a:	f9 01       	movw	r30, r18
     e1c:	80 83       	st	Z, r24
     e1e:	91 83       	std	Z+1, r25	; 0x01
     e20:	a2 83       	std	Z+2, r26	; 0x02
     e22:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     e24:	8e 01       	movw	r16, r28
     e26:	0e 5a       	subi	r16, 0xAE	; 174
     e28:	1f 4f       	sbci	r17, 0xFF	; 255
     e2a:	ce 01       	movw	r24, r28
     e2c:	82 5b       	subi	r24, 0xB2	; 178
     e2e:	9f 4f       	sbci	r25, 0xFF	; 255
     e30:	20 e0       	ldi	r18, 0x00	; 0
     e32:	30 e4       	ldi	r19, 0x40	; 64
     e34:	4c e1       	ldi	r20, 0x1C	; 28
     e36:	55 e4       	ldi	r21, 0x45	; 69
     e38:	fc 01       	movw	r30, r24
     e3a:	60 81       	ld	r22, Z
     e3c:	71 81       	ldd	r23, Z+1	; 0x01
     e3e:	82 81       	ldd	r24, Z+2	; 0x02
     e40:	93 81       	ldd	r25, Z+3	; 0x03
     e42:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <__mulsf3>
     e46:	dc 01       	movw	r26, r24
     e48:	cb 01       	movw	r24, r22
     e4a:	f8 01       	movw	r30, r16
     e4c:	80 83       	st	Z, r24
     e4e:	91 83       	std	Z+1, r25	; 0x01
     e50:	a2 83       	std	Z+2, r26	; 0x02
     e52:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e54:	ce 01       	movw	r24, r28
     e56:	8e 5a       	subi	r24, 0xAE	; 174
     e58:	9f 4f       	sbci	r25, 0xFF	; 255
     e5a:	20 e0       	ldi	r18, 0x00	; 0
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	40 e8       	ldi	r20, 0x80	; 128
     e60:	5f e3       	ldi	r21, 0x3F	; 63
     e62:	fc 01       	movw	r30, r24
     e64:	60 81       	ld	r22, Z
     e66:	71 81       	ldd	r23, Z+1	; 0x01
     e68:	82 81       	ldd	r24, Z+2	; 0x02
     e6a:	93 81       	ldd	r25, Z+3	; 0x03
     e6c:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <__cmpsf2>
     e70:	88 23       	and	r24, r24
     e72:	4c f4       	brge	.+18     	; 0xe86 <trig_pulse+0x562>
		__ticks = 1;
     e74:	ce 01       	movw	r24, r28
     e76:	8a 5a       	subi	r24, 0xAA	; 170
     e78:	9f 4f       	sbci	r25, 0xFF	; 255
     e7a:	21 e0       	ldi	r18, 0x01	; 1
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	fc 01       	movw	r30, r24
     e80:	31 83       	std	Z+1, r19	; 0x01
     e82:	20 83       	st	Z, r18
     e84:	6d c0       	rjmp	.+218    	; 0xf60 <trig_pulse+0x63c>
	else if (__tmp > 65535)
     e86:	ce 01       	movw	r24, r28
     e88:	8e 5a       	subi	r24, 0xAE	; 174
     e8a:	9f 4f       	sbci	r25, 0xFF	; 255
     e8c:	20 e0       	ldi	r18, 0x00	; 0
     e8e:	3f ef       	ldi	r19, 0xFF	; 255
     e90:	4f e7       	ldi	r20, 0x7F	; 127
     e92:	57 e4       	ldi	r21, 0x47	; 71
     e94:	fc 01       	movw	r30, r24
     e96:	60 81       	ld	r22, Z
     e98:	71 81       	ldd	r23, Z+1	; 0x01
     e9a:	82 81       	ldd	r24, Z+2	; 0x02
     e9c:	93 81       	ldd	r25, Z+3	; 0x03
     e9e:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <__gesf2>
     ea2:	18 16       	cp	r1, r24
     ea4:	0c f0       	brlt	.+2      	; 0xea8 <trig_pulse+0x584>
     ea6:	4a c0       	rjmp	.+148    	; 0xf3c <trig_pulse+0x618>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ea8:	ce 01       	movw	r24, r28
     eaa:	82 5b       	subi	r24, 0xB2	; 178
     eac:	9f 4f       	sbci	r25, 0xFF	; 255
     eae:	20 e0       	ldi	r18, 0x00	; 0
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	40 e2       	ldi	r20, 0x20	; 32
     eb4:	51 e4       	ldi	r21, 0x41	; 65
     eb6:	fc 01       	movw	r30, r24
     eb8:	60 81       	ld	r22, Z
     eba:	71 81       	ldd	r23, Z+1	; 0x01
     ebc:	82 81       	ldd	r24, Z+2	; 0x02
     ebe:	93 81       	ldd	r25, Z+3	; 0x03
     ec0:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <__mulsf3>
     ec4:	dc 01       	movw	r26, r24
     ec6:	cb 01       	movw	r24, r22
     ec8:	8e 01       	movw	r16, r28
     eca:	0a 5a       	subi	r16, 0xAA	; 170
     ecc:	1f 4f       	sbci	r17, 0xFF	; 255
     ece:	bc 01       	movw	r22, r24
     ed0:	cd 01       	movw	r24, r26
     ed2:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <__fixunssfsi>
     ed6:	dc 01       	movw	r26, r24
     ed8:	cb 01       	movw	r24, r22
     eda:	f8 01       	movw	r30, r16
     edc:	91 83       	std	Z+1, r25	; 0x01
     ede:	80 83       	st	Z, r24
     ee0:	24 c0       	rjmp	.+72     	; 0xf2a <trig_pulse+0x606>
     ee2:	ce 01       	movw	r24, r28
     ee4:	88 5a       	subi	r24, 0xA8	; 168
     ee6:	9f 4f       	sbci	r25, 0xFF	; 255
     ee8:	2a ef       	ldi	r18, 0xFA	; 250
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	fc 01       	movw	r30, r24
     eee:	31 83       	std	Z+1, r19	; 0x01
     ef0:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ef2:	ce 01       	movw	r24, r28
     ef4:	88 5a       	subi	r24, 0xA8	; 168
     ef6:	9f 4f       	sbci	r25, 0xFF	; 255
     ef8:	fc 01       	movw	r30, r24
     efa:	80 81       	ld	r24, Z
     efc:	91 81       	ldd	r25, Z+1	; 0x01
     efe:	01 97       	sbiw	r24, 0x01	; 1
     f00:	f1 f7       	brne	.-4      	; 0xefe <trig_pulse+0x5da>
     f02:	9e 01       	movw	r18, r28
     f04:	28 5a       	subi	r18, 0xA8	; 168
     f06:	3f 4f       	sbci	r19, 0xFF	; 255
     f08:	f9 01       	movw	r30, r18
     f0a:	91 83       	std	Z+1, r25	; 0x01
     f0c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f0e:	ce 01       	movw	r24, r28
     f10:	8a 5a       	subi	r24, 0xAA	; 170
     f12:	9f 4f       	sbci	r25, 0xFF	; 255
     f14:	9e 01       	movw	r18, r28
     f16:	2a 5a       	subi	r18, 0xAA	; 170
     f18:	3f 4f       	sbci	r19, 0xFF	; 255
     f1a:	f9 01       	movw	r30, r18
     f1c:	20 81       	ld	r18, Z
     f1e:	31 81       	ldd	r19, Z+1	; 0x01
     f20:	21 50       	subi	r18, 0x01	; 1
     f22:	31 09       	sbc	r19, r1
     f24:	fc 01       	movw	r30, r24
     f26:	31 83       	std	Z+1, r19	; 0x01
     f28:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f2a:	ce 01       	movw	r24, r28
     f2c:	8a 5a       	subi	r24, 0xAA	; 170
     f2e:	9f 4f       	sbci	r25, 0xFF	; 255
     f30:	fc 01       	movw	r30, r24
     f32:	80 81       	ld	r24, Z
     f34:	91 81       	ldd	r25, Z+1	; 0x01
     f36:	89 2b       	or	r24, r25
     f38:	a1 f6       	brne	.-88     	; 0xee2 <trig_pulse+0x5be>
     f3a:	7b c0       	rjmp	.+246    	; 0x1032 <trig_pulse+0x70e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f3c:	8e 01       	movw	r16, r28
     f3e:	0a 5a       	subi	r16, 0xAA	; 170
     f40:	1f 4f       	sbci	r17, 0xFF	; 255
     f42:	ce 01       	movw	r24, r28
     f44:	8e 5a       	subi	r24, 0xAE	; 174
     f46:	9f 4f       	sbci	r25, 0xFF	; 255
     f48:	fc 01       	movw	r30, r24
     f4a:	60 81       	ld	r22, Z
     f4c:	71 81       	ldd	r23, Z+1	; 0x01
     f4e:	82 81       	ldd	r24, Z+2	; 0x02
     f50:	93 81       	ldd	r25, Z+3	; 0x03
     f52:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <__fixunssfsi>
     f56:	dc 01       	movw	r26, r24
     f58:	cb 01       	movw	r24, r22
     f5a:	f8 01       	movw	r30, r16
     f5c:	91 83       	std	Z+1, r25	; 0x01
     f5e:	80 83       	st	Z, r24
     f60:	ce 01       	movw	r24, r28
     f62:	86 5a       	subi	r24, 0xA6	; 166
     f64:	9f 4f       	sbci	r25, 0xFF	; 255
     f66:	9e 01       	movw	r18, r28
     f68:	2a 5a       	subi	r18, 0xAA	; 170
     f6a:	3f 4f       	sbci	r19, 0xFF	; 255
     f6c:	f9 01       	movw	r30, r18
     f6e:	20 81       	ld	r18, Z
     f70:	31 81       	ldd	r19, Z+1	; 0x01
     f72:	fc 01       	movw	r30, r24
     f74:	31 83       	std	Z+1, r19	; 0x01
     f76:	20 83       	st	Z, r18
     f78:	ce 01       	movw	r24, r28
     f7a:	86 5a       	subi	r24, 0xA6	; 166
     f7c:	9f 4f       	sbci	r25, 0xFF	; 255
     f7e:	fc 01       	movw	r30, r24
     f80:	80 81       	ld	r24, Z
     f82:	91 81       	ldd	r25, Z+1	; 0x01
     f84:	01 97       	sbiw	r24, 0x01	; 1
     f86:	f1 f7       	brne	.-4      	; 0xf84 <trig_pulse+0x660>
     f88:	9e 01       	movw	r18, r28
     f8a:	26 5a       	subi	r18, 0xA6	; 166
     f8c:	3f 4f       	sbci	r19, 0xFF	; 255
     f8e:	f9 01       	movw	r30, r18
     f90:	91 83       	std	Z+1, r25	; 0x01
     f92:	80 83       	st	Z, r24
     f94:	4e c0       	rjmp	.+156    	; 0x1032 <trig_pulse+0x70e>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     f96:	ce 01       	movw	r24, r28
     f98:	8b 5b       	subi	r24, 0xBB	; 187
     f9a:	9f 4f       	sbci	r25, 0xFF	; 255
     f9c:	20 e0       	ldi	r18, 0x00	; 0
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	4f e7       	ldi	r20, 0x7F	; 127
     fa2:	53 e4       	ldi	r21, 0x43	; 67
     fa4:	fc 01       	movw	r30, r24
     fa6:	60 81       	ld	r22, Z
     fa8:	71 81       	ldd	r23, Z+1	; 0x01
     faa:	82 81       	ldd	r24, Z+2	; 0x02
     fac:	93 81       	ldd	r25, Z+3	; 0x03
     fae:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <__gesf2>
     fb2:	18 16       	cp	r1, r24
     fb4:	6c f5       	brge	.+90     	; 0x1010 <trig_pulse+0x6ec>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     fb6:	8e 01       	movw	r16, r28
     fb8:	04 5a       	subi	r16, 0xA4	; 164
     fba:	1f 4f       	sbci	r17, 0xFF	; 255
     fbc:	ce 01       	movw	r24, r28
     fbe:	87 5b       	subi	r24, 0xB7	; 183
     fc0:	9f 4f       	sbci	r25, 0xFF	; 255
     fc2:	fc 01       	movw	r30, r24
     fc4:	60 81       	ld	r22, Z
     fc6:	71 81       	ldd	r23, Z+1	; 0x01
     fc8:	82 81       	ldd	r24, Z+2	; 0x02
     fca:	93 81       	ldd	r25, Z+3	; 0x03
     fcc:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <__fixunssfsi>
     fd0:	dc 01       	movw	r26, r24
     fd2:	cb 01       	movw	r24, r22
     fd4:	f8 01       	movw	r30, r16
     fd6:	91 83       	std	Z+1, r25	; 0x01
     fd8:	80 83       	st	Z, r24
     fda:	ce 01       	movw	r24, r28
     fdc:	82 5a       	subi	r24, 0xA2	; 162
     fde:	9f 4f       	sbci	r25, 0xFF	; 255
     fe0:	9e 01       	movw	r18, r28
     fe2:	24 5a       	subi	r18, 0xA4	; 164
     fe4:	3f 4f       	sbci	r19, 0xFF	; 255
     fe6:	f9 01       	movw	r30, r18
     fe8:	20 81       	ld	r18, Z
     fea:	31 81       	ldd	r19, Z+1	; 0x01
     fec:	fc 01       	movw	r30, r24
     fee:	31 83       	std	Z+1, r19	; 0x01
     ff0:	20 83       	st	Z, r18
     ff2:	ce 01       	movw	r24, r28
     ff4:	82 5a       	subi	r24, 0xA2	; 162
     ff6:	9f 4f       	sbci	r25, 0xFF	; 255
     ff8:	fc 01       	movw	r30, r24
     ffa:	80 81       	ld	r24, Z
     ffc:	91 81       	ldd	r25, Z+1	; 0x01
     ffe:	01 97       	sbiw	r24, 0x01	; 1
    1000:	f1 f7       	brne	.-4      	; 0xffe <trig_pulse+0x6da>
    1002:	9e 01       	movw	r18, r28
    1004:	22 5a       	subi	r18, 0xA2	; 162
    1006:	3f 4f       	sbci	r19, 0xFF	; 255
    1008:	f9 01       	movw	r30, r18
    100a:	91 83       	std	Z+1, r25	; 0x01
    100c:	80 83       	st	Z, r24
    100e:	28 c0       	rjmp	.+80     	; 0x1060 <trig_pulse+0x73c>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1010:	8e 01       	movw	r16, r28
    1012:	03 5b       	subi	r16, 0xB3	; 179
    1014:	1f 4f       	sbci	r17, 0xFF	; 255
    1016:	ce 01       	movw	r24, r28
    1018:	8b 5b       	subi	r24, 0xBB	; 187
    101a:	9f 4f       	sbci	r25, 0xFF	; 255
    101c:	fc 01       	movw	r30, r24
    101e:	60 81       	ld	r22, Z
    1020:	71 81       	ldd	r23, Z+1	; 0x01
    1022:	82 81       	ldd	r24, Z+2	; 0x02
    1024:	93 81       	ldd	r25, Z+3	; 0x03
    1026:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <__fixunssfsi>
    102a:	dc 01       	movw	r26, r24
    102c:	cb 01       	movw	r24, r22
    102e:	f8 01       	movw	r30, r16
    1030:	80 83       	st	Z, r24
    1032:	ce 01       	movw	r24, r28
    1034:	80 5a       	subi	r24, 0xA0	; 160
    1036:	9f 4f       	sbci	r25, 0xFF	; 255
    1038:	9e 01       	movw	r18, r28
    103a:	23 5b       	subi	r18, 0xB3	; 179
    103c:	3f 4f       	sbci	r19, 0xFF	; 255
    103e:	f9 01       	movw	r30, r18
    1040:	20 81       	ld	r18, Z
    1042:	fc 01       	movw	r30, r24
    1044:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1046:	ce 01       	movw	r24, r28
    1048:	80 5a       	subi	r24, 0xA0	; 160
    104a:	9f 4f       	sbci	r25, 0xFF	; 255
    104c:	fc 01       	movw	r30, r24
    104e:	80 81       	ld	r24, Z
    1050:	28 2f       	mov	r18, r24
    1052:	2a 95       	dec	r18
    1054:	f1 f7       	brne	.-4      	; 0x1052 <trig_pulse+0x72e>
    1056:	ce 01       	movw	r24, r28
    1058:	80 5a       	subi	r24, 0xA0	; 160
    105a:	9f 4f       	sbci	r25, 0xFF	; 255
    105c:	fc 01       	movw	r30, r24
    105e:	20 83       	st	Z, r18
	_delay_us(1);					// Delay not required, but just in case...
}
    1060:	c0 5a       	subi	r28, 0xA0	; 160
    1062:	df 4f       	sbci	r29, 0xFF	; 255
    1064:	0f b6       	in	r0, 0x3f	; 63
    1066:	f8 94       	cli
    1068:	de bf       	out	0x3e, r29	; 62
    106a:	0f be       	out	0x3f, r0	; 63
    106c:	cd bf       	out	0x3d, r28	; 61
    106e:	df 91       	pop	r29
    1070:	cf 91       	pop	r28
    1072:	1f 91       	pop	r17
    1074:	0f 91       	pop	r16
    1076:	08 95       	ret

00001078 <distance_sensor>:
/*
 *	Function: 		unsigned int distance_sensor()
 *	Description: 	returns the distance sensor read value
 */
unsigned int distance_sensor()
{
    1078:	cf 93       	push	r28
    107a:	df 93       	push	r29
    107c:	cd b7       	in	r28, 0x3d	; 61
    107e:	de b7       	in	r29, 0x3e	; 62
    1080:	28 97       	sbiw	r28, 0x08	; 8
    1082:	0f b6       	in	r0, 0x3f	; 63
    1084:	f8 94       	cli
    1086:	de bf       	out	0x3e, r29	; 62
    1088:	0f be       	out	0x3f, r0	; 63
    108a:	cd bf       	out	0x3d, r28	; 61

	trig_pulse();														// Sending the pulse
    108c:	0e 94 92 04 	call	0x924	; 0x924 <trig_pulse>

	while(!(gpio_read_pin(DIST_ECHO_PIN)))								// While echo pin is low (so no feedback)
    1090:	2f c0       	rjmp	.+94     	; 0x10f0 <distance_sensor+0x78>
	{
		dist_trig_counter++;
    1092:	80 91 42 01 	lds	r24, 0x0142
    1096:	90 91 43 01 	lds	r25, 0x0143
    109a:	a0 91 44 01 	lds	r26, 0x0144
    109e:	b0 91 45 01 	lds	r27, 0x0145
    10a2:	01 96       	adiw	r24, 0x01	; 1
    10a4:	a1 1d       	adc	r26, r1
    10a6:	b1 1d       	adc	r27, r1
    10a8:	80 93 42 01 	sts	0x0142, r24
    10ac:	90 93 43 01 	sts	0x0143, r25
    10b0:	a0 93 44 01 	sts	0x0144, r26
    10b4:	b0 93 45 01 	sts	0x0145, r27
		uint32_t max_response_time = DIST_SENSOR_TIMOUT;				// getting timeout
    10b8:	84 e1       	ldi	r24, 0x14	; 20
    10ba:	9f e8       	ldi	r25, 0x8F	; 143
    10bc:	a3 e0       	ldi	r26, 0x03	; 3
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	89 83       	std	Y+1, r24	; 0x01
    10c2:	9a 83       	std	Y+2, r25	; 0x02
    10c4:	ab 83       	std	Y+3, r26	; 0x03
    10c6:	bc 83       	std	Y+4, r27	; 0x04
		if(dist_trig_counter > max_response_time)						// timeoued
    10c8:	20 91 42 01 	lds	r18, 0x0142
    10cc:	30 91 43 01 	lds	r19, 0x0143
    10d0:	40 91 44 01 	lds	r20, 0x0144
    10d4:	50 91 45 01 	lds	r21, 0x0145
    10d8:	89 81       	ldd	r24, Y+1	; 0x01
    10da:	9a 81       	ldd	r25, Y+2	; 0x02
    10dc:	ab 81       	ldd	r26, Y+3	; 0x03
    10de:	bc 81       	ldd	r27, Y+4	; 0x04
    10e0:	82 17       	cp	r24, r18
    10e2:	93 07       	cpc	r25, r19
    10e4:	a4 07       	cpc	r26, r20
    10e6:	b5 07       	cpc	r27, r21
    10e8:	18 f4       	brcc	.+6      	; 0x10f0 <distance_sensor+0x78>
			return TRIG_ERROR;
    10ea:	8f ef       	ldi	r24, 0xFF	; 255
    10ec:	9f ef       	ldi	r25, 0xFF	; 255
    10ee:	87 c0       	rjmp	.+270    	; 0x11fe <__stack+0xff>
unsigned int distance_sensor()
{

	trig_pulse();														// Sending the pulse

	while(!(gpio_read_pin(DIST_ECHO_PIN)))								// While echo pin is low (so no feedback)
    10f0:	80 e0       	ldi	r24, 0x00	; 0
    10f2:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <gpio_read_pin>
    10f6:	88 23       	and	r24, r24
    10f8:	61 f2       	breq	.-104    	; 0x1092 <distance_sensor+0x1a>
		uint32_t max_response_time = DIST_SENSOR_TIMOUT;				// getting timeout
		if(dist_trig_counter > max_response_time)						// timeoued
			return TRIG_ERROR;
	}

	TCNT2 = 0;															// reseting the timer
    10fa:	82 eb       	ldi	r24, 0xB2	; 178
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	fc 01       	movw	r30, r24
    1100:	10 82       	st	Z, r1
	TCCR2A |= (1 << CS20);												// no prescaler
    1102:	80 eb       	ldi	r24, 0xB0	; 176
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	20 eb       	ldi	r18, 0xB0	; 176
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	f9 01       	movw	r30, r18
    110c:	20 81       	ld	r18, Z
    110e:	21 60       	ori	r18, 0x01	; 1
    1110:	fc 01       	movw	r30, r24
    1112:	20 83       	st	Z, r18
	TIMSK2 |= (1 << TOIE2);												// interrupt overflow
    1114:	80 e7       	ldi	r24, 0x70	; 112
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	20 e7       	ldi	r18, 0x70	; 112
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	f9 01       	movw	r30, r18
    111e:	20 81       	ld	r18, Z
    1120:	21 60       	ori	r18, 0x01	; 1
    1122:	fc 01       	movw	r30, r24
    1124:	20 83       	st	Z, r18
	dist_overflow_counter = 0;
    1126:	10 92 3e 01 	sts	0x013E, r1
    112a:	10 92 3f 01 	sts	0x013F, r1
    112e:	10 92 40 01 	sts	0x0140, r1
    1132:	10 92 41 01 	sts	0x0141, r1
	sei();																// enable global interupts
    1136:	78 94       	sei

	while(gpio_read_pin(DIST_ECHO_PIN))									// getting echo
    1138:	23 c0       	rjmp	.+70     	; 0x1180 <__stack+0x81>
	{
		if(((dist_overflow_counter*TIMER_MAX) + TCNT2) > DIST_SENSOR_TIMOUT)
    113a:	20 91 3e 01 	lds	r18, 0x013E
    113e:	30 91 3f 01 	lds	r19, 0x013F
    1142:	40 91 40 01 	lds	r20, 0x0140
    1146:	50 91 41 01 	lds	r21, 0x0141
    114a:	8f ef       	ldi	r24, 0xFF	; 255
    114c:	9f ef       	ldi	r25, 0xFF	; 255
    114e:	dc 01       	movw	r26, r24
    1150:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <__muluhisi3>
    1154:	9b 01       	movw	r18, r22
    1156:	ac 01       	movw	r20, r24
    1158:	82 eb       	ldi	r24, 0xB2	; 178
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	fc 01       	movw	r30, r24
    115e:	80 81       	ld	r24, Z
    1160:	88 2f       	mov	r24, r24
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	a0 e0       	ldi	r26, 0x00	; 0
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	82 0f       	add	r24, r18
    116a:	93 1f       	adc	r25, r19
    116c:	a4 1f       	adc	r26, r20
    116e:	b5 1f       	adc	r27, r21
    1170:	85 31       	cpi	r24, 0x15	; 21
    1172:	9f 48       	sbci	r25, 0x8F	; 143
    1174:	a3 40       	sbci	r26, 0x03	; 3
    1176:	b1 05       	cpc	r27, r1
    1178:	18 f0       	brcs	.+6      	; 0x1180 <__stack+0x81>
			return ECHO_ERROR;
    117a:	8e ef       	ldi	r24, 0xFE	; 254
    117c:	9f ef       	ldi	r25, 0xFF	; 255
    117e:	3f c0       	rjmp	.+126    	; 0x11fe <__stack+0xff>
	TCCR2A |= (1 << CS20);												// no prescaler
	TIMSK2 |= (1 << TOIE2);												// interrupt overflow
	dist_overflow_counter = 0;
	sei();																// enable global interupts

	while(gpio_read_pin(DIST_ECHO_PIN))									// getting echo
    1180:	80 e0       	ldi	r24, 0x00	; 0
    1182:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <gpio_read_pin>
    1186:	88 23       	and	r24, r24
    1188:	c1 f6       	brne	.-80     	; 0x113a <__stack+0x3b>
	{
		if(((dist_overflow_counter*TIMER_MAX) + TCNT2) > DIST_SENSOR_TIMOUT)
			return ECHO_ERROR;
	}

	TCCR2A = 0x00;														// stop the timer
    118a:	80 eb       	ldi	r24, 0xB0	; 176
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	fc 01       	movw	r30, r24
    1190:	10 82       	st	Z, r1
	cli();																// disable global int
    1192:	f8 94       	cli
	dist_num_of_ticks = ((dist_overflow_counter * TIMER_MAX) + TCNT2);	// number of ticks
    1194:	20 91 3e 01 	lds	r18, 0x013E
    1198:	30 91 3f 01 	lds	r19, 0x013F
    119c:	40 91 40 01 	lds	r20, 0x0140
    11a0:	50 91 41 01 	lds	r21, 0x0141
    11a4:	8f ef       	ldi	r24, 0xFF	; 255
    11a6:	9f ef       	ldi	r25, 0xFF	; 255
    11a8:	dc 01       	movw	r26, r24
    11aa:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <__muluhisi3>
    11ae:	9b 01       	movw	r18, r22
    11b0:	ac 01       	movw	r20, r24
    11b2:	82 eb       	ldi	r24, 0xB2	; 178
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	fc 01       	movw	r30, r24
    11b8:	80 81       	ld	r24, Z
    11ba:	88 2f       	mov	r24, r24
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	a0 e0       	ldi	r26, 0x00	; 0
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	82 0f       	add	r24, r18
    11c4:	93 1f       	adc	r25, r19
    11c6:	a4 1f       	adc	r26, r20
    11c8:	b5 1f       	adc	r27, r21
    11ca:	80 93 46 01 	sts	0x0146, r24
    11ce:	90 93 47 01 	sts	0x0147, r25
    11d2:	a0 93 48 01 	sts	0x0148, r26
    11d6:	b0 93 49 01 	sts	0x0149, r27

	return (dist_num_of_ticks / (CONVERT_TO_CM * CYCLES_PER_US));
    11da:	80 91 46 01 	lds	r24, 0x0146
    11de:	90 91 47 01 	lds	r25, 0x0147
    11e2:	a0 91 48 01 	lds	r26, 0x0148
    11e6:	b0 91 49 01 	lds	r27, 0x0149
    11ea:	24 e4       	ldi	r18, 0x44	; 68
    11ec:	32 e0       	ldi	r19, 0x02	; 2
    11ee:	40 e0       	ldi	r20, 0x00	; 0
    11f0:	50 e0       	ldi	r21, 0x00	; 0
    11f2:	bc 01       	movw	r22, r24
    11f4:	cd 01       	movw	r24, r26
    11f6:	0e 94 af 1c 	call	0x395e	; 0x395e <__udivmodsi4>
    11fa:	da 01       	movw	r26, r20
    11fc:	c9 01       	movw	r24, r18

}
    11fe:	28 96       	adiw	r28, 0x08	; 8
    1200:	0f b6       	in	r0, 0x3f	; 63
    1202:	f8 94       	cli
    1204:	de bf       	out	0x3e, r29	; 62
    1206:	0f be       	out	0x3f, r0	; 63
    1208:	cd bf       	out	0x3d, r28	; 61
    120a:	df 91       	pop	r29
    120c:	cf 91       	pop	r28
    120e:	08 95       	ret

00001210 <blueside>:
	{{100,0},LOW_SPEED,FORWARD,NULL}
};


void blueside(void)
{
    1210:	cf 93       	push	r28
    1212:	df 93       	push	r29
    1214:	cd b7       	in	r28, 0x3d	; 61
    1216:	de b7       	in	r29, 0x3e	; 62
    1218:	2b 97       	sbiw	r28, 0x0b	; 11
    121a:	0f b6       	in	r0, 0x3f	; 63
    121c:	f8 94       	cli
    121e:	de bf       	out	0x3e, r29	; 62
    1220:	0f be       	out	0x3f, r0	; 63
    1222:	cd bf       	out	0x3d, r28	; 61
	struct odometry_position starting_position;
	uint8_t current_position = 0;
    1224:	19 82       	std	Y+1, r1	; 0x01
	uint8_t next_position = 0;
    1226:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t odometry_status;
	int8_t active_state = ROBOT_STATE_TACTIC_SIDE;
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	8b 83       	std	Y+3, r24	; 0x03

	starting_position.x		= 0;
    122c:	1e 82       	std	Y+6, r1	; 0x06
    122e:	1d 82       	std	Y+5, r1	; 0x05
	starting_position.y		= 0;
    1230:	18 86       	std	Y+8, r1	; 0x08
    1232:	1f 82       	std	Y+7, r1	; 0x07
	starting_position.angle = 0;
    1234:	1a 86       	std	Y+10, r1	; 0x0a
    1236:	19 86       	std	Y+9, r1	; 0x09

	odometry_set_position(&starting_position);
    1238:	ce 01       	movw	r24, r28
    123a:	05 96       	adiw	r24, 0x05	; 5
    123c:	0e 94 52 13 	call	0x26a4	; 0x26a4 <odometry_set_position>

	while(1)
	{
		switch(active_state)
    1240:	8b 81       	ldd	r24, Y+3	; 0x03
    1242:	08 2e       	mov	r0, r24
    1244:	00 0c       	add	r0, r0
    1246:	99 0b       	sbc	r25, r25
    1248:	81 30       	cpi	r24, 0x01	; 1
    124a:	91 05       	cpc	r25, r1
    124c:	21 f0       	breq	.+8      	; 0x1256 <blueside+0x46>
    124e:	02 97       	sbiw	r24, 0x02	; 2
    1250:	09 f4       	brne	.+2      	; 0x1254 <blueside+0x44>
    1252:	3f c0       	rjmp	.+126    	; 0x12d2 <blueside+0xc2>
    1254:	7f c0       	rjmp	.+254    	; 0x1354 <blueside+0x144>
		{
			case ROBOT_STATE_TACTIC_SIDE:
				for(current_position = next_position;current_position < TACTIC_SIDE_POSITION_COUNT; current_position++)
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	89 83       	std	Y+1, r24	; 0x01
    125a:	38 c0       	rjmp	.+112    	; 0x12cc <blueside+0xbc>
				{
					odometry_status = odometry_move_to_position(&(blue_tactic_side_positions[current_position].point), blue_tactic_side_positions[current_position].speed,
    125c:	40 e0       	ldi	r20, 0x00	; 0
    125e:	50 e0       	ldi	r21, 0x00	; 0
    1260:	89 81       	ldd	r24, Y+1	; 0x01
    1262:	28 2f       	mov	r18, r24
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	6b e0       	ldi	r22, 0x0B	; 11
    1268:	62 9f       	mul	r22, r18
    126a:	c0 01       	movw	r24, r0
    126c:	63 9f       	mul	r22, r19
    126e:	90 0d       	add	r25, r0
    1270:	11 24       	eor	r1, r1
    1272:	87 5e       	subi	r24, 0xE7	; 231
    1274:	9e 4f       	sbci	r25, 0xFE	; 254
    1276:	dc 01       	movw	r26, r24
    1278:	ec 91       	ld	r30, X
    127a:	89 81       	ldd	r24, Y+1	; 0x01
    127c:	28 2f       	mov	r18, r24
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	6b e0       	ldi	r22, 0x0B	; 11
    1282:	62 9f       	mul	r22, r18
    1284:	c0 01       	movw	r24, r0
    1286:	63 9f       	mul	r22, r19
    1288:	90 0d       	add	r25, r0
    128a:	11 24       	eor	r1, r1
    128c:	88 5e       	subi	r24, 0xE8	; 232
    128e:	9e 4f       	sbci	r25, 0xFE	; 254
    1290:	dc 01       	movw	r26, r24
    1292:	7c 91       	ld	r23, X
    1294:	89 81       	ldd	r24, Y+1	; 0x01
    1296:	28 2f       	mov	r18, r24
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	6b e0       	ldi	r22, 0x0B	; 11
    129c:	62 9f       	mul	r22, r18
    129e:	c0 01       	movw	r24, r0
    12a0:	63 9f       	mul	r22, r19
    12a2:	90 0d       	add	r25, r0
    12a4:	11 24       	eor	r1, r1
    12a6:	8f 5e       	subi	r24, 0xEF	; 239
    12a8:	9e 4f       	sbci	r25, 0xFE	; 254
    12aa:	9a 01       	movw	r18, r20
    12ac:	4e 2f       	mov	r20, r30
    12ae:	67 2f       	mov	r22, r23
    12b0:	0e 94 94 12 	call	0x2528	; 0x2528 <odometry_move_to_position>
    12b4:	8c 83       	std	Y+4, r24	; 0x04
					blue_tactic_side_positions[current_position].direction,blue_tactic_side_positions[current_position].callback);

					if(odometry_status == ODOMETRY_FAIL)
    12b6:	8c 81       	ldd	r24, Y+4	; 0x04
    12b8:	81 30       	cpi	r24, 0x01	; 1
    12ba:	09 f4       	brne	.+2      	; 0x12be <blueside+0xae>
					{
						break;
    12bc:	0a c0       	rjmp	.+20     	; 0x12d2 <blueside+0xc2>
					}
					if(current_position == 1){
    12be:	89 81       	ldd	r24, Y+1	; 0x01
    12c0:	81 30       	cpi	r24, 0x01	; 1
    12c2:	09 f4       	brne	.+2      	; 0x12c6 <blueside+0xb6>
						//odometry_stop(HARD_STOP);
						while(1);
    12c4:	ff cf       	rjmp	.-2      	; 0x12c4 <blueside+0xb4>
	while(1)
	{
		switch(active_state)
		{
			case ROBOT_STATE_TACTIC_SIDE:
				for(current_position = next_position;current_position < TACTIC_SIDE_POSITION_COUNT; current_position++)
    12c6:	89 81       	ldd	r24, Y+1	; 0x01
    12c8:	8f 5f       	subi	r24, 0xFF	; 255
    12ca:	89 83       	std	Y+1, r24	; 0x01
    12cc:	89 81       	ldd	r24, Y+1	; 0x01
    12ce:	88 23       	and	r24, r24
    12d0:	29 f2       	breq	.-118    	; 0x125c <blueside+0x4c>
						while(1);
					}
				}//end for
				/* no break */
			case ROBOT_STATE_TACTIC_CENTER:
				for(current_position = next_position;current_position < TACTIC_CENTER_POSITION_COUNT; current_position++)
    12d2:	8a 81       	ldd	r24, Y+2	; 0x02
    12d4:	89 83       	std	Y+1, r24	; 0x01
    12d6:	3b c0       	rjmp	.+118    	; 0x134e <blueside+0x13e>
				{
					odometry_status = odometry_move_to_position(&(blue_tactic_center_positions[current_position].point), blue_tactic_center_positions[current_position].speed,
    12d8:	40 e0       	ldi	r20, 0x00	; 0
    12da:	50 e0       	ldi	r21, 0x00	; 0
    12dc:	89 81       	ldd	r24, Y+1	; 0x01
    12de:	28 2f       	mov	r18, r24
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	6b e0       	ldi	r22, 0x0B	; 11
    12e4:	62 9f       	mul	r22, r18
    12e6:	c0 01       	movw	r24, r0
    12e8:	63 9f       	mul	r22, r19
    12ea:	90 0d       	add	r25, r0
    12ec:	11 24       	eor	r1, r1
    12ee:	8c 5d       	subi	r24, 0xDC	; 220
    12f0:	9e 4f       	sbci	r25, 0xFE	; 254
    12f2:	dc 01       	movw	r26, r24
    12f4:	ec 91       	ld	r30, X
    12f6:	89 81       	ldd	r24, Y+1	; 0x01
    12f8:	28 2f       	mov	r18, r24
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	6b e0       	ldi	r22, 0x0B	; 11
    12fe:	62 9f       	mul	r22, r18
    1300:	c0 01       	movw	r24, r0
    1302:	63 9f       	mul	r22, r19
    1304:	90 0d       	add	r25, r0
    1306:	11 24       	eor	r1, r1
    1308:	8d 5d       	subi	r24, 0xDD	; 221
    130a:	9e 4f       	sbci	r25, 0xFE	; 254
    130c:	dc 01       	movw	r26, r24
    130e:	7c 91       	ld	r23, X
    1310:	89 81       	ldd	r24, Y+1	; 0x01
    1312:	28 2f       	mov	r18, r24
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	6b e0       	ldi	r22, 0x0B	; 11
    1318:	62 9f       	mul	r22, r18
    131a:	c0 01       	movw	r24, r0
    131c:	63 9f       	mul	r22, r19
    131e:	90 0d       	add	r25, r0
    1320:	11 24       	eor	r1, r1
    1322:	84 5e       	subi	r24, 0xE4	; 228
    1324:	9e 4f       	sbci	r25, 0xFE	; 254
    1326:	9a 01       	movw	r18, r20
    1328:	4e 2f       	mov	r20, r30
    132a:	67 2f       	mov	r22, r23
    132c:	0e 94 94 12 	call	0x2528	; 0x2528 <odometry_move_to_position>
    1330:	8c 83       	std	Y+4, r24	; 0x04
					blue_tactic_center_positions[current_position].direction,blue_tactic_center_positions[current_position].callback);

					if(odometry_status == ODOMETRY_FAIL)
    1332:	8c 81       	ldd	r24, Y+4	; 0x04
    1334:	81 30       	cpi	r24, 0x01	; 1
    1336:	09 f4       	brne	.+2      	; 0x133a <blueside+0x12a>
					{
						break;
    1338:	0d c0       	rjmp	.+26     	; 0x1354 <blueside+0x144>
					}
					if(current_position == 1){
    133a:	89 81       	ldd	r24, Y+1	; 0x01
    133c:	81 30       	cpi	r24, 0x01	; 1
    133e:	21 f4       	brne	.+8      	; 0x1348 <blueside+0x138>
						odometry_stop(HARD_STOP);
    1340:	83 e5       	ldi	r24, 0x53	; 83
    1342:	0e 94 53 11 	call	0x22a6	; 0x22a6 <odometry_stop>
						while(1);
    1346:	ff cf       	rjmp	.-2      	; 0x1346 <blueside+0x136>
						while(1);
					}
				}//end for
				/* no break */
			case ROBOT_STATE_TACTIC_CENTER:
				for(current_position = next_position;current_position < TACTIC_CENTER_POSITION_COUNT; current_position++)
    1348:	89 81       	ldd	r24, Y+1	; 0x01
    134a:	8f 5f       	subi	r24, 0xFF	; 255
    134c:	89 83       	std	Y+1, r24	; 0x01
    134e:	89 81       	ldd	r24, Y+1	; 0x01
    1350:	88 23       	and	r24, r24
    1352:	11 f2       	breq	.-124    	; 0x12d8 <blueside+0xc8>
						odometry_stop(HARD_STOP);
						while(1);
					}
				}//end for
		}//end switch
	}//end while
    1354:	75 cf       	rjmp	.-278    	; 0x1240 <blueside+0x30>

00001356 <__vector_18>:
static volatile unsigned char rxCounter[10];
//volatile static long canTime;

// Interrupt Service Routine
ISR(CANIT_vect)
{
    1356:	1f 92       	push	r1
    1358:	0f 92       	push	r0
    135a:	00 90 5f 00 	lds	r0, 0x005F
    135e:	0f 92       	push	r0
    1360:	11 24       	eor	r1, r1
    1362:	00 90 5b 00 	lds	r0, 0x005B
    1366:	0f 92       	push	r0
    1368:	2f 93       	push	r18
    136a:	3f 93       	push	r19
    136c:	4f 93       	push	r20
    136e:	5f 93       	push	r21
    1370:	8f 93       	push	r24
    1372:	9f 93       	push	r25
    1374:	ef 93       	push	r30
    1376:	ff 93       	push	r31
    1378:	cf 93       	push	r28
    137a:	df 93       	push	r29
    137c:	00 d0       	rcall	.+0      	; 0x137e <__vector_18+0x28>
    137e:	00 d0       	rcall	.+0      	; 0x1380 <__vector_18+0x2a>
    1380:	cd b7       	in	r28, 0x3d	; 61
    1382:	de b7       	in	r29, 0x3e	; 62
	unsigned char tempPage = CANPAGE;
    1384:	8d ee       	ldi	r24, 0xED	; 237
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	fc 01       	movw	r30, r24
    138a:	80 81       	ld	r24, Z
    138c:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
    138e:	19 82       	std	Y+1, r1	; 0x01
    1390:	a4 c0       	rjmp	.+328    	; 0x14da <__vector_18+0x184>
	{
		CANPAGE = ch << 4;
    1392:	8d ee       	ldi	r24, 0xED	; 237
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	29 81       	ldd	r18, Y+1	; 0x01
    1398:	22 95       	swap	r18
    139a:	20 7f       	andi	r18, 0xF0	; 240
    139c:	fc 01       	movw	r30, r24
    139e:	20 83       	st	Z, r18

		// receive interrupt
		if( (CANSTMOB >> RXOK) & 0x01)
    13a0:	8e ee       	ldi	r24, 0xEE	; 238
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	fc 01       	movw	r30, r24
    13a6:	80 81       	ld	r24, Z
    13a8:	82 95       	swap	r24
    13aa:	86 95       	lsr	r24
    13ac:	87 70       	andi	r24, 0x07	; 7
    13ae:	88 2f       	mov	r24, r24
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	81 70       	andi	r24, 0x01	; 1
    13b4:	99 27       	eor	r25, r25
    13b6:	89 2b       	or	r24, r25
    13b8:	09 f4       	brne	.+2      	; 0x13bc <__vector_18+0x66>
    13ba:	70 c0       	rjmp	.+224    	; 0x149c <__vector_18+0x146>
		{
			// PRIJEMNI MOb- ovi uvek ostaju prijemni!
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
    13bc:	8f ee       	ldi	r24, 0xEF	; 239
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	20 e8       	ldi	r18, 0x80	; 128
    13c2:	fc 01       	movw	r30, r24
    13c4:	20 83       	st	Z, r18
			CANSTMOB &= ~(1 << RXOK); // resetujem flag
    13c6:	8e ee       	ldi	r24, 0xEE	; 238
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	2e ee       	ldi	r18, 0xEE	; 238
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	f9 01       	movw	r30, r18
    13d0:	20 81       	ld	r18, Z
    13d2:	2f 7d       	andi	r18, 0xDF	; 223
    13d4:	fc 01       	movw	r30, r24
    13d6:	20 83       	st	Z, r18

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);
    13d8:	82 ef       	ldi	r24, 0xF2	; 242
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	fc 01       	movw	r30, r24
    13de:	80 81       	ld	r24, Z
    13e0:	82 95       	swap	r24
    13e2:	86 95       	lsr	r24
    13e4:	87 70       	andi	r24, 0x07	; 7
    13e6:	28 2f       	mov	r18, r24
    13e8:	83 ef       	ldi	r24, 0xF3	; 243
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	fc 01       	movw	r30, r24
    13ee:	80 81       	ld	r24, Z
    13f0:	88 2f       	mov	r24, r24
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	88 0f       	add	r24, r24
    13f6:	99 1f       	adc	r25, r25
    13f8:	88 0f       	add	r24, r24
    13fa:	99 1f       	adc	r25, r25
    13fc:	88 0f       	add	r24, r24
    13fe:	99 1f       	adc	r25, r25
    1400:	82 2b       	or	r24, r18
    1402:	8c 83       	std	Y+4, r24	; 0x04

			for(i = 0; i < 8; ++i)
    1404:	1a 82       	std	Y+2, r1	; 0x02
    1406:	26 c0       	rjmp	.+76     	; 0x1454 <__vector_18+0xfe>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;
    1408:	8c 81       	ldd	r24, Y+4	; 0x04
    140a:	88 2f       	mov	r24, r24
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	81 50       	subi	r24, 0x01	; 1
    1410:	90 48       	sbci	r25, 0x80	; 128
    1412:	88 0f       	add	r24, r24
    1414:	99 1f       	adc	r25, r25
    1416:	86 5b       	subi	r24, 0xB6	; 182
    1418:	9e 4f       	sbci	r25, 0xFE	; 254
    141a:	fc 01       	movw	r30, r24
    141c:	20 81       	ld	r18, Z
    141e:	31 81       	ldd	r19, Z+1	; 0x01
    1420:	8c 81       	ldd	r24, Y+4	; 0x04
    1422:	88 2f       	mov	r24, r24
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	01 97       	sbiw	r24, 0x01	; 1
    1428:	82 5a       	subi	r24, 0xA2	; 162
    142a:	9e 4f       	sbci	r25, 0xFE	; 254
    142c:	fc 01       	movw	r30, r24
    142e:	80 81       	ld	r24, Z
    1430:	48 2f       	mov	r20, r24
    1432:	50 e0       	ldi	r21, 0x00	; 0
    1434:	8a 81       	ldd	r24, Y+2	; 0x02
    1436:	88 2f       	mov	r24, r24
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	84 0f       	add	r24, r20
    143c:	95 1f       	adc	r25, r21
    143e:	82 0f       	add	r24, r18
    1440:	93 1f       	adc	r25, r19
    1442:	2a ef       	ldi	r18, 0xFA	; 250
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	f9 01       	movw	r30, r18
    1448:	20 81       	ld	r18, Z
    144a:	fc 01       	movw	r30, r24
    144c:	20 83       	st	Z, r18
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
			CANSTMOB &= ~(1 << RXOK); // resetujem flag

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);

			for(i = 0; i < 8; ++i)
    144e:	8a 81       	ldd	r24, Y+2	; 0x02
    1450:	8f 5f       	subi	r24, 0xFF	; 255
    1452:	8a 83       	std	Y+2, r24	; 0x02
    1454:	8a 81       	ldd	r24, Y+2	; 0x02
    1456:	88 30       	cpi	r24, 0x08	; 8
    1458:	b8 f2       	brcs	.-82     	; 0x1408 <__vector_18+0xb2>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;

			if(++(*(rxWrIndex + ide - 1)) == RX_BUFFER_SIZE)
    145a:	8c 81       	ldd	r24, Y+4	; 0x04
    145c:	88 2f       	mov	r24, r24
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	01 97       	sbiw	r24, 0x01	; 1
    1462:	82 5a       	subi	r24, 0xA2	; 162
    1464:	9e 4f       	sbci	r25, 0xFE	; 254
    1466:	fc 01       	movw	r30, r24
    1468:	20 81       	ld	r18, Z
    146a:	2f 5f       	subi	r18, 0xFF	; 255
    146c:	fc 01       	movw	r30, r24
    146e:	20 83       	st	Z, r18
    1470:	25 30       	cpi	r18, 0x05	; 5
    1472:	41 f4       	brne	.+16     	; 0x1484 <__vector_18+0x12e>
				*(rxWrIndex + ide - 1) = 0;
    1474:	8c 81       	ldd	r24, Y+4	; 0x04
    1476:	88 2f       	mov	r24, r24
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	01 97       	sbiw	r24, 0x01	; 1
    147c:	82 5a       	subi	r24, 0xA2	; 162
    147e:	9e 4f       	sbci	r25, 0xFE	; 254
    1480:	fc 01       	movw	r30, r24
    1482:	10 82       	st	Z, r1

			(*(rxCounter + ide - 1))++;
    1484:	8c 81       	ldd	r24, Y+4	; 0x04
    1486:	88 2f       	mov	r24, r24
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	01 97       	sbiw	r24, 0x01	; 1
    148c:	8e 58       	subi	r24, 0x8E	; 142
    148e:	9e 4f       	sbci	r25, 0xFE	; 254
    1490:	fc 01       	movw	r30, r24
    1492:	20 81       	ld	r18, Z
    1494:	2f 5f       	subi	r18, 0xFF	; 255
    1496:	fc 01       	movw	r30, r24
    1498:	20 83       	st	Z, r18

			break;
    149a:	23 c0       	rjmp	.+70     	; 0x14e2 <__vector_18+0x18c>
		}

		//transmit interrupt
		if( (CANSTMOB >> TXOK) & 0x01)
    149c:	8e ee       	ldi	r24, 0xEE	; 238
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	fc 01       	movw	r30, r24
    14a2:	80 81       	ld	r24, Z
    14a4:	82 95       	swap	r24
    14a6:	86 95       	lsr	r24
    14a8:	86 95       	lsr	r24
    14aa:	83 70       	andi	r24, 0x03	; 3
    14ac:	88 2f       	mov	r24, r24
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	81 70       	andi	r24, 0x01	; 1
    14b2:	99 27       	eor	r25, r25
    14b4:	89 2b       	or	r24, r25
    14b6:	71 f0       	breq	.+28     	; 0x14d4 <__vector_18+0x17e>
		{
			CANCDMOB = 0; // disable mob
    14b8:	8f ee       	ldi	r24, 0xEF	; 239
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	fc 01       	movw	r30, r24
    14be:	10 82       	st	Z, r1
			CANSTMOB &= ~(1 << TXOK); // resetujem flag
    14c0:	8e ee       	ldi	r24, 0xEE	; 238
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	2e ee       	ldi	r18, 0xEE	; 238
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	f9 01       	movw	r30, r18
    14ca:	20 81       	ld	r18, Z
    14cc:	2f 7b       	andi	r18, 0xBF	; 191
    14ce:	fc 01       	movw	r30, r24
    14d0:	20 83       	st	Z, r18

			break;
    14d2:	07 c0       	rjmp	.+14     	; 0x14e2 <__vector_18+0x18c>
	unsigned char tempPage = CANPAGE;
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
    14d4:	89 81       	ldd	r24, Y+1	; 0x01
    14d6:	8f 5f       	subi	r24, 0xFF	; 255
    14d8:	89 83       	std	Y+1, r24	; 0x01
    14da:	89 81       	ldd	r24, Y+1	; 0x01
    14dc:	8f 30       	cpi	r24, 0x0F	; 15
    14de:	08 f4       	brcc	.+2      	; 0x14e2 <__vector_18+0x18c>
    14e0:	58 cf       	rjmp	.-336    	; 0x1392 <__vector_18+0x3c>

			break;
		}
	}

	CANPAGE = tempPage;
    14e2:	8d ee       	ldi	r24, 0xED	; 237
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	2b 81       	ldd	r18, Y+3	; 0x03
    14e8:	fc 01       	movw	r30, r24
    14ea:	20 83       	st	Z, r18
	//CANGIT = CANGIT; // zato sto tako treba.
}
    14ec:	0f 90       	pop	r0
    14ee:	0f 90       	pop	r0
    14f0:	0f 90       	pop	r0
    14f2:	0f 90       	pop	r0
    14f4:	df 91       	pop	r29
    14f6:	cf 91       	pop	r28
    14f8:	ff 91       	pop	r31
    14fa:	ef 91       	pop	r30
    14fc:	9f 91       	pop	r25
    14fe:	8f 91       	pop	r24
    1500:	5f 91       	pop	r21
    1502:	4f 91       	pop	r20
    1504:	3f 91       	pop	r19
    1506:	2f 91       	pop	r18
    1508:	0f 90       	pop	r0
    150a:	00 92 5b 00 	sts	0x005B, r0
    150e:	0f 90       	pop	r0
    1510:	00 92 5f 00 	sts	0x005F, r0
    1514:	0f 90       	pop	r0
    1516:	1f 90       	pop	r1
    1518:	18 95       	reti

0000151a <CAN_InitModule>:


static void CAN_InitModule(void)
{
    151a:	cf 93       	push	r28
    151c:	df 93       	push	r29
    151e:	00 d0       	rcall	.+0      	; 0x1520 <CAN_InitModule+0x6>
    1520:	cd b7       	in	r28, 0x3d	; 61
    1522:	de b7       	in	r29, 0x3e	; 62
	unsigned char ch;
	unsigned char data;

	// Reset the CAN controller
	CANGCON = 0x01;
    1524:	88 ed       	ldi	r24, 0xD8	; 216
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	21 e0       	ldi	r18, 0x01	; 1
    152a:	fc 01       	movw	r30, r24
    152c:	20 83       	st	Z, r18

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
    152e:	19 82       	std	Y+1, r1	; 0x01
    1530:	3e c0       	rjmp	.+124    	; 0x15ae <CAN_InitModule+0x94>
	{
		CANPAGE = ch << 4;
    1532:	8d ee       	ldi	r24, 0xED	; 237
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	29 81       	ldd	r18, Y+1	; 0x01
    1538:	22 95       	swap	r18
    153a:	20 7f       	andi	r18, 0xF0	; 240
    153c:	fc 01       	movw	r30, r24
    153e:	20 83       	st	Z, r18

		CANSTMOB = 0;
    1540:	8e ee       	ldi	r24, 0xEE	; 238
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	fc 01       	movw	r30, r24
    1546:	10 82       	st	Z, r1
		CANCDMOB = 0;
    1548:	8f ee       	ldi	r24, 0xEF	; 239
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	fc 01       	movw	r30, r24
    154e:	10 82       	st	Z, r1

		CANIDT1 = 0;
    1550:	83 ef       	ldi	r24, 0xF3	; 243
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	fc 01       	movw	r30, r24
    1556:	10 82       	st	Z, r1
		CANIDT2 = 0;
    1558:	82 ef       	ldi	r24, 0xF2	; 242
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	fc 01       	movw	r30, r24
    155e:	10 82       	st	Z, r1
		CANIDT3 = 0;
    1560:	81 ef       	ldi	r24, 0xF1	; 241
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	fc 01       	movw	r30, r24
    1566:	10 82       	st	Z, r1
		CANIDT4 = 0;
    1568:	80 ef       	ldi	r24, 0xF0	; 240
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	fc 01       	movw	r30, r24
    156e:	10 82       	st	Z, r1
		CANIDM1 = 0;
    1570:	87 ef       	ldi	r24, 0xF7	; 247
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	fc 01       	movw	r30, r24
    1576:	10 82       	st	Z, r1
		CANIDM2 = 0;
    1578:	86 ef       	ldi	r24, 0xF6	; 246
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	fc 01       	movw	r30, r24
    157e:	10 82       	st	Z, r1
		CANIDM3 = 0;
    1580:	85 ef       	ldi	r24, 0xF5	; 245
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	fc 01       	movw	r30, r24
    1586:	10 82       	st	Z, r1
		CANIDM4 = 0;
    1588:	84 ef       	ldi	r24, 0xF4	; 244
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	fc 01       	movw	r30, r24
    158e:	10 82       	st	Z, r1

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
    1590:	1a 82       	std	Y+2, r1	; 0x02
    1592:	07 c0       	rjmp	.+14     	; 0x15a2 <CAN_InitModule+0x88>
			CANMSG = 0;
    1594:	8a ef       	ldi	r24, 0xFA	; 250
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	fc 01       	movw	r30, r24
    159a:	10 82       	st	Z, r1
		CANIDM3 = 0;
		CANIDM4 = 0;

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
    159c:	8a 81       	ldd	r24, Y+2	; 0x02
    159e:	8f 5f       	subi	r24, 0xFF	; 255
    15a0:	8a 83       	std	Y+2, r24	; 0x02
    15a2:	8a 81       	ldd	r24, Y+2	; 0x02
    15a4:	88 30       	cpi	r24, 0x08	; 8
    15a6:	b0 f3       	brcs	.-20     	; 0x1594 <CAN_InitModule+0x7a>

	// Reset the CAN controller
	CANGCON = 0x01;

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
    15a8:	89 81       	ldd	r24, Y+1	; 0x01
    15aa:	8f 5f       	subi	r24, 0xFF	; 255
    15ac:	89 83       	std	Y+1, r24	; 0x01
    15ae:	89 81       	ldd	r24, Y+1	; 0x01
    15b0:	8f 30       	cpi	r24, 0x0F	; 15
    15b2:	08 f4       	brcc	.+2      	; 0x15b6 <CAN_InitModule+0x9c>
    15b4:	be cf       	rjmp	.-132    	; 0x1532 <CAN_InitModule+0x18>
			CANMSG = 0;
	}


	// Enable the CAN controller
	CANGCON = 0x02;
    15b6:	88 ed       	ldi	r24, 0xD8	; 216
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	22 e0       	ldi	r18, 0x02	; 2
    15bc:	fc 01       	movw	r30, r24
    15be:	20 83       	st	Z, r18

	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	//CANBT1 = 0x08; // Fcan = 2Mhz-> Tq = 0.5us
	CANBT1 = 0x01;
    15c0:	82 ee       	ldi	r24, 0xE2	; 226
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	21 e0       	ldi	r18, 0x01	; 1
    15c6:	fc 01       	movw	r30, r24
    15c8:	20 83       	st	Z, r18
	CANBT2 = (1 << PRS2); // Propagation Time Segment-> 5xTq
    15ca:	83 ee       	ldi	r24, 0xE3	; 227
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	28 e0       	ldi	r18, 0x08	; 8
    15d0:	fc 01       	movw	r30, r24
    15d2:	20 83       	st	Z, r18
	CANBT3 = (1 << PHS22) | (1 << PHS20) | (1 << PHS10) | (1 << PHS11) | (1 << PHS12); // Phase Segment 2-> 6xTq, Phase Segment 1-> 8xTq
    15d4:	84 ee       	ldi	r24, 0xE4	; 228
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	2e e5       	ldi	r18, 0x5E	; 94
    15da:	fc 01       	movw	r30, r24
    15dc:	20 83       	st	Z, r18

	/// Sjw je podesen na 1... 1 + 5 + 6 + 8 = 22
	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	CANTCON = 0; // preskaler za CAN timer-> ne koristimo ga pa ova vrednost nije vazna
    15de:	85 ee       	ldi	r24, 0xE5	; 229
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	fc 01       	movw	r30, r24
    15e4:	10 82       	st	Z, r1

	// ukljucujem interrupte- ENIT-> Enable All Interrupts
	// ENRX-> Enable RX interrupt
	// ENTX-> Enable TX interrupt
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);
    15e6:	8b ed       	ldi	r24, 0xDB	; 219
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	20 eb       	ldi	r18, 0xB0	; 176
    15ec:	fc 01       	movw	r30, r24
    15ee:	20 83       	st	Z, r18
	// interrupti svih MOb- ova su ukljuceni
	CANIE1 = 0xFF >> 1; // glupo govno trazi da MSB mora biti nula prilikom upisivanja u registar
    15f0:	8f ed       	ldi	r24, 0xDF	; 223
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	2f e7       	ldi	r18, 0x7F	; 127
    15f6:	fc 01       	movw	r30, r24
    15f8:	20 83       	st	Z, r18
	CANIE2 = 0xFF;
    15fa:	8e ed       	ldi	r24, 0xDE	; 222
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	2f ef       	ldi	r18, 0xFF	; 255
    1600:	fc 01       	movw	r30, r24
    1602:	20 83       	st	Z, r18
	sei();
    1604:	78 94       	sei
}
    1606:	0f 90       	pop	r0
    1608:	0f 90       	pop	r0
    160a:	df 91       	pop	r29
    160c:	cf 91       	pop	r28
    160e:	08 95       	ret

00001610 <CAN_InitRxMob>:


static char CAN_InitRxMob(unsigned int ide)
{
    1610:	cf 93       	push	r28
    1612:	df 93       	push	r29
    1614:	00 d0       	rcall	.+0      	; 0x1616 <CAN_InitRxMob+0x6>
    1616:	00 d0       	rcall	.+0      	; 0x1618 <CAN_InitRxMob+0x8>
    1618:	cd b7       	in	r28, 0x3d	; 61
    161a:	de b7       	in	r29, 0x3e	; 62
    161c:	9c 83       	std	Y+4, r25	; 0x04
    161e:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char ch;
	unsigned char tempPage = CANPAGE;
    1620:	8d ee       	ldi	r24, 0xED	; 237
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	fc 01       	movw	r30, r24
    1626:	80 81       	ld	r24, Z
    1628:	8a 83       	std	Y+2, r24	; 0x02

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
    162a:	00 00       	nop
    162c:	89 ed       	ldi	r24, 0xD9	; 217
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	fc 01       	movw	r30, r24
    1632:	80 81       	ld	r24, Z
    1634:	82 95       	swap	r24
    1636:	8f 70       	andi	r24, 0x0F	; 15
    1638:	88 2f       	mov	r24, r24
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	81 70       	andi	r24, 0x01	; 1
    163e:	99 27       	eor	r25, r25
    1640:	89 2b       	or	r24, r25
    1642:	a1 f7       	brne	.-24     	; 0x162c <CAN_InitRxMob+0x1c>
    1644:	89 ed       	ldi	r24, 0xD9	; 217
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	fc 01       	movw	r30, r24
    164a:	80 81       	ld	r24, Z
    164c:	86 95       	lsr	r24
    164e:	86 95       	lsr	r24
    1650:	86 95       	lsr	r24
    1652:	88 2f       	mov	r24, r24
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	81 70       	andi	r24, 0x01	; 1
    1658:	99 27       	eor	r25, r25
    165a:	89 2b       	or	r24, r25
    165c:	39 f7       	brne	.-50     	; 0x162c <CAN_InitRxMob+0x1c>

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
    165e:	19 82       	std	Y+1, r1	; 0x01
    1660:	49 c0       	rjmp	.+146    	; 0x16f4 <CAN_InitRxMob+0xe4>
	{
		CANPAGE = ch << 4;
    1662:	8d ee       	ldi	r24, 0xED	; 237
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	29 81       	ldd	r18, Y+1	; 0x01
    1668:	22 95       	swap	r18
    166a:	20 7f       	andi	r18, 0xF0	; 240
    166c:	fc 01       	movw	r30, r24
    166e:	20 83       	st	Z, r18

		// ako je MOb vec zauzet nastavi dalje
		if((CANCDMOB >> 6))
    1670:	8f ee       	ldi	r24, 0xEF	; 239
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	fc 01       	movw	r30, r24
    1676:	80 81       	ld	r24, Z
    1678:	82 95       	swap	r24
    167a:	86 95       	lsr	r24
    167c:	86 95       	lsr	r24
    167e:	83 70       	andi	r24, 0x03	; 3
    1680:	88 23       	and	r24, r24
    1682:	21 f0       	breq	.+8      	; 0x168c <CAN_InitRxMob+0x7c>

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
    1684:	89 81       	ldd	r24, Y+1	; 0x01
    1686:	8f 5f       	subi	r24, 0xFF	; 255
    1688:	89 83       	std	Y+1, r24	; 0x01
    168a:	34 c0       	rjmp	.+104    	; 0x16f4 <CAN_InitRxMob+0xe4>
		// ako je MOb vec zauzet nastavi dalje
		if((CANCDMOB >> 6))
			continue;

		//uvek primam 8 bajtova
		CANCDMOB = (1 << DLC0) | (1 << DLC1) | (1 << DLC2) | (1 << DLC3);
    168c:	8f ee       	ldi	r24, 0xEF	; 239
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	2f e0       	ldi	r18, 0x0F	; 15
    1692:	fc 01       	movw	r30, r24
    1694:	20 83       	st	Z, r18

		// podesavam identifikator
		CANIDT1 = (0x00FF & ide) >> 3;
    1696:	83 ef       	ldi	r24, 0xF3	; 243
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	2b 81       	ldd	r18, Y+3	; 0x03
    169c:	3c 81       	ldd	r19, Y+4	; 0x04
    169e:	33 27       	eor	r19, r19
    16a0:	36 95       	lsr	r19
    16a2:	27 95       	ror	r18
    16a4:	36 95       	lsr	r19
    16a6:	27 95       	ror	r18
    16a8:	36 95       	lsr	r19
    16aa:	27 95       	ror	r18
    16ac:	fc 01       	movw	r30, r24
    16ae:	20 83       	st	Z, r18
		CANIDT2 = (ide & 0x00FF) << 5;
    16b0:	82 ef       	ldi	r24, 0xF2	; 242
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	2b 81       	ldd	r18, Y+3	; 0x03
    16b6:	22 95       	swap	r18
    16b8:	22 0f       	add	r18, r18
    16ba:	20 7e       	andi	r18, 0xE0	; 224
    16bc:	fc 01       	movw	r30, r24
    16be:	20 83       	st	Z, r18

		// podesavam masku- gledam sve bitove
		CANIDM2 = 0x07 << 5;
    16c0:	86 ef       	ldi	r24, 0xF6	; 246
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	20 ee       	ldi	r18, 0xE0	; 224
    16c6:	fc 01       	movw	r30, r24
    16c8:	20 83       	st	Z, r18
		CANIDM1 = 0xFF;
    16ca:	87 ef       	ldi	r24, 0xF7	; 247
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	2f ef       	ldi	r18, 0xFF	; 255
    16d0:	fc 01       	movw	r30, r24
    16d2:	20 83       	st	Z, r18

		// podesavam MOb kao receiver
		CANCDMOB |= (1 << CONMOB1);
    16d4:	8f ee       	ldi	r24, 0xEF	; 239
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	2f ee       	ldi	r18, 0xEF	; 239
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	f9 01       	movw	r30, r18
    16de:	20 81       	ld	r18, Z
    16e0:	20 68       	ori	r18, 0x80	; 128
    16e2:	fc 01       	movw	r30, r24
    16e4:	20 83       	st	Z, r18

		CANPAGE = tempPage;
    16e6:	8d ee       	ldi	r24, 0xED	; 237
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	2a 81       	ldd	r18, Y+2	; 0x02
    16ec:	fc 01       	movw	r30, r24
    16ee:	20 83       	st	Z, r18

		return 1;
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	0a c0       	rjmp	.+20     	; 0x1708 <CAN_InitRxMob+0xf8>

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
    16f4:	89 81       	ldd	r24, Y+1	; 0x01
    16f6:	8f 30       	cpi	r24, 0x0F	; 15
    16f8:	08 f4       	brcc	.+2      	; 0x16fc <CAN_InitRxMob+0xec>
    16fa:	b3 cf       	rjmp	.-154    	; 0x1662 <CAN_InitRxMob+0x52>
		CANPAGE = tempPage;

		return 1;
	}

	CANPAGE = tempPage;
    16fc:	8d ee       	ldi	r24, 0xED	; 237
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	2a 81       	ldd	r18, Y+2	; 0x02
    1702:	fc 01       	movw	r30, r24
    1704:	20 83       	st	Z, r18

	return 0;
    1706:	80 e0       	ldi	r24, 0x00	; 0
}
    1708:	0f 90       	pop	r0
    170a:	0f 90       	pop	r0
    170c:	0f 90       	pop	r0
    170e:	0f 90       	pop	r0
    1710:	df 91       	pop	r29
    1712:	cf 91       	pop	r28
    1714:	08 95       	ret

00001716 <CAN_Init>:


void CAN_Init(unsigned char numOfNodes)
{
    1716:	0f 93       	push	r16
    1718:	1f 93       	push	r17
    171a:	cf 93       	push	r28
    171c:	df 93       	push	r29
    171e:	00 d0       	rcall	.+0      	; 0x1720 <CAN_Init+0xa>
    1720:	cd b7       	in	r28, 0x3d	; 61
    1722:	de b7       	in	r29, 0x3e	; 62
    1724:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char i;
	CAN_InitModule();
    1726:	0e 94 8d 0a 	call	0x151a	; 0x151a <CAN_InitModule>

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
    172a:	19 82       	std	Y+1, r1	; 0x01
    172c:	30 c0       	rjmp	.+96     	; 0x178e <CAN_Init+0x78>
	{
		CAN_InitRxMob(i + 1);
    172e:	89 81       	ldd	r24, Y+1	; 0x01
    1730:	88 2f       	mov	r24, r24
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	01 96       	adiw	r24, 0x01	; 1
    1736:	0e 94 08 0b 	call	0x1610	; 0x1610 <CAN_InitRxMob>
		*(rxBuffers + i) = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
    173a:	89 81       	ldd	r24, Y+1	; 0x01
    173c:	88 2f       	mov	r24, r24
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	88 0f       	add	r24, r24
    1742:	99 1f       	adc	r25, r25
    1744:	8c 01       	movw	r16, r24
    1746:	06 5b       	subi	r16, 0xB6	; 182
    1748:	1e 4f       	sbci	r17, 0xFE	; 254
    174a:	61 e0       	ldi	r22, 0x01	; 1
    174c:	70 e0       	ldi	r23, 0x00	; 0
    174e:	85 e0       	ldi	r24, 0x05	; 5
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <calloc>
    1756:	f8 01       	movw	r30, r16
    1758:	91 83       	std	Z+1, r25	; 0x01
    175a:	80 83       	st	Z, r24
		//*(rxBuffers + i) = (unsigned char *) malloc(RX_BUFFER_SIZE * sizeof(unsigned char));
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
    175c:	89 81       	ldd	r24, Y+1	; 0x01
    175e:	88 2f       	mov	r24, r24
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	29 81       	ldd	r18, Y+1	; 0x01
    1764:	22 2f       	mov	r18, r18
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	49 81       	ldd	r20, Y+1	; 0x01
    176a:	44 2f       	mov	r20, r20
    176c:	50 e0       	ldi	r21, 0x00	; 0
    176e:	60 e0       	ldi	r22, 0x00	; 0
    1770:	4e 58       	subi	r20, 0x8E	; 142
    1772:	5e 4f       	sbci	r21, 0xFE	; 254
    1774:	fa 01       	movw	r30, r20
    1776:	60 83       	st	Z, r22
    1778:	28 59       	subi	r18, 0x98	; 152
    177a:	3e 4f       	sbci	r19, 0xFE	; 254
    177c:	f9 01       	movw	r30, r18
    177e:	60 83       	st	Z, r22
    1780:	82 5a       	subi	r24, 0xA2	; 162
    1782:	9e 4f       	sbci	r25, 0xFE	; 254
    1784:	fc 01       	movw	r30, r24
    1786:	60 83       	st	Z, r22

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
    1788:	89 81       	ldd	r24, Y+1	; 0x01
    178a:	8f 5f       	subi	r24, 0xFF	; 255
    178c:	89 83       	std	Y+1, r24	; 0x01
    178e:	99 81       	ldd	r25, Y+1	; 0x01
    1790:	8a 81       	ldd	r24, Y+2	; 0x02
    1792:	98 17       	cp	r25, r24
    1794:	60 f2       	brcs	.-104    	; 0x172e <CAN_Init+0x18>
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
	}

	//rxWrIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
	//rxRdIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
}
    1796:	0f 90       	pop	r0
    1798:	0f 90       	pop	r0
    179a:	df 91       	pop	r29
    179c:	cf 91       	pop	r28
    179e:	1f 91       	pop	r17
    17a0:	0f 91       	pop	r16
    17a2:	08 95       	ret

000017a4 <CAN_CheckRX>:


unsigned char CAN_CheckRX(unsigned char nodeID)
{
    17a4:	cf 93       	push	r28
    17a6:	df 93       	push	r29
    17a8:	1f 92       	push	r1
    17aa:	cd b7       	in	r28, 0x3d	; 61
    17ac:	de b7       	in	r29, 0x3e	; 62
    17ae:	89 83       	std	Y+1, r24	; 0x01
	return rxCounter[nodeID - 1];
    17b0:	89 81       	ldd	r24, Y+1	; 0x01
    17b2:	88 2f       	mov	r24, r24
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	01 97       	sbiw	r24, 0x01	; 1
    17b8:	8e 58       	subi	r24, 0x8E	; 142
    17ba:	9e 4f       	sbci	r25, 0xFE	; 254
    17bc:	fc 01       	movw	r30, r24
    17be:	80 81       	ld	r24, Z
}
    17c0:	0f 90       	pop	r0
    17c2:	df 91       	pop	r29
    17c4:	cf 91       	pop	r28
    17c6:	08 95       	ret

000017c8 <CAN_Read>:


char CAN_Read(unsigned char *buffer, unsigned char sendingNodeID)
{
    17c8:	cf 93       	push	r28
    17ca:	df 93       	push	r29
    17cc:	00 d0       	rcall	.+0      	; 0x17ce <CAN_Read+0x6>
    17ce:	00 d0       	rcall	.+0      	; 0x17d0 <CAN_Read+0x8>
    17d0:	cd b7       	in	r28, 0x3d	; 61
    17d2:	de b7       	in	r29, 0x3e	; 62
    17d4:	9b 83       	std	Y+3, r25	; 0x03
    17d6:	8a 83       	std	Y+2, r24	; 0x02
    17d8:	6c 83       	std	Y+4, r22	; 0x04
	unsigned char i;
	PORTG = 0xff;
    17da:	84 e3       	ldi	r24, 0x34	; 52
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	2f ef       	ldi	r18, 0xFF	; 255
    17e0:	fc 01       	movw	r30, r24
    17e2:	20 83       	st	Z, r18
	// sve dok ne stigne neki podatak ostajem u funkciji
	while(!rxCounter[sendingNodeID - 1]);
    17e4:	00 00       	nop
    17e6:	8c 81       	ldd	r24, Y+4	; 0x04
    17e8:	88 2f       	mov	r24, r24
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	01 97       	sbiw	r24, 0x01	; 1
    17ee:	8e 58       	subi	r24, 0x8E	; 142
    17f0:	9e 4f       	sbci	r25, 0xFE	; 254
    17f2:	fc 01       	movw	r30, r24
    17f4:	80 81       	ld	r24, Z
    17f6:	88 23       	and	r24, r24
    17f8:	b1 f3       	breq	.-20     	; 0x17e6 <CAN_Read+0x1e>

	for(i = 0; i < 8; ++i)
    17fa:	19 82       	std	Y+1, r1	; 0x01
    17fc:	2c c0       	rjmp	.+88     	; 0x1856 <CAN_Read+0x8e>
	*(buffer + i) = (*(rxBuffers + sendingNodeID - 1) + sizeof(unsigned char) * (*(rxRdIndex + sendingNodeID - 1)))[i];
    17fe:	89 81       	ldd	r24, Y+1	; 0x01
    1800:	88 2f       	mov	r24, r24
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	2a 81       	ldd	r18, Y+2	; 0x02
    1806:	3b 81       	ldd	r19, Y+3	; 0x03
    1808:	82 0f       	add	r24, r18
    180a:	93 1f       	adc	r25, r19
    180c:	2c 81       	ldd	r18, Y+4	; 0x04
    180e:	22 2f       	mov	r18, r18
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	21 50       	subi	r18, 0x01	; 1
    1814:	30 48       	sbci	r19, 0x80	; 128
    1816:	22 0f       	add	r18, r18
    1818:	33 1f       	adc	r19, r19
    181a:	26 5b       	subi	r18, 0xB6	; 182
    181c:	3e 4f       	sbci	r19, 0xFE	; 254
    181e:	f9 01       	movw	r30, r18
    1820:	40 81       	ld	r20, Z
    1822:	51 81       	ldd	r21, Z+1	; 0x01
    1824:	2c 81       	ldd	r18, Y+4	; 0x04
    1826:	22 2f       	mov	r18, r18
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	21 50       	subi	r18, 0x01	; 1
    182c:	31 09       	sbc	r19, r1
    182e:	28 59       	subi	r18, 0x98	; 152
    1830:	3e 4f       	sbci	r19, 0xFE	; 254
    1832:	f9 01       	movw	r30, r18
    1834:	20 81       	ld	r18, Z
    1836:	62 2f       	mov	r22, r18
    1838:	70 e0       	ldi	r23, 0x00	; 0
    183a:	29 81       	ldd	r18, Y+1	; 0x01
    183c:	22 2f       	mov	r18, r18
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	26 0f       	add	r18, r22
    1842:	37 1f       	adc	r19, r23
    1844:	24 0f       	add	r18, r20
    1846:	35 1f       	adc	r19, r21
    1848:	f9 01       	movw	r30, r18
    184a:	20 81       	ld	r18, Z
    184c:	fc 01       	movw	r30, r24
    184e:	20 83       	st	Z, r18
	unsigned char i;
	PORTG = 0xff;
	// sve dok ne stigne neki podatak ostajem u funkciji
	while(!rxCounter[sendingNodeID - 1]);

	for(i = 0; i < 8; ++i)
    1850:	89 81       	ldd	r24, Y+1	; 0x01
    1852:	8f 5f       	subi	r24, 0xFF	; 255
    1854:	89 83       	std	Y+1, r24	; 0x01
    1856:	89 81       	ldd	r24, Y+1	; 0x01
    1858:	88 30       	cpi	r24, 0x08	; 8
    185a:	88 f2       	brcs	.-94     	; 0x17fe <CAN_Read+0x36>
	*(buffer + i) = (*(rxBuffers + sendingNodeID - 1) + sizeof(unsigned char) * (*(rxRdIndex + sendingNodeID - 1)))[i];

	if(++(*(rxRdIndex + sendingNodeID - 1)) == RX_BUFFER_SIZE)
    185c:	8c 81       	ldd	r24, Y+4	; 0x04
    185e:	88 2f       	mov	r24, r24
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	01 97       	sbiw	r24, 0x01	; 1
    1864:	88 59       	subi	r24, 0x98	; 152
    1866:	9e 4f       	sbci	r25, 0xFE	; 254
    1868:	fc 01       	movw	r30, r24
    186a:	20 81       	ld	r18, Z
    186c:	2f 5f       	subi	r18, 0xFF	; 255
    186e:	fc 01       	movw	r30, r24
    1870:	20 83       	st	Z, r18
    1872:	25 30       	cpi	r18, 0x05	; 5
    1874:	41 f4       	brne	.+16     	; 0x1886 <CAN_Read+0xbe>
	*(rxRdIndex + sendingNodeID - 1) = 0;
    1876:	8c 81       	ldd	r24, Y+4	; 0x04
    1878:	88 2f       	mov	r24, r24
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	01 97       	sbiw	r24, 0x01	; 1
    187e:	88 59       	subi	r24, 0x98	; 152
    1880:	9e 4f       	sbci	r25, 0xFE	; 254
    1882:	fc 01       	movw	r30, r24
    1884:	10 82       	st	Z, r1

	rxCounter[sendingNodeID - 1]--;
    1886:	8c 81       	ldd	r24, Y+4	; 0x04
    1888:	88 2f       	mov	r24, r24
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	01 97       	sbiw	r24, 0x01	; 1
    188e:	9c 01       	movw	r18, r24
    1890:	2e 58       	subi	r18, 0x8E	; 142
    1892:	3e 4f       	sbci	r19, 0xFE	; 254
    1894:	f9 01       	movw	r30, r18
    1896:	20 81       	ld	r18, Z
    1898:	21 50       	subi	r18, 0x01	; 1
    189a:	8e 58       	subi	r24, 0x8E	; 142
    189c:	9e 4f       	sbci	r25, 0xFE	; 254
    189e:	fc 01       	movw	r30, r24
    18a0:	20 83       	st	Z, r18

	return 0;
    18a2:	80 e0       	ldi	r24, 0x00	; 0
}
    18a4:	0f 90       	pop	r0
    18a6:	0f 90       	pop	r0
    18a8:	0f 90       	pop	r0
    18aa:	0f 90       	pop	r0
    18ac:	df 91       	pop	r29
    18ae:	cf 91       	pop	r28
    18b0:	08 95       	ret

000018b2 <CAN_Write>:

char CAN_Write(unsigned char *data, unsigned char receivingNodeAddress)
{
    18b2:	cf 93       	push	r28
    18b4:	df 93       	push	r29
    18b6:	00 d0       	rcall	.+0      	; 0x18b8 <CAN_Write+0x6>
    18b8:	00 d0       	rcall	.+0      	; 0x18ba <CAN_Write+0x8>
    18ba:	00 d0       	rcall	.+0      	; 0x18bc <CAN_Write+0xa>
    18bc:	cd b7       	in	r28, 0x3d	; 61
    18be:	de b7       	in	r29, 0x3e	; 62
    18c0:	9d 83       	std	Y+5, r25	; 0x05
    18c2:	8c 83       	std	Y+4, r24	; 0x04
    18c4:	6e 83       	std	Y+6, r22	; 0x06
    unsigned char i;
	// Cekam sve dok je magistrala zauzeta-> da li je neophodno?
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
    18c6:	00 00       	nop
    18c8:	89 ed       	ldi	r24, 0xD9	; 217
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	fc 01       	movw	r30, r24
    18ce:	80 81       	ld	r24, Z
    18d0:	82 95       	swap	r24
    18d2:	8f 70       	andi	r24, 0x0F	; 15
    18d4:	88 2f       	mov	r24, r24
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	81 70       	andi	r24, 0x01	; 1
    18da:	99 27       	eor	r25, r25
    18dc:	89 2b       	or	r24, r25
    18de:	a1 f7       	brne	.-24     	; 0x18c8 <CAN_Write+0x16>
    18e0:	89 ed       	ldi	r24, 0xD9	; 217
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	fc 01       	movw	r30, r24
    18e6:	80 81       	ld	r24, Z
    18e8:	86 95       	lsr	r24
    18ea:	86 95       	lsr	r24
    18ec:	86 95       	lsr	r24
    18ee:	88 2f       	mov	r24, r24
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	81 70       	andi	r24, 0x01	; 1
    18f4:	99 27       	eor	r25, r25
    18f6:	89 2b       	or	r24, r25
    18f8:	39 f7       	brne	.-50     	; 0x18c8 <CAN_Write+0x16>

	unsigned char ch;
	unsigned char tempPage = CANPAGE;
    18fa:	8d ee       	ldi	r24, 0xED	; 237
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	fc 01       	movw	r30, r24
    1900:	80 81       	ld	r24, Z
    1902:	8b 83       	std	Y+3, r24	; 0x03

	// trazim slobodan MOb jel ovo sranje mene zajebava ili? sta ti treba? find all
	for(ch = 0; ch < 15; ch++)
    1904:	1a 82       	std	Y+2, r1	; 0x02
    1906:	15 c0       	rjmp	.+42     	; 0x1932 <CAN_Write+0x80>
	{
		CANPAGE = ch << 4;
    1908:	8d ee       	ldi	r24, 0xED	; 237
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	2a 81       	ldd	r18, Y+2	; 0x02
    190e:	22 95       	swap	r18
    1910:	20 7f       	andi	r18, 0xF0	; 240
    1912:	fc 01       	movw	r30, r24
    1914:	20 83       	st	Z, r18

		if(!(CANCDMOB >> 6))
    1916:	8f ee       	ldi	r24, 0xEF	; 239
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	fc 01       	movw	r30, r24
    191c:	80 81       	ld	r24, Z
    191e:	82 95       	swap	r24
    1920:	86 95       	lsr	r24
    1922:	86 95       	lsr	r24
    1924:	83 70       	andi	r24, 0x03	; 3
    1926:	88 23       	and	r24, r24
    1928:	09 f4       	brne	.+2      	; 0x192c <CAN_Write+0x7a>
			break;
    192a:	06 c0       	rjmp	.+12     	; 0x1938 <CAN_Write+0x86>

	unsigned char ch;
	unsigned char tempPage = CANPAGE;

	// trazim slobodan MOb jel ovo sranje mene zajebava ili? sta ti treba? find all
	for(ch = 0; ch < 15; ch++)
    192c:	8a 81       	ldd	r24, Y+2	; 0x02
    192e:	8f 5f       	subi	r24, 0xFF	; 255
    1930:	8a 83       	std	Y+2, r24	; 0x02
    1932:	8a 81       	ldd	r24, Y+2	; 0x02
    1934:	8f 30       	cpi	r24, 0x0F	; 15
    1936:	40 f3       	brcs	.-48     	; 0x1908 <CAN_Write+0x56>
		if(!(CANCDMOB >> 6))
			break;
	}

	// nema slobodnih MOb- ova
	if(ch == 15)
    1938:	8a 81       	ldd	r24, Y+2	; 0x02
    193a:	8f 30       	cpi	r24, 0x0F	; 15
    193c:	11 f4       	brne	.+4      	; 0x1942 <CAN_Write+0x90>
		return -1;
    193e:	8f ef       	ldi	r24, 0xFF	; 255
    1940:	39 c0       	rjmp	.+114    	; 0x19b4 <CAN_Write+0x102>


	//ova dva registra sadrze identifikator poruke koja ce se slati! efektivno to je adresa cvora koji ce primiti poruku
	CANIDT2 = (receivingNodeAddress & 0x0F) << 5;
    1942:	82 ef       	ldi	r24, 0xF2	; 242
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	2e 81       	ldd	r18, Y+6	; 0x06
    1948:	22 95       	swap	r18
    194a:	22 0f       	add	r18, r18
    194c:	20 7e       	andi	r18, 0xE0	; 224
    194e:	fc 01       	movw	r30, r24
    1950:	20 83       	st	Z, r18
	CANIDT1 = (receivingNodeAddress) >> 3;
    1952:	83 ef       	ldi	r24, 0xF3	; 243
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	2e 81       	ldd	r18, Y+6	; 0x06
    1958:	26 95       	lsr	r18
    195a:	26 95       	lsr	r18
    195c:	26 95       	lsr	r18
    195e:	fc 01       	movw	r30, r24
    1960:	20 83       	st	Z, r18

	// DLC = 8
	CANCDMOB = 8;
    1962:	8f ee       	ldi	r24, 0xEF	; 239
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	28 e0       	ldi	r18, 0x08	; 8
    1968:	fc 01       	movw	r30, r24
    196a:	20 83       	st	Z, r18

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(i = 0; i < 8; i++)
    196c:	19 82       	std	Y+1, r1	; 0x01
    196e:	10 c0       	rjmp	.+32     	; 0x1990 <CAN_Write+0xde>
		CANMSG = data[i];
    1970:	8a ef       	ldi	r24, 0xFA	; 250
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	29 81       	ldd	r18, Y+1	; 0x01
    1976:	22 2f       	mov	r18, r18
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	4c 81       	ldd	r20, Y+4	; 0x04
    197c:	5d 81       	ldd	r21, Y+5	; 0x05
    197e:	24 0f       	add	r18, r20
    1980:	35 1f       	adc	r19, r21
    1982:	f9 01       	movw	r30, r18
    1984:	20 81       	ld	r18, Z
    1986:	fc 01       	movw	r30, r24
    1988:	20 83       	st	Z, r18

	// DLC = 8
	CANCDMOB = 8;

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(i = 0; i < 8; i++)
    198a:	89 81       	ldd	r24, Y+1	; 0x01
    198c:	8f 5f       	subi	r24, 0xFF	; 255
    198e:	89 83       	std	Y+1, r24	; 0x01
    1990:	89 81       	ldd	r24, Y+1	; 0x01
    1992:	88 30       	cpi	r24, 0x08	; 8
    1994:	68 f3       	brcs	.-38     	; 0x1970 <CAN_Write+0xbe>
		CANMSG = data[i];

	// podesavam ga kao predajnik
	CANCDMOB |= (1 << CONMOB0);
    1996:	8f ee       	ldi	r24, 0xEF	; 239
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	2f ee       	ldi	r18, 0xEF	; 239
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	f9 01       	movw	r30, r18
    19a0:	20 81       	ld	r18, Z
    19a2:	20 64       	ori	r18, 0x40	; 64
    19a4:	fc 01       	movw	r30, r24
    19a6:	20 83       	st	Z, r18

	CANPAGE = tempPage;
    19a8:	8d ee       	ldi	r24, 0xED	; 237
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	2b 81       	ldd	r18, Y+3	; 0x03
    19ae:	fc 01       	movw	r30, r24
    19b0:	20 83       	st	Z, r18

	return 0;
    19b2:	80 e0       	ldi	r24, 0x00	; 0
}
    19b4:	26 96       	adiw	r28, 0x06	; 6
    19b6:	0f b6       	in	r0, 0x3f	; 63
    19b8:	f8 94       	cli
    19ba:	de bf       	out	0x3e, r29	; 62
    19bc:	0f be       	out	0x3f, r0	; 63
    19be:	cd bf       	out	0x3d, r28	; 61
    19c0:	df 91       	pop	r29
    19c2:	cf 91       	pop	r28
    19c4:	08 95       	ret

000019c6 <__list_add>:
        pos = list_next_entry(pos, member))

static inline void __list_add(struct list_head* new,
                              struct list_head* prev,
                              struct list_head* next)
{
    19c6:	cf 93       	push	r28
    19c8:	df 93       	push	r29
    19ca:	00 d0       	rcall	.+0      	; 0x19cc <__list_add+0x6>
    19cc:	00 d0       	rcall	.+0      	; 0x19ce <__list_add+0x8>
    19ce:	00 d0       	rcall	.+0      	; 0x19d0 <__list_add+0xa>
    19d0:	cd b7       	in	r28, 0x3d	; 61
    19d2:	de b7       	in	r29, 0x3e	; 62
    19d4:	9a 83       	std	Y+2, r25	; 0x02
    19d6:	89 83       	std	Y+1, r24	; 0x01
    19d8:	7c 83       	std	Y+4, r23	; 0x04
    19da:	6b 83       	std	Y+3, r22	; 0x03
    19dc:	5e 83       	std	Y+6, r21	; 0x06
    19de:	4d 83       	std	Y+5, r20	; 0x05
    next->prev = new;
    19e0:	8d 81       	ldd	r24, Y+5	; 0x05
    19e2:	9e 81       	ldd	r25, Y+6	; 0x06
    19e4:	29 81       	ldd	r18, Y+1	; 0x01
    19e6:	3a 81       	ldd	r19, Y+2	; 0x02
    19e8:	fc 01       	movw	r30, r24
    19ea:	31 83       	std	Z+1, r19	; 0x01
    19ec:	20 83       	st	Z, r18
    new->next = next;
    19ee:	89 81       	ldd	r24, Y+1	; 0x01
    19f0:	9a 81       	ldd	r25, Y+2	; 0x02
    19f2:	2d 81       	ldd	r18, Y+5	; 0x05
    19f4:	3e 81       	ldd	r19, Y+6	; 0x06
    19f6:	fc 01       	movw	r30, r24
    19f8:	33 83       	std	Z+3, r19	; 0x03
    19fa:	22 83       	std	Z+2, r18	; 0x02
    new->prev = prev;
    19fc:	89 81       	ldd	r24, Y+1	; 0x01
    19fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1a00:	2b 81       	ldd	r18, Y+3	; 0x03
    1a02:	3c 81       	ldd	r19, Y+4	; 0x04
    1a04:	fc 01       	movw	r30, r24
    1a06:	31 83       	std	Z+1, r19	; 0x01
    1a08:	20 83       	st	Z, r18
    prev->next = new;
    1a0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a0e:	29 81       	ldd	r18, Y+1	; 0x01
    1a10:	3a 81       	ldd	r19, Y+2	; 0x02
    1a12:	fc 01       	movw	r30, r24
    1a14:	33 83       	std	Z+3, r19	; 0x03
    1a16:	22 83       	std	Z+2, r18	; 0x02
}
    1a18:	26 96       	adiw	r28, 0x06	; 6
    1a1a:	0f b6       	in	r0, 0x3f	; 63
    1a1c:	f8 94       	cli
    1a1e:	de bf       	out	0x3e, r29	; 62
    1a20:	0f be       	out	0x3f, r0	; 63
    1a22:	cd bf       	out	0x3d, r28	; 61
    1a24:	df 91       	pop	r29
    1a26:	cf 91       	pop	r28
    1a28:	08 95       	ret

00001a2a <list_add>:

static inline void list_add(struct list_head* new, struct list_head* head)
{
    1a2a:	cf 93       	push	r28
    1a2c:	df 93       	push	r29
    1a2e:	00 d0       	rcall	.+0      	; 0x1a30 <list_add+0x6>
    1a30:	00 d0       	rcall	.+0      	; 0x1a32 <list_add+0x8>
    1a32:	cd b7       	in	r28, 0x3d	; 61
    1a34:	de b7       	in	r29, 0x3e	; 62
    1a36:	9a 83       	std	Y+2, r25	; 0x02
    1a38:	89 83       	std	Y+1, r24	; 0x01
    1a3a:	7c 83       	std	Y+4, r23	; 0x04
    1a3c:	6b 83       	std	Y+3, r22	; 0x03
    __list_add(new, head, head->next);
    1a3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a40:	9c 81       	ldd	r25, Y+4	; 0x04
    1a42:	fc 01       	movw	r30, r24
    1a44:	42 81       	ldd	r20, Z+2	; 0x02
    1a46:	53 81       	ldd	r21, Z+3	; 0x03
    1a48:	2b 81       	ldd	r18, Y+3	; 0x03
    1a4a:	3c 81       	ldd	r19, Y+4	; 0x04
    1a4c:	89 81       	ldd	r24, Y+1	; 0x01
    1a4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a50:	b9 01       	movw	r22, r18
    1a52:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <__list_add>
}
    1a56:	0f 90       	pop	r0
    1a58:	0f 90       	pop	r0
    1a5a:	0f 90       	pop	r0
    1a5c:	0f 90       	pop	r0
    1a5e:	df 91       	pop	r29
    1a60:	cf 91       	pop	r28
    1a62:	08 95       	ret

00001a64 <gpio_register_pin>:
};

LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
    1a64:	cf 93       	push	r28
    1a66:	df 93       	push	r29
    1a68:	cd b7       	in	r28, 0x3d	; 61
    1a6a:	de b7       	in	r29, 0x3e	; 62
    1a6c:	2b 97       	sbiw	r28, 0x0b	; 11
    1a6e:	0f b6       	in	r0, 0x3f	; 63
    1a70:	f8 94       	cli
    1a72:	de bf       	out	0x3e, r29	; 62
    1a74:	0f be       	out	0x3f, r0	; 63
    1a76:	cd bf       	out	0x3d, r28	; 61
    1a78:	89 87       	std	Y+9, r24	; 0x09
    1a7a:	6a 87       	std	Y+10, r22	; 0x0a
    1a7c:	4b 87       	std	Y+11, r20	; 0x0b
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    1a7e:	80 91 08 01 	lds	r24, 0x0108
    1a82:	90 91 09 01 	lds	r25, 0x0109
    1a86:	9c 83       	std	Y+4, r25	; 0x04
    1a88:	8b 83       	std	Y+3, r24	; 0x03
    1a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8e:	06 97       	sbiw	r24, 0x06	; 6
    1a90:	9a 83       	std	Y+2, r25	; 0x02
    1a92:	89 83       	std	Y+1, r24	; 0x01
    1a94:	15 c0       	rjmp	.+42     	; 0x1ac0 <gpio_register_pin+0x5c>
    {
        if(input->pin == pin)
    1a96:	89 81       	ldd	r24, Y+1	; 0x01
    1a98:	9a 81       	ldd	r25, Y+2	; 0x02
    1a9a:	fc 01       	movw	r30, r24
    1a9c:	90 81       	ld	r25, Z
    1a9e:	89 85       	ldd	r24, Y+9	; 0x09
    1aa0:	98 17       	cp	r25, r24
    1aa2:	11 f4       	brne	.+4      	; 0x1aa8 <gpio_register_pin+0x44>
            return 1;
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	e5 c0       	rjmp	.+458    	; 0x1c72 <gpio_register_pin+0x20e>
LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    1aa8:	89 81       	ldd	r24, Y+1	; 0x01
    1aaa:	9a 81       	ldd	r25, Y+2	; 0x02
    1aac:	fc 01       	movw	r30, r24
    1aae:	80 85       	ldd	r24, Z+8	; 0x08
    1ab0:	91 85       	ldd	r25, Z+9	; 0x09
    1ab2:	9e 83       	std	Y+6, r25	; 0x06
    1ab4:	8d 83       	std	Y+5, r24	; 0x05
    1ab6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab8:	9e 81       	ldd	r25, Y+6	; 0x06
    1aba:	06 97       	sbiw	r24, 0x06	; 6
    1abc:	9a 83       	std	Y+2, r25	; 0x02
    1abe:	89 83       	std	Y+1, r24	; 0x01
    1ac0:	89 81       	ldd	r24, Y+1	; 0x01
    1ac2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac4:	06 96       	adiw	r24, 0x06	; 6
    1ac6:	86 50       	subi	r24, 0x06	; 6
    1ac8:	91 40       	sbci	r25, 0x01	; 1
    1aca:	29 f7       	brne	.-54     	; 0x1a96 <gpio_register_pin+0x32>
    {
        if(input->pin == pin)
            return 1;
    }

	uint8_t port	= 1 + pin / 8;
    1acc:	89 85       	ldd	r24, Y+9	; 0x09
    1ace:	86 95       	lsr	r24
    1ad0:	86 95       	lsr	r24
    1ad2:	86 95       	lsr	r24
    1ad4:	8f 5f       	subi	r24, 0xFF	; 255
    1ad6:	8f 83       	std	Y+7, r24	; 0x07
	uint8_t pin_reg = pin % 8;
    1ad8:	89 85       	ldd	r24, Y+9	; 0x09
    1ada:	87 70       	andi	r24, 0x07	; 7
    1adc:	88 87       	std	Y+8, r24	; 0x08
	if(direction == GPIO_DIRECTION_OUTPUT)
    1ade:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ae0:	81 30       	cpi	r24, 0x01	; 1
    1ae2:	09 f0       	breq	.+2      	; 0x1ae6 <gpio_register_pin+0x82>
    1ae4:	55 c0       	rjmp	.+170    	; 0x1b90 <gpio_register_pin+0x12c>
	{
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) |= (1 << pin_reg);
    1ae6:	8f 81       	ldd	r24, Y+7	; 0x07
    1ae8:	88 2f       	mov	r24, r24
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	9c 01       	movw	r18, r24
    1aee:	21 50       	subi	r18, 0x01	; 1
    1af0:	31 09       	sbc	r19, r1
    1af2:	c9 01       	movw	r24, r18
    1af4:	88 0f       	add	r24, r24
    1af6:	99 1f       	adc	r25, r25
    1af8:	82 0f       	add	r24, r18
    1afa:	93 1f       	adc	r25, r19
    1afc:	81 96       	adiw	r24, 0x21	; 33
    1afe:	ac 01       	movw	r20, r24
    1b00:	8f 81       	ldd	r24, Y+7	; 0x07
    1b02:	88 2f       	mov	r24, r24
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	9c 01       	movw	r18, r24
    1b08:	21 50       	subi	r18, 0x01	; 1
    1b0a:	31 09       	sbc	r19, r1
    1b0c:	c9 01       	movw	r24, r18
    1b0e:	88 0f       	add	r24, r24
    1b10:	99 1f       	adc	r25, r25
    1b12:	82 0f       	add	r24, r18
    1b14:	93 1f       	adc	r25, r19
    1b16:	81 96       	adiw	r24, 0x21	; 33
    1b18:	fc 01       	movw	r30, r24
    1b1a:	80 81       	ld	r24, Z
    1b1c:	68 2f       	mov	r22, r24
    1b1e:	88 85       	ldd	r24, Y+8	; 0x08
    1b20:	28 2f       	mov	r18, r24
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	02 c0       	rjmp	.+4      	; 0x1b2e <gpio_register_pin+0xca>
    1b2a:	88 0f       	add	r24, r24
    1b2c:	99 1f       	adc	r25, r25
    1b2e:	2a 95       	dec	r18
    1b30:	e2 f7       	brpl	.-8      	; 0x1b2a <gpio_register_pin+0xc6>
    1b32:	86 2b       	or	r24, r22
    1b34:	fa 01       	movw	r30, r20
    1b36:	80 83       	st	Z, r24
		*(volatile uint8_t*)(0x22 + 3 *  (port - 1)) &= ~(1 << pin_reg);
    1b38:	8f 81       	ldd	r24, Y+7	; 0x07
    1b3a:	88 2f       	mov	r24, r24
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	9c 01       	movw	r18, r24
    1b40:	21 50       	subi	r18, 0x01	; 1
    1b42:	31 09       	sbc	r19, r1
    1b44:	c9 01       	movw	r24, r18
    1b46:	88 0f       	add	r24, r24
    1b48:	99 1f       	adc	r25, r25
    1b4a:	82 0f       	add	r24, r18
    1b4c:	93 1f       	adc	r25, r19
    1b4e:	82 96       	adiw	r24, 0x22	; 34
    1b50:	ac 01       	movw	r20, r24
    1b52:	8f 81       	ldd	r24, Y+7	; 0x07
    1b54:	88 2f       	mov	r24, r24
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	9c 01       	movw	r18, r24
    1b5a:	21 50       	subi	r18, 0x01	; 1
    1b5c:	31 09       	sbc	r19, r1
    1b5e:	c9 01       	movw	r24, r18
    1b60:	88 0f       	add	r24, r24
    1b62:	99 1f       	adc	r25, r25
    1b64:	82 0f       	add	r24, r18
    1b66:	93 1f       	adc	r25, r19
    1b68:	82 96       	adiw	r24, 0x22	; 34
    1b6a:	fc 01       	movw	r30, r24
    1b6c:	80 81       	ld	r24, Z
    1b6e:	68 2f       	mov	r22, r24
    1b70:	88 85       	ldd	r24, Y+8	; 0x08
    1b72:	28 2f       	mov	r18, r24
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	81 e0       	ldi	r24, 0x01	; 1
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	02 c0       	rjmp	.+4      	; 0x1b80 <gpio_register_pin+0x11c>
    1b7c:	88 0f       	add	r24, r24
    1b7e:	99 1f       	adc	r25, r25
    1b80:	2a 95       	dec	r18
    1b82:	e2 f7       	brpl	.-8      	; 0x1b7c <gpio_register_pin+0x118>
    1b84:	80 95       	com	r24
    1b86:	86 23       	and	r24, r22
    1b88:	fa 01       	movw	r30, r20
    1b8a:	80 83       	st	Z, r24
        return 0;
    1b8c:	80 e0       	ldi	r24, 0x00	; 0
    1b8e:	71 c0       	rjmp	.+226    	; 0x1c72 <gpio_register_pin+0x20e>
	}
	else
	{
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) &= ~(1 << pin_reg);
    1b90:	8f 81       	ldd	r24, Y+7	; 0x07
    1b92:	88 2f       	mov	r24, r24
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	9c 01       	movw	r18, r24
    1b98:	21 50       	subi	r18, 0x01	; 1
    1b9a:	31 09       	sbc	r19, r1
    1b9c:	c9 01       	movw	r24, r18
    1b9e:	88 0f       	add	r24, r24
    1ba0:	99 1f       	adc	r25, r25
    1ba2:	82 0f       	add	r24, r18
    1ba4:	93 1f       	adc	r25, r19
    1ba6:	81 96       	adiw	r24, 0x21	; 33
    1ba8:	ac 01       	movw	r20, r24
    1baa:	8f 81       	ldd	r24, Y+7	; 0x07
    1bac:	88 2f       	mov	r24, r24
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	9c 01       	movw	r18, r24
    1bb2:	21 50       	subi	r18, 0x01	; 1
    1bb4:	31 09       	sbc	r19, r1
    1bb6:	c9 01       	movw	r24, r18
    1bb8:	88 0f       	add	r24, r24
    1bba:	99 1f       	adc	r25, r25
    1bbc:	82 0f       	add	r24, r18
    1bbe:	93 1f       	adc	r25, r19
    1bc0:	81 96       	adiw	r24, 0x21	; 33
    1bc2:	fc 01       	movw	r30, r24
    1bc4:	80 81       	ld	r24, Z
    1bc6:	68 2f       	mov	r22, r24
    1bc8:	88 85       	ldd	r24, Y+8	; 0x08
    1bca:	28 2f       	mov	r18, r24
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	81 e0       	ldi	r24, 0x01	; 1
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	02 c0       	rjmp	.+4      	; 0x1bd8 <gpio_register_pin+0x174>
    1bd4:	88 0f       	add	r24, r24
    1bd6:	99 1f       	adc	r25, r25
    1bd8:	2a 95       	dec	r18
    1bda:	e2 f7       	brpl	.-8      	; 0x1bd4 <gpio_register_pin+0x170>
    1bdc:	80 95       	com	r24
    1bde:	86 23       	and	r24, r22
    1be0:	fa 01       	movw	r30, r20
    1be2:	80 83       	st	Z, r24
		*(volatile uint8_t*)(0x22 + 3 *  (port - 1)) |= (1 << pin_reg);
    1be4:	8f 81       	ldd	r24, Y+7	; 0x07
    1be6:	88 2f       	mov	r24, r24
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	9c 01       	movw	r18, r24
    1bec:	21 50       	subi	r18, 0x01	; 1
    1bee:	31 09       	sbc	r19, r1
    1bf0:	c9 01       	movw	r24, r18
    1bf2:	88 0f       	add	r24, r24
    1bf4:	99 1f       	adc	r25, r25
    1bf6:	82 0f       	add	r24, r18
    1bf8:	93 1f       	adc	r25, r19
    1bfa:	82 96       	adiw	r24, 0x22	; 34
    1bfc:	ac 01       	movw	r20, r24
    1bfe:	8f 81       	ldd	r24, Y+7	; 0x07
    1c00:	88 2f       	mov	r24, r24
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	9c 01       	movw	r18, r24
    1c06:	21 50       	subi	r18, 0x01	; 1
    1c08:	31 09       	sbc	r19, r1
    1c0a:	c9 01       	movw	r24, r18
    1c0c:	88 0f       	add	r24, r24
    1c0e:	99 1f       	adc	r25, r25
    1c10:	82 0f       	add	r24, r18
    1c12:	93 1f       	adc	r25, r19
    1c14:	82 96       	adiw	r24, 0x22	; 34
    1c16:	fc 01       	movw	r30, r24
    1c18:	80 81       	ld	r24, Z
    1c1a:	68 2f       	mov	r22, r24
    1c1c:	88 85       	ldd	r24, Y+8	; 0x08
    1c1e:	28 2f       	mov	r18, r24
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	02 c0       	rjmp	.+4      	; 0x1c2c <gpio_register_pin+0x1c8>
    1c28:	88 0f       	add	r24, r24
    1c2a:	99 1f       	adc	r25, r25
    1c2c:	2a 95       	dec	r18
    1c2e:	e2 f7       	brpl	.-8      	; 0x1c28 <gpio_register_pin+0x1c4>
    1c30:	86 2b       	or	r24, r22
    1c32:	fa 01       	movw	r30, r20
    1c34:	80 83       	st	Z, r24
	}
    input = (struct gpio_input*)malloc(sizeof(struct gpio_input));
    1c36:	8a e0       	ldi	r24, 0x0A	; 10
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <malloc>
    1c3e:	9a 83       	std	Y+2, r25	; 0x02
    1c40:	89 83       	std	Y+1, r24	; 0x01
    if(input == NULL)
    1c42:	89 81       	ldd	r24, Y+1	; 0x01
    1c44:	9a 81       	ldd	r25, Y+2	; 0x02
    1c46:	89 2b       	or	r24, r25
    1c48:	11 f4       	brne	.+4      	; 0x1c4e <gpio_register_pin+0x1ea>
        return 1;
    1c4a:	81 e0       	ldi	r24, 0x01	; 1
    1c4c:	12 c0       	rjmp	.+36     	; 0x1c72 <gpio_register_pin+0x20e>

    input->pin       = pin;
    1c4e:	89 81       	ldd	r24, Y+1	; 0x01
    1c50:	9a 81       	ldd	r25, Y+2	; 0x02
    1c52:	29 85       	ldd	r18, Y+9	; 0x09
    1c54:	fc 01       	movw	r30, r24
    1c56:	20 83       	st	Z, r18
    input->pulled_up = pulled_up;
    1c58:	89 81       	ldd	r24, Y+1	; 0x01
    1c5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c5c:	2b 85       	ldd	r18, Y+11	; 0x0b
    1c5e:	fc 01       	movw	r30, r24
    1c60:	21 83       	std	Z+1, r18	; 0x01
    list_add(&input->list, &gpio_inputs);
    1c62:	89 81       	ldd	r24, Y+1	; 0x01
    1c64:	9a 81       	ldd	r25, Y+2	; 0x02
    1c66:	06 96       	adiw	r24, 0x06	; 6
    1c68:	66 e0       	ldi	r22, 0x06	; 6
    1c6a:	71 e0       	ldi	r23, 0x01	; 1
    1c6c:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <list_add>

    return 0;
    1c70:	80 e0       	ldi	r24, 0x00	; 0
}
    1c72:	2b 96       	adiw	r28, 0x0b	; 11
    1c74:	0f b6       	in	r0, 0x3f	; 63
    1c76:	f8 94       	cli
    1c78:	de bf       	out	0x3e, r29	; 62
    1c7a:	0f be       	out	0x3f, r0	; 63
    1c7c:	cd bf       	out	0x3d, r28	; 61
    1c7e:	df 91       	pop	r29
    1c80:	cf 91       	pop	r28
    1c82:	08 95       	ret

00001c84 <gpio_write_pin>:

uint8_t gpio_write_pin(uint8_t pin, bool value)
{
    1c84:	cf 93       	push	r28
    1c86:	df 93       	push	r29
    1c88:	00 d0       	rcall	.+0      	; 0x1c8a <gpio_write_pin+0x6>
    1c8a:	00 d0       	rcall	.+0      	; 0x1c8c <gpio_write_pin+0x8>
    1c8c:	cd b7       	in	r28, 0x3d	; 61
    1c8e:	de b7       	in	r29, 0x3e	; 62
    1c90:	8b 83       	std	Y+3, r24	; 0x03
    1c92:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t port = 1 + pin / 8;
    1c94:	8b 81       	ldd	r24, Y+3	; 0x03
    1c96:	86 95       	lsr	r24
    1c98:	86 95       	lsr	r24
    1c9a:	86 95       	lsr	r24
    1c9c:	8f 5f       	subi	r24, 0xFF	; 255
    1c9e:	89 83       	std	Y+1, r24	; 0x01
	pin = pin % 8;
    1ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca2:	87 70       	andi	r24, 0x07	; 7
    1ca4:	8b 83       	std	Y+3, r24	; 0x03

	uint8_t temp = *(volatile uint32_t*)(0x22 + 3 * (port - 1));
    1ca6:	89 81       	ldd	r24, Y+1	; 0x01
    1ca8:	88 2f       	mov	r24, r24
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	9c 01       	movw	r18, r24
    1cae:	21 50       	subi	r18, 0x01	; 1
    1cb0:	31 09       	sbc	r19, r1
    1cb2:	c9 01       	movw	r24, r18
    1cb4:	88 0f       	add	r24, r24
    1cb6:	99 1f       	adc	r25, r25
    1cb8:	82 0f       	add	r24, r18
    1cba:	93 1f       	adc	r25, r19
    1cbc:	82 96       	adiw	r24, 0x22	; 34
    1cbe:	fc 01       	movw	r30, r24
    1cc0:	80 81       	ld	r24, Z
    1cc2:	91 81       	ldd	r25, Z+1	; 0x01
    1cc4:	a2 81       	ldd	r26, Z+2	; 0x02
    1cc6:	b3 81       	ldd	r27, Z+3	; 0x03
    1cc8:	8a 83       	std	Y+2, r24	; 0x02
	if(value != 0)
    1cca:	8c 81       	ldd	r24, Y+4	; 0x04
    1ccc:	88 23       	and	r24, r24
    1cce:	31 f1       	breq	.+76     	; 0x1d1c <gpio_write_pin+0x98>
		*(volatile uint32_t*)(0x22 + 3 * (port - 1)) = temp | (1 << pin);
    1cd0:	89 81       	ldd	r24, Y+1	; 0x01
    1cd2:	88 2f       	mov	r24, r24
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	9c 01       	movw	r18, r24
    1cd8:	21 50       	subi	r18, 0x01	; 1
    1cda:	31 09       	sbc	r19, r1
    1cdc:	c9 01       	movw	r24, r18
    1cde:	88 0f       	add	r24, r24
    1ce0:	99 1f       	adc	r25, r25
    1ce2:	82 0f       	add	r24, r18
    1ce4:	93 1f       	adc	r25, r19
    1ce6:	82 96       	adiw	r24, 0x22	; 34
    1ce8:	ac 01       	movw	r20, r24
    1cea:	8a 81       	ldd	r24, Y+2	; 0x02
    1cec:	28 2f       	mov	r18, r24
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf2:	68 2f       	mov	r22, r24
    1cf4:	70 e0       	ldi	r23, 0x00	; 0
    1cf6:	81 e0       	ldi	r24, 0x01	; 1
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	02 c0       	rjmp	.+4      	; 0x1d00 <gpio_write_pin+0x7c>
    1cfc:	88 0f       	add	r24, r24
    1cfe:	99 1f       	adc	r25, r25
    1d00:	6a 95       	dec	r22
    1d02:	e2 f7       	brpl	.-8      	; 0x1cfc <gpio_write_pin+0x78>
    1d04:	82 2b       	or	r24, r18
    1d06:	93 2b       	or	r25, r19
    1d08:	09 2e       	mov	r0, r25
    1d0a:	00 0c       	add	r0, r0
    1d0c:	aa 0b       	sbc	r26, r26
    1d0e:	bb 0b       	sbc	r27, r27
    1d10:	fa 01       	movw	r30, r20
    1d12:	80 83       	st	Z, r24
    1d14:	91 83       	std	Z+1, r25	; 0x01
    1d16:	a2 83       	std	Z+2, r26	; 0x02
    1d18:	b3 83       	std	Z+3, r27	; 0x03
    1d1a:	27 c0       	rjmp	.+78     	; 0x1d6a <gpio_write_pin+0xe6>
	else
		*(volatile uint32_t*)(0x22 + 3 * (port - 1)) = temp & ~(1 << pin);
    1d1c:	89 81       	ldd	r24, Y+1	; 0x01
    1d1e:	88 2f       	mov	r24, r24
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	9c 01       	movw	r18, r24
    1d24:	21 50       	subi	r18, 0x01	; 1
    1d26:	31 09       	sbc	r19, r1
    1d28:	c9 01       	movw	r24, r18
    1d2a:	88 0f       	add	r24, r24
    1d2c:	99 1f       	adc	r25, r25
    1d2e:	82 0f       	add	r24, r18
    1d30:	93 1f       	adc	r25, r19
    1d32:	82 96       	adiw	r24, 0x22	; 34
    1d34:	ac 01       	movw	r20, r24
    1d36:	8a 81       	ldd	r24, Y+2	; 0x02
    1d38:	28 2f       	mov	r18, r24
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3e:	68 2f       	mov	r22, r24
    1d40:	70 e0       	ldi	r23, 0x00	; 0
    1d42:	81 e0       	ldi	r24, 0x01	; 1
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	02 c0       	rjmp	.+4      	; 0x1d4c <gpio_write_pin+0xc8>
    1d48:	88 0f       	add	r24, r24
    1d4a:	99 1f       	adc	r25, r25
    1d4c:	6a 95       	dec	r22
    1d4e:	e2 f7       	brpl	.-8      	; 0x1d48 <gpio_write_pin+0xc4>
    1d50:	80 95       	com	r24
    1d52:	90 95       	com	r25
    1d54:	82 23       	and	r24, r18
    1d56:	93 23       	and	r25, r19
    1d58:	09 2e       	mov	r0, r25
    1d5a:	00 0c       	add	r0, r0
    1d5c:	aa 0b       	sbc	r26, r26
    1d5e:	bb 0b       	sbc	r27, r27
    1d60:	fa 01       	movw	r30, r20
    1d62:	80 83       	st	Z, r24
    1d64:	91 83       	std	Z+1, r25	; 0x01
    1d66:	a2 83       	std	Z+2, r26	; 0x02
    1d68:	b3 83       	std	Z+3, r27	; 0x03
	return 0;
    1d6a:	80 e0       	ldi	r24, 0x00	; 0
}
    1d6c:	0f 90       	pop	r0
    1d6e:	0f 90       	pop	r0
    1d70:	0f 90       	pop	r0
    1d72:	0f 90       	pop	r0
    1d74:	df 91       	pop	r29
    1d76:	cf 91       	pop	r28
    1d78:	08 95       	ret

00001d7a <__gpio_read_pin>:

static uint8_t __gpio_read_pin(uint8_t pin)
{
    1d7a:	cf 93       	push	r28
    1d7c:	df 93       	push	r29
    1d7e:	00 d0       	rcall	.+0      	; 0x1d80 <__gpio_read_pin+0x6>
    1d80:	1f 92       	push	r1
    1d82:	cd b7       	in	r28, 0x3d	; 61
    1d84:	de b7       	in	r29, 0x3e	; 62
    1d86:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t port = 1 + pin / 8;
    1d88:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8a:	86 95       	lsr	r24
    1d8c:	86 95       	lsr	r24
    1d8e:	86 95       	lsr	r24
    1d90:	8f 5f       	subi	r24, 0xFF	; 255
    1d92:	89 83       	std	Y+1, r24	; 0x01
    pin = pin % 8;
    1d94:	8b 81       	ldd	r24, Y+3	; 0x03
    1d96:	87 70       	andi	r24, 0x07	; 7
    1d98:	8b 83       	std	Y+3, r24	; 0x03
	
	uint8_t temp = (*((volatile uint8_t*)(0x20 + 3 * (port - 1))));
    1d9a:	89 81       	ldd	r24, Y+1	; 0x01
    1d9c:	88 2f       	mov	r24, r24
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	9c 01       	movw	r18, r24
    1da2:	21 50       	subi	r18, 0x01	; 1
    1da4:	31 09       	sbc	r19, r1
    1da6:	c9 01       	movw	r24, r18
    1da8:	88 0f       	add	r24, r24
    1daa:	99 1f       	adc	r25, r25
    1dac:	82 0f       	add	r24, r18
    1dae:	93 1f       	adc	r25, r19
    1db0:	80 96       	adiw	r24, 0x20	; 32
    1db2:	fc 01       	movw	r30, r24
    1db4:	80 81       	ld	r24, Z
    1db6:	8a 83       	std	Y+2, r24	; 0x02

    return ((temp >> pin) & 0x01);
    1db8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dba:	88 2f       	mov	r24, r24
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	2b 81       	ldd	r18, Y+3	; 0x03
    1dc0:	22 2f       	mov	r18, r18
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	02 c0       	rjmp	.+4      	; 0x1dca <__gpio_read_pin+0x50>
    1dc6:	95 95       	asr	r25
    1dc8:	87 95       	ror	r24
    1dca:	2a 95       	dec	r18
    1dcc:	e2 f7       	brpl	.-8      	; 0x1dc6 <__gpio_read_pin+0x4c>
    1dce:	81 70       	andi	r24, 0x01	; 1
}
    1dd0:	0f 90       	pop	r0
    1dd2:	0f 90       	pop	r0
    1dd4:	0f 90       	pop	r0
    1dd6:	df 91       	pop	r29
    1dd8:	cf 91       	pop	r28
    1dda:	08 95       	ret

00001ddc <gpio_read_pin>:

uint8_t gpio_read_pin(uint8_t pin)
{
    1ddc:	cf 93       	push	r28
    1dde:	df 93       	push	r29
    1de0:	cd b7       	in	r28, 0x3d	; 61
    1de2:	de b7       	in	r29, 0x3e	; 62
    1de4:	29 97       	sbiw	r28, 0x09	; 9
    1de6:	0f b6       	in	r0, 0x3f	; 63
    1de8:	f8 94       	cli
    1dea:	de bf       	out	0x3e, r29	; 62
    1dec:	0f be       	out	0x3f, r0	; 63
    1dee:	cd bf       	out	0x3d, r28	; 61
    1df0:	89 87       	std	Y+9, r24	; 0x09
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    1df2:	80 91 08 01 	lds	r24, 0x0108
    1df6:	90 91 09 01 	lds	r25, 0x0109
    1dfa:	9d 83       	std	Y+5, r25	; 0x05
    1dfc:	8c 83       	std	Y+4, r24	; 0x04
    1dfe:	8c 81       	ldd	r24, Y+4	; 0x04
    1e00:	9d 81       	ldd	r25, Y+5	; 0x05
    1e02:	06 97       	sbiw	r24, 0x06	; 6
    1e04:	9a 83       	std	Y+2, r25	; 0x02
    1e06:	89 83       	std	Y+1, r24	; 0x01
    1e08:	55 c0       	rjmp	.+170    	; 0x1eb4 <gpio_read_pin+0xd8>
    {
        if(pin == input->pin)
    1e0a:	89 81       	ldd	r24, Y+1	; 0x01
    1e0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e0e:	fc 01       	movw	r30, r24
    1e10:	90 81       	ld	r25, Z
    1e12:	89 85       	ldd	r24, Y+9	; 0x09
    1e14:	98 17       	cp	r25, r24
    1e16:	09 f0       	breq	.+2      	; 0x1e1a <gpio_read_pin+0x3e>
    1e18:	41 c0       	rjmp	.+130    	; 0x1e9c <gpio_read_pin+0xc0>
        {
            uint8_t i = 0;
    1e1a:	1b 82       	std	Y+3, r1	; 0x03
            while(i < GPIO_DEBOUNCE_COUNT - 1)
    1e1c:	1f c0       	rjmp	.+62     	; 0x1e5c <gpio_read_pin+0x80>
            {
                if(input->values[i] != input->values[i + 1])
    1e1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e20:	88 2f       	mov	r24, r24
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	29 81       	ldd	r18, Y+1	; 0x01
    1e26:	3a 81       	ldd	r19, Y+2	; 0x02
    1e28:	82 0f       	add	r24, r18
    1e2a:	93 1f       	adc	r25, r19
    1e2c:	02 96       	adiw	r24, 0x02	; 2
    1e2e:	fc 01       	movw	r30, r24
    1e30:	40 81       	ld	r20, Z
    1e32:	8b 81       	ldd	r24, Y+3	; 0x03
    1e34:	88 2f       	mov	r24, r24
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	01 96       	adiw	r24, 0x01	; 1
    1e3a:	29 81       	ldd	r18, Y+1	; 0x01
    1e3c:	3a 81       	ldd	r19, Y+2	; 0x02
    1e3e:	82 0f       	add	r24, r18
    1e40:	93 1f       	adc	r25, r19
    1e42:	02 96       	adiw	r24, 0x02	; 2
    1e44:	fc 01       	movw	r30, r24
    1e46:	80 81       	ld	r24, Z
    1e48:	48 17       	cp	r20, r24
    1e4a:	29 f0       	breq	.+10     	; 0x1e56 <gpio_read_pin+0x7a>
                    return input->previous_state;
    1e4c:	89 81       	ldd	r24, Y+1	; 0x01
    1e4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e50:	fc 01       	movw	r30, r24
    1e52:	85 81       	ldd	r24, Z+5	; 0x05
    1e54:	37 c0       	rjmp	.+110    	; 0x1ec4 <gpio_read_pin+0xe8>
                i++;
    1e56:	8b 81       	ldd	r24, Y+3	; 0x03
    1e58:	8f 5f       	subi	r24, 0xFF	; 255
    1e5a:	8b 83       	std	Y+3, r24	; 0x03
    list_for_each_entry(input, &gpio_inputs, list)
    {
        if(pin == input->pin)
        {
            uint8_t i = 0;
            while(i < GPIO_DEBOUNCE_COUNT - 1)
    1e5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5e:	82 30       	cpi	r24, 0x02	; 2
    1e60:	f0 f2       	brcs	.-68     	; 0x1e1e <gpio_read_pin+0x42>
                if(input->values[i] != input->values[i + 1])
                    return input->previous_state;
                i++;
            }

            uint8_t state = input->pulled_up == false ? (input->values[0]) : !(input->values[0]);
    1e62:	89 81       	ldd	r24, Y+1	; 0x01
    1e64:	9a 81       	ldd	r25, Y+2	; 0x02
    1e66:	fc 01       	movw	r30, r24
    1e68:	91 81       	ldd	r25, Z+1	; 0x01
    1e6a:	81 e0       	ldi	r24, 0x01	; 1
    1e6c:	89 27       	eor	r24, r25
    1e6e:	88 23       	and	r24, r24
    1e70:	29 f0       	breq	.+10     	; 0x1e7c <gpio_read_pin+0xa0>
    1e72:	89 81       	ldd	r24, Y+1	; 0x01
    1e74:	9a 81       	ldd	r25, Y+2	; 0x02
    1e76:	fc 01       	movw	r30, r24
    1e78:	82 81       	ldd	r24, Z+2	; 0x02
    1e7a:	08 c0       	rjmp	.+16     	; 0x1e8c <gpio_read_pin+0xb0>
    1e7c:	89 81       	ldd	r24, Y+1	; 0x01
    1e7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e80:	fc 01       	movw	r30, r24
    1e82:	92 81       	ldd	r25, Z+2	; 0x02
    1e84:	81 e0       	ldi	r24, 0x01	; 1
    1e86:	99 23       	and	r25, r25
    1e88:	09 f0       	breq	.+2      	; 0x1e8c <gpio_read_pin+0xb0>
    1e8a:	80 e0       	ldi	r24, 0x00	; 0
    1e8c:	88 87       	std	Y+8, r24	; 0x08
            input->previous_state = state;
    1e8e:	89 81       	ldd	r24, Y+1	; 0x01
    1e90:	9a 81       	ldd	r25, Y+2	; 0x02
    1e92:	28 85       	ldd	r18, Y+8	; 0x08
    1e94:	fc 01       	movw	r30, r24
    1e96:	25 83       	std	Z+5, r18	; 0x05

            return state;
    1e98:	88 85       	ldd	r24, Y+8	; 0x08
    1e9a:	14 c0       	rjmp	.+40     	; 0x1ec4 <gpio_read_pin+0xe8>
}

uint8_t gpio_read_pin(uint8_t pin)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    1e9c:	89 81       	ldd	r24, Y+1	; 0x01
    1e9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1ea0:	fc 01       	movw	r30, r24
    1ea2:	80 85       	ldd	r24, Z+8	; 0x08
    1ea4:	91 85       	ldd	r25, Z+9	; 0x09
    1ea6:	9f 83       	std	Y+7, r25	; 0x07
    1ea8:	8e 83       	std	Y+6, r24	; 0x06
    1eaa:	8e 81       	ldd	r24, Y+6	; 0x06
    1eac:	9f 81       	ldd	r25, Y+7	; 0x07
    1eae:	06 97       	sbiw	r24, 0x06	; 6
    1eb0:	9a 83       	std	Y+2, r25	; 0x02
    1eb2:	89 83       	std	Y+1, r24	; 0x01
    1eb4:	89 81       	ldd	r24, Y+1	; 0x01
    1eb6:	9a 81       	ldd	r25, Y+2	; 0x02
    1eb8:	06 96       	adiw	r24, 0x06	; 6
    1eba:	86 50       	subi	r24, 0x06	; 6
    1ebc:	91 40       	sbci	r25, 0x01	; 1
    1ebe:	09 f0       	breq	.+2      	; 0x1ec2 <gpio_read_pin+0xe6>
    1ec0:	a4 cf       	rjmp	.-184    	; 0x1e0a <gpio_read_pin+0x2e>

            return state;
        }
    }

    return 1;
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
}
    1ec4:	29 96       	adiw	r28, 0x09	; 9
    1ec6:	0f b6       	in	r0, 0x3f	; 63
    1ec8:	f8 94       	cli
    1eca:	de bf       	out	0x3e, r29	; 62
    1ecc:	0f be       	out	0x3f, r0	; 63
    1ece:	cd bf       	out	0x3d, r28	; 61
    1ed0:	df 91       	pop	r29
    1ed2:	cf 91       	pop	r28
    1ed4:	08 95       	ret

00001ed6 <gpio_debouncer>:
uint16_t test = 0;
void gpio_debouncer(void)
{
    1ed6:	0f 93       	push	r16
    1ed8:	1f 93       	push	r17
    1eda:	cf 93       	push	r28
    1edc:	df 93       	push	r29
    1ede:	00 d0       	rcall	.+0      	; 0x1ee0 <gpio_debouncer+0xa>
    1ee0:	00 d0       	rcall	.+0      	; 0x1ee2 <gpio_debouncer+0xc>
    1ee2:	00 d0       	rcall	.+0      	; 0x1ee4 <gpio_debouncer+0xe>
    1ee4:	cd b7       	in	r28, 0x3d	; 61
    1ee6:	de b7       	in	r29, 0x3e	; 62
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    1ee8:	80 91 08 01 	lds	r24, 0x0108
    1eec:	90 91 09 01 	lds	r25, 0x0109
    1ef0:	9c 83       	std	Y+4, r25	; 0x04
    1ef2:	8b 83       	std	Y+3, r24	; 0x03
    1ef4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef8:	06 97       	sbiw	r24, 0x06	; 6
    1efa:	9a 83       	std	Y+2, r25	; 0x02
    1efc:	89 83       	std	Y+1, r24	; 0x01
    1efe:	1e c0       	rjmp	.+60     	; 0x1f3c <gpio_debouncer+0x66>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    1f00:	00 91 7e 01 	lds	r16, 0x017E
    1f04:	10 91 7f 01 	lds	r17, 0x017F
    1f08:	89 81       	ldd	r24, Y+1	; 0x01
    1f0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f0c:	fc 01       	movw	r30, r24
    1f0e:	80 81       	ld	r24, Z
    1f10:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__gpio_read_pin>
    1f14:	28 2f       	mov	r18, r24
    1f16:	89 81       	ldd	r24, Y+1	; 0x01
    1f18:	9a 81       	ldd	r25, Y+2	; 0x02
    1f1a:	80 0f       	add	r24, r16
    1f1c:	91 1f       	adc	r25, r17
    1f1e:	02 96       	adiw	r24, 0x02	; 2
    1f20:	fc 01       	movw	r30, r24
    1f22:	20 83       	st	Z, r18
uint16_t test = 0;
void gpio_debouncer(void)
{
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    1f24:	89 81       	ldd	r24, Y+1	; 0x01
    1f26:	9a 81       	ldd	r25, Y+2	; 0x02
    1f28:	fc 01       	movw	r30, r24
    1f2a:	80 85       	ldd	r24, Z+8	; 0x08
    1f2c:	91 85       	ldd	r25, Z+9	; 0x09
    1f2e:	9e 83       	std	Y+6, r25	; 0x06
    1f30:	8d 83       	std	Y+5, r24	; 0x05
    1f32:	8d 81       	ldd	r24, Y+5	; 0x05
    1f34:	9e 81       	ldd	r25, Y+6	; 0x06
    1f36:	06 97       	sbiw	r24, 0x06	; 6
    1f38:	9a 83       	std	Y+2, r25	; 0x02
    1f3a:	89 83       	std	Y+1, r24	; 0x01
    1f3c:	89 81       	ldd	r24, Y+1	; 0x01
    1f3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f40:	06 96       	adiw	r24, 0x06	; 6
    1f42:	86 50       	subi	r24, 0x06	; 6
    1f44:	91 40       	sbci	r25, 0x01	; 1
    1f46:	e1 f6       	brne	.-72     	; 0x1f00 <gpio_debouncer+0x2a>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    }

    if(++count == GPIO_DEBOUNCE_COUNT)
    1f48:	80 91 7e 01 	lds	r24, 0x017E
    1f4c:	90 91 7f 01 	lds	r25, 0x017F
    1f50:	01 96       	adiw	r24, 0x01	; 1
    1f52:	90 93 7f 01 	sts	0x017F, r25
    1f56:	80 93 7e 01 	sts	0x017E, r24
    1f5a:	03 97       	sbiw	r24, 0x03	; 3
    1f5c:	21 f4       	brne	.+8      	; 0x1f66 <gpio_debouncer+0x90>
        count = 0;
    1f5e:	10 92 7f 01 	sts	0x017F, r1
    1f62:	10 92 7e 01 	sts	0x017E, r1
	
}
    1f66:	26 96       	adiw	r28, 0x06	; 6
    1f68:	0f b6       	in	r0, 0x3f	; 63
    1f6a:	f8 94       	cli
    1f6c:	de bf       	out	0x3e, r29	; 62
    1f6e:	0f be       	out	0x3f, r0	; 63
    1f70:	cd bf       	out	0x3d, r28	; 61
    1f72:	df 91       	pop	r29
    1f74:	cf 91       	pop	r28
    1f76:	1f 91       	pop	r17
    1f78:	0f 91       	pop	r16
    1f7a:	08 95       	ret

00001f7c <odometry_set_speed>:
	.angle = 0,
	.state = IDLE
};

void odometry_set_speed(uint8_t speed)
{
    1f7c:	cf 93       	push	r28
    1f7e:	df 93       	push	r29
    1f80:	cd b7       	in	r28, 0x3d	; 61
    1f82:	de b7       	in	r29, 0x3e	; 62
    1f84:	67 97       	sbiw	r28, 0x17	; 23
    1f86:	0f b6       	in	r0, 0x3f	; 63
    1f88:	f8 94       	cli
    1f8a:	de bf       	out	0x3e, r29	; 62
    1f8c:	0f be       	out	0x3f, r0	; 63
    1f8e:	cd bf       	out	0x3d, r28	; 61
    1f90:	8f 8b       	std	Y+23, r24	; 0x17
	if(speed == current_speed)
    1f92:	80 91 80 01 	lds	r24, 0x0180
    1f96:	9f 89       	ldd	r25, Y+23	; 0x17
    1f98:	98 17       	cp	r25, r24
    1f9a:	09 f4       	brne	.+2      	; 0x1f9e <odometry_set_speed+0x22>
    1f9c:	82 c0       	rjmp	.+260    	; 0x20a2 <odometry_set_speed+0x126>
		return;

	uint8_t buffer[8];
	buffer[0] = 'V';
    1f9e:	86 e5       	ldi	r24, 0x56	; 86
    1fa0:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = speed;
    1fa2:	8f 89       	ldd	r24, Y+23	; 0x17
    1fa4:	88 8b       	std	Y+16, r24	; 0x10
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1fa6:	72 c0       	rjmp	.+228    	; 0x208c <odometry_set_speed+0x110>
    1fa8:	80 e0       	ldi	r24, 0x00	; 0
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	a8 e4       	ldi	r26, 0x48	; 72
    1fae:	b2 e4       	ldi	r27, 0x42	; 66
    1fb0:	89 83       	std	Y+1, r24	; 0x01
    1fb2:	9a 83       	std	Y+2, r25	; 0x02
    1fb4:	ab 83       	std	Y+3, r26	; 0x03
    1fb6:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1fb8:	20 e0       	ldi	r18, 0x00	; 0
    1fba:	30 e4       	ldi	r19, 0x40	; 64
    1fbc:	4c e1       	ldi	r20, 0x1C	; 28
    1fbe:	55 e4       	ldi	r21, 0x45	; 69
    1fc0:	69 81       	ldd	r22, Y+1	; 0x01
    1fc2:	7a 81       	ldd	r23, Y+2	; 0x02
    1fc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc8:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <__mulsf3>
    1fcc:	dc 01       	movw	r26, r24
    1fce:	cb 01       	movw	r24, r22
    1fd0:	8d 83       	std	Y+5, r24	; 0x05
    1fd2:	9e 83       	std	Y+6, r25	; 0x06
    1fd4:	af 83       	std	Y+7, r26	; 0x07
    1fd6:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	40 e8       	ldi	r20, 0x80	; 128
    1fde:	5f e3       	ldi	r21, 0x3F	; 63
    1fe0:	6d 81       	ldd	r22, Y+5	; 0x05
    1fe2:	7e 81       	ldd	r23, Y+6	; 0x06
    1fe4:	8f 81       	ldd	r24, Y+7	; 0x07
    1fe6:	98 85       	ldd	r25, Y+8	; 0x08
    1fe8:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <__cmpsf2>
    1fec:	88 23       	and	r24, r24
    1fee:	2c f4       	brge	.+10     	; 0x1ffa <odometry_set_speed+0x7e>
		__ticks = 1;
    1ff0:	81 e0       	ldi	r24, 0x01	; 1
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	9a 87       	std	Y+10, r25	; 0x0a
    1ff6:	89 87       	std	Y+9, r24	; 0x09
    1ff8:	3f c0       	rjmp	.+126    	; 0x2078 <odometry_set_speed+0xfc>
	else if (__tmp > 65535)
    1ffa:	20 e0       	ldi	r18, 0x00	; 0
    1ffc:	3f ef       	ldi	r19, 0xFF	; 255
    1ffe:	4f e7       	ldi	r20, 0x7F	; 127
    2000:	57 e4       	ldi	r21, 0x47	; 71
    2002:	6d 81       	ldd	r22, Y+5	; 0x05
    2004:	7e 81       	ldd	r23, Y+6	; 0x06
    2006:	8f 81       	ldd	r24, Y+7	; 0x07
    2008:	98 85       	ldd	r25, Y+8	; 0x08
    200a:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <__gesf2>
    200e:	18 16       	cp	r1, r24
    2010:	4c f5       	brge	.+82     	; 0x2064 <odometry_set_speed+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2012:	20 e0       	ldi	r18, 0x00	; 0
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	40 e2       	ldi	r20, 0x20	; 32
    2018:	51 e4       	ldi	r21, 0x41	; 65
    201a:	69 81       	ldd	r22, Y+1	; 0x01
    201c:	7a 81       	ldd	r23, Y+2	; 0x02
    201e:	8b 81       	ldd	r24, Y+3	; 0x03
    2020:	9c 81       	ldd	r25, Y+4	; 0x04
    2022:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <__mulsf3>
    2026:	dc 01       	movw	r26, r24
    2028:	cb 01       	movw	r24, r22
    202a:	bc 01       	movw	r22, r24
    202c:	cd 01       	movw	r24, r26
    202e:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <__fixunssfsi>
    2032:	dc 01       	movw	r26, r24
    2034:	cb 01       	movw	r24, r22
    2036:	9a 87       	std	Y+10, r25	; 0x0a
    2038:	89 87       	std	Y+9, r24	; 0x09
    203a:	0f c0       	rjmp	.+30     	; 0x205a <odometry_set_speed+0xde>
    203c:	8a ef       	ldi	r24, 0xFA	; 250
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	9c 87       	std	Y+12, r25	; 0x0c
    2042:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2044:	8b 85       	ldd	r24, Y+11	; 0x0b
    2046:	9c 85       	ldd	r25, Y+12	; 0x0c
    2048:	01 97       	sbiw	r24, 0x01	; 1
    204a:	f1 f7       	brne	.-4      	; 0x2048 <odometry_set_speed+0xcc>
    204c:	9c 87       	std	Y+12, r25	; 0x0c
    204e:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2050:	89 85       	ldd	r24, Y+9	; 0x09
    2052:	9a 85       	ldd	r25, Y+10	; 0x0a
    2054:	01 97       	sbiw	r24, 0x01	; 1
    2056:	9a 87       	std	Y+10, r25	; 0x0a
    2058:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    205a:	89 85       	ldd	r24, Y+9	; 0x09
    205c:	9a 85       	ldd	r25, Y+10	; 0x0a
    205e:	89 2b       	or	r24, r25
    2060:	69 f7       	brne	.-38     	; 0x203c <odometry_set_speed+0xc0>
    2062:	14 c0       	rjmp	.+40     	; 0x208c <odometry_set_speed+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2064:	6d 81       	ldd	r22, Y+5	; 0x05
    2066:	7e 81       	ldd	r23, Y+6	; 0x06
    2068:	8f 81       	ldd	r24, Y+7	; 0x07
    206a:	98 85       	ldd	r25, Y+8	; 0x08
    206c:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <__fixunssfsi>
    2070:	dc 01       	movw	r26, r24
    2072:	cb 01       	movw	r24, r22
    2074:	9a 87       	std	Y+10, r25	; 0x0a
    2076:	89 87       	std	Y+9, r24	; 0x09
    2078:	89 85       	ldd	r24, Y+9	; 0x09
    207a:	9a 85       	ldd	r25, Y+10	; 0x0a
    207c:	9e 87       	std	Y+14, r25	; 0x0e
    207e:	8d 87       	std	Y+13, r24	; 0x0d
    2080:	8d 85       	ldd	r24, Y+13	; 0x0d
    2082:	9e 85       	ldd	r25, Y+14	; 0x0e
    2084:	01 97       	sbiw	r24, 0x01	; 1
    2086:	f1 f7       	brne	.-4      	; 0x2084 <odometry_set_speed+0x108>
    2088:	9e 87       	std	Y+14, r25	; 0x0e
    208a:	8d 87       	std	Y+13, r24	; 0x0d
    208c:	ce 01       	movw	r24, r28
    208e:	0f 96       	adiw	r24, 0x0f	; 15
    2090:	63 ec       	ldi	r22, 0xC3	; 195
    2092:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <CAN_Write>
    2096:	88 23       	and	r24, r24
    2098:	09 f0       	breq	.+2      	; 0x209c <odometry_set_speed+0x120>
    209a:	86 cf       	rjmp	.-244    	; 0x1fa8 <odometry_set_speed+0x2c>
		_delay_ms(50);

	current_speed = speed;
    209c:	8f 89       	ldd	r24, Y+23	; 0x17
    209e:	80 93 80 01 	sts	0x0180, r24
}
    20a2:	67 96       	adiw	r28, 0x17	; 23
    20a4:	0f b6       	in	r0, 0x3f	; 63
    20a6:	f8 94       	cli
    20a8:	de bf       	out	0x3e, r29	; 62
    20aa:	0f be       	out	0x3f, r0	; 63
    20ac:	cd bf       	out	0x3d, r28	; 61
    20ae:	df 91       	pop	r29
    20b0:	cf 91       	pop	r28
    20b2:	08 95       	ret

000020b4 <odometry_query_position>:

static void odometry_query_position(void)
{
    20b4:	cf 93       	push	r28
    20b6:	df 93       	push	r29
    20b8:	cd b7       	in	r28, 0x3d	; 61
    20ba:	de b7       	in	r29, 0x3e	; 62
    20bc:	66 97       	sbiw	r28, 0x16	; 22
    20be:	0f b6       	in	r0, 0x3f	; 63
    20c0:	f8 94       	cli
    20c2:	de bf       	out	0x3e, r29	; 62
    20c4:	0f be       	out	0x3f, r0	; 63
    20c6:	cd bf       	out	0x3d, r28	; 61
	uint8_t buffer[8];
	buffer[0] = 'P';
    20c8:	80 e5       	ldi	r24, 0x50	; 80
    20ca:	8f 87       	std	Y+15, r24	; 0x0f
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    20cc:	72 c0       	rjmp	.+228    	; 0x21b2 <odometry_query_position+0xfe>
    20ce:	80 e0       	ldi	r24, 0x00	; 0
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	a8 e4       	ldi	r26, 0x48	; 72
    20d4:	b2 e4       	ldi	r27, 0x42	; 66
    20d6:	89 83       	std	Y+1, r24	; 0x01
    20d8:	9a 83       	std	Y+2, r25	; 0x02
    20da:	ab 83       	std	Y+3, r26	; 0x03
    20dc:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    20de:	20 e0       	ldi	r18, 0x00	; 0
    20e0:	30 e4       	ldi	r19, 0x40	; 64
    20e2:	4c e1       	ldi	r20, 0x1C	; 28
    20e4:	55 e4       	ldi	r21, 0x45	; 69
    20e6:	69 81       	ldd	r22, Y+1	; 0x01
    20e8:	7a 81       	ldd	r23, Y+2	; 0x02
    20ea:	8b 81       	ldd	r24, Y+3	; 0x03
    20ec:	9c 81       	ldd	r25, Y+4	; 0x04
    20ee:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <__mulsf3>
    20f2:	dc 01       	movw	r26, r24
    20f4:	cb 01       	movw	r24, r22
    20f6:	8d 83       	std	Y+5, r24	; 0x05
    20f8:	9e 83       	std	Y+6, r25	; 0x06
    20fa:	af 83       	std	Y+7, r26	; 0x07
    20fc:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    20fe:	20 e0       	ldi	r18, 0x00	; 0
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	40 e8       	ldi	r20, 0x80	; 128
    2104:	5f e3       	ldi	r21, 0x3F	; 63
    2106:	6d 81       	ldd	r22, Y+5	; 0x05
    2108:	7e 81       	ldd	r23, Y+6	; 0x06
    210a:	8f 81       	ldd	r24, Y+7	; 0x07
    210c:	98 85       	ldd	r25, Y+8	; 0x08
    210e:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <__cmpsf2>
    2112:	88 23       	and	r24, r24
    2114:	2c f4       	brge	.+10     	; 0x2120 <odometry_query_position+0x6c>
		__ticks = 1;
    2116:	81 e0       	ldi	r24, 0x01	; 1
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	9a 87       	std	Y+10, r25	; 0x0a
    211c:	89 87       	std	Y+9, r24	; 0x09
    211e:	3f c0       	rjmp	.+126    	; 0x219e <odometry_query_position+0xea>
	else if (__tmp > 65535)
    2120:	20 e0       	ldi	r18, 0x00	; 0
    2122:	3f ef       	ldi	r19, 0xFF	; 255
    2124:	4f e7       	ldi	r20, 0x7F	; 127
    2126:	57 e4       	ldi	r21, 0x47	; 71
    2128:	6d 81       	ldd	r22, Y+5	; 0x05
    212a:	7e 81       	ldd	r23, Y+6	; 0x06
    212c:	8f 81       	ldd	r24, Y+7	; 0x07
    212e:	98 85       	ldd	r25, Y+8	; 0x08
    2130:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <__gesf2>
    2134:	18 16       	cp	r1, r24
    2136:	4c f5       	brge	.+82     	; 0x218a <odometry_query_position+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2138:	20 e0       	ldi	r18, 0x00	; 0
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	40 e2       	ldi	r20, 0x20	; 32
    213e:	51 e4       	ldi	r21, 0x41	; 65
    2140:	69 81       	ldd	r22, Y+1	; 0x01
    2142:	7a 81       	ldd	r23, Y+2	; 0x02
    2144:	8b 81       	ldd	r24, Y+3	; 0x03
    2146:	9c 81       	ldd	r25, Y+4	; 0x04
    2148:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <__mulsf3>
    214c:	dc 01       	movw	r26, r24
    214e:	cb 01       	movw	r24, r22
    2150:	bc 01       	movw	r22, r24
    2152:	cd 01       	movw	r24, r26
    2154:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <__fixunssfsi>
    2158:	dc 01       	movw	r26, r24
    215a:	cb 01       	movw	r24, r22
    215c:	9a 87       	std	Y+10, r25	; 0x0a
    215e:	89 87       	std	Y+9, r24	; 0x09
    2160:	0f c0       	rjmp	.+30     	; 0x2180 <odometry_query_position+0xcc>
    2162:	8a ef       	ldi	r24, 0xFA	; 250
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	9c 87       	std	Y+12, r25	; 0x0c
    2168:	8b 87       	std	Y+11, r24	; 0x0b
    216a:	8b 85       	ldd	r24, Y+11	; 0x0b
    216c:	9c 85       	ldd	r25, Y+12	; 0x0c
    216e:	01 97       	sbiw	r24, 0x01	; 1
    2170:	f1 f7       	brne	.-4      	; 0x216e <odometry_query_position+0xba>
    2172:	9c 87       	std	Y+12, r25	; 0x0c
    2174:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2176:	89 85       	ldd	r24, Y+9	; 0x09
    2178:	9a 85       	ldd	r25, Y+10	; 0x0a
    217a:	01 97       	sbiw	r24, 0x01	; 1
    217c:	9a 87       	std	Y+10, r25	; 0x0a
    217e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2180:	89 85       	ldd	r24, Y+9	; 0x09
    2182:	9a 85       	ldd	r25, Y+10	; 0x0a
    2184:	89 2b       	or	r24, r25
    2186:	69 f7       	brne	.-38     	; 0x2162 <odometry_query_position+0xae>
    2188:	14 c0       	rjmp	.+40     	; 0x21b2 <odometry_query_position+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    218a:	6d 81       	ldd	r22, Y+5	; 0x05
    218c:	7e 81       	ldd	r23, Y+6	; 0x06
    218e:	8f 81       	ldd	r24, Y+7	; 0x07
    2190:	98 85       	ldd	r25, Y+8	; 0x08
    2192:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <__fixunssfsi>
    2196:	dc 01       	movw	r26, r24
    2198:	cb 01       	movw	r24, r22
    219a:	9a 87       	std	Y+10, r25	; 0x0a
    219c:	89 87       	std	Y+9, r24	; 0x09
    219e:	89 85       	ldd	r24, Y+9	; 0x09
    21a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21a2:	9e 87       	std	Y+14, r25	; 0x0e
    21a4:	8d 87       	std	Y+13, r24	; 0x0d
    21a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    21a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    21aa:	01 97       	sbiw	r24, 0x01	; 1
    21ac:	f1 f7       	brne	.-4      	; 0x21aa <odometry_query_position+0xf6>
    21ae:	9e 87       	std	Y+14, r25	; 0x0e
    21b0:	8d 87       	std	Y+13, r24	; 0x0d
    21b2:	ce 01       	movw	r24, r28
    21b4:	0f 96       	adiw	r24, 0x0f	; 15
    21b6:	63 ec       	ldi	r22, 0xC3	; 195
    21b8:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <CAN_Write>
    21bc:	88 23       	and	r24, r24
    21be:	09 f0       	breq	.+2      	; 0x21c2 <odometry_query_position+0x10e>
    21c0:	86 cf       	rjmp	.-244    	; 0x20ce <odometry_query_position+0x1a>
		_delay_ms(50);

	CAN_Read(buffer, DRIVER_RX_IDENTIFICATOR);
    21c2:	ce 01       	movw	r24, r28
    21c4:	0f 96       	adiw	r24, 0x0f	; 15
    21c6:	61 e0       	ldi	r22, 0x01	; 1
    21c8:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <CAN_Read>

	position.state = buffer[0];
    21cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    21ce:	80 93 10 01 	sts	0x0110, r24
	position.x	   = (buffer[1] << 8) | buffer[2];
    21d2:	88 89       	ldd	r24, Y+16	; 0x10
    21d4:	88 2f       	mov	r24, r24
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	38 2f       	mov	r19, r24
    21da:	22 27       	eor	r18, r18
    21dc:	89 89       	ldd	r24, Y+17	; 0x11
    21de:	88 2f       	mov	r24, r24
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	82 2b       	or	r24, r18
    21e4:	93 2b       	or	r25, r19
    21e6:	90 93 0b 01 	sts	0x010B, r25
    21ea:	80 93 0a 01 	sts	0x010A, r24
	position.y	   = (buffer[3] << 8) | buffer[4];
    21ee:	8a 89       	ldd	r24, Y+18	; 0x12
    21f0:	88 2f       	mov	r24, r24
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	38 2f       	mov	r19, r24
    21f6:	22 27       	eor	r18, r18
    21f8:	8b 89       	ldd	r24, Y+19	; 0x13
    21fa:	88 2f       	mov	r24, r24
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	82 2b       	or	r24, r18
    2200:	93 2b       	or	r25, r19
    2202:	90 93 0d 01 	sts	0x010D, r25
    2206:	80 93 0c 01 	sts	0x010C, r24
	position.angle = (buffer[5] << 8) | buffer[6];
    220a:	8c 89       	ldd	r24, Y+20	; 0x14
    220c:	88 2f       	mov	r24, r24
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	38 2f       	mov	r19, r24
    2212:	22 27       	eor	r18, r18
    2214:	8d 89       	ldd	r24, Y+21	; 0x15
    2216:	88 2f       	mov	r24, r24
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	82 2b       	or	r24, r18
    221c:	93 2b       	or	r25, r19
    221e:	90 93 0f 01 	sts	0x010F, r25
    2222:	80 93 0e 01 	sts	0x010E, r24
}
    2226:	66 96       	adiw	r28, 0x16	; 22
    2228:	0f b6       	in	r0, 0x3f	; 63
    222a:	f8 94       	cli
    222c:	de bf       	out	0x3e, r29	; 62
    222e:	0f be       	out	0x3f, r0	; 63
    2230:	cd bf       	out	0x3d, r28	; 61
    2232:	df 91       	pop	r29
    2234:	cf 91       	pop	r28
    2236:	08 95       	ret

00002238 <odometry_wait_until_done>:

static uint8_t odometry_wait_until_done(uint8_t (*callback)(uint32_t start_time))
{
    2238:	cf 93       	push	r28
    223a:	df 93       	push	r29
    223c:	00 d0       	rcall	.+0      	; 0x223e <odometry_wait_until_done+0x6>
    223e:	00 d0       	rcall	.+0      	; 0x2240 <odometry_wait_until_done+0x8>
    2240:	00 d0       	rcall	.+0      	; 0x2242 <odometry_wait_until_done+0xa>
    2242:	cd b7       	in	r28, 0x3d	; 61
    2244:	de b7       	in	r29, 0x3e	; 62
    2246:	9e 83       	std	Y+6, r25	; 0x06
    2248:	8d 83       	std	Y+5, r24	; 0x05
	uint32_t time = system_get_system_time();
    224a:	0e 94 92 16 	call	0x2d24	; 0x2d24 <system_get_system_time>
    224e:	dc 01       	movw	r26, r24
    2250:	cb 01       	movw	r24, r22
    2252:	89 83       	std	Y+1, r24	; 0x01
    2254:	9a 83       	std	Y+2, r25	; 0x02
    2256:	ab 83       	std	Y+3, r26	; 0x03
    2258:	bc 83       	std	Y+4, r27	; 0x04
	do
	{
		odometry_query_position();
    225a:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <odometry_query_position>
		if(callback != NULL)
    225e:	8d 81       	ldd	r24, Y+5	; 0x05
    2260:	9e 81       	ldd	r25, Y+6	; 0x06
    2262:	89 2b       	or	r24, r25
    2264:	71 f0       	breq	.+28     	; 0x2282 <odometry_wait_until_done+0x4a>
		{
			if(callback(time) == 1)
    2266:	89 81       	ldd	r24, Y+1	; 0x01
    2268:	9a 81       	ldd	r25, Y+2	; 0x02
    226a:	ab 81       	ldd	r26, Y+3	; 0x03
    226c:	bc 81       	ldd	r27, Y+4	; 0x04
    226e:	2d 81       	ldd	r18, Y+5	; 0x05
    2270:	3e 81       	ldd	r19, Y+6	; 0x06
    2272:	bc 01       	movw	r22, r24
    2274:	cd 01       	movw	r24, r26
    2276:	f9 01       	movw	r30, r18
    2278:	09 95       	icall
    227a:	81 30       	cpi	r24, 0x01	; 1
    227c:	11 f4       	brne	.+4      	; 0x2282 <odometry_wait_until_done+0x4a>
				return ODOMETRY_FAIL;
    227e:	81 e0       	ldi	r24, 0x01	; 1
    2280:	09 c0       	rjmp	.+18     	; 0x2294 <odometry_wait_until_done+0x5c>
		}
	}while(position.state == MOVING || position.state == ROTATING);
    2282:	80 91 10 01 	lds	r24, 0x0110
    2286:	8d 34       	cpi	r24, 0x4D	; 77
    2288:	41 f3       	breq	.-48     	; 0x225a <odometry_wait_until_done+0x22>
    228a:	80 91 10 01 	lds	r24, 0x0110
    228e:	82 35       	cpi	r24, 0x52	; 82
    2290:	21 f3       	breq	.-56     	; 0x225a <odometry_wait_until_done+0x22>

	return ODOMETRY_SUCCESS;
    2292:	80 e0       	ldi	r24, 0x00	; 0
}
    2294:	26 96       	adiw	r28, 0x06	; 6
    2296:	0f b6       	in	r0, 0x3f	; 63
    2298:	f8 94       	cli
    229a:	de bf       	out	0x3e, r29	; 62
    229c:	0f be       	out	0x3f, r0	; 63
    229e:	cd bf       	out	0x3d, r28	; 61
    22a0:	df 91       	pop	r29
    22a2:	cf 91       	pop	r28
    22a4:	08 95       	ret

000022a6 <odometry_stop>:

void odometry_stop(int8_t type)
{
    22a6:	cf 93       	push	r28
    22a8:	df 93       	push	r29
    22aa:	cd b7       	in	r28, 0x3d	; 61
    22ac:	de b7       	in	r29, 0x3e	; 62
    22ae:	67 97       	sbiw	r28, 0x17	; 23
    22b0:	0f b6       	in	r0, 0x3f	; 63
    22b2:	f8 94       	cli
    22b4:	de bf       	out	0x3e, r29	; 62
    22b6:	0f be       	out	0x3f, r0	; 63
    22b8:	cd bf       	out	0x3d, r28	; 61
    22ba:	8f 8b       	std	Y+23, r24	; 0x17
	uint8_t buffer[8];

	do
	{
		buffer[0] = type;
    22bc:	8f 89       	ldd	r24, Y+23	; 0x17
    22be:	8f 87       	std	Y+15, r24	; 0x0f

		while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    22c0:	72 c0       	rjmp	.+228    	; 0x23a6 <odometry_stop+0x100>
    22c2:	80 e0       	ldi	r24, 0x00	; 0
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	a8 e4       	ldi	r26, 0x48	; 72
    22c8:	b2 e4       	ldi	r27, 0x42	; 66
    22ca:	89 83       	std	Y+1, r24	; 0x01
    22cc:	9a 83       	std	Y+2, r25	; 0x02
    22ce:	ab 83       	std	Y+3, r26	; 0x03
    22d0:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    22d2:	20 e0       	ldi	r18, 0x00	; 0
    22d4:	30 e4       	ldi	r19, 0x40	; 64
    22d6:	4c e1       	ldi	r20, 0x1C	; 28
    22d8:	55 e4       	ldi	r21, 0x45	; 69
    22da:	69 81       	ldd	r22, Y+1	; 0x01
    22dc:	7a 81       	ldd	r23, Y+2	; 0x02
    22de:	8b 81       	ldd	r24, Y+3	; 0x03
    22e0:	9c 81       	ldd	r25, Y+4	; 0x04
    22e2:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <__mulsf3>
    22e6:	dc 01       	movw	r26, r24
    22e8:	cb 01       	movw	r24, r22
    22ea:	8d 83       	std	Y+5, r24	; 0x05
    22ec:	9e 83       	std	Y+6, r25	; 0x06
    22ee:	af 83       	std	Y+7, r26	; 0x07
    22f0:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    22f2:	20 e0       	ldi	r18, 0x00	; 0
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	40 e8       	ldi	r20, 0x80	; 128
    22f8:	5f e3       	ldi	r21, 0x3F	; 63
    22fa:	6d 81       	ldd	r22, Y+5	; 0x05
    22fc:	7e 81       	ldd	r23, Y+6	; 0x06
    22fe:	8f 81       	ldd	r24, Y+7	; 0x07
    2300:	98 85       	ldd	r25, Y+8	; 0x08
    2302:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <__cmpsf2>
    2306:	88 23       	and	r24, r24
    2308:	2c f4       	brge	.+10     	; 0x2314 <odometry_stop+0x6e>
		__ticks = 1;
    230a:	81 e0       	ldi	r24, 0x01	; 1
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	9a 87       	std	Y+10, r25	; 0x0a
    2310:	89 87       	std	Y+9, r24	; 0x09
    2312:	3f c0       	rjmp	.+126    	; 0x2392 <odometry_stop+0xec>
	else if (__tmp > 65535)
    2314:	20 e0       	ldi	r18, 0x00	; 0
    2316:	3f ef       	ldi	r19, 0xFF	; 255
    2318:	4f e7       	ldi	r20, 0x7F	; 127
    231a:	57 e4       	ldi	r21, 0x47	; 71
    231c:	6d 81       	ldd	r22, Y+5	; 0x05
    231e:	7e 81       	ldd	r23, Y+6	; 0x06
    2320:	8f 81       	ldd	r24, Y+7	; 0x07
    2322:	98 85       	ldd	r25, Y+8	; 0x08
    2324:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <__gesf2>
    2328:	18 16       	cp	r1, r24
    232a:	4c f5       	brge	.+82     	; 0x237e <odometry_stop+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    232c:	20 e0       	ldi	r18, 0x00	; 0
    232e:	30 e0       	ldi	r19, 0x00	; 0
    2330:	40 e2       	ldi	r20, 0x20	; 32
    2332:	51 e4       	ldi	r21, 0x41	; 65
    2334:	69 81       	ldd	r22, Y+1	; 0x01
    2336:	7a 81       	ldd	r23, Y+2	; 0x02
    2338:	8b 81       	ldd	r24, Y+3	; 0x03
    233a:	9c 81       	ldd	r25, Y+4	; 0x04
    233c:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <__mulsf3>
    2340:	dc 01       	movw	r26, r24
    2342:	cb 01       	movw	r24, r22
    2344:	bc 01       	movw	r22, r24
    2346:	cd 01       	movw	r24, r26
    2348:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <__fixunssfsi>
    234c:	dc 01       	movw	r26, r24
    234e:	cb 01       	movw	r24, r22
    2350:	9a 87       	std	Y+10, r25	; 0x0a
    2352:	89 87       	std	Y+9, r24	; 0x09
    2354:	0f c0       	rjmp	.+30     	; 0x2374 <odometry_stop+0xce>
    2356:	8a ef       	ldi	r24, 0xFA	; 250
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	9c 87       	std	Y+12, r25	; 0x0c
    235c:	8b 87       	std	Y+11, r24	; 0x0b
    235e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2360:	9c 85       	ldd	r25, Y+12	; 0x0c
    2362:	01 97       	sbiw	r24, 0x01	; 1
    2364:	f1 f7       	brne	.-4      	; 0x2362 <odometry_stop+0xbc>
    2366:	9c 87       	std	Y+12, r25	; 0x0c
    2368:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    236a:	89 85       	ldd	r24, Y+9	; 0x09
    236c:	9a 85       	ldd	r25, Y+10	; 0x0a
    236e:	01 97       	sbiw	r24, 0x01	; 1
    2370:	9a 87       	std	Y+10, r25	; 0x0a
    2372:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2374:	89 85       	ldd	r24, Y+9	; 0x09
    2376:	9a 85       	ldd	r25, Y+10	; 0x0a
    2378:	89 2b       	or	r24, r25
    237a:	69 f7       	brne	.-38     	; 0x2356 <odometry_stop+0xb0>
    237c:	14 c0       	rjmp	.+40     	; 0x23a6 <odometry_stop+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    237e:	6d 81       	ldd	r22, Y+5	; 0x05
    2380:	7e 81       	ldd	r23, Y+6	; 0x06
    2382:	8f 81       	ldd	r24, Y+7	; 0x07
    2384:	98 85       	ldd	r25, Y+8	; 0x08
    2386:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <__fixunssfsi>
    238a:	dc 01       	movw	r26, r24
    238c:	cb 01       	movw	r24, r22
    238e:	9a 87       	std	Y+10, r25	; 0x0a
    2390:	89 87       	std	Y+9, r24	; 0x09
    2392:	89 85       	ldd	r24, Y+9	; 0x09
    2394:	9a 85       	ldd	r25, Y+10	; 0x0a
    2396:	9e 87       	std	Y+14, r25	; 0x0e
    2398:	8d 87       	std	Y+13, r24	; 0x0d
    239a:	8d 85       	ldd	r24, Y+13	; 0x0d
    239c:	9e 85       	ldd	r25, Y+14	; 0x0e
    239e:	01 97       	sbiw	r24, 0x01	; 1
    23a0:	f1 f7       	brne	.-4      	; 0x239e <odometry_stop+0xf8>
    23a2:	9e 87       	std	Y+14, r25	; 0x0e
    23a4:	8d 87       	std	Y+13, r24	; 0x0d
    23a6:	ce 01       	movw	r24, r28
    23a8:	0f 96       	adiw	r24, 0x0f	; 15
    23aa:	63 ec       	ldi	r22, 0xC3	; 195
    23ac:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <CAN_Write>
    23b0:	88 23       	and	r24, r24
    23b2:	09 f0       	breq	.+2      	; 0x23b6 <odometry_stop+0x110>
    23b4:	86 cf       	rjmp	.-244    	; 0x22c2 <odometry_stop+0x1c>
			_delay_ms(50);

		odometry_query_position();
    23b6:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <odometry_query_position>
	}while(position.state == MOVING || position.state == ROTATING);
    23ba:	80 91 10 01 	lds	r24, 0x0110
    23be:	8d 34       	cpi	r24, 0x4D	; 77
    23c0:	09 f4       	brne	.+2      	; 0x23c4 <odometry_stop+0x11e>
    23c2:	7c cf       	rjmp	.-264    	; 0x22bc <odometry_stop+0x16>
    23c4:	80 91 10 01 	lds	r24, 0x0110
    23c8:	82 35       	cpi	r24, 0x52	; 82
    23ca:	09 f4       	brne	.+2      	; 0x23ce <odometry_stop+0x128>
    23cc:	77 cf       	rjmp	.-274    	; 0x22bc <odometry_stop+0x16>
}
    23ce:	67 96       	adiw	r28, 0x17	; 23
    23d0:	0f b6       	in	r0, 0x3f	; 63
    23d2:	f8 94       	cli
    23d4:	de bf       	out	0x3e, r29	; 62
    23d6:	0f be       	out	0x3f, r0	; 63
    23d8:	cd bf       	out	0x3d, r28	; 61
    23da:	df 91       	pop	r29
    23dc:	cf 91       	pop	r28
    23de:	08 95       	ret

000023e0 <odometry_move_straight>:

uint8_t odometry_move_straight(int16_t distance, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    23e0:	cf 93       	push	r28
    23e2:	df 93       	push	r29
    23e4:	cd b7       	in	r28, 0x3d	; 61
    23e6:	de b7       	in	r29, 0x3e	; 62
    23e8:	6b 97       	sbiw	r28, 0x1b	; 27
    23ea:	0f b6       	in	r0, 0x3f	; 63
    23ec:	f8 94       	cli
    23ee:	de bf       	out	0x3e, r29	; 62
    23f0:	0f be       	out	0x3f, r0	; 63
    23f2:	cd bf       	out	0x3d, r28	; 61
    23f4:	98 8f       	std	Y+24, r25	; 0x18
    23f6:	8f 8b       	std	Y+23, r24	; 0x17
    23f8:	69 8f       	std	Y+25, r22	; 0x19
    23fa:	5b 8f       	std	Y+27, r21	; 0x1b
    23fc:	4a 8f       	std	Y+26, r20	; 0x1a
	uint8_t buffer[8];
	odometry_set_speed(speed);
    23fe:	89 8d       	ldd	r24, Y+25	; 0x19
    2400:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <odometry_set_speed>
	buffer[0] = 'D';
    2404:	84 e4       	ldi	r24, 0x44	; 68
    2406:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = distance >> 8;
    2408:	8f 89       	ldd	r24, Y+23	; 0x17
    240a:	98 8d       	ldd	r25, Y+24	; 0x18
    240c:	89 2f       	mov	r24, r25
    240e:	99 0f       	add	r25, r25
    2410:	99 0b       	sbc	r25, r25
    2412:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = distance & 0xFF;
    2414:	8f 89       	ldd	r24, Y+23	; 0x17
    2416:	89 8b       	std	Y+17, r24	; 0x11
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    2418:	72 c0       	rjmp	.+228    	; 0x24fe <odometry_move_straight+0x11e>
    241a:	80 e0       	ldi	r24, 0x00	; 0
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	a8 e4       	ldi	r26, 0x48	; 72
    2420:	b2 e4       	ldi	r27, 0x42	; 66
    2422:	89 83       	std	Y+1, r24	; 0x01
    2424:	9a 83       	std	Y+2, r25	; 0x02
    2426:	ab 83       	std	Y+3, r26	; 0x03
    2428:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    242a:	20 e0       	ldi	r18, 0x00	; 0
    242c:	30 e4       	ldi	r19, 0x40	; 64
    242e:	4c e1       	ldi	r20, 0x1C	; 28
    2430:	55 e4       	ldi	r21, 0x45	; 69
    2432:	69 81       	ldd	r22, Y+1	; 0x01
    2434:	7a 81       	ldd	r23, Y+2	; 0x02
    2436:	8b 81       	ldd	r24, Y+3	; 0x03
    2438:	9c 81       	ldd	r25, Y+4	; 0x04
    243a:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <__mulsf3>
    243e:	dc 01       	movw	r26, r24
    2440:	cb 01       	movw	r24, r22
    2442:	8d 83       	std	Y+5, r24	; 0x05
    2444:	9e 83       	std	Y+6, r25	; 0x06
    2446:	af 83       	std	Y+7, r26	; 0x07
    2448:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    244a:	20 e0       	ldi	r18, 0x00	; 0
    244c:	30 e0       	ldi	r19, 0x00	; 0
    244e:	40 e8       	ldi	r20, 0x80	; 128
    2450:	5f e3       	ldi	r21, 0x3F	; 63
    2452:	6d 81       	ldd	r22, Y+5	; 0x05
    2454:	7e 81       	ldd	r23, Y+6	; 0x06
    2456:	8f 81       	ldd	r24, Y+7	; 0x07
    2458:	98 85       	ldd	r25, Y+8	; 0x08
    245a:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <__cmpsf2>
    245e:	88 23       	and	r24, r24
    2460:	2c f4       	brge	.+10     	; 0x246c <odometry_move_straight+0x8c>
		__ticks = 1;
    2462:	81 e0       	ldi	r24, 0x01	; 1
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	9a 87       	std	Y+10, r25	; 0x0a
    2468:	89 87       	std	Y+9, r24	; 0x09
    246a:	3f c0       	rjmp	.+126    	; 0x24ea <odometry_move_straight+0x10a>
	else if (__tmp > 65535)
    246c:	20 e0       	ldi	r18, 0x00	; 0
    246e:	3f ef       	ldi	r19, 0xFF	; 255
    2470:	4f e7       	ldi	r20, 0x7F	; 127
    2472:	57 e4       	ldi	r21, 0x47	; 71
    2474:	6d 81       	ldd	r22, Y+5	; 0x05
    2476:	7e 81       	ldd	r23, Y+6	; 0x06
    2478:	8f 81       	ldd	r24, Y+7	; 0x07
    247a:	98 85       	ldd	r25, Y+8	; 0x08
    247c:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <__gesf2>
    2480:	18 16       	cp	r1, r24
    2482:	4c f5       	brge	.+82     	; 0x24d6 <odometry_move_straight+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2484:	20 e0       	ldi	r18, 0x00	; 0
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	40 e2       	ldi	r20, 0x20	; 32
    248a:	51 e4       	ldi	r21, 0x41	; 65
    248c:	69 81       	ldd	r22, Y+1	; 0x01
    248e:	7a 81       	ldd	r23, Y+2	; 0x02
    2490:	8b 81       	ldd	r24, Y+3	; 0x03
    2492:	9c 81       	ldd	r25, Y+4	; 0x04
    2494:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <__mulsf3>
    2498:	dc 01       	movw	r26, r24
    249a:	cb 01       	movw	r24, r22
    249c:	bc 01       	movw	r22, r24
    249e:	cd 01       	movw	r24, r26
    24a0:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <__fixunssfsi>
    24a4:	dc 01       	movw	r26, r24
    24a6:	cb 01       	movw	r24, r22
    24a8:	9a 87       	std	Y+10, r25	; 0x0a
    24aa:	89 87       	std	Y+9, r24	; 0x09
    24ac:	0f c0       	rjmp	.+30     	; 0x24cc <odometry_move_straight+0xec>
    24ae:	8a ef       	ldi	r24, 0xFA	; 250
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	9c 87       	std	Y+12, r25	; 0x0c
    24b4:	8b 87       	std	Y+11, r24	; 0x0b
    24b6:	8b 85       	ldd	r24, Y+11	; 0x0b
    24b8:	9c 85       	ldd	r25, Y+12	; 0x0c
    24ba:	01 97       	sbiw	r24, 0x01	; 1
    24bc:	f1 f7       	brne	.-4      	; 0x24ba <odometry_move_straight+0xda>
    24be:	9c 87       	std	Y+12, r25	; 0x0c
    24c0:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24c2:	89 85       	ldd	r24, Y+9	; 0x09
    24c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    24c6:	01 97       	sbiw	r24, 0x01	; 1
    24c8:	9a 87       	std	Y+10, r25	; 0x0a
    24ca:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24cc:	89 85       	ldd	r24, Y+9	; 0x09
    24ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d0:	89 2b       	or	r24, r25
    24d2:	69 f7       	brne	.-38     	; 0x24ae <odometry_move_straight+0xce>
    24d4:	14 c0       	rjmp	.+40     	; 0x24fe <odometry_move_straight+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24d6:	6d 81       	ldd	r22, Y+5	; 0x05
    24d8:	7e 81       	ldd	r23, Y+6	; 0x06
    24da:	8f 81       	ldd	r24, Y+7	; 0x07
    24dc:	98 85       	ldd	r25, Y+8	; 0x08
    24de:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <__fixunssfsi>
    24e2:	dc 01       	movw	r26, r24
    24e4:	cb 01       	movw	r24, r22
    24e6:	9a 87       	std	Y+10, r25	; 0x0a
    24e8:	89 87       	std	Y+9, r24	; 0x09
    24ea:	89 85       	ldd	r24, Y+9	; 0x09
    24ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ee:	9e 87       	std	Y+14, r25	; 0x0e
    24f0:	8d 87       	std	Y+13, r24	; 0x0d
    24f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    24f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    24f6:	01 97       	sbiw	r24, 0x01	; 1
    24f8:	f1 f7       	brne	.-4      	; 0x24f6 <odometry_move_straight+0x116>
    24fa:	9e 87       	std	Y+14, r25	; 0x0e
    24fc:	8d 87       	std	Y+13, r24	; 0x0d
    24fe:	ce 01       	movw	r24, r28
    2500:	0f 96       	adiw	r24, 0x0f	; 15
    2502:	63 ec       	ldi	r22, 0xC3	; 195
    2504:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <CAN_Write>
    2508:	88 23       	and	r24, r24
    250a:	09 f0       	breq	.+2      	; 0x250e <odometry_move_straight+0x12e>
    250c:	86 cf       	rjmp	.-244    	; 0x241a <odometry_move_straight+0x3a>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    250e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2510:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2512:	0e 94 1c 11 	call	0x2238	; 0x2238 <odometry_wait_until_done>
}
    2516:	6b 96       	adiw	r28, 0x1b	; 27
    2518:	0f b6       	in	r0, 0x3f	; 63
    251a:	f8 94       	cli
    251c:	de bf       	out	0x3e, r29	; 62
    251e:	0f be       	out	0x3f, r0	; 63
    2520:	cd bf       	out	0x3d, r28	; 61
    2522:	df 91       	pop	r29
    2524:	cf 91       	pop	r28
    2526:	08 95       	ret

00002528 <odometry_move_to_position>:

uint8_t odometry_move_to_position(struct odometry_position* position, uint8_t speed, uint8_t direction, uint8_t (*callback)(uint32_t start_time))
{
    2528:	cf 93       	push	r28
    252a:	df 93       	push	r29
    252c:	cd b7       	in	r28, 0x3d	; 61
    252e:	de b7       	in	r29, 0x3e	; 62
    2530:	6c 97       	sbiw	r28, 0x1c	; 28
    2532:	0f b6       	in	r0, 0x3f	; 63
    2534:	f8 94       	cli
    2536:	de bf       	out	0x3e, r29	; 62
    2538:	0f be       	out	0x3f, r0	; 63
    253a:	cd bf       	out	0x3d, r28	; 61
    253c:	98 8f       	std	Y+24, r25	; 0x18
    253e:	8f 8b       	std	Y+23, r24	; 0x17
    2540:	69 8f       	std	Y+25, r22	; 0x19
    2542:	4a 8f       	std	Y+26, r20	; 0x1a
    2544:	3c 8f       	std	Y+28, r19	; 0x1c
    2546:	2b 8f       	std	Y+27, r18	; 0x1b
	uint8_t buffer[8];

	odometry_set_speed(speed);
    2548:	89 8d       	ldd	r24, Y+25	; 0x19
    254a:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <odometry_set_speed>

	buffer[0] = 'G';
    254e:	87 e4       	ldi	r24, 0x47	; 71
    2550:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = position->x >> 8;
    2552:	8f 89       	ldd	r24, Y+23	; 0x17
    2554:	98 8d       	ldd	r25, Y+24	; 0x18
    2556:	fc 01       	movw	r30, r24
    2558:	80 81       	ld	r24, Z
    255a:	91 81       	ldd	r25, Z+1	; 0x01
    255c:	89 2f       	mov	r24, r25
    255e:	99 0f       	add	r25, r25
    2560:	99 0b       	sbc	r25, r25
    2562:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = position->x & 0xFF;
    2564:	8f 89       	ldd	r24, Y+23	; 0x17
    2566:	98 8d       	ldd	r25, Y+24	; 0x18
    2568:	fc 01       	movw	r30, r24
    256a:	80 81       	ld	r24, Z
    256c:	91 81       	ldd	r25, Z+1	; 0x01
    256e:	89 8b       	std	Y+17, r24	; 0x11
	buffer[3] = position->y >> 8;
    2570:	8f 89       	ldd	r24, Y+23	; 0x17
    2572:	98 8d       	ldd	r25, Y+24	; 0x18
    2574:	fc 01       	movw	r30, r24
    2576:	82 81       	ldd	r24, Z+2	; 0x02
    2578:	93 81       	ldd	r25, Z+3	; 0x03
    257a:	89 2f       	mov	r24, r25
    257c:	99 0f       	add	r25, r25
    257e:	99 0b       	sbc	r25, r25
    2580:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[4] = position->y & 0xFF;
    2582:	8f 89       	ldd	r24, Y+23	; 0x17
    2584:	98 8d       	ldd	r25, Y+24	; 0x18
    2586:	fc 01       	movw	r30, r24
    2588:	82 81       	ldd	r24, Z+2	; 0x02
    258a:	93 81       	ldd	r25, Z+3	; 0x03
    258c:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[5] = 0;//Mozda ne treba 0
    258e:	1c 8a       	std	Y+20, r1	; 0x14
	buffer[6] = direction;
    2590:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2592:	8d 8b       	std	Y+21, r24	; 0x15
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    2594:	72 c0       	rjmp	.+228    	; 0x267a <odometry_move_to_position+0x152>
    2596:	80 e0       	ldi	r24, 0x00	; 0
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	a8 e4       	ldi	r26, 0x48	; 72
    259c:	b2 e4       	ldi	r27, 0x42	; 66
    259e:	89 83       	std	Y+1, r24	; 0x01
    25a0:	9a 83       	std	Y+2, r25	; 0x02
    25a2:	ab 83       	std	Y+3, r26	; 0x03
    25a4:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    25a6:	20 e0       	ldi	r18, 0x00	; 0
    25a8:	30 e4       	ldi	r19, 0x40	; 64
    25aa:	4c e1       	ldi	r20, 0x1C	; 28
    25ac:	55 e4       	ldi	r21, 0x45	; 69
    25ae:	69 81       	ldd	r22, Y+1	; 0x01
    25b0:	7a 81       	ldd	r23, Y+2	; 0x02
    25b2:	8b 81       	ldd	r24, Y+3	; 0x03
    25b4:	9c 81       	ldd	r25, Y+4	; 0x04
    25b6:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <__mulsf3>
    25ba:	dc 01       	movw	r26, r24
    25bc:	cb 01       	movw	r24, r22
    25be:	8d 83       	std	Y+5, r24	; 0x05
    25c0:	9e 83       	std	Y+6, r25	; 0x06
    25c2:	af 83       	std	Y+7, r26	; 0x07
    25c4:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    25c6:	20 e0       	ldi	r18, 0x00	; 0
    25c8:	30 e0       	ldi	r19, 0x00	; 0
    25ca:	40 e8       	ldi	r20, 0x80	; 128
    25cc:	5f e3       	ldi	r21, 0x3F	; 63
    25ce:	6d 81       	ldd	r22, Y+5	; 0x05
    25d0:	7e 81       	ldd	r23, Y+6	; 0x06
    25d2:	8f 81       	ldd	r24, Y+7	; 0x07
    25d4:	98 85       	ldd	r25, Y+8	; 0x08
    25d6:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <__cmpsf2>
    25da:	88 23       	and	r24, r24
    25dc:	2c f4       	brge	.+10     	; 0x25e8 <odometry_move_to_position+0xc0>
		__ticks = 1;
    25de:	81 e0       	ldi	r24, 0x01	; 1
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	9a 87       	std	Y+10, r25	; 0x0a
    25e4:	89 87       	std	Y+9, r24	; 0x09
    25e6:	3f c0       	rjmp	.+126    	; 0x2666 <odometry_move_to_position+0x13e>
	else if (__tmp > 65535)
    25e8:	20 e0       	ldi	r18, 0x00	; 0
    25ea:	3f ef       	ldi	r19, 0xFF	; 255
    25ec:	4f e7       	ldi	r20, 0x7F	; 127
    25ee:	57 e4       	ldi	r21, 0x47	; 71
    25f0:	6d 81       	ldd	r22, Y+5	; 0x05
    25f2:	7e 81       	ldd	r23, Y+6	; 0x06
    25f4:	8f 81       	ldd	r24, Y+7	; 0x07
    25f6:	98 85       	ldd	r25, Y+8	; 0x08
    25f8:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <__gesf2>
    25fc:	18 16       	cp	r1, r24
    25fe:	4c f5       	brge	.+82     	; 0x2652 <odometry_move_to_position+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2600:	20 e0       	ldi	r18, 0x00	; 0
    2602:	30 e0       	ldi	r19, 0x00	; 0
    2604:	40 e2       	ldi	r20, 0x20	; 32
    2606:	51 e4       	ldi	r21, 0x41	; 65
    2608:	69 81       	ldd	r22, Y+1	; 0x01
    260a:	7a 81       	ldd	r23, Y+2	; 0x02
    260c:	8b 81       	ldd	r24, Y+3	; 0x03
    260e:	9c 81       	ldd	r25, Y+4	; 0x04
    2610:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <__mulsf3>
    2614:	dc 01       	movw	r26, r24
    2616:	cb 01       	movw	r24, r22
    2618:	bc 01       	movw	r22, r24
    261a:	cd 01       	movw	r24, r26
    261c:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <__fixunssfsi>
    2620:	dc 01       	movw	r26, r24
    2622:	cb 01       	movw	r24, r22
    2624:	9a 87       	std	Y+10, r25	; 0x0a
    2626:	89 87       	std	Y+9, r24	; 0x09
    2628:	0f c0       	rjmp	.+30     	; 0x2648 <odometry_move_to_position+0x120>
    262a:	8a ef       	ldi	r24, 0xFA	; 250
    262c:	90 e0       	ldi	r25, 0x00	; 0
    262e:	9c 87       	std	Y+12, r25	; 0x0c
    2630:	8b 87       	std	Y+11, r24	; 0x0b
    2632:	8b 85       	ldd	r24, Y+11	; 0x0b
    2634:	9c 85       	ldd	r25, Y+12	; 0x0c
    2636:	01 97       	sbiw	r24, 0x01	; 1
    2638:	f1 f7       	brne	.-4      	; 0x2636 <odometry_move_to_position+0x10e>
    263a:	9c 87       	std	Y+12, r25	; 0x0c
    263c:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    263e:	89 85       	ldd	r24, Y+9	; 0x09
    2640:	9a 85       	ldd	r25, Y+10	; 0x0a
    2642:	01 97       	sbiw	r24, 0x01	; 1
    2644:	9a 87       	std	Y+10, r25	; 0x0a
    2646:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2648:	89 85       	ldd	r24, Y+9	; 0x09
    264a:	9a 85       	ldd	r25, Y+10	; 0x0a
    264c:	89 2b       	or	r24, r25
    264e:	69 f7       	brne	.-38     	; 0x262a <odometry_move_to_position+0x102>
    2650:	14 c0       	rjmp	.+40     	; 0x267a <odometry_move_to_position+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2652:	6d 81       	ldd	r22, Y+5	; 0x05
    2654:	7e 81       	ldd	r23, Y+6	; 0x06
    2656:	8f 81       	ldd	r24, Y+7	; 0x07
    2658:	98 85       	ldd	r25, Y+8	; 0x08
    265a:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <__fixunssfsi>
    265e:	dc 01       	movw	r26, r24
    2660:	cb 01       	movw	r24, r22
    2662:	9a 87       	std	Y+10, r25	; 0x0a
    2664:	89 87       	std	Y+9, r24	; 0x09
    2666:	89 85       	ldd	r24, Y+9	; 0x09
    2668:	9a 85       	ldd	r25, Y+10	; 0x0a
    266a:	9e 87       	std	Y+14, r25	; 0x0e
    266c:	8d 87       	std	Y+13, r24	; 0x0d
    266e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2670:	9e 85       	ldd	r25, Y+14	; 0x0e
    2672:	01 97       	sbiw	r24, 0x01	; 1
    2674:	f1 f7       	brne	.-4      	; 0x2672 <odometry_move_to_position+0x14a>
    2676:	9e 87       	std	Y+14, r25	; 0x0e
    2678:	8d 87       	std	Y+13, r24	; 0x0d
    267a:	ce 01       	movw	r24, r28
    267c:	0f 96       	adiw	r24, 0x0f	; 15
    267e:	63 ec       	ldi	r22, 0xC3	; 195
    2680:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <CAN_Write>
    2684:	88 23       	and	r24, r24
    2686:	09 f0       	breq	.+2      	; 0x268a <odometry_move_to_position+0x162>
    2688:	86 cf       	rjmp	.-244    	; 0x2596 <odometry_move_to_position+0x6e>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    268a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    268c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    268e:	0e 94 1c 11 	call	0x2238	; 0x2238 <odometry_wait_until_done>
}
    2692:	6c 96       	adiw	r28, 0x1c	; 28
    2694:	0f b6       	in	r0, 0x3f	; 63
    2696:	f8 94       	cli
    2698:	de bf       	out	0x3e, r29	; 62
    269a:	0f be       	out	0x3f, r0	; 63
    269c:	cd bf       	out	0x3d, r28	; 61
    269e:	df 91       	pop	r29
    26a0:	cf 91       	pop	r28
    26a2:	08 95       	ret

000026a4 <odometry_set_position>:

void odometry_set_position(struct odometry_position* new_position)
{
    26a4:	cf 93       	push	r28
    26a6:	df 93       	push	r29
    26a8:	cd b7       	in	r28, 0x3d	; 61
    26aa:	de b7       	in	r29, 0x3e	; 62
    26ac:	68 97       	sbiw	r28, 0x18	; 24
    26ae:	0f b6       	in	r0, 0x3f	; 63
    26b0:	f8 94       	cli
    26b2:	de bf       	out	0x3e, r29	; 62
    26b4:	0f be       	out	0x3f, r0	; 63
    26b6:	cd bf       	out	0x3d, r28	; 61
    26b8:	98 8f       	std	Y+24, r25	; 0x18
    26ba:	8f 8b       	std	Y+23, r24	; 0x17
	uint8_t buffer[8];

	buffer[0] = 'I';
    26bc:	89 e4       	ldi	r24, 0x49	; 73
    26be:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = new_position->x >> 8;
    26c0:	8f 89       	ldd	r24, Y+23	; 0x17
    26c2:	98 8d       	ldd	r25, Y+24	; 0x18
    26c4:	fc 01       	movw	r30, r24
    26c6:	80 81       	ld	r24, Z
    26c8:	91 81       	ldd	r25, Z+1	; 0x01
    26ca:	89 2f       	mov	r24, r25
    26cc:	99 0f       	add	r25, r25
    26ce:	99 0b       	sbc	r25, r25
    26d0:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = new_position->x & 0xFF;
    26d2:	8f 89       	ldd	r24, Y+23	; 0x17
    26d4:	98 8d       	ldd	r25, Y+24	; 0x18
    26d6:	fc 01       	movw	r30, r24
    26d8:	80 81       	ld	r24, Z
    26da:	91 81       	ldd	r25, Z+1	; 0x01
    26dc:	89 8b       	std	Y+17, r24	; 0x11
	buffer[3] = new_position->y >> 8;
    26de:	8f 89       	ldd	r24, Y+23	; 0x17
    26e0:	98 8d       	ldd	r25, Y+24	; 0x18
    26e2:	fc 01       	movw	r30, r24
    26e4:	82 81       	ldd	r24, Z+2	; 0x02
    26e6:	93 81       	ldd	r25, Z+3	; 0x03
    26e8:	89 2f       	mov	r24, r25
    26ea:	99 0f       	add	r25, r25
    26ec:	99 0b       	sbc	r25, r25
    26ee:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[4] = new_position->y & 0xFF;
    26f0:	8f 89       	ldd	r24, Y+23	; 0x17
    26f2:	98 8d       	ldd	r25, Y+24	; 0x18
    26f4:	fc 01       	movw	r30, r24
    26f6:	82 81       	ldd	r24, Z+2	; 0x02
    26f8:	93 81       	ldd	r25, Z+3	; 0x03
    26fa:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[5] = new_position->angle << 8;
    26fc:	1c 8a       	std	Y+20, r1	; 0x14
	buffer[6] = new_position->angle & 0xFF;
    26fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2700:	98 8d       	ldd	r25, Y+24	; 0x18
    2702:	fc 01       	movw	r30, r24
    2704:	84 81       	ldd	r24, Z+4	; 0x04
    2706:	95 81       	ldd	r25, Z+5	; 0x05
    2708:	8d 8b       	std	Y+21, r24	; 0x15

	position.x	   = new_position->x;
    270a:	8f 89       	ldd	r24, Y+23	; 0x17
    270c:	98 8d       	ldd	r25, Y+24	; 0x18
    270e:	fc 01       	movw	r30, r24
    2710:	80 81       	ld	r24, Z
    2712:	91 81       	ldd	r25, Z+1	; 0x01
    2714:	90 93 0b 01 	sts	0x010B, r25
    2718:	80 93 0a 01 	sts	0x010A, r24
	position.y	   = new_position->y;
    271c:	8f 89       	ldd	r24, Y+23	; 0x17
    271e:	98 8d       	ldd	r25, Y+24	; 0x18
    2720:	fc 01       	movw	r30, r24
    2722:	82 81       	ldd	r24, Z+2	; 0x02
    2724:	93 81       	ldd	r25, Z+3	; 0x03
    2726:	90 93 0d 01 	sts	0x010D, r25
    272a:	80 93 0c 01 	sts	0x010C, r24
	position.angle = new_position->angle;
    272e:	8f 89       	ldd	r24, Y+23	; 0x17
    2730:	98 8d       	ldd	r25, Y+24	; 0x18
    2732:	fc 01       	movw	r30, r24
    2734:	84 81       	ldd	r24, Z+4	; 0x04
    2736:	95 81       	ldd	r25, Z+5	; 0x05
    2738:	90 93 0f 01 	sts	0x010F, r25
    273c:	80 93 0e 01 	sts	0x010E, r24

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    2740:	72 c0       	rjmp	.+228    	; 0x2826 <odometry_set_position+0x182>
    2742:	80 e0       	ldi	r24, 0x00	; 0
    2744:	90 e0       	ldi	r25, 0x00	; 0
    2746:	a8 e4       	ldi	r26, 0x48	; 72
    2748:	b2 e4       	ldi	r27, 0x42	; 66
    274a:	89 83       	std	Y+1, r24	; 0x01
    274c:	9a 83       	std	Y+2, r25	; 0x02
    274e:	ab 83       	std	Y+3, r26	; 0x03
    2750:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2752:	20 e0       	ldi	r18, 0x00	; 0
    2754:	30 e4       	ldi	r19, 0x40	; 64
    2756:	4c e1       	ldi	r20, 0x1C	; 28
    2758:	55 e4       	ldi	r21, 0x45	; 69
    275a:	69 81       	ldd	r22, Y+1	; 0x01
    275c:	7a 81       	ldd	r23, Y+2	; 0x02
    275e:	8b 81       	ldd	r24, Y+3	; 0x03
    2760:	9c 81       	ldd	r25, Y+4	; 0x04
    2762:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <__mulsf3>
    2766:	dc 01       	movw	r26, r24
    2768:	cb 01       	movw	r24, r22
    276a:	8d 83       	std	Y+5, r24	; 0x05
    276c:	9e 83       	std	Y+6, r25	; 0x06
    276e:	af 83       	std	Y+7, r26	; 0x07
    2770:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2772:	20 e0       	ldi	r18, 0x00	; 0
    2774:	30 e0       	ldi	r19, 0x00	; 0
    2776:	40 e8       	ldi	r20, 0x80	; 128
    2778:	5f e3       	ldi	r21, 0x3F	; 63
    277a:	6d 81       	ldd	r22, Y+5	; 0x05
    277c:	7e 81       	ldd	r23, Y+6	; 0x06
    277e:	8f 81       	ldd	r24, Y+7	; 0x07
    2780:	98 85       	ldd	r25, Y+8	; 0x08
    2782:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <__cmpsf2>
    2786:	88 23       	and	r24, r24
    2788:	2c f4       	brge	.+10     	; 0x2794 <odometry_set_position+0xf0>
		__ticks = 1;
    278a:	81 e0       	ldi	r24, 0x01	; 1
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	9a 87       	std	Y+10, r25	; 0x0a
    2790:	89 87       	std	Y+9, r24	; 0x09
    2792:	3f c0       	rjmp	.+126    	; 0x2812 <odometry_set_position+0x16e>
	else if (__tmp > 65535)
    2794:	20 e0       	ldi	r18, 0x00	; 0
    2796:	3f ef       	ldi	r19, 0xFF	; 255
    2798:	4f e7       	ldi	r20, 0x7F	; 127
    279a:	57 e4       	ldi	r21, 0x47	; 71
    279c:	6d 81       	ldd	r22, Y+5	; 0x05
    279e:	7e 81       	ldd	r23, Y+6	; 0x06
    27a0:	8f 81       	ldd	r24, Y+7	; 0x07
    27a2:	98 85       	ldd	r25, Y+8	; 0x08
    27a4:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <__gesf2>
    27a8:	18 16       	cp	r1, r24
    27aa:	4c f5       	brge	.+82     	; 0x27fe <odometry_set_position+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ac:	20 e0       	ldi	r18, 0x00	; 0
    27ae:	30 e0       	ldi	r19, 0x00	; 0
    27b0:	40 e2       	ldi	r20, 0x20	; 32
    27b2:	51 e4       	ldi	r21, 0x41	; 65
    27b4:	69 81       	ldd	r22, Y+1	; 0x01
    27b6:	7a 81       	ldd	r23, Y+2	; 0x02
    27b8:	8b 81       	ldd	r24, Y+3	; 0x03
    27ba:	9c 81       	ldd	r25, Y+4	; 0x04
    27bc:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <__mulsf3>
    27c0:	dc 01       	movw	r26, r24
    27c2:	cb 01       	movw	r24, r22
    27c4:	bc 01       	movw	r22, r24
    27c6:	cd 01       	movw	r24, r26
    27c8:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <__fixunssfsi>
    27cc:	dc 01       	movw	r26, r24
    27ce:	cb 01       	movw	r24, r22
    27d0:	9a 87       	std	Y+10, r25	; 0x0a
    27d2:	89 87       	std	Y+9, r24	; 0x09
    27d4:	0f c0       	rjmp	.+30     	; 0x27f4 <odometry_set_position+0x150>
    27d6:	8a ef       	ldi	r24, 0xFA	; 250
    27d8:	90 e0       	ldi	r25, 0x00	; 0
    27da:	9c 87       	std	Y+12, r25	; 0x0c
    27dc:	8b 87       	std	Y+11, r24	; 0x0b
    27de:	8b 85       	ldd	r24, Y+11	; 0x0b
    27e0:	9c 85       	ldd	r25, Y+12	; 0x0c
    27e2:	01 97       	sbiw	r24, 0x01	; 1
    27e4:	f1 f7       	brne	.-4      	; 0x27e2 <odometry_set_position+0x13e>
    27e6:	9c 87       	std	Y+12, r25	; 0x0c
    27e8:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ea:	89 85       	ldd	r24, Y+9	; 0x09
    27ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ee:	01 97       	sbiw	r24, 0x01	; 1
    27f0:	9a 87       	std	Y+10, r25	; 0x0a
    27f2:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27f4:	89 85       	ldd	r24, Y+9	; 0x09
    27f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27f8:	89 2b       	or	r24, r25
    27fa:	69 f7       	brne	.-38     	; 0x27d6 <odometry_set_position+0x132>
    27fc:	14 c0       	rjmp	.+40     	; 0x2826 <odometry_set_position+0x182>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27fe:	6d 81       	ldd	r22, Y+5	; 0x05
    2800:	7e 81       	ldd	r23, Y+6	; 0x06
    2802:	8f 81       	ldd	r24, Y+7	; 0x07
    2804:	98 85       	ldd	r25, Y+8	; 0x08
    2806:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <__fixunssfsi>
    280a:	dc 01       	movw	r26, r24
    280c:	cb 01       	movw	r24, r22
    280e:	9a 87       	std	Y+10, r25	; 0x0a
    2810:	89 87       	std	Y+9, r24	; 0x09
    2812:	89 85       	ldd	r24, Y+9	; 0x09
    2814:	9a 85       	ldd	r25, Y+10	; 0x0a
    2816:	9e 87       	std	Y+14, r25	; 0x0e
    2818:	8d 87       	std	Y+13, r24	; 0x0d
    281a:	8d 85       	ldd	r24, Y+13	; 0x0d
    281c:	9e 85       	ldd	r25, Y+14	; 0x0e
    281e:	01 97       	sbiw	r24, 0x01	; 1
    2820:	f1 f7       	brne	.-4      	; 0x281e <odometry_set_position+0x17a>
    2822:	9e 87       	std	Y+14, r25	; 0x0e
    2824:	8d 87       	std	Y+13, r24	; 0x0d
    2826:	ce 01       	movw	r24, r28
    2828:	0f 96       	adiw	r24, 0x0f	; 15
    282a:	63 ec       	ldi	r22, 0xC3	; 195
    282c:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <CAN_Write>
    2830:	88 23       	and	r24, r24
    2832:	09 f0       	breq	.+2      	; 0x2836 <odometry_set_position+0x192>
    2834:	86 cf       	rjmp	.-244    	; 0x2742 <odometry_set_position+0x9e>
		_delay_ms(50);
}
    2836:	68 96       	adiw	r28, 0x18	; 24
    2838:	0f b6       	in	r0, 0x3f	; 63
    283a:	f8 94       	cli
    283c:	de bf       	out	0x3e, r29	; 62
    283e:	0f be       	out	0x3f, r0	; 63
    2840:	cd bf       	out	0x3d, r28	; 61
    2842:	df 91       	pop	r29
    2844:	cf 91       	pop	r28
    2846:	08 95       	ret

00002848 <odometry_rotate_for>:

uint8_t odometry_rotate_for(uint16_t angle,uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    2848:	cf 93       	push	r28
    284a:	df 93       	push	r29
    284c:	cd b7       	in	r28, 0x3d	; 61
    284e:	de b7       	in	r29, 0x3e	; 62
    2850:	6b 97       	sbiw	r28, 0x1b	; 27
    2852:	0f b6       	in	r0, 0x3f	; 63
    2854:	f8 94       	cli
    2856:	de bf       	out	0x3e, r29	; 62
    2858:	0f be       	out	0x3f, r0	; 63
    285a:	cd bf       	out	0x3d, r28	; 61
    285c:	98 8f       	std	Y+24, r25	; 0x18
    285e:	8f 8b       	std	Y+23, r24	; 0x17
    2860:	69 8f       	std	Y+25, r22	; 0x19
    2862:	5b 8f       	std	Y+27, r21	; 0x1b
    2864:	4a 8f       	std	Y+26, r20	; 0x1a

	uint8_t buffer[8];
	odometry_set_speed(speed);
    2866:	89 8d       	ldd	r24, Y+25	; 0x19
    2868:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <odometry_set_speed>

	buffer[0] = 'T';
    286c:	84 e5       	ldi	r24, 0x54	; 84
    286e:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = angle >> 8;
    2870:	8f 89       	ldd	r24, Y+23	; 0x17
    2872:	98 8d       	ldd	r25, Y+24	; 0x18
    2874:	89 2f       	mov	r24, r25
    2876:	99 27       	eor	r25, r25
    2878:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = angle & 0xFF;
    287a:	8f 89       	ldd	r24, Y+23	; 0x17
    287c:	89 8b       	std	Y+17, r24	; 0x11

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    287e:	72 c0       	rjmp	.+228    	; 0x2964 <odometry_rotate_for+0x11c>
    2880:	80 e0       	ldi	r24, 0x00	; 0
    2882:	90 e0       	ldi	r25, 0x00	; 0
    2884:	a8 e4       	ldi	r26, 0x48	; 72
    2886:	b2 e4       	ldi	r27, 0x42	; 66
    2888:	89 83       	std	Y+1, r24	; 0x01
    288a:	9a 83       	std	Y+2, r25	; 0x02
    288c:	ab 83       	std	Y+3, r26	; 0x03
    288e:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2890:	20 e0       	ldi	r18, 0x00	; 0
    2892:	30 e4       	ldi	r19, 0x40	; 64
    2894:	4c e1       	ldi	r20, 0x1C	; 28
    2896:	55 e4       	ldi	r21, 0x45	; 69
    2898:	69 81       	ldd	r22, Y+1	; 0x01
    289a:	7a 81       	ldd	r23, Y+2	; 0x02
    289c:	8b 81       	ldd	r24, Y+3	; 0x03
    289e:	9c 81       	ldd	r25, Y+4	; 0x04
    28a0:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <__mulsf3>
    28a4:	dc 01       	movw	r26, r24
    28a6:	cb 01       	movw	r24, r22
    28a8:	8d 83       	std	Y+5, r24	; 0x05
    28aa:	9e 83       	std	Y+6, r25	; 0x06
    28ac:	af 83       	std	Y+7, r26	; 0x07
    28ae:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    28b0:	20 e0       	ldi	r18, 0x00	; 0
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	40 e8       	ldi	r20, 0x80	; 128
    28b6:	5f e3       	ldi	r21, 0x3F	; 63
    28b8:	6d 81       	ldd	r22, Y+5	; 0x05
    28ba:	7e 81       	ldd	r23, Y+6	; 0x06
    28bc:	8f 81       	ldd	r24, Y+7	; 0x07
    28be:	98 85       	ldd	r25, Y+8	; 0x08
    28c0:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <__cmpsf2>
    28c4:	88 23       	and	r24, r24
    28c6:	2c f4       	brge	.+10     	; 0x28d2 <odometry_rotate_for+0x8a>
		__ticks = 1;
    28c8:	81 e0       	ldi	r24, 0x01	; 1
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	9a 87       	std	Y+10, r25	; 0x0a
    28ce:	89 87       	std	Y+9, r24	; 0x09
    28d0:	3f c0       	rjmp	.+126    	; 0x2950 <odometry_rotate_for+0x108>
	else if (__tmp > 65535)
    28d2:	20 e0       	ldi	r18, 0x00	; 0
    28d4:	3f ef       	ldi	r19, 0xFF	; 255
    28d6:	4f e7       	ldi	r20, 0x7F	; 127
    28d8:	57 e4       	ldi	r21, 0x47	; 71
    28da:	6d 81       	ldd	r22, Y+5	; 0x05
    28dc:	7e 81       	ldd	r23, Y+6	; 0x06
    28de:	8f 81       	ldd	r24, Y+7	; 0x07
    28e0:	98 85       	ldd	r25, Y+8	; 0x08
    28e2:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <__gesf2>
    28e6:	18 16       	cp	r1, r24
    28e8:	4c f5       	brge	.+82     	; 0x293c <odometry_rotate_for+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ea:	20 e0       	ldi	r18, 0x00	; 0
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	40 e2       	ldi	r20, 0x20	; 32
    28f0:	51 e4       	ldi	r21, 0x41	; 65
    28f2:	69 81       	ldd	r22, Y+1	; 0x01
    28f4:	7a 81       	ldd	r23, Y+2	; 0x02
    28f6:	8b 81       	ldd	r24, Y+3	; 0x03
    28f8:	9c 81       	ldd	r25, Y+4	; 0x04
    28fa:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <__mulsf3>
    28fe:	dc 01       	movw	r26, r24
    2900:	cb 01       	movw	r24, r22
    2902:	bc 01       	movw	r22, r24
    2904:	cd 01       	movw	r24, r26
    2906:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <__fixunssfsi>
    290a:	dc 01       	movw	r26, r24
    290c:	cb 01       	movw	r24, r22
    290e:	9a 87       	std	Y+10, r25	; 0x0a
    2910:	89 87       	std	Y+9, r24	; 0x09
    2912:	0f c0       	rjmp	.+30     	; 0x2932 <odometry_rotate_for+0xea>
    2914:	8a ef       	ldi	r24, 0xFA	; 250
    2916:	90 e0       	ldi	r25, 0x00	; 0
    2918:	9c 87       	std	Y+12, r25	; 0x0c
    291a:	8b 87       	std	Y+11, r24	; 0x0b
    291c:	8b 85       	ldd	r24, Y+11	; 0x0b
    291e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2920:	01 97       	sbiw	r24, 0x01	; 1
    2922:	f1 f7       	brne	.-4      	; 0x2920 <odometry_rotate_for+0xd8>
    2924:	9c 87       	std	Y+12, r25	; 0x0c
    2926:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2928:	89 85       	ldd	r24, Y+9	; 0x09
    292a:	9a 85       	ldd	r25, Y+10	; 0x0a
    292c:	01 97       	sbiw	r24, 0x01	; 1
    292e:	9a 87       	std	Y+10, r25	; 0x0a
    2930:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2932:	89 85       	ldd	r24, Y+9	; 0x09
    2934:	9a 85       	ldd	r25, Y+10	; 0x0a
    2936:	89 2b       	or	r24, r25
    2938:	69 f7       	brne	.-38     	; 0x2914 <odometry_rotate_for+0xcc>
    293a:	14 c0       	rjmp	.+40     	; 0x2964 <odometry_rotate_for+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    293c:	6d 81       	ldd	r22, Y+5	; 0x05
    293e:	7e 81       	ldd	r23, Y+6	; 0x06
    2940:	8f 81       	ldd	r24, Y+7	; 0x07
    2942:	98 85       	ldd	r25, Y+8	; 0x08
    2944:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <__fixunssfsi>
    2948:	dc 01       	movw	r26, r24
    294a:	cb 01       	movw	r24, r22
    294c:	9a 87       	std	Y+10, r25	; 0x0a
    294e:	89 87       	std	Y+9, r24	; 0x09
    2950:	89 85       	ldd	r24, Y+9	; 0x09
    2952:	9a 85       	ldd	r25, Y+10	; 0x0a
    2954:	9e 87       	std	Y+14, r25	; 0x0e
    2956:	8d 87       	std	Y+13, r24	; 0x0d
    2958:	8d 85       	ldd	r24, Y+13	; 0x0d
    295a:	9e 85       	ldd	r25, Y+14	; 0x0e
    295c:	01 97       	sbiw	r24, 0x01	; 1
    295e:	f1 f7       	brne	.-4      	; 0x295c <odometry_rotate_for+0x114>
    2960:	9e 87       	std	Y+14, r25	; 0x0e
    2962:	8d 87       	std	Y+13, r24	; 0x0d
    2964:	ce 01       	movw	r24, r28
    2966:	0f 96       	adiw	r24, 0x0f	; 15
    2968:	63 ec       	ldi	r22, 0xC3	; 195
    296a:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <CAN_Write>
    296e:	88 23       	and	r24, r24
    2970:	09 f0       	breq	.+2      	; 0x2974 <odometry_rotate_for+0x12c>
    2972:	86 cf       	rjmp	.-244    	; 0x2880 <odometry_rotate_for+0x38>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    2974:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2976:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2978:	0e 94 1c 11 	call	0x2238	; 0x2238 <odometry_wait_until_done>

}
    297c:	6b 96       	adiw	r28, 0x1b	; 27
    297e:	0f b6       	in	r0, 0x3f	; 63
    2980:	f8 94       	cli
    2982:	de bf       	out	0x3e, r29	; 62
    2984:	0f be       	out	0x3f, r0	; 63
    2986:	cd bf       	out	0x3d, r28	; 61
    2988:	df 91       	pop	r29
    298a:	cf 91       	pop	r28
    298c:	08 95       	ret

0000298e <odometry_set_angle>:

uint8_t odometry_set_angle(uint16_t angle, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    298e:	cf 93       	push	r28
    2990:	df 93       	push	r29
    2992:	cd b7       	in	r28, 0x3d	; 61
    2994:	de b7       	in	r29, 0x3e	; 62
    2996:	6b 97       	sbiw	r28, 0x1b	; 27
    2998:	0f b6       	in	r0, 0x3f	; 63
    299a:	f8 94       	cli
    299c:	de bf       	out	0x3e, r29	; 62
    299e:	0f be       	out	0x3f, r0	; 63
    29a0:	cd bf       	out	0x3d, r28	; 61
    29a2:	98 8f       	std	Y+24, r25	; 0x18
    29a4:	8f 8b       	std	Y+23, r24	; 0x17
    29a6:	69 8f       	std	Y+25, r22	; 0x19
    29a8:	5b 8f       	std	Y+27, r21	; 0x1b
    29aa:	4a 8f       	std	Y+26, r20	; 0x1a
	uint8_t buffer[8];
	odometry_set_speed(speed);
    29ac:	89 8d       	ldd	r24, Y+25	; 0x19
    29ae:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <odometry_set_speed>

	buffer[0] = 'A';
    29b2:	81 e4       	ldi	r24, 0x41	; 65
    29b4:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = angle >> 8;
    29b6:	8f 89       	ldd	r24, Y+23	; 0x17
    29b8:	98 8d       	ldd	r25, Y+24	; 0x18
    29ba:	89 2f       	mov	r24, r25
    29bc:	99 27       	eor	r25, r25
    29be:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = angle & 0xFF;
    29c0:	8f 89       	ldd	r24, Y+23	; 0x17
    29c2:	89 8b       	std	Y+17, r24	; 0x11
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    29c4:	72 c0       	rjmp	.+228    	; 0x2aaa <odometry_set_angle+0x11c>
    29c6:	80 e0       	ldi	r24, 0x00	; 0
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	a8 e4       	ldi	r26, 0x48	; 72
    29cc:	b2 e4       	ldi	r27, 0x42	; 66
    29ce:	89 83       	std	Y+1, r24	; 0x01
    29d0:	9a 83       	std	Y+2, r25	; 0x02
    29d2:	ab 83       	std	Y+3, r26	; 0x03
    29d4:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    29d6:	20 e0       	ldi	r18, 0x00	; 0
    29d8:	30 e4       	ldi	r19, 0x40	; 64
    29da:	4c e1       	ldi	r20, 0x1C	; 28
    29dc:	55 e4       	ldi	r21, 0x45	; 69
    29de:	69 81       	ldd	r22, Y+1	; 0x01
    29e0:	7a 81       	ldd	r23, Y+2	; 0x02
    29e2:	8b 81       	ldd	r24, Y+3	; 0x03
    29e4:	9c 81       	ldd	r25, Y+4	; 0x04
    29e6:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <__mulsf3>
    29ea:	dc 01       	movw	r26, r24
    29ec:	cb 01       	movw	r24, r22
    29ee:	8d 83       	std	Y+5, r24	; 0x05
    29f0:	9e 83       	std	Y+6, r25	; 0x06
    29f2:	af 83       	std	Y+7, r26	; 0x07
    29f4:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    29f6:	20 e0       	ldi	r18, 0x00	; 0
    29f8:	30 e0       	ldi	r19, 0x00	; 0
    29fa:	40 e8       	ldi	r20, 0x80	; 128
    29fc:	5f e3       	ldi	r21, 0x3F	; 63
    29fe:	6d 81       	ldd	r22, Y+5	; 0x05
    2a00:	7e 81       	ldd	r23, Y+6	; 0x06
    2a02:	8f 81       	ldd	r24, Y+7	; 0x07
    2a04:	98 85       	ldd	r25, Y+8	; 0x08
    2a06:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <__cmpsf2>
    2a0a:	88 23       	and	r24, r24
    2a0c:	2c f4       	brge	.+10     	; 0x2a18 <odometry_set_angle+0x8a>
		__ticks = 1;
    2a0e:	81 e0       	ldi	r24, 0x01	; 1
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	9a 87       	std	Y+10, r25	; 0x0a
    2a14:	89 87       	std	Y+9, r24	; 0x09
    2a16:	3f c0       	rjmp	.+126    	; 0x2a96 <odometry_set_angle+0x108>
	else if (__tmp > 65535)
    2a18:	20 e0       	ldi	r18, 0x00	; 0
    2a1a:	3f ef       	ldi	r19, 0xFF	; 255
    2a1c:	4f e7       	ldi	r20, 0x7F	; 127
    2a1e:	57 e4       	ldi	r21, 0x47	; 71
    2a20:	6d 81       	ldd	r22, Y+5	; 0x05
    2a22:	7e 81       	ldd	r23, Y+6	; 0x06
    2a24:	8f 81       	ldd	r24, Y+7	; 0x07
    2a26:	98 85       	ldd	r25, Y+8	; 0x08
    2a28:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <__gesf2>
    2a2c:	18 16       	cp	r1, r24
    2a2e:	4c f5       	brge	.+82     	; 0x2a82 <odometry_set_angle+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a30:	20 e0       	ldi	r18, 0x00	; 0
    2a32:	30 e0       	ldi	r19, 0x00	; 0
    2a34:	40 e2       	ldi	r20, 0x20	; 32
    2a36:	51 e4       	ldi	r21, 0x41	; 65
    2a38:	69 81       	ldd	r22, Y+1	; 0x01
    2a3a:	7a 81       	ldd	r23, Y+2	; 0x02
    2a3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a3e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a40:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <__mulsf3>
    2a44:	dc 01       	movw	r26, r24
    2a46:	cb 01       	movw	r24, r22
    2a48:	bc 01       	movw	r22, r24
    2a4a:	cd 01       	movw	r24, r26
    2a4c:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <__fixunssfsi>
    2a50:	dc 01       	movw	r26, r24
    2a52:	cb 01       	movw	r24, r22
    2a54:	9a 87       	std	Y+10, r25	; 0x0a
    2a56:	89 87       	std	Y+9, r24	; 0x09
    2a58:	0f c0       	rjmp	.+30     	; 0x2a78 <odometry_set_angle+0xea>
    2a5a:	8a ef       	ldi	r24, 0xFA	; 250
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	9c 87       	std	Y+12, r25	; 0x0c
    2a60:	8b 87       	std	Y+11, r24	; 0x0b
    2a62:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a64:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a66:	01 97       	sbiw	r24, 0x01	; 1
    2a68:	f1 f7       	brne	.-4      	; 0x2a66 <odometry_set_angle+0xd8>
    2a6a:	9c 87       	std	Y+12, r25	; 0x0c
    2a6c:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a6e:	89 85       	ldd	r24, Y+9	; 0x09
    2a70:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a72:	01 97       	sbiw	r24, 0x01	; 1
    2a74:	9a 87       	std	Y+10, r25	; 0x0a
    2a76:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a78:	89 85       	ldd	r24, Y+9	; 0x09
    2a7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a7c:	89 2b       	or	r24, r25
    2a7e:	69 f7       	brne	.-38     	; 0x2a5a <odometry_set_angle+0xcc>
    2a80:	14 c0       	rjmp	.+40     	; 0x2aaa <odometry_set_angle+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a82:	6d 81       	ldd	r22, Y+5	; 0x05
    2a84:	7e 81       	ldd	r23, Y+6	; 0x06
    2a86:	8f 81       	ldd	r24, Y+7	; 0x07
    2a88:	98 85       	ldd	r25, Y+8	; 0x08
    2a8a:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <__fixunssfsi>
    2a8e:	dc 01       	movw	r26, r24
    2a90:	cb 01       	movw	r24, r22
    2a92:	9a 87       	std	Y+10, r25	; 0x0a
    2a94:	89 87       	std	Y+9, r24	; 0x09
    2a96:	89 85       	ldd	r24, Y+9	; 0x09
    2a98:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a9a:	9e 87       	std	Y+14, r25	; 0x0e
    2a9c:	8d 87       	std	Y+13, r24	; 0x0d
    2a9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aa0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aa2:	01 97       	sbiw	r24, 0x01	; 1
    2aa4:	f1 f7       	brne	.-4      	; 0x2aa2 <odometry_set_angle+0x114>
    2aa6:	9e 87       	std	Y+14, r25	; 0x0e
    2aa8:	8d 87       	std	Y+13, r24	; 0x0d
    2aaa:	ce 01       	movw	r24, r28
    2aac:	0f 96       	adiw	r24, 0x0f	; 15
    2aae:	63 ec       	ldi	r22, 0xC3	; 195
    2ab0:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <CAN_Write>
    2ab4:	88 23       	and	r24, r24
    2ab6:	09 f0       	breq	.+2      	; 0x2aba <odometry_set_angle+0x12c>
    2ab8:	86 cf       	rjmp	.-244    	; 0x29c6 <odometry_set_angle+0x38>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    2aba:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2abc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2abe:	0e 94 1c 11 	call	0x2238	; 0x2238 <odometry_wait_until_done>
}
    2ac2:	6b 96       	adiw	r28, 0x1b	; 27
    2ac4:	0f b6       	in	r0, 0x3f	; 63
    2ac6:	f8 94       	cli
    2ac8:	de bf       	out	0x3e, r29	; 62
    2aca:	0f be       	out	0x3f, r0	; 63
    2acc:	cd bf       	out	0x3d, r28	; 61
    2ace:	df 91       	pop	r29
    2ad0:	cf 91       	pop	r28
    2ad2:	08 95       	ret

00002ad4 <getState>:

uint8_t getState(void)
{
    2ad4:	cf 93       	push	r28
    2ad6:	df 93       	push	r29
    2ad8:	cd b7       	in	r28, 0x3d	; 61
    2ada:	de b7       	in	r29, 0x3e	; 62
	return position.state;
    2adc:	80 91 10 01 	lds	r24, 0x0110
}
    2ae0:	df 91       	pop	r29
    2ae2:	cf 91       	pop	r28
    2ae4:	08 95       	ret

00002ae6 <odometry_get_x>:

int16_t odometry_get_x(void)
{
    2ae6:	cf 93       	push	r28
    2ae8:	df 93       	push	r29
    2aea:	cd b7       	in	r28, 0x3d	; 61
    2aec:	de b7       	in	r29, 0x3e	; 62
	return position.x;
    2aee:	80 91 0a 01 	lds	r24, 0x010A
    2af2:	90 91 0b 01 	lds	r25, 0x010B
}
    2af6:	df 91       	pop	r29
    2af8:	cf 91       	pop	r28
    2afa:	08 95       	ret

00002afc <odometry_get_y>:

int16_t odometry_get_y(void)
{
    2afc:	cf 93       	push	r28
    2afe:	df 93       	push	r29
    2b00:	cd b7       	in	r28, 0x3d	; 61
    2b02:	de b7       	in	r29, 0x3e	; 62
	return position.y;
    2b04:	80 91 0c 01 	lds	r24, 0x010C
    2b08:	90 91 0d 01 	lds	r25, 0x010D
}
    2b0c:	df 91       	pop	r29
    2b0e:	cf 91       	pop	r28
    2b10:	08 95       	ret

00002b12 <odometry_get_angle>:

int16_t odometry_get_angle(void)
{
    2b12:	cf 93       	push	r28
    2b14:	df 93       	push	r29
    2b16:	cd b7       	in	r28, 0x3d	; 61
    2b18:	de b7       	in	r29, 0x3e	; 62
	return position.angle;
    2b1a:	80 91 0e 01 	lds	r24, 0x010E
    2b1e:	90 91 0f 01 	lds	r25, 0x010F
}
    2b22:	df 91       	pop	r29
    2b24:	cf 91       	pop	r28
    2b26:	08 95       	ret

00002b28 <timer_register_callback>:
 *	Function: 		void timer_register_callback(void (*callback)(void))
 *	Parameters: 	void (*callback)(void))
 *	Description: 	timer callbacks
 */
void timer_register_callback(void (*callback)(void))
{
    2b28:	cf 93       	push	r28
    2b2a:	df 93       	push	r29
    2b2c:	00 d0       	rcall	.+0      	; 0x2b2e <timer_register_callback+0x6>
    2b2e:	cd b7       	in	r28, 0x3d	; 61
    2b30:	de b7       	in	r29, 0x3e	; 62
    2b32:	9a 83       	std	Y+2, r25	; 0x02
    2b34:	89 83       	std	Y+1, r24	; 0x01
    timer_callback = callback;
    2b36:	89 81       	ldd	r24, Y+1	; 0x01
    2b38:	9a 81       	ldd	r25, Y+2	; 0x02
    2b3a:	90 93 87 01 	sts	0x0187, r25
    2b3e:	80 93 86 01 	sts	0x0186, r24
}
    2b42:	0f 90       	pop	r0
    2b44:	0f 90       	pop	r0
    2b46:	df 91       	pop	r29
    2b48:	cf 91       	pop	r28
    2b4a:	08 95       	ret

00002b4c <timer_init>:
 *	Function: 		void timer_init(unsigned int freq)
 *	Parameters: 	unsigned int freq - frequency of timer
 *	Description: 	setup timer
 */
void timer_init(unsigned int freq)
{
    2b4c:	0f 93       	push	r16
    2b4e:	1f 93       	push	r17
    2b50:	cf 93       	push	r28
    2b52:	df 93       	push	r29
    2b54:	00 d0       	rcall	.+0      	; 0x2b56 <timer_init+0xa>
    2b56:	cd b7       	in	r28, 0x3d	; 61
    2b58:	de b7       	in	r29, 0x3e	; 62
    2b5a:	9a 83       	std	Y+2, r25	; 0x02
    2b5c:	89 83       	std	Y+1, r24	; 0x01
    TCCR1A = 0;
    2b5e:	80 e8       	ldi	r24, 0x80	; 128
    2b60:	90 e0       	ldi	r25, 0x00	; 0
    2b62:	fc 01       	movw	r30, r24
    2b64:	10 82       	st	Z, r1
	TCCR1B = (1 << WGM12) | (1 << CS10);
    2b66:	81 e8       	ldi	r24, 0x81	; 129
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	29 e0       	ldi	r18, 0x09	; 9
    2b6c:	fc 01       	movw	r30, r24
    2b6e:	20 83       	st	Z, r18
	OCR1A = (double)F_CPU / (double)freq + 0.5;
    2b70:	08 e8       	ldi	r16, 0x88	; 136
    2b72:	10 e0       	ldi	r17, 0x00	; 0
    2b74:	89 81       	ldd	r24, Y+1	; 0x01
    2b76:	9a 81       	ldd	r25, Y+2	; 0x02
    2b78:	cc 01       	movw	r24, r24
    2b7a:	a0 e0       	ldi	r26, 0x00	; 0
    2b7c:	b0 e0       	ldi	r27, 0x00	; 0
    2b7e:	bc 01       	movw	r22, r24
    2b80:	cd 01       	movw	r24, r26
    2b82:	0e 94 05 1e 	call	0x3c0a	; 0x3c0a <__floatunsisf>
    2b86:	dc 01       	movw	r26, r24
    2b88:	cb 01       	movw	r24, r22
    2b8a:	9c 01       	movw	r18, r24
    2b8c:	ad 01       	movw	r20, r26
    2b8e:	60 e8       	ldi	r22, 0x80	; 128
    2b90:	76 e9       	ldi	r23, 0x96	; 150
    2b92:	88 e1       	ldi	r24, 0x18	; 24
    2b94:	9b e4       	ldi	r25, 0x4B	; 75
    2b96:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <__divsf3>
    2b9a:	dc 01       	movw	r26, r24
    2b9c:	cb 01       	movw	r24, r22
    2b9e:	20 e0       	ldi	r18, 0x00	; 0
    2ba0:	30 e0       	ldi	r19, 0x00	; 0
    2ba2:	40 e0       	ldi	r20, 0x00	; 0
    2ba4:	5f e3       	ldi	r21, 0x3F	; 63
    2ba6:	bc 01       	movw	r22, r24
    2ba8:	cd 01       	movw	r24, r26
    2baa:	0e 94 ec 1c 	call	0x39d8	; 0x39d8 <__addsf3>
    2bae:	dc 01       	movw	r26, r24
    2bb0:	cb 01       	movw	r24, r22
    2bb2:	bc 01       	movw	r22, r24
    2bb4:	cd 01       	movw	r24, r26
    2bb6:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <__fixunssfsi>
    2bba:	dc 01       	movw	r26, r24
    2bbc:	cb 01       	movw	r24, r22
    2bbe:	f8 01       	movw	r30, r16
    2bc0:	91 83       	std	Z+1, r25	; 0x01
    2bc2:	80 83       	st	Z, r24
	TIMSK1 = 1 << OCIE1A;
    2bc4:	8f e6       	ldi	r24, 0x6F	; 111
    2bc6:	90 e0       	ldi	r25, 0x00	; 0
    2bc8:	22 e0       	ldi	r18, 0x02	; 2
    2bca:	fc 01       	movw	r30, r24
    2bcc:	20 83       	st	Z, r18

	SREG |= 0x80;
    2bce:	8f e5       	ldi	r24, 0x5F	; 95
    2bd0:	90 e0       	ldi	r25, 0x00	; 0
    2bd2:	2f e5       	ldi	r18, 0x5F	; 95
    2bd4:	30 e0       	ldi	r19, 0x00	; 0
    2bd6:	f9 01       	movw	r30, r18
    2bd8:	20 81       	ld	r18, Z
    2bda:	20 68       	ori	r18, 0x80	; 128
    2bdc:	fc 01       	movw	r30, r24
    2bde:	20 83       	st	Z, r18
}
    2be0:	0f 90       	pop	r0
    2be2:	0f 90       	pop	r0
    2be4:	df 91       	pop	r29
    2be6:	cf 91       	pop	r28
    2be8:	1f 91       	pop	r17
    2bea:	0f 91       	pop	r16
    2bec:	08 95       	ret

00002bee <__vector_12>:
/*
 *	Function: 		ISR(TIMER1_COMPA_vect)
 *	Description: 	ISR interrupt for timer
 */
ISR(TIMER1_COMPA_vect)
{
    2bee:	1f 92       	push	r1
    2bf0:	0f 92       	push	r0
    2bf2:	00 90 5f 00 	lds	r0, 0x005F
    2bf6:	0f 92       	push	r0
    2bf8:	11 24       	eor	r1, r1
    2bfa:	00 90 5b 00 	lds	r0, 0x005B
    2bfe:	0f 92       	push	r0
    2c00:	2f 93       	push	r18
    2c02:	3f 93       	push	r19
    2c04:	4f 93       	push	r20
    2c06:	5f 93       	push	r21
    2c08:	6f 93       	push	r22
    2c0a:	7f 93       	push	r23
    2c0c:	8f 93       	push	r24
    2c0e:	9f 93       	push	r25
    2c10:	af 93       	push	r26
    2c12:	bf 93       	push	r27
    2c14:	ef 93       	push	r30
    2c16:	ff 93       	push	r31
    2c18:	cf 93       	push	r28
    2c1a:	df 93       	push	r29
    2c1c:	cd b7       	in	r28, 0x3d	; 61
    2c1e:	de b7       	in	r29, 0x3e	; 62
    if(timer_callback != NULL)
    2c20:	80 91 86 01 	lds	r24, 0x0186
    2c24:	90 91 87 01 	lds	r25, 0x0187
    2c28:	89 2b       	or	r24, r25
    2c2a:	31 f0       	breq	.+12     	; 0x2c38 <__vector_12+0x4a>
        timer_callback();
    2c2c:	80 91 86 01 	lds	r24, 0x0186
    2c30:	90 91 87 01 	lds	r25, 0x0187
    2c34:	fc 01       	movw	r30, r24
    2c36:	09 95       	icall
	if(sys_time >= 90000)					// if match end
    2c38:	80 91 81 01 	lds	r24, 0x0181
    2c3c:	90 91 82 01 	lds	r25, 0x0182
    2c40:	a0 91 83 01 	lds	r26, 0x0183
    2c44:	b0 91 84 01 	lds	r27, 0x0184
    2c48:	80 39       	cpi	r24, 0x90	; 144
    2c4a:	9f 45       	sbci	r25, 0x5F	; 95
    2c4c:	a1 40       	sbci	r26, 0x01	; 1
    2c4e:	b1 05       	cpc	r27, r1
    2c50:	40 f0       	brcs	.+16     	; 0x2c62 <__vector_12+0x74>
	{
		if(system_get_match_started())		// if the match has started before
    2c52:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <system_get_match_started>
    2c56:	88 23       	and	r24, r24
    2c58:	21 f0       	breq	.+8      	; 0x2c62 <__vector_12+0x74>
		{
			odometry_stop(HARD_STOP);
    2c5a:	83 e5       	ldi	r24, 0x53	; 83
    2c5c:	0e 94 53 11 	call	0x22a6	; 0x22a6 <odometry_stop>
			while(1);
    2c60:	ff cf       	rjmp	.-2      	; 0x2c60 <__vector_12+0x72>
		}
	}
	sys_time++;
    2c62:	80 91 81 01 	lds	r24, 0x0181
    2c66:	90 91 82 01 	lds	r25, 0x0182
    2c6a:	a0 91 83 01 	lds	r26, 0x0183
    2c6e:	b0 91 84 01 	lds	r27, 0x0184
    2c72:	01 96       	adiw	r24, 0x01	; 1
    2c74:	a1 1d       	adc	r26, r1
    2c76:	b1 1d       	adc	r27, r1
    2c78:	80 93 81 01 	sts	0x0181, r24
    2c7c:	90 93 82 01 	sts	0x0182, r25
    2c80:	a0 93 83 01 	sts	0x0183, r26
    2c84:	b0 93 84 01 	sts	0x0184, r27
}
    2c88:	df 91       	pop	r29
    2c8a:	cf 91       	pop	r28
    2c8c:	ff 91       	pop	r31
    2c8e:	ef 91       	pop	r30
    2c90:	bf 91       	pop	r27
    2c92:	af 91       	pop	r26
    2c94:	9f 91       	pop	r25
    2c96:	8f 91       	pop	r24
    2c98:	7f 91       	pop	r23
    2c9a:	6f 91       	pop	r22
    2c9c:	5f 91       	pop	r21
    2c9e:	4f 91       	pop	r20
    2ca0:	3f 91       	pop	r19
    2ca2:	2f 91       	pop	r18
    2ca4:	0f 90       	pop	r0
    2ca6:	00 92 5b 00 	sts	0x005B, r0
    2caa:	0f 90       	pop	r0
    2cac:	00 92 5f 00 	sts	0x005F, r0
    2cb0:	0f 90       	pop	r0
    2cb2:	1f 90       	pop	r1
    2cb4:	18 95       	reti

00002cb6 <sides_switch_check>:
 *	Function: 		signed char sides_switch_check(void)
 *	Parameters: 	void
 *	Description: 	checking side switch
 */
signed char sides_switch_check(void)
{
    2cb6:	cf 93       	push	r28
    2cb8:	df 93       	push	r29
    2cba:	cd b7       	in	r28, 0x3d	; 61
    2cbc:	de b7       	in	r29, 0x3e	; 62
	if(gpio_read_pin(SIDE_PIN) == 1)
    2cbe:	89 e2       	ldi	r24, 0x29	; 41
    2cc0:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <gpio_read_pin>
    2cc4:	81 30       	cpi	r24, 0x01	; 1
    2cc6:	11 f4       	brne	.+4      	; 0x2ccc <sides_switch_check+0x16>
	{
		return 1;
    2cc8:	81 e0       	ldi	r24, 0x01	; 1
    2cca:	01 c0       	rjmp	.+2      	; 0x2cce <sides_switch_check+0x18>
	}
	return 0;
    2ccc:	80 e0       	ldi	r24, 0x00	; 0
}
    2cce:	df 91       	pop	r29
    2cd0:	cf 91       	pop	r28
    2cd2:	08 95       	ret

00002cd4 <tactic_switch_check>:
 *	Function: 		signed char tactic_switch_check(void)
 *	Parameters: 	void
 *	Description:	reading tactic switch
 */
signed char tactic_switch_check(void)
{
    2cd4:	cf 93       	push	r28
    2cd6:	df 93       	push	r29
    2cd8:	cd b7       	in	r28, 0x3d	; 61
    2cda:	de b7       	in	r29, 0x3e	; 62
	if(gpio_read_pin(TACTIC_PIN) == 1)
    2cdc:	8a e2       	ldi	r24, 0x2A	; 42
    2cde:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <gpio_read_pin>
    2ce2:	81 30       	cpi	r24, 0x01	; 1
    2ce4:	11 f4       	brne	.+4      	; 0x2cea <tactic_switch_check+0x16>
	{
		return 1;
    2ce6:	81 e0       	ldi	r24, 0x01	; 1
    2ce8:	01 c0       	rjmp	.+2      	; 0x2cec <tactic_switch_check+0x18>
	}
	return 0;
    2cea:	80 e0       	ldi	r24, 0x00	; 0
}
    2cec:	df 91       	pop	r29
    2cee:	cf 91       	pop	r28
    2cf0:	08 95       	ret

00002cf2 <system_reset_system_time>:
 *	Function: 		void system_reset_system_time(void)
 *	Parameters: 	void
 *	Description:	reset system time
 */
void system_reset_system_time(void)
{
    2cf2:	cf 93       	push	r28
    2cf4:	df 93       	push	r29
    2cf6:	cd b7       	in	r28, 0x3d	; 61
    2cf8:	de b7       	in	r29, 0x3e	; 62
	sys_time = 0;
    2cfa:	10 92 81 01 	sts	0x0181, r1
    2cfe:	10 92 82 01 	sts	0x0182, r1
    2d02:	10 92 83 01 	sts	0x0183, r1
    2d06:	10 92 84 01 	sts	0x0184, r1
}
    2d0a:	df 91       	pop	r29
    2d0c:	cf 91       	pop	r28
    2d0e:	08 95       	ret

00002d10 <system_set_match_started>:
 *	Function: 		void system_set_match_started(void)
 *	Parameters: 	void
 *	Description:	let the match begiiiiiiiiiin
 */
void system_set_match_started(void)
{
    2d10:	cf 93       	push	r28
    2d12:	df 93       	push	r29
    2d14:	cd b7       	in	r28, 0x3d	; 61
    2d16:	de b7       	in	r29, 0x3e	; 62
	match_started = 1;
    2d18:	81 e0       	ldi	r24, 0x01	; 1
    2d1a:	80 93 85 01 	sts	0x0185, r24
}
    2d1e:	df 91       	pop	r29
    2d20:	cf 91       	pop	r28
    2d22:	08 95       	ret

00002d24 <system_get_system_time>:
 *	Function: 		uint32_t system_get_system_time(void)
 *	Parameters: 	void
 *	Description:	returns current system time
 */
uint32_t system_get_system_time(void)
{
    2d24:	cf 93       	push	r28
    2d26:	df 93       	push	r29
    2d28:	cd b7       	in	r28, 0x3d	; 61
    2d2a:	de b7       	in	r29, 0x3e	; 62
	return sys_time;
    2d2c:	80 91 81 01 	lds	r24, 0x0181
    2d30:	90 91 82 01 	lds	r25, 0x0182
    2d34:	a0 91 83 01 	lds	r26, 0x0183
    2d38:	b0 91 84 01 	lds	r27, 0x0184
}
    2d3c:	bc 01       	movw	r22, r24
    2d3e:	cd 01       	movw	r24, r26
    2d40:	df 91       	pop	r29
    2d42:	cf 91       	pop	r28
    2d44:	08 95       	ret

00002d46 <system_get_match_started>:
 *	Function: 		uint8_t system_get_match_started(void)
 *	Parameters: 	void
 *	Description:	return if match has started
 */
uint8_t system_get_match_started(void)
{
    2d46:	cf 93       	push	r28
    2d48:	df 93       	push	r29
    2d4a:	cd b7       	in	r28, 0x3d	; 61
    2d4c:	de b7       	in	r29, 0x3e	; 62
	return match_started;
    2d4e:	80 91 85 01 	lds	r24, 0x0185
}
    2d52:	df 91       	pop	r29
    2d54:	cf 91       	pop	r28
    2d56:	08 95       	ret

00002d58 <return_active_state>:
 *	Function: 		uint8_t return_active_state(void)
 *	Parameters: 	void
 *	Description:	return active state
 */
uint8_t return_active_state(void)
{
    2d58:	cf 93       	push	r28
    2d5a:	df 93       	push	r29
    2d5c:	cd b7       	in	r28, 0x3d	; 61
    2d5e:	de b7       	in	r29, 0x3e	; 62
	return active_state;
    2d60:	80 91 97 02 	lds	r24, 0x0297
    2d64:	90 91 98 02 	lds	r25, 0x0298
}
    2d68:	df 91       	pop	r29
    2d6a:	cf 91       	pop	r28
    2d6c:	08 95       	ret

00002d6e <leds>:

void leds(unsigned char state)
{
    2d6e:	cf 93       	push	r28
    2d70:	df 93       	push	r29
    2d72:	1f 92       	push	r1
    2d74:	cd b7       	in	r28, 0x3d	; 61
    2d76:	de b7       	in	r29, 0x3e	; 62
    2d78:	89 83       	std	Y+1, r24	; 0x01
	if(state){PORTG = 0xff;}else{PORTG = 0x00;}
    2d7a:	89 81       	ldd	r24, Y+1	; 0x01
    2d7c:	88 23       	and	r24, r24
    2d7e:	31 f0       	breq	.+12     	; 0x2d8c <leds+0x1e>
    2d80:	84 e3       	ldi	r24, 0x34	; 52
    2d82:	90 e0       	ldi	r25, 0x00	; 0
    2d84:	2f ef       	ldi	r18, 0xFF	; 255
    2d86:	fc 01       	movw	r30, r24
    2d88:	20 83       	st	Z, r18
    2d8a:	04 c0       	rjmp	.+8      	; 0x2d94 <leds+0x26>
    2d8c:	84 e3       	ldi	r24, 0x34	; 52
    2d8e:	90 e0       	ldi	r25, 0x00	; 0
    2d90:	fc 01       	movw	r30, r24
    2d92:	10 82       	st	Z, r1
}
    2d94:	0f 90       	pop	r0
    2d96:	df 91       	pop	r29
    2d98:	cf 91       	pop	r28
    2d9a:	08 95       	ret

00002d9c <system_init>:
 *	Function: 		void system_init(void)
 *	Parameters: 	void
 *	Description:	initing all the things
 */
void system_init(void)
{	
    2d9c:	cf 93       	push	r28
    2d9e:	df 93       	push	r29
    2da0:	cd b7       	in	r28, 0x3d	; 61
    2da2:	de b7       	in	r29, 0x3e	; 62
    2da4:	6c 97       	sbiw	r28, 0x1c	; 28
    2da6:	0f b6       	in	r0, 0x3f	; 63
    2da8:	f8 94       	cli
    2daa:	de bf       	out	0x3e, r29	; 62
    2dac:	0f be       	out	0x3f, r0	; 63
    2dae:	cd bf       	out	0x3d, r28	; 61

	// sets debouncer
	timer_register_callback(gpio_debouncer);
    2db0:	8b e6       	ldi	r24, 0x6B	; 107
    2db2:	9f e0       	ldi	r25, 0x0F	; 15
    2db4:	0e 94 94 15 	call	0x2b28	; 0x2b28 <timer_register_callback>
    2db8:	80 e0       	ldi	r24, 0x00	; 0
    2dba:	90 e0       	ldi	r25, 0x00	; 0
    2dbc:	a8 ec       	ldi	r26, 0xC8	; 200
    2dbe:	b2 e4       	ldi	r27, 0x42	; 66
    2dc0:	89 83       	std	Y+1, r24	; 0x01
    2dc2:	9a 83       	std	Y+2, r25	; 0x02
    2dc4:	ab 83       	std	Y+3, r26	; 0x03
    2dc6:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2dc8:	20 e0       	ldi	r18, 0x00	; 0
    2dca:	30 e4       	ldi	r19, 0x40	; 64
    2dcc:	4c e1       	ldi	r20, 0x1C	; 28
    2dce:	55 e4       	ldi	r21, 0x45	; 69
    2dd0:	69 81       	ldd	r22, Y+1	; 0x01
    2dd2:	7a 81       	ldd	r23, Y+2	; 0x02
    2dd4:	8b 81       	ldd	r24, Y+3	; 0x03
    2dd6:	9c 81       	ldd	r25, Y+4	; 0x04
    2dd8:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <__mulsf3>
    2ddc:	dc 01       	movw	r26, r24
    2dde:	cb 01       	movw	r24, r22
    2de0:	8d 83       	std	Y+5, r24	; 0x05
    2de2:	9e 83       	std	Y+6, r25	; 0x06
    2de4:	af 83       	std	Y+7, r26	; 0x07
    2de6:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2de8:	20 e0       	ldi	r18, 0x00	; 0
    2dea:	30 e0       	ldi	r19, 0x00	; 0
    2dec:	40 e8       	ldi	r20, 0x80	; 128
    2dee:	5f e3       	ldi	r21, 0x3F	; 63
    2df0:	6d 81       	ldd	r22, Y+5	; 0x05
    2df2:	7e 81       	ldd	r23, Y+6	; 0x06
    2df4:	8f 81       	ldd	r24, Y+7	; 0x07
    2df6:	98 85       	ldd	r25, Y+8	; 0x08
    2df8:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <__cmpsf2>
    2dfc:	88 23       	and	r24, r24
    2dfe:	2c f4       	brge	.+10     	; 0x2e0a <system_init+0x6e>
		__ticks = 1;
    2e00:	81 e0       	ldi	r24, 0x01	; 1
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	9a 87       	std	Y+10, r25	; 0x0a
    2e06:	89 87       	std	Y+9, r24	; 0x09
    2e08:	3f c0       	rjmp	.+126    	; 0x2e88 <system_init+0xec>
	else if (__tmp > 65535)
    2e0a:	20 e0       	ldi	r18, 0x00	; 0
    2e0c:	3f ef       	ldi	r19, 0xFF	; 255
    2e0e:	4f e7       	ldi	r20, 0x7F	; 127
    2e10:	57 e4       	ldi	r21, 0x47	; 71
    2e12:	6d 81       	ldd	r22, Y+5	; 0x05
    2e14:	7e 81       	ldd	r23, Y+6	; 0x06
    2e16:	8f 81       	ldd	r24, Y+7	; 0x07
    2e18:	98 85       	ldd	r25, Y+8	; 0x08
    2e1a:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <__gesf2>
    2e1e:	18 16       	cp	r1, r24
    2e20:	4c f5       	brge	.+82     	; 0x2e74 <system_init+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e22:	20 e0       	ldi	r18, 0x00	; 0
    2e24:	30 e0       	ldi	r19, 0x00	; 0
    2e26:	40 e2       	ldi	r20, 0x20	; 32
    2e28:	51 e4       	ldi	r21, 0x41	; 65
    2e2a:	69 81       	ldd	r22, Y+1	; 0x01
    2e2c:	7a 81       	ldd	r23, Y+2	; 0x02
    2e2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e30:	9c 81       	ldd	r25, Y+4	; 0x04
    2e32:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <__mulsf3>
    2e36:	dc 01       	movw	r26, r24
    2e38:	cb 01       	movw	r24, r22
    2e3a:	bc 01       	movw	r22, r24
    2e3c:	cd 01       	movw	r24, r26
    2e3e:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <__fixunssfsi>
    2e42:	dc 01       	movw	r26, r24
    2e44:	cb 01       	movw	r24, r22
    2e46:	9a 87       	std	Y+10, r25	; 0x0a
    2e48:	89 87       	std	Y+9, r24	; 0x09
    2e4a:	0f c0       	rjmp	.+30     	; 0x2e6a <system_init+0xce>
    2e4c:	8a ef       	ldi	r24, 0xFA	; 250
    2e4e:	90 e0       	ldi	r25, 0x00	; 0
    2e50:	9c 87       	std	Y+12, r25	; 0x0c
    2e52:	8b 87       	std	Y+11, r24	; 0x0b
    2e54:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e56:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e58:	01 97       	sbiw	r24, 0x01	; 1
    2e5a:	f1 f7       	brne	.-4      	; 0x2e58 <system_init+0xbc>
    2e5c:	9c 87       	std	Y+12, r25	; 0x0c
    2e5e:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e60:	89 85       	ldd	r24, Y+9	; 0x09
    2e62:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e64:	01 97       	sbiw	r24, 0x01	; 1
    2e66:	9a 87       	std	Y+10, r25	; 0x0a
    2e68:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e6a:	89 85       	ldd	r24, Y+9	; 0x09
    2e6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e6e:	89 2b       	or	r24, r25
    2e70:	69 f7       	brne	.-38     	; 0x2e4c <system_init+0xb0>
    2e72:	14 c0       	rjmp	.+40     	; 0x2e9c <system_init+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e74:	6d 81       	ldd	r22, Y+5	; 0x05
    2e76:	7e 81       	ldd	r23, Y+6	; 0x06
    2e78:	8f 81       	ldd	r24, Y+7	; 0x07
    2e7a:	98 85       	ldd	r25, Y+8	; 0x08
    2e7c:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <__fixunssfsi>
    2e80:	dc 01       	movw	r26, r24
    2e82:	cb 01       	movw	r24, r22
    2e84:	9a 87       	std	Y+10, r25	; 0x0a
    2e86:	89 87       	std	Y+9, r24	; 0x09
    2e88:	89 85       	ldd	r24, Y+9	; 0x09
    2e8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e8c:	9e 87       	std	Y+14, r25	; 0x0e
    2e8e:	8d 87       	std	Y+13, r24	; 0x0d
    2e90:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e92:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e94:	01 97       	sbiw	r24, 0x01	; 1
    2e96:	f1 f7       	brne	.-4      	; 0x2e94 <system_init+0xf8>
    2e98:	9e 87       	std	Y+14, r25	; 0x0e
    2e9a:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(100);
	
	/*
	 *	gpio setups
	 */
	gpio_register_pin(JUMPER_PIN,GPIO_DIRECTION_INPUT,TRUE);							//jumper
    2e9c:	40 e0       	ldi	r20, 0x00	; 0
    2e9e:	60 e0       	ldi	r22, 0x00	; 0
    2ea0:	88 e2       	ldi	r24, 0x28	; 40
    2ea2:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <gpio_register_pin>
	gpio_register_pin(SIDE_PIN,GPIO_DIRECTION_INPUT,TRUE);								//prekidac za stranu
    2ea6:	40 e0       	ldi	r20, 0x00	; 0
    2ea8:	60 e0       	ldi	r22, 0x00	; 0
    2eaa:	89 e2       	ldi	r24, 0x29	; 41
    2eac:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <gpio_register_pin>
	gpio_register_pin(TACTIC_PIN,GPIO_DIRECTION_INPUT,TRUE);							//prekidac za stranu
    2eb0:	40 e0       	ldi	r20, 0x00	; 0
    2eb2:	60 e0       	ldi	r22, 0x00	; 0
    2eb4:	8a e2       	ldi	r24, 0x2A	; 42
    2eb6:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <gpio_register_pin>

	//test for true or nah
	gpio_register_pin(RELAY_1_PIN,GPIO_DIRECTION_OUTPUT,TRUE);
    2eba:	40 e0       	ldi	r20, 0x00	; 0
    2ebc:	61 e0       	ldi	r22, 0x01	; 1
    2ebe:	83 e0       	ldi	r24, 0x03	; 3
    2ec0:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <gpio_register_pin>
	gpio_register_pin(RELAY_2_PIN,GPIO_DIRECTION_OUTPUT,TRUE);
    2ec4:	40 e0       	ldi	r20, 0x00	; 0
    2ec6:	61 e0       	ldi	r22, 0x01	; 1
    2ec8:	82 e0       	ldi	r24, 0x02	; 2
    2eca:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <gpio_register_pin>
	gpio_register_pin(RELAY_3_PIN,GPIO_DIRECTION_OUTPUT,TRUE);
    2ece:	40 e0       	ldi	r20, 0x00	; 0
    2ed0:	61 e0       	ldi	r22, 0x01	; 1
    2ed2:	81 e0       	ldi	r24, 0x01	; 1
    2ed4:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <gpio_register_pin>
	gpio_register_pin(RELAY_4_PIN,GPIO_DIRECTION_OUTPUT,TRUE);
    2ed8:	40 e0       	ldi	r20, 0x00	; 0
    2eda:	61 e0       	ldi	r22, 0x01	; 1
    2edc:	80 e0       	ldi	r24, 0x00	; 0
    2ede:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <gpio_register_pin>
	gpio_register_pin(SENSOR_B_L_PIN,GPIO_DIRECTION_INPUT,TRUE);						//sensor back left
	gpio_register_pin(SENSOR_B_R_PIN,GPIO_DIRECTION_INPUT,TRUE);						//sensor back right
	*/

	// led debugs
	DDRG = 0xff;
    2ee2:	83 e3       	ldi	r24, 0x33	; 51
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	2f ef       	ldi	r18, 0xFF	; 255
    2ee8:	fc 01       	movw	r30, r24
    2eea:	20 83       	st	Z, r18
	leds(ON);
    2eec:	81 e0       	ldi	r24, 0x01	; 1
    2eee:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <leds>

	// inits
	servo_init(50);
    2ef2:	82 e3       	ldi	r24, 0x32	; 50
    2ef4:	90 e0       	ldi	r25, 0x00	; 0
    2ef6:	0e 94 a6 00 	call	0x14c	; 0x14c <servo_init>
	timer_init(1000);
    2efa:	88 ee       	ldi	r24, 0xE8	; 232
    2efc:	93 e0       	ldi	r25, 0x03	; 3
    2efe:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <timer_init>
	CAN_Init(1);
    2f02:	81 e0       	ldi	r24, 0x01	; 1
    2f04:	0e 94 8b 0b 	call	0x1716	; 0x1716 <CAN_Init>
	//initUart1(UART1_BAUD,UART_ISR_ON);
	actuator_setup();
    2f08:	0e 94 95 02 	call	0x52a	; 0x52a <actuator_setup>
	
	// waiting for the jumper
	while(!(gpio_read_pin(JUMPER_PIN)));
    2f0c:	00 00       	nop
    2f0e:	88 e2       	ldi	r24, 0x28	; 40
    2f10:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <gpio_read_pin>
    2f14:	88 23       	and	r24, r24
    2f16:	d9 f3       	breq	.-10     	; 0x2f0e <system_init+0x172>
    2f18:	80 e0       	ldi	r24, 0x00	; 0
    2f1a:	90 e0       	ldi	r25, 0x00	; 0
    2f1c:	a0 e2       	ldi	r26, 0x20	; 32
    2f1e:	b1 e4       	ldi	r27, 0x41	; 65
    2f20:	8f 87       	std	Y+15, r24	; 0x0f
    2f22:	98 8b       	std	Y+16, r25	; 0x10
    2f24:	a9 8b       	std	Y+17, r26	; 0x11
    2f26:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2f28:	20 e0       	ldi	r18, 0x00	; 0
    2f2a:	30 e4       	ldi	r19, 0x40	; 64
    2f2c:	4c e1       	ldi	r20, 0x1C	; 28
    2f2e:	55 e4       	ldi	r21, 0x45	; 69
    2f30:	6f 85       	ldd	r22, Y+15	; 0x0f
    2f32:	78 89       	ldd	r23, Y+16	; 0x10
    2f34:	89 89       	ldd	r24, Y+17	; 0x11
    2f36:	9a 89       	ldd	r25, Y+18	; 0x12
    2f38:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <__mulsf3>
    2f3c:	dc 01       	movw	r26, r24
    2f3e:	cb 01       	movw	r24, r22
    2f40:	8b 8b       	std	Y+19, r24	; 0x13
    2f42:	9c 8b       	std	Y+20, r25	; 0x14
    2f44:	ad 8b       	std	Y+21, r26	; 0x15
    2f46:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    2f48:	20 e0       	ldi	r18, 0x00	; 0
    2f4a:	30 e0       	ldi	r19, 0x00	; 0
    2f4c:	40 e8       	ldi	r20, 0x80	; 128
    2f4e:	5f e3       	ldi	r21, 0x3F	; 63
    2f50:	6b 89       	ldd	r22, Y+19	; 0x13
    2f52:	7c 89       	ldd	r23, Y+20	; 0x14
    2f54:	8d 89       	ldd	r24, Y+21	; 0x15
    2f56:	9e 89       	ldd	r25, Y+22	; 0x16
    2f58:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <__cmpsf2>
    2f5c:	88 23       	and	r24, r24
    2f5e:	2c f4       	brge	.+10     	; 0x2f6a <system_init+0x1ce>
		__ticks = 1;
    2f60:	81 e0       	ldi	r24, 0x01	; 1
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	98 8f       	std	Y+24, r25	; 0x18
    2f66:	8f 8b       	std	Y+23, r24	; 0x17
    2f68:	3f c0       	rjmp	.+126    	; 0x2fe8 <system_init+0x24c>
	else if (__tmp > 65535)
    2f6a:	20 e0       	ldi	r18, 0x00	; 0
    2f6c:	3f ef       	ldi	r19, 0xFF	; 255
    2f6e:	4f e7       	ldi	r20, 0x7F	; 127
    2f70:	57 e4       	ldi	r21, 0x47	; 71
    2f72:	6b 89       	ldd	r22, Y+19	; 0x13
    2f74:	7c 89       	ldd	r23, Y+20	; 0x14
    2f76:	8d 89       	ldd	r24, Y+21	; 0x15
    2f78:	9e 89       	ldd	r25, Y+22	; 0x16
    2f7a:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <__gesf2>
    2f7e:	18 16       	cp	r1, r24
    2f80:	4c f5       	brge	.+82     	; 0x2fd4 <system_init+0x238>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f82:	20 e0       	ldi	r18, 0x00	; 0
    2f84:	30 e0       	ldi	r19, 0x00	; 0
    2f86:	40 e2       	ldi	r20, 0x20	; 32
    2f88:	51 e4       	ldi	r21, 0x41	; 65
    2f8a:	6f 85       	ldd	r22, Y+15	; 0x0f
    2f8c:	78 89       	ldd	r23, Y+16	; 0x10
    2f8e:	89 89       	ldd	r24, Y+17	; 0x11
    2f90:	9a 89       	ldd	r25, Y+18	; 0x12
    2f92:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <__mulsf3>
    2f96:	dc 01       	movw	r26, r24
    2f98:	cb 01       	movw	r24, r22
    2f9a:	bc 01       	movw	r22, r24
    2f9c:	cd 01       	movw	r24, r26
    2f9e:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <__fixunssfsi>
    2fa2:	dc 01       	movw	r26, r24
    2fa4:	cb 01       	movw	r24, r22
    2fa6:	98 8f       	std	Y+24, r25	; 0x18
    2fa8:	8f 8b       	std	Y+23, r24	; 0x17
    2faa:	0f c0       	rjmp	.+30     	; 0x2fca <system_init+0x22e>
    2fac:	8a ef       	ldi	r24, 0xFA	; 250
    2fae:	90 e0       	ldi	r25, 0x00	; 0
    2fb0:	9a 8f       	std	Y+26, r25	; 0x1a
    2fb2:	89 8f       	std	Y+25, r24	; 0x19
    2fb4:	89 8d       	ldd	r24, Y+25	; 0x19
    2fb6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2fb8:	01 97       	sbiw	r24, 0x01	; 1
    2fba:	f1 f7       	brne	.-4      	; 0x2fb8 <system_init+0x21c>
    2fbc:	9a 8f       	std	Y+26, r25	; 0x1a
    2fbe:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fc0:	8f 89       	ldd	r24, Y+23	; 0x17
    2fc2:	98 8d       	ldd	r25, Y+24	; 0x18
    2fc4:	01 97       	sbiw	r24, 0x01	; 1
    2fc6:	98 8f       	std	Y+24, r25	; 0x18
    2fc8:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fca:	8f 89       	ldd	r24, Y+23	; 0x17
    2fcc:	98 8d       	ldd	r25, Y+24	; 0x18
    2fce:	89 2b       	or	r24, r25
    2fd0:	69 f7       	brne	.-38     	; 0x2fac <system_init+0x210>
    2fd2:	14 c0       	rjmp	.+40     	; 0x2ffc <system_init+0x260>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fd4:	6b 89       	ldd	r22, Y+19	; 0x13
    2fd6:	7c 89       	ldd	r23, Y+20	; 0x14
    2fd8:	8d 89       	ldd	r24, Y+21	; 0x15
    2fda:	9e 89       	ldd	r25, Y+22	; 0x16
    2fdc:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <__fixunssfsi>
    2fe0:	dc 01       	movw	r26, r24
    2fe2:	cb 01       	movw	r24, r22
    2fe4:	98 8f       	std	Y+24, r25	; 0x18
    2fe6:	8f 8b       	std	Y+23, r24	; 0x17
    2fe8:	8f 89       	ldd	r24, Y+23	; 0x17
    2fea:	98 8d       	ldd	r25, Y+24	; 0x18
    2fec:	9c 8f       	std	Y+28, r25	; 0x1c
    2fee:	8b 8f       	std	Y+27, r24	; 0x1b
    2ff0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ff2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ff4:	01 97       	sbiw	r24, 0x01	; 1
    2ff6:	f1 f7       	brne	.-4      	; 0x2ff4 <system_init+0x258>
    2ff8:	9c 8f       	std	Y+28, r25	; 0x1c
    2ffa:	8b 8f       	std	Y+27, r24	; 0x1b
		_delay_ms(10);
		
	// indicating the led
	leds(OFF);
    2ffc:	80 e0       	ldi	r24, 0x00	; 0
    2ffe:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <leds>
	
	system_reset_system_time();															// reset system time
    3002:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <system_reset_system_time>
	system_set_match_started();															// match has started!
    3006:	0e 94 88 16 	call	0x2d10	; 0x2d10 <system_set_match_started>

	
}
    300a:	6c 96       	adiw	r28, 0x1c	; 28
    300c:	0f b6       	in	r0, 0x3f	; 63
    300e:	f8 94       	cli
    3010:	de bf       	out	0x3e, r29	; 62
    3012:	0f be       	out	0x3f, r0	; 63
    3014:	cd bf       	out	0x3d, r28	; 61
    3016:	df 91       	pop	r29
    3018:	cf 91       	pop	r28
    301a:	08 95       	ret

0000301c <UART0_Init>:
* Parameters        : unsigned int baud
					  char isrOnOff
* Return Value      : void
*********************************************************************************/
void UART0_Init(unsigned long baud, char isrOnOff)
{
    301c:	cf 93       	push	r28
    301e:	df 93       	push	r29
    3020:	cd b7       	in	r28, 0x3d	; 61
    3022:	de b7       	in	r29, 0x3e	; 62
    3024:	27 97       	sbiw	r28, 0x07	; 7
    3026:	0f b6       	in	r0, 0x3f	; 63
    3028:	f8 94       	cli
    302a:	de bf       	out	0x3e, r29	; 62
    302c:	0f be       	out	0x3f, r0	; 63
    302e:	cd bf       	out	0x3d, r28	; 61
    3030:	6b 83       	std	Y+3, r22	; 0x03
    3032:	7c 83       	std	Y+4, r23	; 0x04
    3034:	8d 83       	std	Y+5, r24	; 0x05
    3036:	9e 83       	std	Y+6, r25	; 0x06
    3038:	4f 83       	std	Y+7, r20	; 0x07
	unsigned int temp;

	UCSR0A = 0;
    303a:	80 ec       	ldi	r24, 0xC0	; 192
    303c:	90 e0       	ldi	r25, 0x00	; 0
    303e:	fc 01       	movw	r30, r24
    3040:	10 82       	st	Z, r1
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
    3042:	81 ec       	ldi	r24, 0xC1	; 193
    3044:	90 e0       	ldi	r25, 0x00	; 0
    3046:	28 e1       	ldi	r18, 0x18	; 24
    3048:	fc 01       	movw	r30, r24
    304a:	20 83       	st	Z, r18
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
    304c:	82 ec       	ldi	r24, 0xC2	; 194
    304e:	90 e0       	ldi	r25, 0x00	; 0
    3050:	26 e0       	ldi	r18, 0x06	; 6
    3052:	fc 01       	movw	r30, r24
    3054:	20 83       	st	Z, r18

	if(isrOnOff == UART_ISR_ON)
    3056:	8f 81       	ldd	r24, Y+7	; 0x07
    3058:	81 30       	cpi	r24, 0x01	; 1
    305a:	91 f4       	brne	.+36     	; 0x3080 <UART0_Init+0x64>
	{
		UCSR0B |= ((1 << RXCIE0) | (1 << TXCIE0));
    305c:	81 ec       	ldi	r24, 0xC1	; 193
    305e:	90 e0       	ldi	r25, 0x00	; 0
    3060:	21 ec       	ldi	r18, 0xC1	; 193
    3062:	30 e0       	ldi	r19, 0x00	; 0
    3064:	f9 01       	movw	r30, r18
    3066:	20 81       	ld	r18, Z
    3068:	20 6c       	ori	r18, 0xC0	; 192
    306a:	fc 01       	movw	r30, r24
    306c:	20 83       	st	Z, r18
		SREG |= 0x80;
    306e:	8f e5       	ldi	r24, 0x5F	; 95
    3070:	90 e0       	ldi	r25, 0x00	; 0
    3072:	2f e5       	ldi	r18, 0x5F	; 95
    3074:	30 e0       	ldi	r19, 0x00	; 0
    3076:	f9 01       	movw	r30, r18
    3078:	20 81       	ld	r18, Z
    307a:	20 68       	ori	r18, 0x80	; 128
    307c:	fc 01       	movw	r30, r24
    307e:	20 83       	st	Z, r18
	}

	temp = 0.5 + ((double)F_CPU/(baud * 16.0f) - 1);
    3080:	6b 81       	ldd	r22, Y+3	; 0x03
    3082:	7c 81       	ldd	r23, Y+4	; 0x04
    3084:	8d 81       	ldd	r24, Y+5	; 0x05
    3086:	9e 81       	ldd	r25, Y+6	; 0x06
    3088:	0e 94 05 1e 	call	0x3c0a	; 0x3c0a <__floatunsisf>
    308c:	dc 01       	movw	r26, r24
    308e:	cb 01       	movw	r24, r22
    3090:	20 e0       	ldi	r18, 0x00	; 0
    3092:	30 e0       	ldi	r19, 0x00	; 0
    3094:	40 e8       	ldi	r20, 0x80	; 128
    3096:	51 e4       	ldi	r21, 0x41	; 65
    3098:	bc 01       	movw	r22, r24
    309a:	cd 01       	movw	r24, r26
    309c:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <__mulsf3>
    30a0:	dc 01       	movw	r26, r24
    30a2:	cb 01       	movw	r24, r22
    30a4:	9c 01       	movw	r18, r24
    30a6:	ad 01       	movw	r20, r26
    30a8:	60 e8       	ldi	r22, 0x80	; 128
    30aa:	76 e9       	ldi	r23, 0x96	; 150
    30ac:	88 e1       	ldi	r24, 0x18	; 24
    30ae:	9b e4       	ldi	r25, 0x4B	; 75
    30b0:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <__divsf3>
    30b4:	dc 01       	movw	r26, r24
    30b6:	cb 01       	movw	r24, r22
    30b8:	20 e0       	ldi	r18, 0x00	; 0
    30ba:	30 e0       	ldi	r19, 0x00	; 0
    30bc:	40 e8       	ldi	r20, 0x80	; 128
    30be:	5f e3       	ldi	r21, 0x3F	; 63
    30c0:	bc 01       	movw	r22, r24
    30c2:	cd 01       	movw	r24, r26
    30c4:	0e 94 eb 1c 	call	0x39d6	; 0x39d6 <__subsf3>
    30c8:	dc 01       	movw	r26, r24
    30ca:	cb 01       	movw	r24, r22
    30cc:	20 e0       	ldi	r18, 0x00	; 0
    30ce:	30 e0       	ldi	r19, 0x00	; 0
    30d0:	40 e0       	ldi	r20, 0x00	; 0
    30d2:	5f e3       	ldi	r21, 0x3F	; 63
    30d4:	bc 01       	movw	r22, r24
    30d6:	cd 01       	movw	r24, r26
    30d8:	0e 94 ec 1c 	call	0x39d8	; 0x39d8 <__addsf3>
    30dc:	dc 01       	movw	r26, r24
    30de:	cb 01       	movw	r24, r22
    30e0:	bc 01       	movw	r22, r24
    30e2:	cd 01       	movw	r24, r26
    30e4:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <__fixunssfsi>
    30e8:	dc 01       	movw	r26, r24
    30ea:	cb 01       	movw	r24, r22
    30ec:	9a 83       	std	Y+2, r25	; 0x02
    30ee:	89 83       	std	Y+1, r24	; 0x01

	UBRR0H = temp >> 8;
    30f0:	85 ec       	ldi	r24, 0xC5	; 197
    30f2:	90 e0       	ldi	r25, 0x00	; 0
    30f4:	29 81       	ldd	r18, Y+1	; 0x01
    30f6:	3a 81       	ldd	r19, Y+2	; 0x02
    30f8:	23 2f       	mov	r18, r19
    30fa:	33 27       	eor	r19, r19
    30fc:	fc 01       	movw	r30, r24
    30fe:	20 83       	st	Z, r18
	UBRR0L = temp;
    3100:	84 ec       	ldi	r24, 0xC4	; 196
    3102:	90 e0       	ldi	r25, 0x00	; 0
    3104:	29 81       	ldd	r18, Y+1	; 0x01
    3106:	fc 01       	movw	r30, r24
    3108:	20 83       	st	Z, r18
}
    310a:	27 96       	adiw	r28, 0x07	; 7
    310c:	0f b6       	in	r0, 0x3f	; 63
    310e:	f8 94       	cli
    3110:	de bf       	out	0x3e, r29	; 62
    3112:	0f be       	out	0x3f, r0	; 63
    3114:	cd bf       	out	0x3d, r28	; 61
    3116:	df 91       	pop	r29
    3118:	cf 91       	pop	r28
    311a:	08 95       	ret

0000311c <__vector_23>:
/****************************************************************************************************************************************
Transmit interrupt USART0 modula
****************************************************************************************************************************************/

ISR(USART0_TX_vect)
{
    311c:	1f 92       	push	r1
    311e:	0f 92       	push	r0
    3120:	00 90 5f 00 	lds	r0, 0x005F
    3124:	0f 92       	push	r0
    3126:	11 24       	eor	r1, r1
    3128:	00 90 5b 00 	lds	r0, 0x005B
    312c:	0f 92       	push	r0
    312e:	2f 93       	push	r18
    3130:	3f 93       	push	r19
    3132:	8f 93       	push	r24
    3134:	9f 93       	push	r25
    3136:	ef 93       	push	r30
    3138:	ff 93       	push	r31
    313a:	cf 93       	push	r28
    313c:	df 93       	push	r29
    313e:	cd b7       	in	r28, 0x3d	; 61
    3140:	de b7       	in	r29, 0x3e	; 62
	if(tx0_counter)
    3142:	80 91 cb 01 	lds	r24, 0x01CB
    3146:	88 23       	and	r24, r24
    3148:	d1 f0       	breq	.+52     	; 0x317e <__vector_23+0x62>
	{
		tx0_counter--;
    314a:	80 91 cb 01 	lds	r24, 0x01CB
    314e:	81 50       	subi	r24, 0x01	; 1
    3150:	80 93 cb 01 	sts	0x01CB, r24
		UDR0 = tx0_buffer[tx0_rd_index];
    3154:	86 ec       	ldi	r24, 0xC6	; 198
    3156:	90 e0       	ldi	r25, 0x00	; 0
    3158:	20 91 cc 01 	lds	r18, 0x01CC
    315c:	22 2f       	mov	r18, r18
    315e:	30 e0       	ldi	r19, 0x00	; 0
    3160:	26 57       	subi	r18, 0x76	; 118
    3162:	3e 4f       	sbci	r19, 0xFE	; 254
    3164:	f9 01       	movw	r30, r18
    3166:	20 81       	ld	r18, Z
    3168:	fc 01       	movw	r30, r24
    316a:	20 83       	st	Z, r18
		if(++tx0_rd_index == TX0_BUFFER_SIZE)
    316c:	80 91 cc 01 	lds	r24, 0x01CC
    3170:	8f 5f       	subi	r24, 0xFF	; 255
    3172:	80 93 cc 01 	sts	0x01CC, r24
    3176:	80 34       	cpi	r24, 0x40	; 64
    3178:	11 f4       	brne	.+4      	; 0x317e <__vector_23+0x62>
			tx0_rd_index = 0;
    317a:	10 92 cc 01 	sts	0x01CC, r1
	}
}
    317e:	df 91       	pop	r29
    3180:	cf 91       	pop	r28
    3182:	ff 91       	pop	r31
    3184:	ef 91       	pop	r30
    3186:	9f 91       	pop	r25
    3188:	8f 91       	pop	r24
    318a:	3f 91       	pop	r19
    318c:	2f 91       	pop	r18
    318e:	0f 90       	pop	r0
    3190:	00 92 5b 00 	sts	0x005B, r0
    3194:	0f 90       	pop	r0
    3196:	00 92 5f 00 	sts	0x005F, r0
    319a:	0f 90       	pop	r0
    319c:	1f 90       	pop	r1
    319e:	18 95       	reti

000031a0 <UART0_Write>:
/****************************************************************************************************************************************
Slanje podataka USART0 modulom
****************************************************************************************************************************************/

void UART0_Write(unsigned char data)
{
    31a0:	cf 93       	push	r28
    31a2:	df 93       	push	r29
    31a4:	1f 92       	push	r1
    31a6:	cd b7       	in	r28, 0x3d	; 61
    31a8:	de b7       	in	r29, 0x3e	; 62
    31aa:	89 83       	std	Y+1, r24	; 0x01
	if( (UCSR0B >> TXCIE0) & 0x01)
    31ac:	81 ec       	ldi	r24, 0xC1	; 193
    31ae:	90 e0       	ldi	r25, 0x00	; 0
    31b0:	fc 01       	movw	r30, r24
    31b2:	80 81       	ld	r24, Z
    31b4:	82 95       	swap	r24
    31b6:	86 95       	lsr	r24
    31b8:	86 95       	lsr	r24
    31ba:	83 70       	andi	r24, 0x03	; 3
    31bc:	88 2f       	mov	r24, r24
    31be:	90 e0       	ldi	r25, 0x00	; 0
    31c0:	81 70       	andi	r24, 0x01	; 1
    31c2:	99 27       	eor	r25, r25
    31c4:	89 2b       	or	r24, r25
    31c6:	99 f1       	breq	.+102    	; 0x322e <UART0_Write+0x8e>
	{
		while(tx0_counter == TX0_BUFFER_SIZE);
    31c8:	00 00       	nop
    31ca:	80 91 cb 01 	lds	r24, 0x01CB
    31ce:	80 34       	cpi	r24, 0x40	; 64
    31d0:	e1 f3       	breq	.-8      	; 0x31ca <UART0_Write+0x2a>

		cli();
    31d2:	f8 94       	cli

		if(tx0_counter || (UCSR0A & 0x20) == 0)
    31d4:	80 91 cb 01 	lds	r24, 0x01CB
    31d8:	88 23       	and	r24, r24
    31da:	51 f4       	brne	.+20     	; 0x31f0 <UART0_Write+0x50>
    31dc:	80 ec       	ldi	r24, 0xC0	; 192
    31de:	90 e0       	ldi	r25, 0x00	; 0
    31e0:	fc 01       	movw	r30, r24
    31e2:	80 81       	ld	r24, Z
    31e4:	88 2f       	mov	r24, r24
    31e6:	90 e0       	ldi	r25, 0x00	; 0
    31e8:	80 72       	andi	r24, 0x20	; 32
    31ea:	99 27       	eor	r25, r25
    31ec:	89 2b       	or	r24, r25
    31ee:	c1 f4       	brne	.+48     	; 0x3220 <UART0_Write+0x80>
		{
			tx0_buffer[tx0_wr_index] = data;
    31f0:	80 91 ca 01 	lds	r24, 0x01CA
    31f4:	88 2f       	mov	r24, r24
    31f6:	90 e0       	ldi	r25, 0x00	; 0
    31f8:	86 57       	subi	r24, 0x76	; 118
    31fa:	9e 4f       	sbci	r25, 0xFE	; 254
    31fc:	29 81       	ldd	r18, Y+1	; 0x01
    31fe:	fc 01       	movw	r30, r24
    3200:	20 83       	st	Z, r18
			if(++tx0_wr_index == TX0_BUFFER_SIZE)
    3202:	80 91 ca 01 	lds	r24, 0x01CA
    3206:	8f 5f       	subi	r24, 0xFF	; 255
    3208:	80 93 ca 01 	sts	0x01CA, r24
    320c:	80 34       	cpi	r24, 0x40	; 64
    320e:	11 f4       	brne	.+4      	; 0x3214 <UART0_Write+0x74>
				tx0_wr_index = 0;
    3210:	10 92 ca 01 	sts	0x01CA, r1

			tx0_counter++;
    3214:	80 91 cb 01 	lds	r24, 0x01CB
    3218:	8f 5f       	subi	r24, 0xFF	; 255
    321a:	80 93 cb 01 	sts	0x01CB, r24
    321e:	05 c0       	rjmp	.+10     	; 0x322a <UART0_Write+0x8a>
		}
		else
			UDR0 = data;
    3220:	86 ec       	ldi	r24, 0xC6	; 198
    3222:	90 e0       	ldi	r25, 0x00	; 0
    3224:	29 81       	ldd	r18, Y+1	; 0x01
    3226:	fc 01       	movw	r30, r24
    3228:	20 83       	st	Z, r18

		sei();
    322a:	78 94       	sei
    322c:	03 c0       	rjmp	.+6      	; 0x3234 <UART0_Write+0x94>
	}
	else
		altUart0Write(data);
    322e:	89 81       	ldd	r24, Y+1	; 0x01
    3230:	0e 94 bf 1a 	call	0x357e	; 0x357e <altUart0Write>
}
    3234:	0f 90       	pop	r0
    3236:	df 91       	pop	r29
    3238:	cf 91       	pop	r28
    323a:	08 95       	ret

0000323c <__vector_21>:
/****************************************************************************************************************************************
Receive interrupt USART0 modula
****************************************************************************************************************************************/

ISR(USART0_RX_vect)
{
    323c:	1f 92       	push	r1
    323e:	0f 92       	push	r0
    3240:	00 90 5f 00 	lds	r0, 0x005F
    3244:	0f 92       	push	r0
    3246:	11 24       	eor	r1, r1
    3248:	00 90 5b 00 	lds	r0, 0x005B
    324c:	0f 92       	push	r0
    324e:	2f 93       	push	r18
    3250:	3f 93       	push	r19
    3252:	8f 93       	push	r24
    3254:	9f 93       	push	r25
    3256:	ef 93       	push	r30
    3258:	ff 93       	push	r31
    325a:	cf 93       	push	r28
    325c:	df 93       	push	r29
    325e:	1f 92       	push	r1
    3260:	cd b7       	in	r28, 0x3d	; 61
    3262:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSR0A;
    3264:	80 ec       	ldi	r24, 0xC0	; 192
    3266:	90 e0       	ldi	r25, 0x00	; 0
    3268:	fc 01       	movw	r30, r24
    326a:	80 81       	ld	r24, Z
    326c:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
    326e:	89 81       	ldd	r24, Y+1	; 0x01
    3270:	88 2f       	mov	r24, r24
    3272:	90 e0       	ldi	r25, 0x00	; 0
    3274:	8c 71       	andi	r24, 0x1C	; 28
    3276:	99 27       	eor	r25, r25
    3278:	89 2b       	or	r24, r25
    327a:	d1 f4       	brne	.+52     	; 0x32b0 <__vector_21+0x74>
	{
		rx0_buffer[rx0_wr_index] = UDR0;
    327c:	80 91 0d 02 	lds	r24, 0x020D
    3280:	88 2f       	mov	r24, r24
    3282:	90 e0       	ldi	r25, 0x00	; 0
    3284:	26 ec       	ldi	r18, 0xC6	; 198
    3286:	30 e0       	ldi	r19, 0x00	; 0
    3288:	f9 01       	movw	r30, r18
    328a:	20 81       	ld	r18, Z
    328c:	83 53       	subi	r24, 0x33	; 51
    328e:	9e 4f       	sbci	r25, 0xFE	; 254
    3290:	fc 01       	movw	r30, r24
    3292:	20 83       	st	Z, r18
		if(++rx0_wr_index == RX0_BUFFER_SIZE)
    3294:	80 91 0d 02 	lds	r24, 0x020D
    3298:	8f 5f       	subi	r24, 0xFF	; 255
    329a:	80 93 0d 02 	sts	0x020D, r24
    329e:	80 34       	cpi	r24, 0x40	; 64
    32a0:	11 f4       	brne	.+4      	; 0x32a6 <__vector_21+0x6a>
			rx0_wr_index = 0;
    32a2:	10 92 0d 02 	sts	0x020D, r1

		rx0_counter++;
    32a6:	80 91 0e 02 	lds	r24, 0x020E
    32aa:	8f 5f       	subi	r24, 0xFF	; 255
    32ac:	80 93 0e 02 	sts	0x020E, r24
	}
}
    32b0:	0f 90       	pop	r0
    32b2:	df 91       	pop	r29
    32b4:	cf 91       	pop	r28
    32b6:	ff 91       	pop	r31
    32b8:	ef 91       	pop	r30
    32ba:	9f 91       	pop	r25
    32bc:	8f 91       	pop	r24
    32be:	3f 91       	pop	r19
    32c0:	2f 91       	pop	r18
    32c2:	0f 90       	pop	r0
    32c4:	00 92 5b 00 	sts	0x005B, r0
    32c8:	0f 90       	pop	r0
    32ca:	00 92 5f 00 	sts	0x005F, r0
    32ce:	0f 90       	pop	r0
    32d0:	1f 90       	pop	r1
    32d2:	18 95       	reti

000032d4 <UART0_Read>:
/****************************************************************************************************************************************
Primanje podataka USART0 modulom
****************************************************************************************************************************************/

unsigned char UART0_Read(void)
{
    32d4:	cf 93       	push	r28
    32d6:	df 93       	push	r29
    32d8:	1f 92       	push	r1
    32da:	cd b7       	in	r28, 0x3d	; 61
    32dc:	de b7       	in	r29, 0x3e	; 62
	unsigned char data;

	if((UCSR0B >> RXCIE0) & 0x01)
    32de:	81 ec       	ldi	r24, 0xC1	; 193
    32e0:	90 e0       	ldi	r25, 0x00	; 0
    32e2:	fc 01       	movw	r30, r24
    32e4:	80 81       	ld	r24, Z
    32e6:	88 1f       	adc	r24, r24
    32e8:	88 27       	eor	r24, r24
    32ea:	88 1f       	adc	r24, r24
    32ec:	88 2f       	mov	r24, r24
    32ee:	90 e0       	ldi	r25, 0x00	; 0
    32f0:	81 70       	andi	r24, 0x01	; 1
    32f2:	99 27       	eor	r25, r25
    32f4:	89 2b       	or	r24, r25
    32f6:	e9 f0       	breq	.+58     	; 0x3332 <UART0_Read+0x5e>
	{
		while(rx0_counter == 0);
    32f8:	00 00       	nop
    32fa:	80 91 0e 02 	lds	r24, 0x020E
    32fe:	88 23       	and	r24, r24
    3300:	e1 f3       	breq	.-8      	; 0x32fa <UART0_Read+0x26>

		data = rx0_buffer[rx0_rd_index];
    3302:	80 91 0f 02 	lds	r24, 0x020F
    3306:	88 2f       	mov	r24, r24
    3308:	90 e0       	ldi	r25, 0x00	; 0
    330a:	83 53       	subi	r24, 0x33	; 51
    330c:	9e 4f       	sbci	r25, 0xFE	; 254
    330e:	fc 01       	movw	r30, r24
    3310:	80 81       	ld	r24, Z
    3312:	89 83       	std	Y+1, r24	; 0x01

		if(++rx0_rd_index == RX0_BUFFER_SIZE)
    3314:	80 91 0f 02 	lds	r24, 0x020F
    3318:	8f 5f       	subi	r24, 0xFF	; 255
    331a:	80 93 0f 02 	sts	0x020F, r24
    331e:	80 34       	cpi	r24, 0x40	; 64
    3320:	11 f4       	brne	.+4      	; 0x3326 <UART0_Read+0x52>
			rx0_rd_index = 0;
    3322:	10 92 0f 02 	sts	0x020F, r1

		rx0_counter--;
    3326:	80 91 0e 02 	lds	r24, 0x020E
    332a:	81 50       	subi	r24, 0x01	; 1
    332c:	80 93 0e 02 	sts	0x020E, r24
    3330:	13 c0       	rjmp	.+38     	; 0x3358 <UART0_Read+0x84>
	}
	else
	{
		while( !((UCSR0A >> RXC0) & 0x01));
    3332:	00 00       	nop
    3334:	80 ec       	ldi	r24, 0xC0	; 192
    3336:	90 e0       	ldi	r25, 0x00	; 0
    3338:	fc 01       	movw	r30, r24
    333a:	80 81       	ld	r24, Z
    333c:	88 1f       	adc	r24, r24
    333e:	88 27       	eor	r24, r24
    3340:	88 1f       	adc	r24, r24
    3342:	88 2f       	mov	r24, r24
    3344:	90 e0       	ldi	r25, 0x00	; 0
    3346:	81 70       	andi	r24, 0x01	; 1
    3348:	99 27       	eor	r25, r25
    334a:	89 2b       	or	r24, r25
    334c:	99 f3       	breq	.-26     	; 0x3334 <UART0_Read+0x60>
		data = UDR0;
    334e:	86 ec       	ldi	r24, 0xC6	; 198
    3350:	90 e0       	ldi	r25, 0x00	; 0
    3352:	fc 01       	movw	r30, r24
    3354:	80 81       	ld	r24, Z
    3356:	89 83       	std	Y+1, r24	; 0x01
	}

	return data;
    3358:	89 81       	ldd	r24, Y+1	; 0x01
}
    335a:	0f 90       	pop	r0
    335c:	df 91       	pop	r29
    335e:	cf 91       	pop	r28
    3360:	08 95       	ret

00003362 <initUart1>:
-asinhroni
-1 stop bit
-bez paritet bita
****************************************************************************************************************************************/
void initUart1(unsigned long baud, char isrOnOff)
{
    3362:	cf 93       	push	r28
    3364:	df 93       	push	r29
    3366:	cd b7       	in	r28, 0x3d	; 61
    3368:	de b7       	in	r29, 0x3e	; 62
    336a:	27 97       	sbiw	r28, 0x07	; 7
    336c:	0f b6       	in	r0, 0x3f	; 63
    336e:	f8 94       	cli
    3370:	de bf       	out	0x3e, r29	; 62
    3372:	0f be       	out	0x3f, r0	; 63
    3374:	cd bf       	out	0x3d, r28	; 61
    3376:	6b 83       	std	Y+3, r22	; 0x03
    3378:	7c 83       	std	Y+4, r23	; 0x04
    337a:	8d 83       	std	Y+5, r24	; 0x05
    337c:	9e 83       	std	Y+6, r25	; 0x06
    337e:	4f 83       	std	Y+7, r20	; 0x07
	unsigned int temp;

	UCSR1A = 0;
    3380:	88 ec       	ldi	r24, 0xC8	; 200
    3382:	90 e0       	ldi	r25, 0x00	; 0
    3384:	fc 01       	movw	r30, r24
    3386:	10 82       	st	Z, r1
	UCSR1B = (1 << RXEN1) | (1 << TXEN1);
    3388:	89 ec       	ldi	r24, 0xC9	; 201
    338a:	90 e0       	ldi	r25, 0x00	; 0
    338c:	28 e1       	ldi	r18, 0x18	; 24
    338e:	fc 01       	movw	r30, r24
    3390:	20 83       	st	Z, r18
	UCSR1C = (1 << UCSZ11) | (1 << UCSZ10);
    3392:	8a ec       	ldi	r24, 0xCA	; 202
    3394:	90 e0       	ldi	r25, 0x00	; 0
    3396:	26 e0       	ldi	r18, 0x06	; 6
    3398:	fc 01       	movw	r30, r24
    339a:	20 83       	st	Z, r18

	if(isrOnOff == UART_ISR_ON)
    339c:	8f 81       	ldd	r24, Y+7	; 0x07
    339e:	81 30       	cpi	r24, 0x01	; 1
    33a0:	91 f4       	brne	.+36     	; 0x33c6 <initUart1+0x64>
	{
		UCSR1B |= ((1 << RXCIE1) | (1 << TXCIE1));
    33a2:	89 ec       	ldi	r24, 0xC9	; 201
    33a4:	90 e0       	ldi	r25, 0x00	; 0
    33a6:	29 ec       	ldi	r18, 0xC9	; 201
    33a8:	30 e0       	ldi	r19, 0x00	; 0
    33aa:	f9 01       	movw	r30, r18
    33ac:	20 81       	ld	r18, Z
    33ae:	20 6c       	ori	r18, 0xC0	; 192
    33b0:	fc 01       	movw	r30, r24
    33b2:	20 83       	st	Z, r18
		SREG |= 0x80;
    33b4:	8f e5       	ldi	r24, 0x5F	; 95
    33b6:	90 e0       	ldi	r25, 0x00	; 0
    33b8:	2f e5       	ldi	r18, 0x5F	; 95
    33ba:	30 e0       	ldi	r19, 0x00	; 0
    33bc:	f9 01       	movw	r30, r18
    33be:	20 81       	ld	r18, Z
    33c0:	20 68       	ori	r18, 0x80	; 128
    33c2:	fc 01       	movw	r30, r24
    33c4:	20 83       	st	Z, r18
	}

	temp = 0.5 + ((double)F_CPU/(baud * 16.0f) - 1);
    33c6:	6b 81       	ldd	r22, Y+3	; 0x03
    33c8:	7c 81       	ldd	r23, Y+4	; 0x04
    33ca:	8d 81       	ldd	r24, Y+5	; 0x05
    33cc:	9e 81       	ldd	r25, Y+6	; 0x06
    33ce:	0e 94 05 1e 	call	0x3c0a	; 0x3c0a <__floatunsisf>
    33d2:	dc 01       	movw	r26, r24
    33d4:	cb 01       	movw	r24, r22
    33d6:	20 e0       	ldi	r18, 0x00	; 0
    33d8:	30 e0       	ldi	r19, 0x00	; 0
    33da:	40 e8       	ldi	r20, 0x80	; 128
    33dc:	51 e4       	ldi	r21, 0x41	; 65
    33de:	bc 01       	movw	r22, r24
    33e0:	cd 01       	movw	r24, r26
    33e2:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <__mulsf3>
    33e6:	dc 01       	movw	r26, r24
    33e8:	cb 01       	movw	r24, r22
    33ea:	9c 01       	movw	r18, r24
    33ec:	ad 01       	movw	r20, r26
    33ee:	60 e8       	ldi	r22, 0x80	; 128
    33f0:	76 e9       	ldi	r23, 0x96	; 150
    33f2:	88 e1       	ldi	r24, 0x18	; 24
    33f4:	9b e4       	ldi	r25, 0x4B	; 75
    33f6:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <__divsf3>
    33fa:	dc 01       	movw	r26, r24
    33fc:	cb 01       	movw	r24, r22
    33fe:	20 e0       	ldi	r18, 0x00	; 0
    3400:	30 e0       	ldi	r19, 0x00	; 0
    3402:	40 e8       	ldi	r20, 0x80	; 128
    3404:	5f e3       	ldi	r21, 0x3F	; 63
    3406:	bc 01       	movw	r22, r24
    3408:	cd 01       	movw	r24, r26
    340a:	0e 94 eb 1c 	call	0x39d6	; 0x39d6 <__subsf3>
    340e:	dc 01       	movw	r26, r24
    3410:	cb 01       	movw	r24, r22
    3412:	20 e0       	ldi	r18, 0x00	; 0
    3414:	30 e0       	ldi	r19, 0x00	; 0
    3416:	40 e0       	ldi	r20, 0x00	; 0
    3418:	5f e3       	ldi	r21, 0x3F	; 63
    341a:	bc 01       	movw	r22, r24
    341c:	cd 01       	movw	r24, r26
    341e:	0e 94 ec 1c 	call	0x39d8	; 0x39d8 <__addsf3>
    3422:	dc 01       	movw	r26, r24
    3424:	cb 01       	movw	r24, r22
    3426:	bc 01       	movw	r22, r24
    3428:	cd 01       	movw	r24, r26
    342a:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <__fixunssfsi>
    342e:	dc 01       	movw	r26, r24
    3430:	cb 01       	movw	r24, r22
    3432:	9a 83       	std	Y+2, r25	; 0x02
    3434:	89 83       	std	Y+1, r24	; 0x01

	UBRR1H = temp >> 8;
    3436:	8d ec       	ldi	r24, 0xCD	; 205
    3438:	90 e0       	ldi	r25, 0x00	; 0
    343a:	29 81       	ldd	r18, Y+1	; 0x01
    343c:	3a 81       	ldd	r19, Y+2	; 0x02
    343e:	23 2f       	mov	r18, r19
    3440:	33 27       	eor	r19, r19
    3442:	fc 01       	movw	r30, r24
    3444:	20 83       	st	Z, r18
	UBRR1L = temp;
    3446:	8c ec       	ldi	r24, 0xCC	; 204
    3448:	90 e0       	ldi	r25, 0x00	; 0
    344a:	29 81       	ldd	r18, Y+1	; 0x01
    344c:	fc 01       	movw	r30, r24
    344e:	20 83       	st	Z, r18
}
    3450:	27 96       	adiw	r28, 0x07	; 7
    3452:	0f b6       	in	r0, 0x3f	; 63
    3454:	f8 94       	cli
    3456:	de bf       	out	0x3e, r29	; 62
    3458:	0f be       	out	0x3f, r0	; 63
    345a:	cd bf       	out	0x3d, r28	; 61
    345c:	df 91       	pop	r29
    345e:	cf 91       	pop	r28
    3460:	08 95       	ret

00003462 <__vector_34>:
/****************************************************************************************************************************************
Transmit interrupt USART1 modula
****************************************************************************************************************************************/
//#error "Linker error- idiotic programming"
ISR(USART1_TX_vect)
{
    3462:	1f 92       	push	r1
    3464:	0f 92       	push	r0
    3466:	00 90 5f 00 	lds	r0, 0x005F
    346a:	0f 92       	push	r0
    346c:	11 24       	eor	r1, r1
    346e:	00 90 5b 00 	lds	r0, 0x005B
    3472:	0f 92       	push	r0
    3474:	2f 93       	push	r18
    3476:	3f 93       	push	r19
    3478:	8f 93       	push	r24
    347a:	9f 93       	push	r25
    347c:	ef 93       	push	r30
    347e:	ff 93       	push	r31
    3480:	cf 93       	push	r28
    3482:	df 93       	push	r29
    3484:	cd b7       	in	r28, 0x3d	; 61
    3486:	de b7       	in	r29, 0x3e	; 62
	if(tx1_counter)
    3488:	80 91 51 02 	lds	r24, 0x0251
    348c:	88 23       	and	r24, r24
    348e:	d1 f0       	breq	.+52     	; 0x34c4 <__vector_34+0x62>
	{
		tx1_counter--;
    3490:	80 91 51 02 	lds	r24, 0x0251
    3494:	81 50       	subi	r24, 0x01	; 1
    3496:	80 93 51 02 	sts	0x0251, r24
		UDR1=tx1_buffer[tx1_rd_index];
    349a:	8e ec       	ldi	r24, 0xCE	; 206
    349c:	90 e0       	ldi	r25, 0x00	; 0
    349e:	20 91 52 02 	lds	r18, 0x0252
    34a2:	22 2f       	mov	r18, r18
    34a4:	30 e0       	ldi	r19, 0x00	; 0
    34a6:	20 5f       	subi	r18, 0xF0	; 240
    34a8:	3d 4f       	sbci	r19, 0xFD	; 253
    34aa:	f9 01       	movw	r30, r18
    34ac:	20 81       	ld	r18, Z
    34ae:	fc 01       	movw	r30, r24
    34b0:	20 83       	st	Z, r18
		if(++tx1_rd_index == TX1_BUFFER_SIZE)
    34b2:	80 91 52 02 	lds	r24, 0x0252
    34b6:	8f 5f       	subi	r24, 0xFF	; 255
    34b8:	80 93 52 02 	sts	0x0252, r24
    34bc:	80 34       	cpi	r24, 0x40	; 64
    34be:	11 f4       	brne	.+4      	; 0x34c4 <__vector_34+0x62>
			tx1_rd_index = 0;
    34c0:	10 92 52 02 	sts	0x0252, r1
	}
}
    34c4:	df 91       	pop	r29
    34c6:	cf 91       	pop	r28
    34c8:	ff 91       	pop	r31
    34ca:	ef 91       	pop	r30
    34cc:	9f 91       	pop	r25
    34ce:	8f 91       	pop	r24
    34d0:	3f 91       	pop	r19
    34d2:	2f 91       	pop	r18
    34d4:	0f 90       	pop	r0
    34d6:	00 92 5b 00 	sts	0x005B, r0
    34da:	0f 90       	pop	r0
    34dc:	00 92 5f 00 	sts	0x005F, r0
    34e0:	0f 90       	pop	r0
    34e2:	1f 90       	pop	r1
    34e4:	18 95       	reti

000034e6 <__vector_32>:

ISR(USART1_RX_vect)
{
    34e6:	1f 92       	push	r1
    34e8:	0f 92       	push	r0
    34ea:	00 90 5f 00 	lds	r0, 0x005F
    34ee:	0f 92       	push	r0
    34f0:	11 24       	eor	r1, r1
    34f2:	00 90 5b 00 	lds	r0, 0x005B
    34f6:	0f 92       	push	r0
    34f8:	2f 93       	push	r18
    34fa:	3f 93       	push	r19
    34fc:	8f 93       	push	r24
    34fe:	9f 93       	push	r25
    3500:	ef 93       	push	r30
    3502:	ff 93       	push	r31
    3504:	cf 93       	push	r28
    3506:	df 93       	push	r29
    3508:	1f 92       	push	r1
    350a:	cd b7       	in	r28, 0x3d	; 61
    350c:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSR1A;
    350e:	88 ec       	ldi	r24, 0xC8	; 200
    3510:	90 e0       	ldi	r25, 0x00	; 0
    3512:	fc 01       	movw	r30, r24
    3514:	80 81       	ld	r24, Z
    3516:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
    3518:	89 81       	ldd	r24, Y+1	; 0x01
    351a:	88 2f       	mov	r24, r24
    351c:	90 e0       	ldi	r25, 0x00	; 0
    351e:	8c 71       	andi	r24, 0x1C	; 28
    3520:	99 27       	eor	r25, r25
    3522:	89 2b       	or	r24, r25
    3524:	d1 f4       	brne	.+52     	; 0x355a <__vector_32+0x74>
	{
		rx1_buffer[rx1_wr_index] = UDR1;
    3526:	80 91 93 02 	lds	r24, 0x0293
    352a:	88 2f       	mov	r24, r24
    352c:	90 e0       	ldi	r25, 0x00	; 0
    352e:	2e ec       	ldi	r18, 0xCE	; 206
    3530:	30 e0       	ldi	r19, 0x00	; 0
    3532:	f9 01       	movw	r30, r18
    3534:	20 81       	ld	r18, Z
    3536:	8d 5a       	subi	r24, 0xAD	; 173
    3538:	9d 4f       	sbci	r25, 0xFD	; 253
    353a:	fc 01       	movw	r30, r24
    353c:	20 83       	st	Z, r18
		if(++rx1_wr_index == RX1_BUFFER_SIZE)
    353e:	80 91 93 02 	lds	r24, 0x0293
    3542:	8f 5f       	subi	r24, 0xFF	; 255
    3544:	80 93 93 02 	sts	0x0293, r24
    3548:	80 34       	cpi	r24, 0x40	; 64
    354a:	11 f4       	brne	.+4      	; 0x3550 <__vector_32+0x6a>
		rx1_wr_index = 0;
    354c:	10 92 93 02 	sts	0x0293, r1

		rx1_counter++;
    3550:	80 91 94 02 	lds	r24, 0x0294
    3554:	8f 5f       	subi	r24, 0xFF	; 255
    3556:	80 93 94 02 	sts	0x0294, r24
	}
}
    355a:	0f 90       	pop	r0
    355c:	df 91       	pop	r29
    355e:	cf 91       	pop	r28
    3560:	ff 91       	pop	r31
    3562:	ef 91       	pop	r30
    3564:	9f 91       	pop	r25
    3566:	8f 91       	pop	r24
    3568:	3f 91       	pop	r19
    356a:	2f 91       	pop	r18
    356c:	0f 90       	pop	r0
    356e:	00 92 5b 00 	sts	0x005B, r0
    3572:	0f 90       	pop	r0
    3574:	00 92 5f 00 	sts	0x005F, r0
    3578:	0f 90       	pop	r0
    357a:	1f 90       	pop	r1
    357c:	18 95       	reti

0000357e <altUart0Write>:

void altUart0Write(unsigned char data)
{
    357e:	cf 93       	push	r28
    3580:	df 93       	push	r29
    3582:	1f 92       	push	r1
    3584:	cd b7       	in	r28, 0x3d	; 61
    3586:	de b7       	in	r29, 0x3e	; 62
    3588:	89 83       	std	Y+1, r24	; 0x01
	while( !(UCSR0A & (1 << UDRE0)));
    358a:	00 00       	nop
    358c:	80 ec       	ldi	r24, 0xC0	; 192
    358e:	90 e0       	ldi	r25, 0x00	; 0
    3590:	fc 01       	movw	r30, r24
    3592:	80 81       	ld	r24, Z
    3594:	88 2f       	mov	r24, r24
    3596:	90 e0       	ldi	r25, 0x00	; 0
    3598:	80 72       	andi	r24, 0x20	; 32
    359a:	99 27       	eor	r25, r25
    359c:	89 2b       	or	r24, r25
    359e:	b1 f3       	breq	.-20     	; 0x358c <altUart0Write+0xe>

	UDR0 = data;
    35a0:	86 ec       	ldi	r24, 0xC6	; 198
    35a2:	90 e0       	ldi	r25, 0x00	; 0
    35a4:	29 81       	ldd	r18, Y+1	; 0x01
    35a6:	fc 01       	movw	r30, r24
    35a8:	20 83       	st	Z, r18
}
    35aa:	0f 90       	pop	r0
    35ac:	df 91       	pop	r29
    35ae:	cf 91       	pop	r28
    35b0:	08 95       	ret

000035b2 <altUart1Write>:

void altUart1Write(unsigned char data)
{
    35b2:	cf 93       	push	r28
    35b4:	df 93       	push	r29
    35b6:	1f 92       	push	r1
    35b8:	cd b7       	in	r28, 0x3d	; 61
    35ba:	de b7       	in	r29, 0x3e	; 62
    35bc:	89 83       	std	Y+1, r24	; 0x01
	while ( !( UCSR1A & (1 << UDRE1)) );
    35be:	00 00       	nop
    35c0:	88 ec       	ldi	r24, 0xC8	; 200
    35c2:	90 e0       	ldi	r25, 0x00	; 0
    35c4:	fc 01       	movw	r30, r24
    35c6:	80 81       	ld	r24, Z
    35c8:	88 2f       	mov	r24, r24
    35ca:	90 e0       	ldi	r25, 0x00	; 0
    35cc:	80 72       	andi	r24, 0x20	; 32
    35ce:	99 27       	eor	r25, r25
    35d0:	89 2b       	or	r24, r25
    35d2:	b1 f3       	breq	.-20     	; 0x35c0 <altUart1Write+0xe>
	UDR1 = data;
    35d4:	8e ec       	ldi	r24, 0xCE	; 206
    35d6:	90 e0       	ldi	r25, 0x00	; 0
    35d8:	29 81       	ldd	r18, Y+1	; 0x01
    35da:	fc 01       	movw	r30, r24
    35dc:	20 83       	st	Z, r18
}
    35de:	0f 90       	pop	r0
    35e0:	df 91       	pop	r29
    35e2:	cf 91       	pop	r28
    35e4:	08 95       	ret

000035e6 <UART1_Write>:
**

**************************************************************************************************************************************/

void UART1_Write(unsigned char data)
{
    35e6:	cf 93       	push	r28
    35e8:	df 93       	push	r29
    35ea:	1f 92       	push	r1
    35ec:	cd b7       	in	r28, 0x3d	; 61
    35ee:	de b7       	in	r29, 0x3e	; 62
    35f0:	89 83       	std	Y+1, r24	; 0x01
	if( (UCSR1B >> TXCIE1) & 0x01)
    35f2:	89 ec       	ldi	r24, 0xC9	; 201
    35f4:	90 e0       	ldi	r25, 0x00	; 0
    35f6:	fc 01       	movw	r30, r24
    35f8:	80 81       	ld	r24, Z
    35fa:	82 95       	swap	r24
    35fc:	86 95       	lsr	r24
    35fe:	86 95       	lsr	r24
    3600:	83 70       	andi	r24, 0x03	; 3
    3602:	88 2f       	mov	r24, r24
    3604:	90 e0       	ldi	r25, 0x00	; 0
    3606:	81 70       	andi	r24, 0x01	; 1
    3608:	99 27       	eor	r25, r25
    360a:	89 2b       	or	r24, r25
    360c:	99 f1       	breq	.+102    	; 0x3674 <UART1_Write+0x8e>
	{
		while(tx1_counter == TX1_BUFFER_SIZE);
    360e:	00 00       	nop
    3610:	80 91 51 02 	lds	r24, 0x0251
    3614:	80 34       	cpi	r24, 0x40	; 64
    3616:	e1 f3       	breq	.-8      	; 0x3610 <UART1_Write+0x2a>

		cli();
    3618:	f8 94       	cli

		if(tx1_counter || (UCSR1A & 0x20) == 0)
    361a:	80 91 51 02 	lds	r24, 0x0251
    361e:	88 23       	and	r24, r24
    3620:	51 f4       	brne	.+20     	; 0x3636 <UART1_Write+0x50>
    3622:	88 ec       	ldi	r24, 0xC8	; 200
    3624:	90 e0       	ldi	r25, 0x00	; 0
    3626:	fc 01       	movw	r30, r24
    3628:	80 81       	ld	r24, Z
    362a:	88 2f       	mov	r24, r24
    362c:	90 e0       	ldi	r25, 0x00	; 0
    362e:	80 72       	andi	r24, 0x20	; 32
    3630:	99 27       	eor	r25, r25
    3632:	89 2b       	or	r24, r25
    3634:	c1 f4       	brne	.+48     	; 0x3666 <UART1_Write+0x80>
		{
			tx1_buffer[tx1_wr_index] = data;
    3636:	80 91 50 02 	lds	r24, 0x0250
    363a:	88 2f       	mov	r24, r24
    363c:	90 e0       	ldi	r25, 0x00	; 0
    363e:	80 5f       	subi	r24, 0xF0	; 240
    3640:	9d 4f       	sbci	r25, 0xFD	; 253
    3642:	29 81       	ldd	r18, Y+1	; 0x01
    3644:	fc 01       	movw	r30, r24
    3646:	20 83       	st	Z, r18

			if(++tx1_wr_index == TX1_BUFFER_SIZE)
    3648:	80 91 50 02 	lds	r24, 0x0250
    364c:	8f 5f       	subi	r24, 0xFF	; 255
    364e:	80 93 50 02 	sts	0x0250, r24
    3652:	80 34       	cpi	r24, 0x40	; 64
    3654:	11 f4       	brne	.+4      	; 0x365a <UART1_Write+0x74>
				tx1_wr_index = 0;
    3656:	10 92 50 02 	sts	0x0250, r1

			tx1_counter++;
    365a:	80 91 51 02 	lds	r24, 0x0251
    365e:	8f 5f       	subi	r24, 0xFF	; 255
    3660:	80 93 51 02 	sts	0x0251, r24
    3664:	05 c0       	rjmp	.+10     	; 0x3670 <UART1_Write+0x8a>
		}
		else
			UDR1 = data;
    3666:	8e ec       	ldi	r24, 0xCE	; 206
    3668:	90 e0       	ldi	r25, 0x00	; 0
    366a:	29 81       	ldd	r18, Y+1	; 0x01
    366c:	fc 01       	movw	r30, r24
    366e:	20 83       	st	Z, r18

		sei();
    3670:	78 94       	sei
    3672:	03 c0       	rjmp	.+6      	; 0x367a <UART1_Write+0x94>
	}
	else
		altUart1Write(data);
    3674:	89 81       	ldd	r24, Y+1	; 0x01
    3676:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <altUart1Write>
}
    367a:	0f 90       	pop	r0
    367c:	df 91       	pop	r29
    367e:	cf 91       	pop	r28
    3680:	08 95       	ret

00003682 <UART1_Read>:

unsigned char UART1_Read(void)
{
    3682:	cf 93       	push	r28
    3684:	df 93       	push	r29
    3686:	1f 92       	push	r1
    3688:	cd b7       	in	r28, 0x3d	; 61
    368a:	de b7       	in	r29, 0x3e	; 62
	unsigned char data;

	if((UCSR1B >> RXCIE1) & 0x01)
    368c:	89 ec       	ldi	r24, 0xC9	; 201
    368e:	90 e0       	ldi	r25, 0x00	; 0
    3690:	fc 01       	movw	r30, r24
    3692:	80 81       	ld	r24, Z
    3694:	88 1f       	adc	r24, r24
    3696:	88 27       	eor	r24, r24
    3698:	88 1f       	adc	r24, r24
    369a:	88 2f       	mov	r24, r24
    369c:	90 e0       	ldi	r25, 0x00	; 0
    369e:	81 70       	andi	r24, 0x01	; 1
    36a0:	99 27       	eor	r25, r25
    36a2:	89 2b       	or	r24, r25
    36a4:	e9 f0       	breq	.+58     	; 0x36e0 <UART1_Read+0x5e>
	{
		while(rx1_counter == 0);
    36a6:	00 00       	nop
    36a8:	80 91 94 02 	lds	r24, 0x0294
    36ac:	88 23       	and	r24, r24
    36ae:	e1 f3       	breq	.-8      	; 0x36a8 <UART1_Read+0x26>

		data = rx1_buffer[rx1_rd_index];
    36b0:	80 91 95 02 	lds	r24, 0x0295
    36b4:	88 2f       	mov	r24, r24
    36b6:	90 e0       	ldi	r25, 0x00	; 0
    36b8:	8d 5a       	subi	r24, 0xAD	; 173
    36ba:	9d 4f       	sbci	r25, 0xFD	; 253
    36bc:	fc 01       	movw	r30, r24
    36be:	80 81       	ld	r24, Z
    36c0:	89 83       	std	Y+1, r24	; 0x01

		if(++rx1_rd_index == RX1_BUFFER_SIZE)
    36c2:	80 91 95 02 	lds	r24, 0x0295
    36c6:	8f 5f       	subi	r24, 0xFF	; 255
    36c8:	80 93 95 02 	sts	0x0295, r24
    36cc:	80 34       	cpi	r24, 0x40	; 64
    36ce:	11 f4       	brne	.+4      	; 0x36d4 <UART1_Read+0x52>
			rx1_rd_index = 0;
    36d0:	10 92 95 02 	sts	0x0295, r1

		rx1_counter--;
    36d4:	80 91 94 02 	lds	r24, 0x0294
    36d8:	81 50       	subi	r24, 0x01	; 1
    36da:	80 93 94 02 	sts	0x0294, r24
    36de:	13 c0       	rjmp	.+38     	; 0x3706 <UART1_Read+0x84>
	}
	else
	{
		while( !((UCSR1A >> RXC1) & 0x01));
    36e0:	00 00       	nop
    36e2:	88 ec       	ldi	r24, 0xC8	; 200
    36e4:	90 e0       	ldi	r25, 0x00	; 0
    36e6:	fc 01       	movw	r30, r24
    36e8:	80 81       	ld	r24, Z
    36ea:	88 1f       	adc	r24, r24
    36ec:	88 27       	eor	r24, r24
    36ee:	88 1f       	adc	r24, r24
    36f0:	88 2f       	mov	r24, r24
    36f2:	90 e0       	ldi	r25, 0x00	; 0
    36f4:	81 70       	andi	r24, 0x01	; 1
    36f6:	99 27       	eor	r25, r25
    36f8:	89 2b       	or	r24, r25
    36fa:	99 f3       	breq	.-26     	; 0x36e2 <UART1_Read+0x60>
		data = UDR1;
    36fc:	8e ec       	ldi	r24, 0xCE	; 206
    36fe:	90 e0       	ldi	r25, 0x00	; 0
    3700:	fc 01       	movw	r30, r24
    3702:	80 81       	ld	r24, Z
    3704:	89 83       	std	Y+1, r24	; 0x01
	}

	return data;
    3706:	89 81       	ldd	r24, Y+1	; 0x01
}
    3708:	0f 90       	pop	r0
    370a:	df 91       	pop	r29
    370c:	cf 91       	pop	r28
    370e:	08 95       	ret

00003710 <yellowside>:
	{{100,0},LOW_SPEED,FORWARD,NULL}
};


void yellowside(void)
{
    3710:	cf 93       	push	r28
    3712:	df 93       	push	r29
    3714:	cd b7       	in	r28, 0x3d	; 61
    3716:	de b7       	in	r29, 0x3e	; 62
    3718:	2b 97       	sbiw	r28, 0x0b	; 11
    371a:	0f b6       	in	r0, 0x3f	; 63
    371c:	f8 94       	cli
    371e:	de bf       	out	0x3e, r29	; 62
    3720:	0f be       	out	0x3f, r0	; 63
    3722:	cd bf       	out	0x3d, r28	; 61
	struct odometry_position starting_position;
	uint8_t current_position 	= 0;
    3724:	19 82       	std	Y+1, r1	; 0x01
	uint8_t next_position 		= 0;
    3726:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t odometry_status;
	int8_t active_state 		= ROBOT_STATE_TACTIC_SIDE;
    3728:	81 e0       	ldi	r24, 0x01	; 1
    372a:	8b 83       	std	Y+3, r24	; 0x03

	starting_position.x			= 0;
    372c:	1e 82       	std	Y+6, r1	; 0x06
    372e:	1d 82       	std	Y+5, r1	; 0x05
	starting_position.y			= 0;
    3730:	18 86       	std	Y+8, r1	; 0x08
    3732:	1f 82       	std	Y+7, r1	; 0x07
	starting_position.angle 	= 0;
    3734:	1a 86       	std	Y+10, r1	; 0x0a
    3736:	19 86       	std	Y+9, r1	; 0x09

	odometry_set_position(&starting_position);
    3738:	ce 01       	movw	r24, r28
    373a:	05 96       	adiw	r24, 0x05	; 5
    373c:	0e 94 52 13 	call	0x26a4	; 0x26a4 <odometry_set_position>

	while(1)
	{
		switch(active_state)
    3740:	8b 81       	ldd	r24, Y+3	; 0x03
    3742:	08 2e       	mov	r0, r24
    3744:	00 0c       	add	r0, r0
    3746:	99 0b       	sbc	r25, r25
    3748:	81 30       	cpi	r24, 0x01	; 1
    374a:	91 05       	cpc	r25, r1
    374c:	21 f0       	breq	.+8      	; 0x3756 <yellowside+0x46>
    374e:	02 97       	sbiw	r24, 0x02	; 2
    3750:	09 f4       	brne	.+2      	; 0x3754 <yellowside+0x44>
    3752:	3f c0       	rjmp	.+126    	; 0x37d2 <yellowside+0xc2>
    3754:	78 c0       	rjmp	.+240    	; 0x3846 <yellowside+0x136>
		{
			case ROBOT_STATE_TACTIC_SIDE:
				for(current_position = next_position;current_position < TACTIC_SIDE_POSITION_COUNT; current_position++)
    3756:	8a 81       	ldd	r24, Y+2	; 0x02
    3758:	89 83       	std	Y+1, r24	; 0x01
    375a:	38 c0       	rjmp	.+112    	; 0x37cc <yellowside+0xbc>
				{
					odometry_status = odometry_move_to_position(&(yellow_tactic_side_positions[current_position].point), yellow_tactic_side_positions[current_position].speed,
    375c:	40 e0       	ldi	r20, 0x00	; 0
    375e:	50 e0       	ldi	r21, 0x00	; 0
    3760:	89 81       	ldd	r24, Y+1	; 0x01
    3762:	28 2f       	mov	r18, r24
    3764:	30 e0       	ldi	r19, 0x00	; 0
    3766:	6b e0       	ldi	r22, 0x0B	; 11
    3768:	62 9f       	mul	r22, r18
    376a:	c0 01       	movw	r24, r0
    376c:	63 9f       	mul	r22, r19
    376e:	90 0d       	add	r25, r0
    3770:	11 24       	eor	r1, r1
    3772:	81 5d       	subi	r24, 0xD1	; 209
    3774:	9e 4f       	sbci	r25, 0xFE	; 254
    3776:	dc 01       	movw	r26, r24
    3778:	ec 91       	ld	r30, X
    377a:	89 81       	ldd	r24, Y+1	; 0x01
    377c:	28 2f       	mov	r18, r24
    377e:	30 e0       	ldi	r19, 0x00	; 0
    3780:	6b e0       	ldi	r22, 0x0B	; 11
    3782:	62 9f       	mul	r22, r18
    3784:	c0 01       	movw	r24, r0
    3786:	63 9f       	mul	r22, r19
    3788:	90 0d       	add	r25, r0
    378a:	11 24       	eor	r1, r1
    378c:	82 5d       	subi	r24, 0xD2	; 210
    378e:	9e 4f       	sbci	r25, 0xFE	; 254
    3790:	dc 01       	movw	r26, r24
    3792:	7c 91       	ld	r23, X
    3794:	89 81       	ldd	r24, Y+1	; 0x01
    3796:	28 2f       	mov	r18, r24
    3798:	30 e0       	ldi	r19, 0x00	; 0
    379a:	6b e0       	ldi	r22, 0x0B	; 11
    379c:	62 9f       	mul	r22, r18
    379e:	c0 01       	movw	r24, r0
    37a0:	63 9f       	mul	r22, r19
    37a2:	90 0d       	add	r25, r0
    37a4:	11 24       	eor	r1, r1
    37a6:	89 5d       	subi	r24, 0xD9	; 217
    37a8:	9e 4f       	sbci	r25, 0xFE	; 254
    37aa:	9a 01       	movw	r18, r20
    37ac:	4e 2f       	mov	r20, r30
    37ae:	67 2f       	mov	r22, r23
    37b0:	0e 94 94 12 	call	0x2528	; 0x2528 <odometry_move_to_position>
    37b4:	8c 83       	std	Y+4, r24	; 0x04
					yellow_tactic_side_positions[current_position].direction,yellow_tactic_side_positions[current_position].callback);

					if(odometry_status == ODOMETRY_FAIL)
    37b6:	8c 81       	ldd	r24, Y+4	; 0x04
    37b8:	81 30       	cpi	r24, 0x01	; 1
    37ba:	09 f4       	brne	.+2      	; 0x37be <yellowside+0xae>
					{
						break;
    37bc:	0a c0       	rjmp	.+20     	; 0x37d2 <yellowside+0xc2>
					}
					if(current_position == TACTIC_SIDE_POSITION_COUNT - 1){		// when at the last position
    37be:	89 81       	ldd	r24, Y+1	; 0x01
    37c0:	88 23       	and	r24, r24
    37c2:	09 f4       	brne	.+2      	; 0x37c6 <yellowside+0xb6>
						while(1);
    37c4:	ff cf       	rjmp	.-2      	; 0x37c4 <yellowside+0xb4>
	while(1)
	{
		switch(active_state)
		{
			case ROBOT_STATE_TACTIC_SIDE:
				for(current_position = next_position;current_position < TACTIC_SIDE_POSITION_COUNT; current_position++)
    37c6:	89 81       	ldd	r24, Y+1	; 0x01
    37c8:	8f 5f       	subi	r24, 0xFF	; 255
    37ca:	89 83       	std	Y+1, r24	; 0x01
    37cc:	89 81       	ldd	r24, Y+1	; 0x01
    37ce:	88 23       	and	r24, r24
    37d0:	29 f2       	breq	.-118    	; 0x375c <yellowside+0x4c>
						while(1);
					}
				}//end for
				/* no break */
			case ROBOT_STATE_TACTIC_CENTER:
				for(current_position = next_position;current_position < TACTIC_CENTER_POSITION_COUNT; current_position++)
    37d2:	8a 81       	ldd	r24, Y+2	; 0x02
    37d4:	89 83       	std	Y+1, r24	; 0x01
    37d6:	34 c0       	rjmp	.+104    	; 0x3840 <yellowside+0x130>
				{
					odometry_status = odometry_move_to_position(&(yellow_tactic_center_positions[current_position].point), yellow_tactic_center_positions[current_position].speed,
    37d8:	40 e0       	ldi	r20, 0x00	; 0
    37da:	50 e0       	ldi	r21, 0x00	; 0
    37dc:	89 81       	ldd	r24, Y+1	; 0x01
    37de:	28 2f       	mov	r18, r24
    37e0:	30 e0       	ldi	r19, 0x00	; 0
    37e2:	6b e0       	ldi	r22, 0x0B	; 11
    37e4:	62 9f       	mul	r22, r18
    37e6:	c0 01       	movw	r24, r0
    37e8:	63 9f       	mul	r22, r19
    37ea:	90 0d       	add	r25, r0
    37ec:	11 24       	eor	r1, r1
    37ee:	86 5c       	subi	r24, 0xC6	; 198
    37f0:	9e 4f       	sbci	r25, 0xFE	; 254
    37f2:	dc 01       	movw	r26, r24
    37f4:	ec 91       	ld	r30, X
    37f6:	89 81       	ldd	r24, Y+1	; 0x01
    37f8:	28 2f       	mov	r18, r24
    37fa:	30 e0       	ldi	r19, 0x00	; 0
    37fc:	6b e0       	ldi	r22, 0x0B	; 11
    37fe:	62 9f       	mul	r22, r18
    3800:	c0 01       	movw	r24, r0
    3802:	63 9f       	mul	r22, r19
    3804:	90 0d       	add	r25, r0
    3806:	11 24       	eor	r1, r1
    3808:	87 5c       	subi	r24, 0xC7	; 199
    380a:	9e 4f       	sbci	r25, 0xFE	; 254
    380c:	dc 01       	movw	r26, r24
    380e:	7c 91       	ld	r23, X
    3810:	89 81       	ldd	r24, Y+1	; 0x01
    3812:	28 2f       	mov	r18, r24
    3814:	30 e0       	ldi	r19, 0x00	; 0
    3816:	6b e0       	ldi	r22, 0x0B	; 11
    3818:	62 9f       	mul	r22, r18
    381a:	c0 01       	movw	r24, r0
    381c:	63 9f       	mul	r22, r19
    381e:	90 0d       	add	r25, r0
    3820:	11 24       	eor	r1, r1
    3822:	8e 5c       	subi	r24, 0xCE	; 206
    3824:	9e 4f       	sbci	r25, 0xFE	; 254
    3826:	9a 01       	movw	r18, r20
    3828:	4e 2f       	mov	r20, r30
    382a:	67 2f       	mov	r22, r23
    382c:	0e 94 94 12 	call	0x2528	; 0x2528 <odometry_move_to_position>
    3830:	8c 83       	std	Y+4, r24	; 0x04
					yellow_tactic_center_positions[current_position].direction,yellow_tactic_center_positions[current_position].callback);

					if(odometry_status == ODOMETRY_FAIL)
    3832:	8c 81       	ldd	r24, Y+4	; 0x04
    3834:	81 30       	cpi	r24, 0x01	; 1
    3836:	09 f4       	brne	.+2      	; 0x383a <yellowside+0x12a>
					{
						break;
    3838:	06 c0       	rjmp	.+12     	; 0x3846 <yellowside+0x136>
						while(1);
					}
				}//end for
				/* no break */
			case ROBOT_STATE_TACTIC_CENTER:
				for(current_position = next_position;current_position < TACTIC_CENTER_POSITION_COUNT; current_position++)
    383a:	89 81       	ldd	r24, Y+1	; 0x01
    383c:	8f 5f       	subi	r24, 0xFF	; 255
    383e:	89 83       	std	Y+1, r24	; 0x01
    3840:	89 81       	ldd	r24, Y+1	; 0x01
    3842:	88 23       	and	r24, r24
    3844:	49 f2       	breq	.-110    	; 0x37d8 <yellowside+0xc8>
					if(current_position == TACTIC_CENTER_POSITION_COUNT){	// when at the last position

					}
				}//end for
		}//end switch
	}//end while
    3846:	7c cf       	rjmp	.-264    	; 0x3740 <yellowside+0x30>

00003848 <main>:
					||-----w||
					||      ||

*/
int main()
{
    3848:	cf 93       	push	r28
    384a:	df 93       	push	r29
    384c:	cd b7       	in	r28, 0x3d	; 61
    384e:	de b7       	in	r29, 0x3e	; 62
    3850:	2e 97       	sbiw	r28, 0x0e	; 14
    3852:	0f b6       	in	r0, 0x3f	; 63
    3854:	f8 94       	cli
    3856:	de bf       	out	0x3e, r29	; 62
    3858:	0f be       	out	0x3f, r0	; 63
    385a:	cd bf       	out	0x3d, r28	; 61
	system_init();
    385c:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <system_init>
    3860:	80 e0       	ldi	r24, 0x00	; 0
    3862:	90 e0       	ldi	r25, 0x00	; 0
    3864:	a8 ec       	ldi	r26, 0xC8	; 200
    3866:	b2 e4       	ldi	r27, 0x42	; 66
    3868:	89 83       	std	Y+1, r24	; 0x01
    386a:	9a 83       	std	Y+2, r25	; 0x02
    386c:	ab 83       	std	Y+3, r26	; 0x03
    386e:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3870:	20 e0       	ldi	r18, 0x00	; 0
    3872:	30 e4       	ldi	r19, 0x40	; 64
    3874:	4c e1       	ldi	r20, 0x1C	; 28
    3876:	55 e4       	ldi	r21, 0x45	; 69
    3878:	69 81       	ldd	r22, Y+1	; 0x01
    387a:	7a 81       	ldd	r23, Y+2	; 0x02
    387c:	8b 81       	ldd	r24, Y+3	; 0x03
    387e:	9c 81       	ldd	r25, Y+4	; 0x04
    3880:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <__mulsf3>
    3884:	dc 01       	movw	r26, r24
    3886:	cb 01       	movw	r24, r22
    3888:	8d 83       	std	Y+5, r24	; 0x05
    388a:	9e 83       	std	Y+6, r25	; 0x06
    388c:	af 83       	std	Y+7, r26	; 0x07
    388e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    3890:	20 e0       	ldi	r18, 0x00	; 0
    3892:	30 e0       	ldi	r19, 0x00	; 0
    3894:	40 e8       	ldi	r20, 0x80	; 128
    3896:	5f e3       	ldi	r21, 0x3F	; 63
    3898:	6d 81       	ldd	r22, Y+5	; 0x05
    389a:	7e 81       	ldd	r23, Y+6	; 0x06
    389c:	8f 81       	ldd	r24, Y+7	; 0x07
    389e:	98 85       	ldd	r25, Y+8	; 0x08
    38a0:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <__cmpsf2>
    38a4:	88 23       	and	r24, r24
    38a6:	2c f4       	brge	.+10     	; 0x38b2 <main+0x6a>
		__ticks = 1;
    38a8:	81 e0       	ldi	r24, 0x01	; 1
    38aa:	90 e0       	ldi	r25, 0x00	; 0
    38ac:	9a 87       	std	Y+10, r25	; 0x0a
    38ae:	89 87       	std	Y+9, r24	; 0x09
    38b0:	3f c0       	rjmp	.+126    	; 0x3930 <main+0xe8>
	else if (__tmp > 65535)
    38b2:	20 e0       	ldi	r18, 0x00	; 0
    38b4:	3f ef       	ldi	r19, 0xFF	; 255
    38b6:	4f e7       	ldi	r20, 0x7F	; 127
    38b8:	57 e4       	ldi	r21, 0x47	; 71
    38ba:	6d 81       	ldd	r22, Y+5	; 0x05
    38bc:	7e 81       	ldd	r23, Y+6	; 0x06
    38be:	8f 81       	ldd	r24, Y+7	; 0x07
    38c0:	98 85       	ldd	r25, Y+8	; 0x08
    38c2:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <__gesf2>
    38c6:	18 16       	cp	r1, r24
    38c8:	4c f5       	brge	.+82     	; 0x391c <main+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38ca:	20 e0       	ldi	r18, 0x00	; 0
    38cc:	30 e0       	ldi	r19, 0x00	; 0
    38ce:	40 e2       	ldi	r20, 0x20	; 32
    38d0:	51 e4       	ldi	r21, 0x41	; 65
    38d2:	69 81       	ldd	r22, Y+1	; 0x01
    38d4:	7a 81       	ldd	r23, Y+2	; 0x02
    38d6:	8b 81       	ldd	r24, Y+3	; 0x03
    38d8:	9c 81       	ldd	r25, Y+4	; 0x04
    38da:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <__mulsf3>
    38de:	dc 01       	movw	r26, r24
    38e0:	cb 01       	movw	r24, r22
    38e2:	bc 01       	movw	r22, r24
    38e4:	cd 01       	movw	r24, r26
    38e6:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <__fixunssfsi>
    38ea:	dc 01       	movw	r26, r24
    38ec:	cb 01       	movw	r24, r22
    38ee:	9a 87       	std	Y+10, r25	; 0x0a
    38f0:	89 87       	std	Y+9, r24	; 0x09
    38f2:	0f c0       	rjmp	.+30     	; 0x3912 <main+0xca>
    38f4:	8a ef       	ldi	r24, 0xFA	; 250
    38f6:	90 e0       	ldi	r25, 0x00	; 0
    38f8:	9c 87       	std	Y+12, r25	; 0x0c
    38fa:	8b 87       	std	Y+11, r24	; 0x0b
    38fc:	8b 85       	ldd	r24, Y+11	; 0x0b
    38fe:	9c 85       	ldd	r25, Y+12	; 0x0c
    3900:	01 97       	sbiw	r24, 0x01	; 1
    3902:	f1 f7       	brne	.-4      	; 0x3900 <main+0xb8>
    3904:	9c 87       	std	Y+12, r25	; 0x0c
    3906:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3908:	89 85       	ldd	r24, Y+9	; 0x09
    390a:	9a 85       	ldd	r25, Y+10	; 0x0a
    390c:	01 97       	sbiw	r24, 0x01	; 1
    390e:	9a 87       	std	Y+10, r25	; 0x0a
    3910:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3912:	89 85       	ldd	r24, Y+9	; 0x09
    3914:	9a 85       	ldd	r25, Y+10	; 0x0a
    3916:	89 2b       	or	r24, r25
    3918:	69 f7       	brne	.-38     	; 0x38f4 <main+0xac>
    391a:	14 c0       	rjmp	.+40     	; 0x3944 <main+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    391c:	6d 81       	ldd	r22, Y+5	; 0x05
    391e:	7e 81       	ldd	r23, Y+6	; 0x06
    3920:	8f 81       	ldd	r24, Y+7	; 0x07
    3922:	98 85       	ldd	r25, Y+8	; 0x08
    3924:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <__fixunssfsi>
    3928:	dc 01       	movw	r26, r24
    392a:	cb 01       	movw	r24, r22
    392c:	9a 87       	std	Y+10, r25	; 0x0a
    392e:	89 87       	std	Y+9, r24	; 0x09
    3930:	89 85       	ldd	r24, Y+9	; 0x09
    3932:	9a 85       	ldd	r25, Y+10	; 0x0a
    3934:	9e 87       	std	Y+14, r25	; 0x0e
    3936:	8d 87       	std	Y+13, r24	; 0x0d
    3938:	8d 85       	ldd	r24, Y+13	; 0x0d
    393a:	9e 85       	ldd	r25, Y+14	; 0x0e
    393c:	01 97       	sbiw	r24, 0x01	; 1
    393e:	f1 f7       	brne	.-4      	; 0x393c <main+0xf4>
    3940:	9e 87       	std	Y+14, r25	; 0x0e
    3942:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(100);


	yellowside();
    3944:	0e 94 88 1b 	call	0x3710	; 0x3710 <yellowside>
    3948:	80 e0       	ldi	r24, 0x00	; 0
    394a:	90 e0       	ldi	r25, 0x00	; 0

}
    394c:	2e 96       	adiw	r28, 0x0e	; 14
    394e:	0f b6       	in	r0, 0x3f	; 63
    3950:	f8 94       	cli
    3952:	de bf       	out	0x3e, r29	; 62
    3954:	0f be       	out	0x3f, r0	; 63
    3956:	cd bf       	out	0x3d, r28	; 61
    3958:	df 91       	pop	r29
    395a:	cf 91       	pop	r28
    395c:	08 95       	ret

0000395e <__udivmodsi4>:
    395e:	a1 e2       	ldi	r26, 0x21	; 33
    3960:	1a 2e       	mov	r1, r26
    3962:	aa 1b       	sub	r26, r26
    3964:	bb 1b       	sub	r27, r27
    3966:	fd 01       	movw	r30, r26
    3968:	0d c0       	rjmp	.+26     	; 0x3984 <__udivmodsi4_ep>

0000396a <__udivmodsi4_loop>:
    396a:	aa 1f       	adc	r26, r26
    396c:	bb 1f       	adc	r27, r27
    396e:	ee 1f       	adc	r30, r30
    3970:	ff 1f       	adc	r31, r31
    3972:	a2 17       	cp	r26, r18
    3974:	b3 07       	cpc	r27, r19
    3976:	e4 07       	cpc	r30, r20
    3978:	f5 07       	cpc	r31, r21
    397a:	20 f0       	brcs	.+8      	; 0x3984 <__udivmodsi4_ep>
    397c:	a2 1b       	sub	r26, r18
    397e:	b3 0b       	sbc	r27, r19
    3980:	e4 0b       	sbc	r30, r20
    3982:	f5 0b       	sbc	r31, r21

00003984 <__udivmodsi4_ep>:
    3984:	66 1f       	adc	r22, r22
    3986:	77 1f       	adc	r23, r23
    3988:	88 1f       	adc	r24, r24
    398a:	99 1f       	adc	r25, r25
    398c:	1a 94       	dec	r1
    398e:	69 f7       	brne	.-38     	; 0x396a <__udivmodsi4_loop>
    3990:	60 95       	com	r22
    3992:	70 95       	com	r23
    3994:	80 95       	com	r24
    3996:	90 95       	com	r25
    3998:	9b 01       	movw	r18, r22
    399a:	ac 01       	movw	r20, r24
    399c:	bd 01       	movw	r22, r26
    399e:	cf 01       	movw	r24, r30
    39a0:	08 95       	ret

000039a2 <__muluhisi3>:
    39a2:	0e 94 dc 1c 	call	0x39b8	; 0x39b8 <__umulhisi3>
    39a6:	a5 9f       	mul	r26, r21
    39a8:	90 0d       	add	r25, r0
    39aa:	b4 9f       	mul	r27, r20
    39ac:	90 0d       	add	r25, r0
    39ae:	a4 9f       	mul	r26, r20
    39b0:	80 0d       	add	r24, r0
    39b2:	91 1d       	adc	r25, r1
    39b4:	11 24       	eor	r1, r1
    39b6:	08 95       	ret

000039b8 <__umulhisi3>:
    39b8:	a2 9f       	mul	r26, r18
    39ba:	b0 01       	movw	r22, r0
    39bc:	b3 9f       	mul	r27, r19
    39be:	c0 01       	movw	r24, r0
    39c0:	a3 9f       	mul	r26, r19
    39c2:	70 0d       	add	r23, r0
    39c4:	81 1d       	adc	r24, r1
    39c6:	11 24       	eor	r1, r1
    39c8:	91 1d       	adc	r25, r1
    39ca:	b2 9f       	mul	r27, r18
    39cc:	70 0d       	add	r23, r0
    39ce:	81 1d       	adc	r24, r1
    39d0:	11 24       	eor	r1, r1
    39d2:	91 1d       	adc	r25, r1
    39d4:	08 95       	ret

000039d6 <__subsf3>:
    39d6:	50 58       	subi	r21, 0x80	; 128

000039d8 <__addsf3>:
    39d8:	bb 27       	eor	r27, r27
    39da:	aa 27       	eor	r26, r26
    39dc:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <__addsf3x>
    39e0:	0c 94 7d 1e 	jmp	0x3cfa	; 0x3cfa <__fp_round>
    39e4:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <__fp_pscA>
    39e8:	38 f0       	brcs	.+14     	; 0x39f8 <__addsf3+0x20>
    39ea:	0e 94 76 1e 	call	0x3cec	; 0x3cec <__fp_pscB>
    39ee:	20 f0       	brcs	.+8      	; 0x39f8 <__addsf3+0x20>
    39f0:	39 f4       	brne	.+14     	; 0x3a00 <__addsf3+0x28>
    39f2:	9f 3f       	cpi	r25, 0xFF	; 255
    39f4:	19 f4       	brne	.+6      	; 0x39fc <__addsf3+0x24>
    39f6:	26 f4       	brtc	.+8      	; 0x3a00 <__addsf3+0x28>
    39f8:	0c 94 6c 1e 	jmp	0x3cd8	; 0x3cd8 <__fp_nan>
    39fc:	0e f4       	brtc	.+2      	; 0x3a00 <__addsf3+0x28>
    39fe:	e0 95       	com	r30
    3a00:	e7 fb       	bst	r30, 7
    3a02:	0c 94 66 1e 	jmp	0x3ccc	; 0x3ccc <__fp_inf>

00003a06 <__addsf3x>:
    3a06:	e9 2f       	mov	r30, r25
    3a08:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <__fp_split3>
    3a0c:	58 f3       	brcs	.-42     	; 0x39e4 <__addsf3+0xc>
    3a0e:	ba 17       	cp	r27, r26
    3a10:	62 07       	cpc	r22, r18
    3a12:	73 07       	cpc	r23, r19
    3a14:	84 07       	cpc	r24, r20
    3a16:	95 07       	cpc	r25, r21
    3a18:	20 f0       	brcs	.+8      	; 0x3a22 <__addsf3x+0x1c>
    3a1a:	79 f4       	brne	.+30     	; 0x3a3a <__addsf3x+0x34>
    3a1c:	a6 f5       	brtc	.+104    	; 0x3a86 <__addsf3x+0x80>
    3a1e:	0c 94 b0 1e 	jmp	0x3d60	; 0x3d60 <__fp_zero>
    3a22:	0e f4       	brtc	.+2      	; 0x3a26 <__addsf3x+0x20>
    3a24:	e0 95       	com	r30
    3a26:	0b 2e       	mov	r0, r27
    3a28:	ba 2f       	mov	r27, r26
    3a2a:	a0 2d       	mov	r26, r0
    3a2c:	0b 01       	movw	r0, r22
    3a2e:	b9 01       	movw	r22, r18
    3a30:	90 01       	movw	r18, r0
    3a32:	0c 01       	movw	r0, r24
    3a34:	ca 01       	movw	r24, r20
    3a36:	a0 01       	movw	r20, r0
    3a38:	11 24       	eor	r1, r1
    3a3a:	ff 27       	eor	r31, r31
    3a3c:	59 1b       	sub	r21, r25
    3a3e:	99 f0       	breq	.+38     	; 0x3a66 <__addsf3x+0x60>
    3a40:	59 3f       	cpi	r21, 0xF9	; 249
    3a42:	50 f4       	brcc	.+20     	; 0x3a58 <__addsf3x+0x52>
    3a44:	50 3e       	cpi	r21, 0xE0	; 224
    3a46:	68 f1       	brcs	.+90     	; 0x3aa2 <__addsf3x+0x9c>
    3a48:	1a 16       	cp	r1, r26
    3a4a:	f0 40       	sbci	r31, 0x00	; 0
    3a4c:	a2 2f       	mov	r26, r18
    3a4e:	23 2f       	mov	r18, r19
    3a50:	34 2f       	mov	r19, r20
    3a52:	44 27       	eor	r20, r20
    3a54:	58 5f       	subi	r21, 0xF8	; 248
    3a56:	f3 cf       	rjmp	.-26     	; 0x3a3e <__addsf3x+0x38>
    3a58:	46 95       	lsr	r20
    3a5a:	37 95       	ror	r19
    3a5c:	27 95       	ror	r18
    3a5e:	a7 95       	ror	r26
    3a60:	f0 40       	sbci	r31, 0x00	; 0
    3a62:	53 95       	inc	r21
    3a64:	c9 f7       	brne	.-14     	; 0x3a58 <__addsf3x+0x52>
    3a66:	7e f4       	brtc	.+30     	; 0x3a86 <__addsf3x+0x80>
    3a68:	1f 16       	cp	r1, r31
    3a6a:	ba 0b       	sbc	r27, r26
    3a6c:	62 0b       	sbc	r22, r18
    3a6e:	73 0b       	sbc	r23, r19
    3a70:	84 0b       	sbc	r24, r20
    3a72:	ba f0       	brmi	.+46     	; 0x3aa2 <__addsf3x+0x9c>
    3a74:	91 50       	subi	r25, 0x01	; 1
    3a76:	a1 f0       	breq	.+40     	; 0x3aa0 <__addsf3x+0x9a>
    3a78:	ff 0f       	add	r31, r31
    3a7a:	bb 1f       	adc	r27, r27
    3a7c:	66 1f       	adc	r22, r22
    3a7e:	77 1f       	adc	r23, r23
    3a80:	88 1f       	adc	r24, r24
    3a82:	c2 f7       	brpl	.-16     	; 0x3a74 <__addsf3x+0x6e>
    3a84:	0e c0       	rjmp	.+28     	; 0x3aa2 <__addsf3x+0x9c>
    3a86:	ba 0f       	add	r27, r26
    3a88:	62 1f       	adc	r22, r18
    3a8a:	73 1f       	adc	r23, r19
    3a8c:	84 1f       	adc	r24, r20
    3a8e:	48 f4       	brcc	.+18     	; 0x3aa2 <__addsf3x+0x9c>
    3a90:	87 95       	ror	r24
    3a92:	77 95       	ror	r23
    3a94:	67 95       	ror	r22
    3a96:	b7 95       	ror	r27
    3a98:	f7 95       	ror	r31
    3a9a:	9e 3f       	cpi	r25, 0xFE	; 254
    3a9c:	08 f0       	brcs	.+2      	; 0x3aa0 <__addsf3x+0x9a>
    3a9e:	b0 cf       	rjmp	.-160    	; 0x3a00 <__addsf3+0x28>
    3aa0:	93 95       	inc	r25
    3aa2:	88 0f       	add	r24, r24
    3aa4:	08 f0       	brcs	.+2      	; 0x3aa8 <__addsf3x+0xa2>
    3aa6:	99 27       	eor	r25, r25
    3aa8:	ee 0f       	add	r30, r30
    3aaa:	97 95       	ror	r25
    3aac:	87 95       	ror	r24
    3aae:	08 95       	ret

00003ab0 <__cmpsf2>:
    3ab0:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <__fp_cmp>
    3ab4:	08 f4       	brcc	.+2      	; 0x3ab8 <__cmpsf2+0x8>
    3ab6:	81 e0       	ldi	r24, 0x01	; 1
    3ab8:	08 95       	ret

00003aba <__divsf3>:
    3aba:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <__divsf3x>
    3abe:	0c 94 7d 1e 	jmp	0x3cfa	; 0x3cfa <__fp_round>
    3ac2:	0e 94 76 1e 	call	0x3cec	; 0x3cec <__fp_pscB>
    3ac6:	58 f0       	brcs	.+22     	; 0x3ade <__divsf3+0x24>
    3ac8:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <__fp_pscA>
    3acc:	40 f0       	brcs	.+16     	; 0x3ade <__divsf3+0x24>
    3ace:	29 f4       	brne	.+10     	; 0x3ada <__divsf3+0x20>
    3ad0:	5f 3f       	cpi	r21, 0xFF	; 255
    3ad2:	29 f0       	breq	.+10     	; 0x3ade <__divsf3+0x24>
    3ad4:	0c 94 66 1e 	jmp	0x3ccc	; 0x3ccc <__fp_inf>
    3ad8:	51 11       	cpse	r21, r1
    3ada:	0c 94 b1 1e 	jmp	0x3d62	; 0x3d62 <__fp_szero>
    3ade:	0c 94 6c 1e 	jmp	0x3cd8	; 0x3cd8 <__fp_nan>

00003ae2 <__divsf3x>:
    3ae2:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <__fp_split3>
    3ae6:	68 f3       	brcs	.-38     	; 0x3ac2 <__divsf3+0x8>

00003ae8 <__divsf3_pse>:
    3ae8:	99 23       	and	r25, r25
    3aea:	b1 f3       	breq	.-20     	; 0x3ad8 <__divsf3+0x1e>
    3aec:	55 23       	and	r21, r21
    3aee:	91 f3       	breq	.-28     	; 0x3ad4 <__divsf3+0x1a>
    3af0:	95 1b       	sub	r25, r21
    3af2:	55 0b       	sbc	r21, r21
    3af4:	bb 27       	eor	r27, r27
    3af6:	aa 27       	eor	r26, r26
    3af8:	62 17       	cp	r22, r18
    3afa:	73 07       	cpc	r23, r19
    3afc:	84 07       	cpc	r24, r20
    3afe:	38 f0       	brcs	.+14     	; 0x3b0e <__divsf3_pse+0x26>
    3b00:	9f 5f       	subi	r25, 0xFF	; 255
    3b02:	5f 4f       	sbci	r21, 0xFF	; 255
    3b04:	22 0f       	add	r18, r18
    3b06:	33 1f       	adc	r19, r19
    3b08:	44 1f       	adc	r20, r20
    3b0a:	aa 1f       	adc	r26, r26
    3b0c:	a9 f3       	breq	.-22     	; 0x3af8 <__divsf3_pse+0x10>
    3b0e:	35 d0       	rcall	.+106    	; 0x3b7a <__divsf3_pse+0x92>
    3b10:	0e 2e       	mov	r0, r30
    3b12:	3a f0       	brmi	.+14     	; 0x3b22 <__divsf3_pse+0x3a>
    3b14:	e0 e8       	ldi	r30, 0x80	; 128
    3b16:	32 d0       	rcall	.+100    	; 0x3b7c <__divsf3_pse+0x94>
    3b18:	91 50       	subi	r25, 0x01	; 1
    3b1a:	50 40       	sbci	r21, 0x00	; 0
    3b1c:	e6 95       	lsr	r30
    3b1e:	00 1c       	adc	r0, r0
    3b20:	ca f7       	brpl	.-14     	; 0x3b14 <__divsf3_pse+0x2c>
    3b22:	2b d0       	rcall	.+86     	; 0x3b7a <__divsf3_pse+0x92>
    3b24:	fe 2f       	mov	r31, r30
    3b26:	29 d0       	rcall	.+82     	; 0x3b7a <__divsf3_pse+0x92>
    3b28:	66 0f       	add	r22, r22
    3b2a:	77 1f       	adc	r23, r23
    3b2c:	88 1f       	adc	r24, r24
    3b2e:	bb 1f       	adc	r27, r27
    3b30:	26 17       	cp	r18, r22
    3b32:	37 07       	cpc	r19, r23
    3b34:	48 07       	cpc	r20, r24
    3b36:	ab 07       	cpc	r26, r27
    3b38:	b0 e8       	ldi	r27, 0x80	; 128
    3b3a:	09 f0       	breq	.+2      	; 0x3b3e <__divsf3_pse+0x56>
    3b3c:	bb 0b       	sbc	r27, r27
    3b3e:	80 2d       	mov	r24, r0
    3b40:	bf 01       	movw	r22, r30
    3b42:	ff 27       	eor	r31, r31
    3b44:	93 58       	subi	r25, 0x83	; 131
    3b46:	5f 4f       	sbci	r21, 0xFF	; 255
    3b48:	3a f0       	brmi	.+14     	; 0x3b58 <__divsf3_pse+0x70>
    3b4a:	9e 3f       	cpi	r25, 0xFE	; 254
    3b4c:	51 05       	cpc	r21, r1
    3b4e:	78 f0       	brcs	.+30     	; 0x3b6e <__divsf3_pse+0x86>
    3b50:	0c 94 66 1e 	jmp	0x3ccc	; 0x3ccc <__fp_inf>
    3b54:	0c 94 b1 1e 	jmp	0x3d62	; 0x3d62 <__fp_szero>
    3b58:	5f 3f       	cpi	r21, 0xFF	; 255
    3b5a:	e4 f3       	brlt	.-8      	; 0x3b54 <__divsf3_pse+0x6c>
    3b5c:	98 3e       	cpi	r25, 0xE8	; 232
    3b5e:	d4 f3       	brlt	.-12     	; 0x3b54 <__divsf3_pse+0x6c>
    3b60:	86 95       	lsr	r24
    3b62:	77 95       	ror	r23
    3b64:	67 95       	ror	r22
    3b66:	b7 95       	ror	r27
    3b68:	f7 95       	ror	r31
    3b6a:	9f 5f       	subi	r25, 0xFF	; 255
    3b6c:	c9 f7       	brne	.-14     	; 0x3b60 <__divsf3_pse+0x78>
    3b6e:	88 0f       	add	r24, r24
    3b70:	91 1d       	adc	r25, r1
    3b72:	96 95       	lsr	r25
    3b74:	87 95       	ror	r24
    3b76:	97 f9       	bld	r25, 7
    3b78:	08 95       	ret
    3b7a:	e1 e0       	ldi	r30, 0x01	; 1
    3b7c:	66 0f       	add	r22, r22
    3b7e:	77 1f       	adc	r23, r23
    3b80:	88 1f       	adc	r24, r24
    3b82:	bb 1f       	adc	r27, r27
    3b84:	62 17       	cp	r22, r18
    3b86:	73 07       	cpc	r23, r19
    3b88:	84 07       	cpc	r24, r20
    3b8a:	ba 07       	cpc	r27, r26
    3b8c:	20 f0       	brcs	.+8      	; 0x3b96 <__divsf3_pse+0xae>
    3b8e:	62 1b       	sub	r22, r18
    3b90:	73 0b       	sbc	r23, r19
    3b92:	84 0b       	sbc	r24, r20
    3b94:	ba 0b       	sbc	r27, r26
    3b96:	ee 1f       	adc	r30, r30
    3b98:	88 f7       	brcc	.-30     	; 0x3b7c <__divsf3_pse+0x94>
    3b9a:	e0 95       	com	r30
    3b9c:	08 95       	ret

00003b9e <__fixsfsi>:
    3b9e:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <__fixunssfsi>
    3ba2:	68 94       	set
    3ba4:	b1 11       	cpse	r27, r1
    3ba6:	0c 94 b1 1e 	jmp	0x3d62	; 0x3d62 <__fp_szero>
    3baa:	08 95       	ret

00003bac <__fixunssfsi>:
    3bac:	0e 94 96 1e 	call	0x3d2c	; 0x3d2c <__fp_splitA>
    3bb0:	88 f0       	brcs	.+34     	; 0x3bd4 <__fixunssfsi+0x28>
    3bb2:	9f 57       	subi	r25, 0x7F	; 127
    3bb4:	98 f0       	brcs	.+38     	; 0x3bdc <__fixunssfsi+0x30>
    3bb6:	b9 2f       	mov	r27, r25
    3bb8:	99 27       	eor	r25, r25
    3bba:	b7 51       	subi	r27, 0x17	; 23
    3bbc:	b0 f0       	brcs	.+44     	; 0x3bea <__fixunssfsi+0x3e>
    3bbe:	e1 f0       	breq	.+56     	; 0x3bf8 <__fixunssfsi+0x4c>
    3bc0:	66 0f       	add	r22, r22
    3bc2:	77 1f       	adc	r23, r23
    3bc4:	88 1f       	adc	r24, r24
    3bc6:	99 1f       	adc	r25, r25
    3bc8:	1a f0       	brmi	.+6      	; 0x3bd0 <__fixunssfsi+0x24>
    3bca:	ba 95       	dec	r27
    3bcc:	c9 f7       	brne	.-14     	; 0x3bc0 <__fixunssfsi+0x14>
    3bce:	14 c0       	rjmp	.+40     	; 0x3bf8 <__fixunssfsi+0x4c>
    3bd0:	b1 30       	cpi	r27, 0x01	; 1
    3bd2:	91 f0       	breq	.+36     	; 0x3bf8 <__fixunssfsi+0x4c>
    3bd4:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <__fp_zero>
    3bd8:	b1 e0       	ldi	r27, 0x01	; 1
    3bda:	08 95       	ret
    3bdc:	0c 94 b0 1e 	jmp	0x3d60	; 0x3d60 <__fp_zero>
    3be0:	67 2f       	mov	r22, r23
    3be2:	78 2f       	mov	r23, r24
    3be4:	88 27       	eor	r24, r24
    3be6:	b8 5f       	subi	r27, 0xF8	; 248
    3be8:	39 f0       	breq	.+14     	; 0x3bf8 <__fixunssfsi+0x4c>
    3bea:	b9 3f       	cpi	r27, 0xF9	; 249
    3bec:	cc f3       	brlt	.-14     	; 0x3be0 <__fixunssfsi+0x34>
    3bee:	86 95       	lsr	r24
    3bf0:	77 95       	ror	r23
    3bf2:	67 95       	ror	r22
    3bf4:	b3 95       	inc	r27
    3bf6:	d9 f7       	brne	.-10     	; 0x3bee <__fixunssfsi+0x42>
    3bf8:	3e f4       	brtc	.+14     	; 0x3c08 <__fixunssfsi+0x5c>
    3bfa:	90 95       	com	r25
    3bfc:	80 95       	com	r24
    3bfe:	70 95       	com	r23
    3c00:	61 95       	neg	r22
    3c02:	7f 4f       	sbci	r23, 0xFF	; 255
    3c04:	8f 4f       	sbci	r24, 0xFF	; 255
    3c06:	9f 4f       	sbci	r25, 0xFF	; 255
    3c08:	08 95       	ret

00003c0a <__floatunsisf>:
    3c0a:	e8 94       	clt
    3c0c:	09 c0       	rjmp	.+18     	; 0x3c20 <__floatsisf+0x12>

00003c0e <__floatsisf>:
    3c0e:	97 fb       	bst	r25, 7
    3c10:	3e f4       	brtc	.+14     	; 0x3c20 <__floatsisf+0x12>
    3c12:	90 95       	com	r25
    3c14:	80 95       	com	r24
    3c16:	70 95       	com	r23
    3c18:	61 95       	neg	r22
    3c1a:	7f 4f       	sbci	r23, 0xFF	; 255
    3c1c:	8f 4f       	sbci	r24, 0xFF	; 255
    3c1e:	9f 4f       	sbci	r25, 0xFF	; 255
    3c20:	99 23       	and	r25, r25
    3c22:	a9 f0       	breq	.+42     	; 0x3c4e <__floatsisf+0x40>
    3c24:	f9 2f       	mov	r31, r25
    3c26:	96 e9       	ldi	r25, 0x96	; 150
    3c28:	bb 27       	eor	r27, r27
    3c2a:	93 95       	inc	r25
    3c2c:	f6 95       	lsr	r31
    3c2e:	87 95       	ror	r24
    3c30:	77 95       	ror	r23
    3c32:	67 95       	ror	r22
    3c34:	b7 95       	ror	r27
    3c36:	f1 11       	cpse	r31, r1
    3c38:	f8 cf       	rjmp	.-16     	; 0x3c2a <__floatsisf+0x1c>
    3c3a:	fa f4       	brpl	.+62     	; 0x3c7a <__floatsisf+0x6c>
    3c3c:	bb 0f       	add	r27, r27
    3c3e:	11 f4       	brne	.+4      	; 0x3c44 <__floatsisf+0x36>
    3c40:	60 ff       	sbrs	r22, 0
    3c42:	1b c0       	rjmp	.+54     	; 0x3c7a <__floatsisf+0x6c>
    3c44:	6f 5f       	subi	r22, 0xFF	; 255
    3c46:	7f 4f       	sbci	r23, 0xFF	; 255
    3c48:	8f 4f       	sbci	r24, 0xFF	; 255
    3c4a:	9f 4f       	sbci	r25, 0xFF	; 255
    3c4c:	16 c0       	rjmp	.+44     	; 0x3c7a <__floatsisf+0x6c>
    3c4e:	88 23       	and	r24, r24
    3c50:	11 f0       	breq	.+4      	; 0x3c56 <__floatsisf+0x48>
    3c52:	96 e9       	ldi	r25, 0x96	; 150
    3c54:	11 c0       	rjmp	.+34     	; 0x3c78 <__floatsisf+0x6a>
    3c56:	77 23       	and	r23, r23
    3c58:	21 f0       	breq	.+8      	; 0x3c62 <__floatsisf+0x54>
    3c5a:	9e e8       	ldi	r25, 0x8E	; 142
    3c5c:	87 2f       	mov	r24, r23
    3c5e:	76 2f       	mov	r23, r22
    3c60:	05 c0       	rjmp	.+10     	; 0x3c6c <__floatsisf+0x5e>
    3c62:	66 23       	and	r22, r22
    3c64:	71 f0       	breq	.+28     	; 0x3c82 <__floatsisf+0x74>
    3c66:	96 e8       	ldi	r25, 0x86	; 134
    3c68:	86 2f       	mov	r24, r22
    3c6a:	70 e0       	ldi	r23, 0x00	; 0
    3c6c:	60 e0       	ldi	r22, 0x00	; 0
    3c6e:	2a f0       	brmi	.+10     	; 0x3c7a <__floatsisf+0x6c>
    3c70:	9a 95       	dec	r25
    3c72:	66 0f       	add	r22, r22
    3c74:	77 1f       	adc	r23, r23
    3c76:	88 1f       	adc	r24, r24
    3c78:	da f7       	brpl	.-10     	; 0x3c70 <__floatsisf+0x62>
    3c7a:	88 0f       	add	r24, r24
    3c7c:	96 95       	lsr	r25
    3c7e:	87 95       	ror	r24
    3c80:	97 f9       	bld	r25, 7
    3c82:	08 95       	ret

00003c84 <__fp_cmp>:
    3c84:	99 0f       	add	r25, r25
    3c86:	00 08       	sbc	r0, r0
    3c88:	55 0f       	add	r21, r21
    3c8a:	aa 0b       	sbc	r26, r26
    3c8c:	e0 e8       	ldi	r30, 0x80	; 128
    3c8e:	fe ef       	ldi	r31, 0xFE	; 254
    3c90:	16 16       	cp	r1, r22
    3c92:	17 06       	cpc	r1, r23
    3c94:	e8 07       	cpc	r30, r24
    3c96:	f9 07       	cpc	r31, r25
    3c98:	c0 f0       	brcs	.+48     	; 0x3cca <__fp_cmp+0x46>
    3c9a:	12 16       	cp	r1, r18
    3c9c:	13 06       	cpc	r1, r19
    3c9e:	e4 07       	cpc	r30, r20
    3ca0:	f5 07       	cpc	r31, r21
    3ca2:	98 f0       	brcs	.+38     	; 0x3cca <__fp_cmp+0x46>
    3ca4:	62 1b       	sub	r22, r18
    3ca6:	73 0b       	sbc	r23, r19
    3ca8:	84 0b       	sbc	r24, r20
    3caa:	95 0b       	sbc	r25, r21
    3cac:	39 f4       	brne	.+14     	; 0x3cbc <__fp_cmp+0x38>
    3cae:	0a 26       	eor	r0, r26
    3cb0:	61 f0       	breq	.+24     	; 0x3cca <__fp_cmp+0x46>
    3cb2:	23 2b       	or	r18, r19
    3cb4:	24 2b       	or	r18, r20
    3cb6:	25 2b       	or	r18, r21
    3cb8:	21 f4       	brne	.+8      	; 0x3cc2 <__fp_cmp+0x3e>
    3cba:	08 95       	ret
    3cbc:	0a 26       	eor	r0, r26
    3cbe:	09 f4       	brne	.+2      	; 0x3cc2 <__fp_cmp+0x3e>
    3cc0:	a1 40       	sbci	r26, 0x01	; 1
    3cc2:	a6 95       	lsr	r26
    3cc4:	8f ef       	ldi	r24, 0xFF	; 255
    3cc6:	81 1d       	adc	r24, r1
    3cc8:	81 1d       	adc	r24, r1
    3cca:	08 95       	ret

00003ccc <__fp_inf>:
    3ccc:	97 f9       	bld	r25, 7
    3cce:	9f 67       	ori	r25, 0x7F	; 127
    3cd0:	80 e8       	ldi	r24, 0x80	; 128
    3cd2:	70 e0       	ldi	r23, 0x00	; 0
    3cd4:	60 e0       	ldi	r22, 0x00	; 0
    3cd6:	08 95       	ret

00003cd8 <__fp_nan>:
    3cd8:	9f ef       	ldi	r25, 0xFF	; 255
    3cda:	80 ec       	ldi	r24, 0xC0	; 192
    3cdc:	08 95       	ret

00003cde <__fp_pscA>:
    3cde:	00 24       	eor	r0, r0
    3ce0:	0a 94       	dec	r0
    3ce2:	16 16       	cp	r1, r22
    3ce4:	17 06       	cpc	r1, r23
    3ce6:	18 06       	cpc	r1, r24
    3ce8:	09 06       	cpc	r0, r25
    3cea:	08 95       	ret

00003cec <__fp_pscB>:
    3cec:	00 24       	eor	r0, r0
    3cee:	0a 94       	dec	r0
    3cf0:	12 16       	cp	r1, r18
    3cf2:	13 06       	cpc	r1, r19
    3cf4:	14 06       	cpc	r1, r20
    3cf6:	05 06       	cpc	r0, r21
    3cf8:	08 95       	ret

00003cfa <__fp_round>:
    3cfa:	09 2e       	mov	r0, r25
    3cfc:	03 94       	inc	r0
    3cfe:	00 0c       	add	r0, r0
    3d00:	11 f4       	brne	.+4      	; 0x3d06 <__fp_round+0xc>
    3d02:	88 23       	and	r24, r24
    3d04:	52 f0       	brmi	.+20     	; 0x3d1a <__fp_round+0x20>
    3d06:	bb 0f       	add	r27, r27
    3d08:	40 f4       	brcc	.+16     	; 0x3d1a <__fp_round+0x20>
    3d0a:	bf 2b       	or	r27, r31
    3d0c:	11 f4       	brne	.+4      	; 0x3d12 <__fp_round+0x18>
    3d0e:	60 ff       	sbrs	r22, 0
    3d10:	04 c0       	rjmp	.+8      	; 0x3d1a <__fp_round+0x20>
    3d12:	6f 5f       	subi	r22, 0xFF	; 255
    3d14:	7f 4f       	sbci	r23, 0xFF	; 255
    3d16:	8f 4f       	sbci	r24, 0xFF	; 255
    3d18:	9f 4f       	sbci	r25, 0xFF	; 255
    3d1a:	08 95       	ret

00003d1c <__fp_split3>:
    3d1c:	57 fd       	sbrc	r21, 7
    3d1e:	90 58       	subi	r25, 0x80	; 128
    3d20:	44 0f       	add	r20, r20
    3d22:	55 1f       	adc	r21, r21
    3d24:	59 f0       	breq	.+22     	; 0x3d3c <__fp_splitA+0x10>
    3d26:	5f 3f       	cpi	r21, 0xFF	; 255
    3d28:	71 f0       	breq	.+28     	; 0x3d46 <__fp_splitA+0x1a>
    3d2a:	47 95       	ror	r20

00003d2c <__fp_splitA>:
    3d2c:	88 0f       	add	r24, r24
    3d2e:	97 fb       	bst	r25, 7
    3d30:	99 1f       	adc	r25, r25
    3d32:	61 f0       	breq	.+24     	; 0x3d4c <__fp_splitA+0x20>
    3d34:	9f 3f       	cpi	r25, 0xFF	; 255
    3d36:	79 f0       	breq	.+30     	; 0x3d56 <__fp_splitA+0x2a>
    3d38:	87 95       	ror	r24
    3d3a:	08 95       	ret
    3d3c:	12 16       	cp	r1, r18
    3d3e:	13 06       	cpc	r1, r19
    3d40:	14 06       	cpc	r1, r20
    3d42:	55 1f       	adc	r21, r21
    3d44:	f2 cf       	rjmp	.-28     	; 0x3d2a <__fp_split3+0xe>
    3d46:	46 95       	lsr	r20
    3d48:	f1 df       	rcall	.-30     	; 0x3d2c <__fp_splitA>
    3d4a:	08 c0       	rjmp	.+16     	; 0x3d5c <__fp_splitA+0x30>
    3d4c:	16 16       	cp	r1, r22
    3d4e:	17 06       	cpc	r1, r23
    3d50:	18 06       	cpc	r1, r24
    3d52:	99 1f       	adc	r25, r25
    3d54:	f1 cf       	rjmp	.-30     	; 0x3d38 <__fp_splitA+0xc>
    3d56:	86 95       	lsr	r24
    3d58:	71 05       	cpc	r23, r1
    3d5a:	61 05       	cpc	r22, r1
    3d5c:	08 94       	sec
    3d5e:	08 95       	ret

00003d60 <__fp_zero>:
    3d60:	e8 94       	clt

00003d62 <__fp_szero>:
    3d62:	bb 27       	eor	r27, r27
    3d64:	66 27       	eor	r22, r22
    3d66:	77 27       	eor	r23, r23
    3d68:	cb 01       	movw	r24, r22
    3d6a:	97 f9       	bld	r25, 7
    3d6c:	08 95       	ret

00003d6e <__gesf2>:
    3d6e:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <__fp_cmp>
    3d72:	08 f4       	brcc	.+2      	; 0x3d76 <__gesf2+0x8>
    3d74:	8f ef       	ldi	r24, 0xFF	; 255
    3d76:	08 95       	ret

00003d78 <__mulsf3>:
    3d78:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__mulsf3x>
    3d7c:	0c 94 7d 1e 	jmp	0x3cfa	; 0x3cfa <__fp_round>
    3d80:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <__fp_pscA>
    3d84:	38 f0       	brcs	.+14     	; 0x3d94 <__mulsf3+0x1c>
    3d86:	0e 94 76 1e 	call	0x3cec	; 0x3cec <__fp_pscB>
    3d8a:	20 f0       	brcs	.+8      	; 0x3d94 <__mulsf3+0x1c>
    3d8c:	95 23       	and	r25, r21
    3d8e:	11 f0       	breq	.+4      	; 0x3d94 <__mulsf3+0x1c>
    3d90:	0c 94 66 1e 	jmp	0x3ccc	; 0x3ccc <__fp_inf>
    3d94:	0c 94 6c 1e 	jmp	0x3cd8	; 0x3cd8 <__fp_nan>
    3d98:	11 24       	eor	r1, r1
    3d9a:	0c 94 b1 1e 	jmp	0x3d62	; 0x3d62 <__fp_szero>

00003d9e <__mulsf3x>:
    3d9e:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <__fp_split3>
    3da2:	70 f3       	brcs	.-36     	; 0x3d80 <__mulsf3+0x8>

00003da4 <__mulsf3_pse>:
    3da4:	95 9f       	mul	r25, r21
    3da6:	c1 f3       	breq	.-16     	; 0x3d98 <__mulsf3+0x20>
    3da8:	95 0f       	add	r25, r21
    3daa:	50 e0       	ldi	r21, 0x00	; 0
    3dac:	55 1f       	adc	r21, r21
    3dae:	62 9f       	mul	r22, r18
    3db0:	f0 01       	movw	r30, r0
    3db2:	72 9f       	mul	r23, r18
    3db4:	bb 27       	eor	r27, r27
    3db6:	f0 0d       	add	r31, r0
    3db8:	b1 1d       	adc	r27, r1
    3dba:	63 9f       	mul	r22, r19
    3dbc:	aa 27       	eor	r26, r26
    3dbe:	f0 0d       	add	r31, r0
    3dc0:	b1 1d       	adc	r27, r1
    3dc2:	aa 1f       	adc	r26, r26
    3dc4:	64 9f       	mul	r22, r20
    3dc6:	66 27       	eor	r22, r22
    3dc8:	b0 0d       	add	r27, r0
    3dca:	a1 1d       	adc	r26, r1
    3dcc:	66 1f       	adc	r22, r22
    3dce:	82 9f       	mul	r24, r18
    3dd0:	22 27       	eor	r18, r18
    3dd2:	b0 0d       	add	r27, r0
    3dd4:	a1 1d       	adc	r26, r1
    3dd6:	62 1f       	adc	r22, r18
    3dd8:	73 9f       	mul	r23, r19
    3dda:	b0 0d       	add	r27, r0
    3ddc:	a1 1d       	adc	r26, r1
    3dde:	62 1f       	adc	r22, r18
    3de0:	83 9f       	mul	r24, r19
    3de2:	a0 0d       	add	r26, r0
    3de4:	61 1d       	adc	r22, r1
    3de6:	22 1f       	adc	r18, r18
    3de8:	74 9f       	mul	r23, r20
    3dea:	33 27       	eor	r19, r19
    3dec:	a0 0d       	add	r26, r0
    3dee:	61 1d       	adc	r22, r1
    3df0:	23 1f       	adc	r18, r19
    3df2:	84 9f       	mul	r24, r20
    3df4:	60 0d       	add	r22, r0
    3df6:	21 1d       	adc	r18, r1
    3df8:	82 2f       	mov	r24, r18
    3dfa:	76 2f       	mov	r23, r22
    3dfc:	6a 2f       	mov	r22, r26
    3dfe:	11 24       	eor	r1, r1
    3e00:	9f 57       	subi	r25, 0x7F	; 127
    3e02:	50 40       	sbci	r21, 0x00	; 0
    3e04:	9a f0       	brmi	.+38     	; 0x3e2c <__mulsf3_pse+0x88>
    3e06:	f1 f0       	breq	.+60     	; 0x3e44 <__mulsf3_pse+0xa0>
    3e08:	88 23       	and	r24, r24
    3e0a:	4a f0       	brmi	.+18     	; 0x3e1e <__mulsf3_pse+0x7a>
    3e0c:	ee 0f       	add	r30, r30
    3e0e:	ff 1f       	adc	r31, r31
    3e10:	bb 1f       	adc	r27, r27
    3e12:	66 1f       	adc	r22, r22
    3e14:	77 1f       	adc	r23, r23
    3e16:	88 1f       	adc	r24, r24
    3e18:	91 50       	subi	r25, 0x01	; 1
    3e1a:	50 40       	sbci	r21, 0x00	; 0
    3e1c:	a9 f7       	brne	.-22     	; 0x3e08 <__mulsf3_pse+0x64>
    3e1e:	9e 3f       	cpi	r25, 0xFE	; 254
    3e20:	51 05       	cpc	r21, r1
    3e22:	80 f0       	brcs	.+32     	; 0x3e44 <__mulsf3_pse+0xa0>
    3e24:	0c 94 66 1e 	jmp	0x3ccc	; 0x3ccc <__fp_inf>
    3e28:	0c 94 b1 1e 	jmp	0x3d62	; 0x3d62 <__fp_szero>
    3e2c:	5f 3f       	cpi	r21, 0xFF	; 255
    3e2e:	e4 f3       	brlt	.-8      	; 0x3e28 <__mulsf3_pse+0x84>
    3e30:	98 3e       	cpi	r25, 0xE8	; 232
    3e32:	d4 f3       	brlt	.-12     	; 0x3e28 <__mulsf3_pse+0x84>
    3e34:	86 95       	lsr	r24
    3e36:	77 95       	ror	r23
    3e38:	67 95       	ror	r22
    3e3a:	b7 95       	ror	r27
    3e3c:	f7 95       	ror	r31
    3e3e:	e7 95       	ror	r30
    3e40:	9f 5f       	subi	r25, 0xFF	; 255
    3e42:	c1 f7       	brne	.-16     	; 0x3e34 <__mulsf3_pse+0x90>
    3e44:	fe 2b       	or	r31, r30
    3e46:	88 0f       	add	r24, r24
    3e48:	91 1d       	adc	r25, r1
    3e4a:	96 95       	lsr	r25
    3e4c:	87 95       	ror	r24
    3e4e:	97 f9       	bld	r25, 7
    3e50:	08 95       	ret

00003e52 <calloc>:
    3e52:	0f 93       	push	r16
    3e54:	1f 93       	push	r17
    3e56:	cf 93       	push	r28
    3e58:	df 93       	push	r29
    3e5a:	86 9f       	mul	r24, r22
    3e5c:	80 01       	movw	r16, r0
    3e5e:	87 9f       	mul	r24, r23
    3e60:	10 0d       	add	r17, r0
    3e62:	96 9f       	mul	r25, r22
    3e64:	10 0d       	add	r17, r0
    3e66:	11 24       	eor	r1, r1
    3e68:	c8 01       	movw	r24, r16
    3e6a:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <malloc>
    3e6e:	ec 01       	movw	r28, r24
    3e70:	00 97       	sbiw	r24, 0x00	; 0
    3e72:	29 f0       	breq	.+10     	; 0x3e7e <calloc+0x2c>
    3e74:	a8 01       	movw	r20, r16
    3e76:	60 e0       	ldi	r22, 0x00	; 0
    3e78:	70 e0       	ldi	r23, 0x00	; 0
    3e7a:	0e 94 72 20 	call	0x40e4	; 0x40e4 <memset>
    3e7e:	ce 01       	movw	r24, r28
    3e80:	df 91       	pop	r29
    3e82:	cf 91       	pop	r28
    3e84:	1f 91       	pop	r17
    3e86:	0f 91       	pop	r16
    3e88:	08 95       	ret

00003e8a <malloc>:
    3e8a:	cf 93       	push	r28
    3e8c:	df 93       	push	r29
    3e8e:	82 30       	cpi	r24, 0x02	; 2
    3e90:	91 05       	cpc	r25, r1
    3e92:	10 f4       	brcc	.+4      	; 0x3e98 <malloc+0xe>
    3e94:	82 e0       	ldi	r24, 0x02	; 2
    3e96:	90 e0       	ldi	r25, 0x00	; 0
    3e98:	e0 91 9c 02 	lds	r30, 0x029C
    3e9c:	f0 91 9d 02 	lds	r31, 0x029D
    3ea0:	20 e0       	ldi	r18, 0x00	; 0
    3ea2:	30 e0       	ldi	r19, 0x00	; 0
    3ea4:	c0 e0       	ldi	r28, 0x00	; 0
    3ea6:	d0 e0       	ldi	r29, 0x00	; 0
    3ea8:	30 97       	sbiw	r30, 0x00	; 0
    3eaa:	11 f1       	breq	.+68     	; 0x3ef0 <malloc+0x66>
    3eac:	40 81       	ld	r20, Z
    3eae:	51 81       	ldd	r21, Z+1	; 0x01
    3eb0:	48 17       	cp	r20, r24
    3eb2:	59 07       	cpc	r21, r25
    3eb4:	c0 f0       	brcs	.+48     	; 0x3ee6 <malloc+0x5c>
    3eb6:	48 17       	cp	r20, r24
    3eb8:	59 07       	cpc	r21, r25
    3eba:	61 f4       	brne	.+24     	; 0x3ed4 <malloc+0x4a>
    3ebc:	82 81       	ldd	r24, Z+2	; 0x02
    3ebe:	93 81       	ldd	r25, Z+3	; 0x03
    3ec0:	20 97       	sbiw	r28, 0x00	; 0
    3ec2:	19 f0       	breq	.+6      	; 0x3eca <malloc+0x40>
    3ec4:	9b 83       	std	Y+3, r25	; 0x03
    3ec6:	8a 83       	std	Y+2, r24	; 0x02
    3ec8:	2b c0       	rjmp	.+86     	; 0x3f20 <malloc+0x96>
    3eca:	90 93 9d 02 	sts	0x029D, r25
    3ece:	80 93 9c 02 	sts	0x029C, r24
    3ed2:	26 c0       	rjmp	.+76     	; 0x3f20 <malloc+0x96>
    3ed4:	21 15       	cp	r18, r1
    3ed6:	31 05       	cpc	r19, r1
    3ed8:	19 f0       	breq	.+6      	; 0x3ee0 <malloc+0x56>
    3eda:	42 17       	cp	r20, r18
    3edc:	53 07       	cpc	r21, r19
    3ede:	18 f4       	brcc	.+6      	; 0x3ee6 <malloc+0x5c>
    3ee0:	9a 01       	movw	r18, r20
    3ee2:	be 01       	movw	r22, r28
    3ee4:	df 01       	movw	r26, r30
    3ee6:	ef 01       	movw	r28, r30
    3ee8:	02 80       	ldd	r0, Z+2	; 0x02
    3eea:	f3 81       	ldd	r31, Z+3	; 0x03
    3eec:	e0 2d       	mov	r30, r0
    3eee:	dc cf       	rjmp	.-72     	; 0x3ea8 <malloc+0x1e>
    3ef0:	21 15       	cp	r18, r1
    3ef2:	31 05       	cpc	r19, r1
    3ef4:	09 f1       	breq	.+66     	; 0x3f38 <malloc+0xae>
    3ef6:	28 1b       	sub	r18, r24
    3ef8:	39 0b       	sbc	r19, r25
    3efa:	24 30       	cpi	r18, 0x04	; 4
    3efc:	31 05       	cpc	r19, r1
    3efe:	90 f4       	brcc	.+36     	; 0x3f24 <malloc+0x9a>
    3f00:	12 96       	adiw	r26, 0x02	; 2
    3f02:	8d 91       	ld	r24, X+
    3f04:	9c 91       	ld	r25, X
    3f06:	13 97       	sbiw	r26, 0x03	; 3
    3f08:	61 15       	cp	r22, r1
    3f0a:	71 05       	cpc	r23, r1
    3f0c:	21 f0       	breq	.+8      	; 0x3f16 <malloc+0x8c>
    3f0e:	fb 01       	movw	r30, r22
    3f10:	93 83       	std	Z+3, r25	; 0x03
    3f12:	82 83       	std	Z+2, r24	; 0x02
    3f14:	04 c0       	rjmp	.+8      	; 0x3f1e <malloc+0x94>
    3f16:	90 93 9d 02 	sts	0x029D, r25
    3f1a:	80 93 9c 02 	sts	0x029C, r24
    3f1e:	fd 01       	movw	r30, r26
    3f20:	32 96       	adiw	r30, 0x02	; 2
    3f22:	44 c0       	rjmp	.+136    	; 0x3fac <malloc+0x122>
    3f24:	fd 01       	movw	r30, r26
    3f26:	e2 0f       	add	r30, r18
    3f28:	f3 1f       	adc	r31, r19
    3f2a:	81 93       	st	Z+, r24
    3f2c:	91 93       	st	Z+, r25
    3f2e:	22 50       	subi	r18, 0x02	; 2
    3f30:	31 09       	sbc	r19, r1
    3f32:	2d 93       	st	X+, r18
    3f34:	3c 93       	st	X, r19
    3f36:	3a c0       	rjmp	.+116    	; 0x3fac <malloc+0x122>
    3f38:	20 91 9a 02 	lds	r18, 0x029A
    3f3c:	30 91 9b 02 	lds	r19, 0x029B
    3f40:	23 2b       	or	r18, r19
    3f42:	41 f4       	brne	.+16     	; 0x3f54 <malloc+0xca>
    3f44:	20 91 02 01 	lds	r18, 0x0102
    3f48:	30 91 03 01 	lds	r19, 0x0103
    3f4c:	30 93 9b 02 	sts	0x029B, r19
    3f50:	20 93 9a 02 	sts	0x029A, r18
    3f54:	20 91 00 01 	lds	r18, 0x0100
    3f58:	30 91 01 01 	lds	r19, 0x0101
    3f5c:	21 15       	cp	r18, r1
    3f5e:	31 05       	cpc	r19, r1
    3f60:	41 f4       	brne	.+16     	; 0x3f72 <malloc+0xe8>
    3f62:	2d b7       	in	r18, 0x3d	; 61
    3f64:	3e b7       	in	r19, 0x3e	; 62
    3f66:	40 91 04 01 	lds	r20, 0x0104
    3f6a:	50 91 05 01 	lds	r21, 0x0105
    3f6e:	24 1b       	sub	r18, r20
    3f70:	35 0b       	sbc	r19, r21
    3f72:	e0 91 9a 02 	lds	r30, 0x029A
    3f76:	f0 91 9b 02 	lds	r31, 0x029B
    3f7a:	e2 17       	cp	r30, r18
    3f7c:	f3 07       	cpc	r31, r19
    3f7e:	a0 f4       	brcc	.+40     	; 0x3fa8 <malloc+0x11e>
    3f80:	2e 1b       	sub	r18, r30
    3f82:	3f 0b       	sbc	r19, r31
    3f84:	28 17       	cp	r18, r24
    3f86:	39 07       	cpc	r19, r25
    3f88:	78 f0       	brcs	.+30     	; 0x3fa8 <malloc+0x11e>
    3f8a:	ac 01       	movw	r20, r24
    3f8c:	4e 5f       	subi	r20, 0xFE	; 254
    3f8e:	5f 4f       	sbci	r21, 0xFF	; 255
    3f90:	24 17       	cp	r18, r20
    3f92:	35 07       	cpc	r19, r21
    3f94:	48 f0       	brcs	.+18     	; 0x3fa8 <malloc+0x11e>
    3f96:	4e 0f       	add	r20, r30
    3f98:	5f 1f       	adc	r21, r31
    3f9a:	50 93 9b 02 	sts	0x029B, r21
    3f9e:	40 93 9a 02 	sts	0x029A, r20
    3fa2:	81 93       	st	Z+, r24
    3fa4:	91 93       	st	Z+, r25
    3fa6:	02 c0       	rjmp	.+4      	; 0x3fac <malloc+0x122>
    3fa8:	e0 e0       	ldi	r30, 0x00	; 0
    3faa:	f0 e0       	ldi	r31, 0x00	; 0
    3fac:	cf 01       	movw	r24, r30
    3fae:	df 91       	pop	r29
    3fb0:	cf 91       	pop	r28
    3fb2:	08 95       	ret

00003fb4 <free>:
    3fb4:	0f 93       	push	r16
    3fb6:	1f 93       	push	r17
    3fb8:	cf 93       	push	r28
    3fba:	df 93       	push	r29
    3fbc:	00 97       	sbiw	r24, 0x00	; 0
    3fbe:	09 f4       	brne	.+2      	; 0x3fc2 <free+0xe>
    3fc0:	8c c0       	rjmp	.+280    	; 0x40da <free+0x126>
    3fc2:	fc 01       	movw	r30, r24
    3fc4:	32 97       	sbiw	r30, 0x02	; 2
    3fc6:	13 82       	std	Z+3, r1	; 0x03
    3fc8:	12 82       	std	Z+2, r1	; 0x02
    3fca:	00 91 9c 02 	lds	r16, 0x029C
    3fce:	10 91 9d 02 	lds	r17, 0x029D
    3fd2:	01 15       	cp	r16, r1
    3fd4:	11 05       	cpc	r17, r1
    3fd6:	81 f4       	brne	.+32     	; 0x3ff8 <free+0x44>
    3fd8:	20 81       	ld	r18, Z
    3fda:	31 81       	ldd	r19, Z+1	; 0x01
    3fdc:	82 0f       	add	r24, r18
    3fde:	93 1f       	adc	r25, r19
    3fe0:	20 91 9a 02 	lds	r18, 0x029A
    3fe4:	30 91 9b 02 	lds	r19, 0x029B
    3fe8:	28 17       	cp	r18, r24
    3fea:	39 07       	cpc	r19, r25
    3fec:	79 f5       	brne	.+94     	; 0x404c <free+0x98>
    3fee:	f0 93 9b 02 	sts	0x029B, r31
    3ff2:	e0 93 9a 02 	sts	0x029A, r30
    3ff6:	71 c0       	rjmp	.+226    	; 0x40da <free+0x126>
    3ff8:	d8 01       	movw	r26, r16
    3ffa:	40 e0       	ldi	r20, 0x00	; 0
    3ffc:	50 e0       	ldi	r21, 0x00	; 0
    3ffe:	ae 17       	cp	r26, r30
    4000:	bf 07       	cpc	r27, r31
    4002:	50 f4       	brcc	.+20     	; 0x4018 <free+0x64>
    4004:	12 96       	adiw	r26, 0x02	; 2
    4006:	2d 91       	ld	r18, X+
    4008:	3c 91       	ld	r19, X
    400a:	13 97       	sbiw	r26, 0x03	; 3
    400c:	ad 01       	movw	r20, r26
    400e:	21 15       	cp	r18, r1
    4010:	31 05       	cpc	r19, r1
    4012:	09 f1       	breq	.+66     	; 0x4056 <free+0xa2>
    4014:	d9 01       	movw	r26, r18
    4016:	f3 cf       	rjmp	.-26     	; 0x3ffe <free+0x4a>
    4018:	9d 01       	movw	r18, r26
    401a:	da 01       	movw	r26, r20
    401c:	33 83       	std	Z+3, r19	; 0x03
    401e:	22 83       	std	Z+2, r18	; 0x02
    4020:	60 81       	ld	r22, Z
    4022:	71 81       	ldd	r23, Z+1	; 0x01
    4024:	86 0f       	add	r24, r22
    4026:	97 1f       	adc	r25, r23
    4028:	82 17       	cp	r24, r18
    402a:	93 07       	cpc	r25, r19
    402c:	69 f4       	brne	.+26     	; 0x4048 <free+0x94>
    402e:	ec 01       	movw	r28, r24
    4030:	28 81       	ld	r18, Y
    4032:	39 81       	ldd	r19, Y+1	; 0x01
    4034:	26 0f       	add	r18, r22
    4036:	37 1f       	adc	r19, r23
    4038:	2e 5f       	subi	r18, 0xFE	; 254
    403a:	3f 4f       	sbci	r19, 0xFF	; 255
    403c:	31 83       	std	Z+1, r19	; 0x01
    403e:	20 83       	st	Z, r18
    4040:	8a 81       	ldd	r24, Y+2	; 0x02
    4042:	9b 81       	ldd	r25, Y+3	; 0x03
    4044:	93 83       	std	Z+3, r25	; 0x03
    4046:	82 83       	std	Z+2, r24	; 0x02
    4048:	45 2b       	or	r20, r21
    404a:	29 f4       	brne	.+10     	; 0x4056 <free+0xa2>
    404c:	f0 93 9d 02 	sts	0x029D, r31
    4050:	e0 93 9c 02 	sts	0x029C, r30
    4054:	42 c0       	rjmp	.+132    	; 0x40da <free+0x126>
    4056:	13 96       	adiw	r26, 0x03	; 3
    4058:	fc 93       	st	X, r31
    405a:	ee 93       	st	-X, r30
    405c:	12 97       	sbiw	r26, 0x02	; 2
    405e:	ed 01       	movw	r28, r26
    4060:	49 91       	ld	r20, Y+
    4062:	59 91       	ld	r21, Y+
    4064:	9e 01       	movw	r18, r28
    4066:	24 0f       	add	r18, r20
    4068:	35 1f       	adc	r19, r21
    406a:	e2 17       	cp	r30, r18
    406c:	f3 07       	cpc	r31, r19
    406e:	71 f4       	brne	.+28     	; 0x408c <free+0xd8>
    4070:	80 81       	ld	r24, Z
    4072:	91 81       	ldd	r25, Z+1	; 0x01
    4074:	84 0f       	add	r24, r20
    4076:	95 1f       	adc	r25, r21
    4078:	02 96       	adiw	r24, 0x02	; 2
    407a:	11 96       	adiw	r26, 0x01	; 1
    407c:	9c 93       	st	X, r25
    407e:	8e 93       	st	-X, r24
    4080:	82 81       	ldd	r24, Z+2	; 0x02
    4082:	93 81       	ldd	r25, Z+3	; 0x03
    4084:	13 96       	adiw	r26, 0x03	; 3
    4086:	9c 93       	st	X, r25
    4088:	8e 93       	st	-X, r24
    408a:	12 97       	sbiw	r26, 0x02	; 2
    408c:	e0 e0       	ldi	r30, 0x00	; 0
    408e:	f0 e0       	ldi	r31, 0x00	; 0
    4090:	d8 01       	movw	r26, r16
    4092:	12 96       	adiw	r26, 0x02	; 2
    4094:	8d 91       	ld	r24, X+
    4096:	9c 91       	ld	r25, X
    4098:	13 97       	sbiw	r26, 0x03	; 3
    409a:	00 97       	sbiw	r24, 0x00	; 0
    409c:	19 f0       	breq	.+6      	; 0x40a4 <free+0xf0>
    409e:	f8 01       	movw	r30, r16
    40a0:	8c 01       	movw	r16, r24
    40a2:	f6 cf       	rjmp	.-20     	; 0x4090 <free+0xdc>
    40a4:	8d 91       	ld	r24, X+
    40a6:	9c 91       	ld	r25, X
    40a8:	98 01       	movw	r18, r16
    40aa:	2e 5f       	subi	r18, 0xFE	; 254
    40ac:	3f 4f       	sbci	r19, 0xFF	; 255
    40ae:	82 0f       	add	r24, r18
    40b0:	93 1f       	adc	r25, r19
    40b2:	20 91 9a 02 	lds	r18, 0x029A
    40b6:	30 91 9b 02 	lds	r19, 0x029B
    40ba:	28 17       	cp	r18, r24
    40bc:	39 07       	cpc	r19, r25
    40be:	69 f4       	brne	.+26     	; 0x40da <free+0x126>
    40c0:	30 97       	sbiw	r30, 0x00	; 0
    40c2:	29 f4       	brne	.+10     	; 0x40ce <free+0x11a>
    40c4:	10 92 9d 02 	sts	0x029D, r1
    40c8:	10 92 9c 02 	sts	0x029C, r1
    40cc:	02 c0       	rjmp	.+4      	; 0x40d2 <free+0x11e>
    40ce:	13 82       	std	Z+3, r1	; 0x03
    40d0:	12 82       	std	Z+2, r1	; 0x02
    40d2:	10 93 9b 02 	sts	0x029B, r17
    40d6:	00 93 9a 02 	sts	0x029A, r16
    40da:	df 91       	pop	r29
    40dc:	cf 91       	pop	r28
    40de:	1f 91       	pop	r17
    40e0:	0f 91       	pop	r16
    40e2:	08 95       	ret

000040e4 <memset>:
    40e4:	dc 01       	movw	r26, r24
    40e6:	01 c0       	rjmp	.+2      	; 0x40ea <memset+0x6>
    40e8:	6d 93       	st	X+, r22
    40ea:	41 50       	subi	r20, 0x01	; 1
    40ec:	50 40       	sbci	r21, 0x00	; 0
    40ee:	e0 f7       	brcc	.-8      	; 0x40e8 <memset+0x4>
    40f0:	08 95       	ret

000040f2 <_exit>:
    40f2:	f8 94       	cli

000040f4 <__stop_program>:
    40f4:	ff cf       	rjmp	.-2      	; 0x40f4 <__stop_program>
